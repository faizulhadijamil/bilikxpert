// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//
// The Cloud Functions for Firebase SDK to create Cloud Functions and setup triggers.
const functions = require('firebase-functions');
const helloWorld = require('./files/helloWorld');
exports.helloWorld = helloWorld.helloWorld;

// pgm client secret
// name = faizul2 test
// description = test api
const pgmClientSecret = '62e0b28e92e14271b7664d11a7570b3863cfe70bdc064ac28647e526b91e27bf';
const pgmClientId = '0cba2d6506d74651a2156ae7667beca4';

// The Firebase Admin SDK to access the Firebase Realtime Database.
const admin = require('firebase-admin');
// admin.initializeApp();
admin.initializeApp({
  serviceAccountId: 'firebase-adminsdk-wun9f@babelasia-37615.iam.gserviceaccount.com',
  apiKey: "AIzaSyBoucAnhK3TCPMaJ5QrNnLlw7-bCjsjyoo",
  authDomain: "babelasia-37615.firebaseapp.com",
  databaseURL: "https://babelasia-37615.firebaseio.com",
  projectId: "babelasia-37615",
  storageBucket: "babelasia-37615.appspot.com",
  messagingSenderId: "171899057367",
  appId: "1:171899057367:web:853f0f7baadebbda24ec92",
  measurementId: "G-6GSZPHL0NH"
});
// To set the timestampsInSnapshots, to avoid the error/warning message from firestore (timestamp format changes);
const settings = {/* your settings... */ timestampsInSnapshots: true};
admin.firestore().settings(settings);

const moment = require('moment-timezone');
// from vendToken2020 (9/11/2020) - faizul
const vendPersonalToken = 'Kh7UKpuhyONGUU27i98Dx_s35IJmSWrSUH6mL1Sp';
// const Blob = require('Blob');
const timestamp = admin.firestore.FieldValue.serverTimestamp();

// for PGMlive
const pgmClientIdLive = '8835b6c15719429bbfa8e6c025e612ab';
const pgmClientSecretLive = 'e6e0af12259e494c9231d7948e03c5a1f48e3ac9ec04434f90b9358239827b96';
const pgmURLLive = `https://babel.perfectgym.com/Api/`;

// for facebook business sdk
// const adsSdk = require('facebook-nodejs-business-sdk');
// const fb = new Facebook(fboptions);
// FB.init({
//   appId      : '476078559432892',
//   status     : true,
//   xfbml      : true,
//   version    : 'v2.7' // or v2.6, v2.5, v2.4, v2.3
// });

// write to spreadsheets
const {OAuth2Client} = require('google-auth-library');
const {google} = require('googleapis');

// // for gmail
// // const gmail = google.gmail('v1');
// // const querystring = require('querystring');

// // const pify = require('pify');
// // const fs = require('fs');
// // const config = require('../config');
// // const Datastore = require('@google-cloud/datastore');
// // const datastore = new Datastore();

// // for xero
// const {XeroAccessToken, XeroIdToken, XeroClient} = require('xero-node');

// // example
// // test post
// // curl -X POST https://api.notion.com/v1/pages -H "Authorization: Bearer secret_bhGw3o8DkDH8nQfrszr0U4O964gqE4KE33KGNY6pYks"  -H "Content-Type: application/json"  -H "Notion-Version: 2021-05-13" --data '{ "parent": { "database_id": "be7372dad89f41e591b610927c7f9462" }, "properties": {"Name": { "title": [{ "text": { "content": "faizul is awesome2"}},{"text":{"content":"faizul tag"}}]}}}'
// // test get curl
// // curl 'https://api.notion.com/v1/databases/be7372dad89f41e591b610927c7f9462' -H 'Authorization: Bearer '"secret_bhGw3o8DkDH8nQfrszr0U4O964gqE4KE33KGNY6pYks"'' -H 'Notion-Version: 2021-05-13'

// // current token = '87521bd3209caa7244cd68d4d79ea6ccae3186b1bca7b3e5b0b65ac4a39b123f4cf42928a2041cc63dd386e80db492cba7d98dcaa055a2c8c4efc47860cc24672a7fed002432eb12747cd7f0a98a';

exports.namsor = require('./files/namsor'); // for namsor
exports.notions = require('./files/notions'); 
exports.facebook = require('./files/facebook');
exports.vendAPI = require('./files/vendAPI');
exports.messageBird = require('./files/messageBird');
exports.googleSheets = require('./files/googleSheets');
exports.perfectGym = require('./files/perfectGym');
exports.generateInvoices = require('./files/generateInvoices');
exports.emails = require('./files/emails');
exports.slacks = require('./files/slacks');

// // // TODO: Use firebase functions:config:set to configure your googleapi object:
// // // googleapi.client_id = Google API client ID,
// // // googleapi.client_secret = client secret, and
// // // googleapi.sheet_id = Google Sheet id (long string in middle of sheet URL)
const CONFIG_CLIENT_ID = functions.config().googleapi.client_id;
const CONFIG_CLIENT_SECRET = functions.config().googleapi.client_secret;
const CONFIG_SHEET_ID = functions.config().googleapi.sheet_id;

// // // TODO: Use firebase functions:config:set to configure your watchedpaths object:
// // // watchedpaths.data_path = Firebase path for data to be synced to Google Sheet
// // const CONFIG_DATA_PATH = functions.config().watchedpaths.data_path;

// // // The OAuth Callback Redirect.
// // // const FUNCTIONS_REDIRECT = `https://${process.env.GCLOUD_PROJECT}.firebaseapp.com/oauthcallback`;
const FUNCTIONS_REDIRECT = `https://us-central1-babelasia-37615.cloudfunctions.net/oauthcallback`;

// setup for authGoogleAPI
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
const functionsOauthClient = new OAuth2Client(CONFIG_CLIENT_ID, CONFIG_CLIENT_SECRET,
  FUNCTIONS_REDIRECT);

// OAuth token cached locally.
let oauthTokens = null;
// var cors = require('cors');

function getTheDate(theDate){
  if (theDate === null){return}
  // for timestamp firebase
  if (typeof(theDate)==='object'){return theDate.toDate()}
  // for string date format
  else if (typeof(theDate)==='string'){return new Date(theDate)}
}

function getPhoneNumberFormat(phone){
  if (phone){
    return (phone && (phone.charAt(0)!='6' && phone.charAt(1)!='0' && phone.charAt(0)==='0')? `6${phone}`:
      (phone.charAt(0)!='6' && phone.charAt(1)==='0')? `6${phone}`:phone);
  }
  else{
    return '';
  }
}

function getOutletById(outletId){
  if (!outletId || outletId === null){return null}
  else if (outletId === "0af7b240-abc5-11e7-eddc-d4a1c0133102"){return "TTDI"}
  else if (outletId === "0af7b240-aba0-11e9-fb5b-b0907137b026"){return "KLCC"}
}

function toRM(theString){
  if (theString === null){return 'RM0.00'}
  else{
    return `RM${parseFloat(theString).toFixed(2)}`;
  }
}
// // // visit the URL for this Function to request tokens
// // exports.authgoogleapi = functions.https.onRequest((req, res) => {
// //   res.set('Cache-Control', 'private, max-age=0, s-maxage=0');
// //   res.redirect(functionsOauthClient.generateAuthUrl({
// //     access_type: 'offline',
// //     scope: SCOPES,
// //     prompt: 'consent',
// //   }));
// // });

// setup for OauthCallback
const DB_TOKEN_PATH = '/api_tokens';

// // // after you grant access, you will be redirected to the URL for this Function
// // // this Function stores the tokens to your Firebase database
// // exports.oauthcallback = functions.https.onRequest(async (req, res) => {
// //   res.set('Cache-Control', 'private, max-age=0, s-maxage=0');
// //   const code = req.query.code;
// //   try {
// //     const {tokens} = await functionsOauthClient.getToken(code);
// //     // Now tokens contains an access_token and an optional refresh_token. Save them.
// //     await admin.database().ref(DB_TOKEN_PATH).set(tokens);
// //     return res.status(200).send('App successfully configured with new Credentials. '
// //         + 'You can now close this page.');
// //   } catch (error) {
// //     return res.status(400).send(error);
// //   }
// // });

// // // // trigger function to write to Sheet when new data comes in on CONFIG_DATA_PATH
// // // exports.appendrecordtospreadsheet = functions.database.ref(`${CONFIG_DATA_PATH}/{ITEM}`).onCreate(
// // //     (snap) => {
// // //       const newRecord = snap.val();
// // //       console.log('newRecord: ', newRecord)
// // //       return appendPromise({
// // //         spreadsheetId: CONFIG_SHEET_ID,
// // //         range: 'A:C',
// // //         valueInputOption: 'USER_ENTERED',
// // //         insertDataOption: 'INSERT_ROWS',
// // //         resource: {
// // //           values: [[newRecord.firstColumn, newRecord.secondColumn, newRecord.thirdColumn]],
// // //         },
// // //       });
// // //     });

// // // // accepts an append request, returns a Promise to append it, enriching it with auth
// // // function slackPromise(url) {
// // //   return new Promise((resolve, reject) => {
   
// // //     return request.post(
// // //       url,
// // //       {json:{
// // //         text:`Sales on ${moment().format('DD-MM-YYYY')} \n
// // //         active\n: 
// // //         complimentary: 25\n
// // //         monthly: 16\n
// // //         3M:212\n
// // //         `}
// // //       }
// // //     ).then(result=>{
// // //       return resolve(result);
// // //     });
// // //   });
// // // }

// // // // accepts an append request, returns a Promise to append it, enriching it with auth
// // // function appendPromise(requestWithoutAuth) {
// // //   return new Promise((resolve, reject) => {
// // //     return getAuthorizedClient().then((client) => {
// // //       const sheets = google.sheets('v4');
// // //       const request = requestWithoutAuth;
// // //       request.auth = client;
// // //       return sheets.spreadsheets.values.append(request, (err, response) => {
// // //         if (err) {
// // //           console.log(`The API returned an error: ${err}`);
// // //           return reject(err);
// // //         }
// // //         return resolve(response.data);
// // //       });
// // //     });
// // //   });
// // // }

function updateGoogleSheet(requestWithoutAuth) {
  return new Promise((resolve, reject) => {
    return getAuthorizedClient().then((client) => {
      const sheets = google.sheets('v4');
      const request = requestWithoutAuth;
      request.auth = client;
      // console.log('client request: ', client);
      return sheets.spreadsheets.values.batchUpdate(request, (err, response) => {
        // console.log('sheetRequest: ', request);
        if (err) {
          console.log(`The update API returned an error: ${err}`);
          return reject(err);
        }
        else{
          // console.log('Update', response.data);
          return resolve(response.data);
        }
      });
    }).catch(error=>{
      console.log('updateGoogleSheeterror: ', error);
      return reject(error);
    })
  });
}

// function getGoogleSheetPromise(requestWithoutAuth) {
//   return new Promise((resolve, reject) => {
//     return getAuthorizedClient().then((client) => {
//       const sheets = google.sheets('v4');
//       const request = requestWithoutAuth;
//       request.auth = client;
//       return sheets.spreadsheets.values.get(request, (err, response) => {

//         // console.log('theresponse: ', response);
//         if (err) {
//           console.log(`The update API returned an error: ${err}`);
//           return reject(err);
//         }
//         else{
//           // console.log('Update', response.data);
//           return resolve(response.data);
//         }
//       });
//     }).catch(error=>{
//       console.log('updateGoogleSheeterror: ', error);
//       return reject(error);
//     })
//   });
// }

// checks if oauthTokens have been loaded into memory, and if not, retrieves them
async function getAuthorizedClient() {
  if (oauthTokens) {
    return functionsOauthClient;
  }
  const snapshot = await admin.database().ref(DB_TOKEN_PATH).once('value');
  oauthTokens = snapshot.val();
  functionsOauthClient.setCredentials(oauthTokens);
  return functionsOauthClient;
}

// // // // // HTTPS function to write new data to CONFIG_DATA_PATH, for testing
// // // // exports.testsheetwrite = functions.https.onRequest(async (req, res) => {
// // // //   const random1 = Math.floor(Math.random() * 100);
// // // //   const random2 = Math.floor(Math.random() * 100);
// // // //   const random3 = Math.floor(Math.random() * 100);
// // // //   const ID = new Date().getUTCMilliseconds();
// // // //   await admin.database().ref(`${CONFIG_DATA_PATH}/${ID}`).set({
// // // //     firstColumn: random1,
// // // //     secondColumn: random2,
// // // //     thirdColumn: random3,
// // // //   });
// // // //   res.send(`Wrote ${random1}, ${random2}, ${random3} to DB, trigger should now update Sheet.`);
// // // // });

// // // // const firestore2 = require('@google-cloud/firestore');
// // // // const client = new firestore2.v1.FirestoreAdminClient();

// // // Replace BUCKET_NAME
// // // const bucket = 'gs://allbackupbabelasia23sep2020';
// // const bucketVendSale = 'gs://vendsales';
// // const firestoreGCP = require('@google-cloud/firestore');
// // const client = new firestoreGCP.v1.FirestoreAdminClient();
// // exports.scheduledFirestoreExportVendSale = functions.pubsub
// //                                             .schedule('every 24 hours')
// //                                             .onRun((context) => {

// //   const projectId = process.env.GCP_PROJECT || process.env.GCLOUD_PROJECT;
// //   const databaseName = 
// //     client.databasePath(projectId, '(default)');

// //   return client.exportDocuments({
// //     name: databaseName,
// //     outputUriPrefix: bucketVendSale,
// //     // Leave collectionIds empty to export all collections
// //     // or set to a list of collection IDs to export,
// //     collectionIds: ['vendSales']
// //     // collectionIds: []
// //     })
// //   .then(responses => {
// //     const response = responses[0];
// //     console.log(`Operation Name: ${response['name']}`);
// //   })
// //   .catch(err => {
// //     console.error(err);
// //     throw new Error('Export operation failed');
// //   });
// // });

// // const bucketAll = 'gs://allweeklybackup';
// // exports.scheduledFirestoreExportAll = functions.pubsub
// //                                             .schedule('0 4 * * 0')
// //                                             .onRun((context) => {

// //   const projectId = process.env.GCP_PROJECT || process.env.GCLOUD_PROJECT;
// //   const databaseName = 
// //     client.databasePath(projectId, '(default)');

// //   return client.exportDocuments({
// //     name: databaseName,
// //     outputUriPrefix: bucketAll,
// //     // Leave collectionIds empty to export all collections
// //     // or set to a list of collection IDs to export,
// //     // collectionIds: ['vendSales']
// //       collectionIds: []
// //     })
// //   .then(responses => {
// //     const response = responses[0];
// //     console.log(`Operation Name: ${response['name']}`);
// //   })
// //   .catch(err => {
// //     console.error(err);
// //     throw new Error('Export operation failed');
// //   });
// // });

// // // to verify if the val is float or not
// // function isFloat(val) {
// //   var floatRegex = /^-?\d+(?:[.,]\d*?)?$/;
// //   if (!floatRegex.test(val))
// //       return false;

// //   val = parseFloat(val);
// //   if (isNaN(val))
// //       return false;
// //   return true;
// // }

// // // 
// // exports.babelAccountingSummary = functions.https.onRequest((req, res) => {

// //   // for POST
// //   const itemData = req.body;
// //   const endDate = (itemData && itemData.endDate)? itemData.endDate : moment().format('YYYY-MM-DD');

// //   const vendSaleQuery = admin.firestore().collection('vendSales').get();
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   // for adyen source only
// //   const paymentQuery = admin.firestore().collection('payments')
// //   // .where('source', '==', 'adyen')
// //   .where('status', '==', 'CLOSED').get();
// //   const invoiceQuery = admin.firestore().collection('invoices')
// //   .where('paid', '==', true)
// //   .get();
  
// //   var babelVendDetails = {};
// //   var babelGroupObj = {};
// //   var babelGroupArray = [];

// //   // from SKU tab
// //   const getSheetSKUPromise = getGoogleSheetPromise({
// //     spreadsheetId:'1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE',
// //     range: `SKU!A2:J`,
// //   });

// //   // from sales summary & SKU map
// //   const getSheetSaleSummarynSKUMapPromise = getGoogleSheetPromise({
// //     spreadsheetId:'1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE',
// //     range: `Sales summary & SKU MAP!A7:C`,
// //   });

// //   return Promise.all([getSheetSKUPromise, getSheetSaleSummarynSKUMapPromise, vendSaleQuery, packageQuery, paymentQuery, invoiceQuery]).then(result=>{
// //     const skuRes = result[0];
// //     const saleSummarynSKURes = result[1];
// //     const vendSaleRes = result[2];
// //     const pkgRes = result[3];
// //     const paymentRes = result[4];
// //     const invoiceRes = result[5];

// //     var pkgMap = {};
// //     pkgRes && pkgRes.forEach(doc=>{
// //       pkgMap[doc.id]=doc.data();
// //     });

// //     var invoiceMap = {};
// //     invoiceRes && invoiceRes.forEach(doc=>{
// //       invoiceMap[doc.id]=doc.data();
// //     });

// //     const skuValues = skuRes && skuRes.values;
// //     const skuRowsCount = (skuValues && skuValues.length)? skuValues.length:0;
// //     const saleSumnSKUCount = 92;
// //     const saleSummarynSKUValues = saleSummarynSKURes && saleSummarynSKURes.values;
// //     // the values from sheet (row)
// //     // 0. productId
// //     // 1. productTypeId
// //     // 2. BabelAccName (manually key in)?
// //     // 3. productTypeName
// //     // 4. price
// //     // 5. base_name
// //     // 6. name

// //     skuValues && skuValues.forEach(data2=>{
// //       //data1 && data1.forEach(data2=>{
// //         const productId = data2[0];
// //         const productTypeId = data2[1];
// //         const babelAccName = data2[2];
// //         const prodTypeName = data2[3];
// //         const price = data2[4];
// //         const base_name = data2[5];
// //         const name = data2[6];
// //         babelVendDetails[productId]={
// //           prodTypeName, productTypeId, babelAccName, price, base_name, name
// //         }
// //         babelGroupArray = babelGroupObj[babelAccName] || [];
// //         babelGroupArray.push(productId);
// //         babelGroupObj[babelAccName] = babelGroupArray;
// //     });
    
// //     var freezeCnt = 0;
// //     var totalAdyenMembershipPayment = 0;
// //     var totalSaleObj = {};
// //     var totalAdyenFreeze = 0;
// //     paymentRes && paymentRes.forEach(doc=>{
// //       const data = doc.data();
// //       const type = data.type;
// //       const packageId = data.packageId;
// //       const status = data.status;
// //       const createdAt = data.createdAt;
// //       const totalPrice = data.totalPrice;
// //       const packageData = pkgMap[packageId];
// //       const vendProductIds = packageData && packageData.vendProductIds;
// //       // console.log('package vendProductIds: ', vendProductIds);
// //       // several payment contains this field (babel dance, personal training)
// //       const vendPrdtId = data.vendProductId;
// //       const source = data && data.source;
// //       const invoiceId = data && data.invoiceId;
// //       const freezeSource = data && data.freezeSource;

// //       if (source && (source === 'adyen'||source === 'pbonline')){
// //         if (totalPrice && moment(getTheDate(createdAt)).isSameOrBefore(moment(endDate))){
// //           // totalAdyenMembershipPayment = parseFloat(totalAdyenMembershipPayment).toFixed(2)+parseFloat(totalPrice).toFixed(2);
// //           // totalAdyenMembershipPayment+=parseFloat(totalPrice);
          
// //           // for freeze adyen (test hardcode)
// //           if (freezeSource && freezeSource === 'adyen'){
// //             totalAdyenFreeze = parseFloat(totalAdyenFreeze)+parseFloat(totalPrice);
// //             if (!totalSaleObj['Membership Sales - Freezing Fee']){
// //               totalSaleObj['Membership Sales - Freezing Fee'] = {}
// //             }
// //             else if (!totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax){
// //               totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax = (totalPrice);
// //             }
// //             else{
// //               // totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax = totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //               totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax = totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax + 300;
// //             } 
// //           }
// //           Object.entries(babelGroupObj).forEach(([key,value]) => {
// //              // default, no value, set it to 0
// //             if (!totalSaleObj[key]){
// //               totalSaleObj[key] = {}
// //             }
// //             if (!totalSaleObj[key].totalPriceAdyenWithTax){
// //               // totalSaleObj[key].totalPriceAdyenWithTax = parseFloat(totalPrice);
// //               totalSaleObj[key].totalPriceAdyenWithTax = 0;
// //             }
           
// //             // for non package with vend product id, example freezing fee
// //             if (!packageId && value.includes(vendPrdtId)){
// //               // console.log('it goes here....')
// //               totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //               // totalSaleObj[key].totalPriceWithTax = totalSaleObj[key].totalPriceWithTax + parseFloat(totalPrice);
// //             }
  
// //             // const isMembershipPkg = vendProductIds && vendProductIds.filter(vendProductId=>{
// //             //   if (value.includes(vendProductId) ){
// //             //     // console.log('it goes here....')
// //             //     return true;
// //             //     //totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //             //     // totalSaleObj[key].totalPriceWithTax = totalSaleObj[key].totalPriceWithTax + parseFloat(totalPrice);
// //             //   }
// //             // });
  
// //             // for membership
// //             else if (packageId && vendProductIds){
// //               // console.log('package vendProductIds: ', vendProductIds);
// //               // console.log('vendProductIds.length: ', vendProductIds.length);
// //               var isContainVendId = false;
// //               for (let i = 0; i<vendProductIds.length; i++){
// //                 // console.log('thevendProductIds: ', vendProductIds[i]);
// //                 if (value.includes(vendProductIds[i])){
// //                   isContainVendId = true;
// //                   // console.log('is membership: ', vendProductIds[i]);
// //                   totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //                   // console.log('totalPrice package: ', totalPrice);
// //                   // console.log('totalSaleObj[key].totalPriceAdyenWithTax: ', totalSaleObj[key].totalPriceAdyenWithTax);
// //                   // get out from the loop
// //                   break; 
// //                 }
// //                 // if (isContainVendId){
// //                 //   console.log('isContainVendId: ', isContainVendId);
// //                 //   break;
// //                 // }
// //               }
// //               // vendProductIds && vendProductIds.forEach(vendProductId=>{
// //               //   if (value.includes(vendProductId) ){
// //               //     // console.log('it goes here....')
// //               //     // return true;
// //               //     //totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //               //     totalSaleObj[key].totalPriceWithTax = totalSaleObj[key].totalPriceWithTax + parseFloat(totalPrice);
// //               //     // return if found once
// //               //     return;
// //               //   }
// //               // });
// //             }
// //             // for old db (no vendProduct id in payment)
// //             else if (!vendPrdtId && invoiceId){
             
// //               const invoiceData = invoiceMap[invoiceId];
// //               const invoiceVendId = invoiceData && invoiceData.vendProductId;
// //               // if (value.includes('a3be38de-934f-aa1c-7f69-89f8fcc16f4a')){
// //               //   // console.log('contains freeze vendId: ', invoiceVendId);
// //               //   freezeCnt+=1;
// //               //   totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax = totalSaleObj['Membership Sales - Freezing Fee'].totalPriceAdyenWithTax + (totalPrice);
               
// //               // }
// //               if (value.includes(invoiceVendId)){
// //                 totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //               }
// //             }
           
// //             // if (isMembershipPkg && packageId){
// //             //   totalSaleObj[key].totalPriceAdyenWithTax = totalSaleObj[key].totalPriceAdyenWithTax + parseFloat(totalPrice);
// //             // }
// //           });
// //         }
// //       }
      
// //       console.log('freezeCnt: ', freezeCnt);
 
// //     });

// //     var sheetArray = [];

// //     const vendSaleMap = {};
// //     var totalMembershipSales = 0;
// //     var totalVendMembershipSales = 0;
    
// //     // todo, check for other vpt
// //     var totalVendPersonalTraining = 0;

// //     var totalVendPersonalTrainingDigital = 0;

// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const created_at = data && data.created_at;
// //       const register_sale_products = data && data.register_sale_products;
      
// //       // test for membership
// //       if (moment(created_at).isSameOrBefore(moment(endDate))){
// //         register_sale_products && register_sale_products.forEach(prod=>{
// //           const product_id = prod.product_id;
// //           const price_total = prod && prod.price_total;
// //           const tax_total = prod && prod.tax_total;
// //           // const totalPriceWithTax = (price_total && tax_total)? (parseFloat(price_total).toFixed(2) + parseFloat(tax_total).toFixed(2)):0;
// //           const totalPriceWithTax = parseFloat(price_total) + parseFloat(tax_total);

// //           Object.entries(babelGroupObj).forEach(([key,value]) => {
// //             if (value.includes(product_id)){
// //               if (!totalSaleObj[key]){
// //                 totalSaleObj[key] = {}
// //               }
// //               if (!totalSaleObj[key].totalPriceVendWithTax){
// //                 totalSaleObj[key].totalPriceVendWithTax = totalPriceWithTax;
// //               }
// //               // if (!totalSaleObj[key].totalPriceWithTax){
// //               //   totalSaleObj[key].totalPriceWithTax = 0;
// //               // }
// //               else{
// //                 // console.log('it goes here....')
// //                 totalSaleObj[key].totalPriceVendWithTax = totalSaleObj[key].totalPriceVendWithTax + totalPriceWithTax;
// //                 // totalSaleObj[key].totalPriceWithTax = totalSaleObj[key].totalPriceWithTax + totalPriceWithTax;
// //               }
// //             }
// //           });

// //           // if (babelGroupObj['Membership Sales'].includes(product_id)){
// //           //   totalVendMembershipSales += totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Joining Fee'].includes(product_id)){
// //           //   totalVendMemberJoinSales += totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Card Replacement'].includes(product_id)){
// //           //   totalVendMembershipCardReplacement+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Upgrade'].includes(product_id)){
// //           //   totalVendMembershipUpgrade+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Complimentary'].includes(product_id)){
// //           //   totalVendMembershipSalesComplimentary+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Day Passes'].includes(product_id)){
// //           //   totalVendMembershipSalesDayPass+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Membership Sales - Freezing Fee'].includes(product_id)){
// //           //   totalVendMembershipSalesFreezing+=totalPriceWithTax;
// //           // }

// //           // else if (babelGroupObj['Personal Training Sales'].includes(product_id)){
// //           //   totalVendPersonalTraining+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Personal Training Sales - Digital'].includes(product_id)){
// //           //   totalVendPersonalTrainingDigital+=totalPriceWithTax;
// //           // }
          
// //           // else if (babelGroupObj['Retail Sales - Perishables'].includes(product_id)){
// //           //   totalVendRetailSales+=totalPriceWithTax;
// //           // }
// //           // else if (babelGroupObj['Retail Sales - Others'].includes(product_id)){
// //           //   totalVendRetailOthers+=totalPriceWithTax;
// //           // }
          
// //         });
// //       }
// //     });

// //     // add with adyen membership sales
// //     // totalMembershipSales = parseFloat(totalVendMembershipSales).toFixed(2)+parseFloat(totalAdyenMembershipPayment).toFixed(2);
// //     totalMembershipSales = totalVendMembershipSales+totalAdyenMembershipPayment;

// //     Object.entries(totalSaleObj).forEach(([key,value]) => {
// //       totalSaleObj[key].totalPriceWithTax = value.totalPriceVendWithTax + value.totalPriceAdyenWithTax;
// //     });
    
// //     saleSummarynSKUValues && saleSummarynSKUValues.forEach((data, index)=>{
// //       const xeroCode = data[0];
// //       const groupName = data[1];
// //       const ytd = data[2];

// //       var sheetReport = [];
// //       Object.entries(babelGroupObj).forEach(([key,value]) => {
// //         if (key === groupName){
// //           sheetReport = [value.join()];
// //         }
// //       });
// //       // this need to be hardcode?
// //       // for membership sales
// //       if (sheetReport.length===1 && (
// //         index === 0 // Membership Sales
// //         || index === 3 // Membership Sales - Joining Fee
// //         || index === 6 // Membership Sales - Card Replacement
// //         || index === 9 // Membership Sales - Upgrade
// //         || index === 12 // Membership Sales - Complimentary
// //         || index === 15 // Membership Sales - Day Passes
// //         || index === 18 // Membership Sales - Freezing Fee
// //         || index === 25 // Personal Training Sales
// //         || index === 28 // Personal Training Sales - Programmes
// //         || index === 37 // Personal Training Sales - Digital
// //         || index === 44 // Retail Sales - Perishables
// //         || index === 47 // Retail Sales - Others
// //         || index === 51 // Event Sales - Space Rental
// //         || index === 54 // Event Sales - Private Class
// //         || index === 60 // Event Sales - Ticket Sale
// //         || index === 63 // Experience Sales
// //         || index === 69 // Nutrition Sales
// //         || index === 74 // Babel Dance
// //         || index === 79 // Babel Dance - Dance Pass - Digital
// //         || index === 81 // Babel Academy
// //         || index === 82 // Babel Academy - Digital
// //         )){
// //         // sheetReport.push('', '', '', '', '', totalVendMembershipSales.toFixed(2), totalAdyenMembershipPayment.toFixed(2), totalMembershipSales.toFixed(2));
// //         sheetReport.push('', '', '', '', '', 
// //           parseFloat(totalSaleObj[groupName].totalPriceVendWithTax).toFixed(2),
// //           parseFloat(totalSaleObj[groupName].totalPriceAdyenWithTax).toFixed(2),
// //           parseFloat(totalSaleObj[groupName].totalPriceWithTax).toFixed(2)
// //           );
// //       }
// //       // if (index===3 && sheetReport.length===1){
// //       //   // sheetReport.push('', '', '', '', '', totalVendMemberJoinSales.toFixed(2));
// //       //   sheetReport.push('', '', '', '', '', parseFloat(totalSaleObj[groupName].totalPriceVendWithTax).toFixed(2));
// //       // }
// //       // if (index===6 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendMembershipCardReplacement.toFixed(2));
// //       // }
// //       // if (index===9 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendMembershipUpgrade.toFixed(2));
// //       // }
// //       // if (index===12 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendMembershipSalesComplimentary.toFixed(2));
// //       // }
// //       // if (index===15 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendMembershipSalesDayPass.toFixed(2));
// //       // }
// //       // if (index===18 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendMembershipSalesFreezing.toFixed(2));
// //       // }

// //       // if (index===25 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendPersonalTraining.toFixed(2));
// //       // }
// //       // if (index===37 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendPersonalTrainingDigital.toFixed(2));
// //       // }

// //       // if (index===44 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendRetailSales.toFixed(2));
// //       // }
// //       // if (index===47 && sheetReport.length===1){
// //       //   sheetReport.push('', '', '', '', '', totalVendRetailOthers.toFixed(2));
// //       // }
// //       if (index <= saleSumnSKUCount && index >= 0){
// //         sheetArray.push(sheetReport);
// //       }
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId: '1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `Sales summary & SKU MAP!D7:Z`, // to store the vendId
// //             majorDimension: "ROWS",
// //             values: sheetArray
// //             // values: [['21, 666, 9090',], ['22']]
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         totalAdyenFreeze,
// //         totalSaleObj,
// //         sheetArray,
// //         babelGroupObj,
// //         // values,
// //         babelVendDetails
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// //   // return Promise.all([vendSaleQuery]).then(result=>{
// //   //   var batch = admin.firestore().batch();
// //   //   const vendResults = result[0];

// //   //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// //   //   const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //   //   // const startOfMonth = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');
// //   //   // const endOfMonth = moment('20200731').tz('Asia/Kuala_Lumpur').startOf('day');
// //   //   // const dayDiff = endOfMonth.diff(startOfMonth, 'days');
// //   //   // console.log('dayDiff: ', dayDiff);

// //   //   var sheetReport = [];

// //   //   vendResults && vendResults.forEach(doc=>{
// //   //     const data = doc.data();
// //   //     const vendProductId = data.id;
// //   //     const createdDay = data && data.createdDay;
// //   //     const status = data && data.status;
// //   //     const totals = data.totals;
// //   //     // total payment with sst
// //   //     const total_payment = totals && totals.total_payment && parseFloat(totals.total_payment).toFixed(2);

// //   //     if (status && status === 'CLOSED'){

// //   //     }
// //   //   });

// //   //   const getSheetPromise = getGoogleSheetPromise({
// //   //     // spreadsheetId: CONFIG_SHEET_ID,
// //   //     spreadsheetId:'1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE',
// //   //     range: `SKU!A2:J`,
// //   //   });
  
// //   //   return getSheetPromise.then((result)=>{
// //   //     // console.log('theresult: ', result);
// //   //     // get the value
// //   //     const values = result && result.values;
// //   //     const rowsCount = (values && values.length)? values.length:0;
// //   //     // the values from sheet (row)
// //   //     // 0. productId
// //   //     // 1. productTypeId
// //   //     // 2. BabelAccName (manually key in)?
// //   //     // 3. productTypeName
// //   //     // 4. price
// //   //     // 5. base_name
// //   //     // 6. name
      
// //   //     var sheetArray = [];

// //   //     values && values.forEach(data2=>{
// //   //       //data1 && data1.forEach(data2=>{
// //   //         const productId = data2[0];
// //   //         const productTypeId = data2[1];
// //   //         const babelAccName = data2[2];
// //   //         const prodTypeName = data2[3];
// //   //         const price = data2[4];
// //   //         const base_name = data2[5];
// //   //         const name = data2[6];
// //   //         babelVendDetails[productId]={
// //   //           prodTypeName, productTypeId, babelAccName, price, base_name, name
// //   //         }

// //   //         sheetReport = [productId];
// //   //         sheetArray.push(sheetReport);
// //   //       //});
// //   //     });

// //   //     // var sheetArray = [];
      
// //   //     // sheetReport = [rowsCount + 1];
// //   //     // sheetArray.push(sheetReport, [2], [3]);
// //   //     // write it back to sheet (testing)
// //   //     // sheetReport = [[
// //   //     //   rowsCount + 1,
// //   //     //  //  'faizul',
        
// //   //     // ]];
      
// //   //     // console.log('sheetReport: ', sheetReport);

// //   //     const updateSheetPromise = updateGoogleSheet({
// //   //       spreadsheetId: '1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE',
// //   //       // valueInputOption: 'RAW',
        
// //   //       resource: {
// //   //         // How the input data should be interpreted.
// //   //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
// //   //         // The new values to apply to the spreadsheet.
// //   //         data: [
// //   //           {
// //   //             // range: `test!A${rowsCount+2}:J`,
// //   //             range: `Sales summary & SKU MAP!D7:D`, // to store the vendId
// //   //             majorDimension: "ROWS",
// //   //             values: sheetArray
// //   //             // values: sheetReport
// //   //           }
// //   //         ],  
// //   //       },

// //   //     });

// //   //     return updateSheetPromise.then((result)=>{
// //   //       // console.log('theresult: ', result);
// //   //       return res.status(200).send({
// //   //         success:true,
// //   //         data: 'data',
// //   //         sheetArray,
// //   //         // values,
// //   //         babelVendDetails
// //   //       });
// //   //     }).catch(error=>{
// //   //       return res.status(200).send({
// //   //         success:false,
// //   //         error
// //   //       });
// //   //     })
// //   //   });
// //   // });

  
// // });

// // // 4/6/2021
// // exports.addAllVendSalesToSheet = functions.https.onRequest((req, res) => {
// //   // for POST
// //   const itemData = req.body;
// //   // const endDate = (itemData && itemData.endDate)? itemData.endDate : moment().format('YYYY-MM-DD');
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   // const paymentQuery = admin.firestore().collection('payments').get();
// //   const userQuery = admin.firestore().collection('users').get();
// //   const vendSaleQuery = admin.firestore().collection('vendSales').get();

// //   // const freezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
// //   const startDate = moment('2020-06-01');
// //   const endDate = moment('2021-06-30');

// //   return Promise.all([packageQuery, vendSaleQuery, userQuery]).then(result=>{
 
// //     const pkgRes = result[0];
// //     const vendSaleRes = result[1];
// //     const userRes = result[2];

// //     var MonthDiff = 0;
// //     MonthDiff = Math.max(endDate.diff(startDate, 'months'));
// //     var paymentObjByDate = {}; 
// //     var memberObjByPkgName = {};

// //     var pkgMap = {};
// //     var productIdPackageMap = {};
// //     var pkgNameRM = [];
// //     var pkgNameTransCount = [];
// //     var sheetArray = [];
// //     // pkgRes && pkgRes.forEach(doc=>{
// //     //   pkgMap[doc.id]=doc.data();
// //     //   const data = doc.data();
// //     //   const packageName = data && data.name;
// //     //   pkgNameRM = [`${packageName} RM`];
// //     //   pkgNameTransCount = [`${packageName} number`]
// //     //   sheetArray.push(pkgNameRM, pkgNameTransCount);

// //     //   const vendProductIds = data && data.vendProductIds;
// //     //   // console.log('vendProductId: ', data);
// //     //   vendProductIds && vendProductIds.forEach(vendProductId=>{
// //     //     // productIdPackageMap[vendProductId] = doc.id;
// //     //     productIdPackageMap[vendProductId] = doc.data();
// //     //   });

// //     //   // default
// //     //   if (packageName){
// //     //     for (var i=0; i<=MonthDiff; i++){
// //     //       // const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// //     //       const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').endOf('month').clone().add(i, 'month');
// //     //       const iterationFormat = iterationStartMoment.format('YYYYMMDD');
          
// //     //       if (!memberObjByPkgName[packageName]){
// //     //         memberObjByPkgName[packageName] = {};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName][iterationFormat]){
// //     //         memberObjByPkgName[packageName][iterationFormat]={packageName, totalCount:0, totalPayments:0, totalFreeze:0}
// //     //       }
// //     //     }
// //     //   }
// //     // });

// //     var vendSaleMap = {};
// //     var theSheetArray = [];
// //     var theSheetRow = [];

// //     var userMap = {};
// //     userRes && userRes.forEach(doc=>{
// //       const data = doc.data();
// //       const vendCustomerId = data.vendCustomerId;
// //       if (vendCustomerId){
// //         userMap[vendCustomerId] = data;
// //       }
// //     });

// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const created_at = data && data.created_at;

// //       const lineItems = data.line_items;
// //       const registerSaleProducts = data.register_sale_products;
// //       const items = lineItems ? lineItems : (registerSaleProducts?registerSaleProducts : null);
// //       const status = data && data.status;
// //       const total_price_incl = data && data.total_price_incl;
// //       const total_payment = total_price_incl? total_price_incl:(data && data.totals)? data.totals.total_payment? data.totals.total_payment:null:null;
// //       const total_tax = (data && data.total_tax)? data.total_tax: (data && data.totals)? (data.totals.total_tax)? data.totals.total_tax:null:null;

// //       const vendSaleId = data && data.id;
// //       const note = data && data.note;
// //       const register_id = data && data.register_id;
// //       const sale_date = data && data.sale_date;
// //       const outlet_id = data && data.outlet_id;
// //       const invoice_number = data && data.invoice_number;
// //       const outlet_TTDI = outlet_id && outlet_id === '0af7b240-abc5-11e7-eddc-d4a1c0133102';
// //       const outlet_KLCC = outlet_id && outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026';
// //       const customer_id = data && data.customer_id;
// //       const customerData = customer_id && userMap[customer_id];
// //       const userEmail = customerData && customerData.email;
// //       const userName = customerData && customerData.name;
// //       const user_id = data && data.user_id;
// //       const CROData = user_id && userMap[user_id];
// //       // const croEmail = CROData && CROData.email;
// //       const croEmail = data && data.user && data.user.email;

// //       theSheetRow = [
// //         created_at? created_at:'',
// //         sale_date? sale_date:'',
// //         vendSaleId? vendSaleId:'',
// //         note? note:'',
// //         status? status:'',
// //         total_payment? total_payment:'',
// //         total_tax? total_tax:'',
// //         register_id? register_id:'',
// //         outlet_id? outlet_id:'',
// //         outlet_TTDI? 'TTDI':outlet_KLCC? 'KLCC':'',
// //         invoice_number? invoice_number:'',
// //         userEmail? userEmail:'',
// //         userName? userName:'',
// //         user_id? user_id:'',
// //         croEmail? croEmail:''

// //       ];
// //       theSheetArray.push(theSheetRow);

// //     });

// //     var userMap = {};
   
   
   
    
// //     // theSheetRow.push('12-Month Renewal Membership (All Access) RM', paymentObjByDate["12-Month Renewal Membership (All Access)"]["20190831"].totalPayment);

// //     // theSheetArray.push(theSheetRow);
    
// //     // Object.entries(memberObjByPkgName).forEach(([pkgName,value1]) => {
// //     //   // theSheetRow.push(pkgName);
// //     //   var theSheetRow = []; 
// //     //   var theSheetRowCount = [];
// //     //   // Object.entries(value1).forEach(([dateString, value]) => {
  
// //     //   //   theSheetRowCount.push((value && value.totalCount)? value.totalCount:0);
  
// //     //   // });
// //     //   // theSheetRow.unshift(`${pkgName} RM`);
// //     //   theSheetRowCount.unshift(`${pkgName}`);

// //     //   // theSheetArray.push(theSheetRow, theSheetRowCount);
// //     //   theSheetArray.push(theSheetRowCount);
// //     // });

// //     // hardcode 
// //     // theSheetRow.push(paymentObjByDate[][]);
// //     // sheetArray.sort((a,b)=>{
// //     //   var pkgNameA = a[0];
// //     //   var pkgNameB = b[0];
// //     //   if (pkgNameA < pkgNameB) {return -1}
// //     //   if (pkgNameA > pkgNameB) {return 1}
// //     //   return 0;
// //     // });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId:'11y7jQl9ieY299x9WJ2j4KMBy_SQxcxqjJ6X8RVT7Azc',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `All Vend Transactions!A2:T`,
// //             majorDimension: "ROWS",
// //             values: theSheetArray
// //             // values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         MonthDiff,
// //         // stheSheetArray,
// //         // memberObjByPkgName,
// //         // sheetArray
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// // // 9/6/2021 add all paymeents to sheet (filter it manually at sheet)
// // exports.addBabelAcademyPayment = functions.https.onRequest((req, res) => {
// //   const paymentAdyenQuery = admin.firestore().collection('payments')
// //   // .where('source', '==', 'adyen')
// //   .get();
// //   const userQuery = admin.firestore().collection('users').get();
  
// //   return Promise.all([paymentAdyenQuery, userQuery]).then(result=>{
// //     const adyenRes = result[0];
// //     const userRes = result[1];

// //     var userMap = {};
// //     userRes && userRes.forEach(doc=>{
// //       const data= doc.data();
// //       userMap[doc.id]=data;
// //     });

// //     var sheetRow = [];
// //     var sheetArrays = [];

// //     adyenRes && adyenRes.forEach(doc=>{
// //       const data = doc.data();
// //       const createdAt = data && data.createdAt;
// //       const type = data && data.type;
// //       const transactionId = data && data.transactionId;
// //       const invoiceId = data && data.invoiceId;
// //       const cardSummary = data && data.cardSummary;
// //       const cardExpiryDate = data && data.cardExpiryDate;
// //       const paymentType = data && data.paymentType;
// //       const productName = data && data.productName;
// //       const quantity = data && data.quantity;
// //       const status = data && data.status;
// //       const source = data && data.source;
// //       const totalPrice = data && data.totalPrice;
// //       const userId = data && data.userId;
// //       const userData = userId && userMap[userId];
// //       const userEmail = userData && userData.email;
// //       const userName = userData && userData.name;

// //       sheetRow = [
// //         (createdAt && moment(getTheDate(createdAt)) && moment(getTheDate(createdAt)))?
// //         moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss'):'',
// //         type? type:'',
// //         transactionId? transactionId:'',
// //         invoiceId? invoiceId:'',
// //         cardSummary? cardSummary:'',
// //         cardExpiryDate? cardExpiryDate:'',
// //         paymentType? paymentType:'',
// //         productName? productName:'',
// //         quantity? quantity:'',
// //         status? status:'',
// //         source? source:'',
// //         totalPrice? totalPrice:'',
// //         userId? userId:'',
// //         userEmail? userEmail:'',
// //         userName? userName:''
// //       ];
// //       sheetArrays.push(sheetRow);
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId:'1fD12FyyGKGhSEu3Oz4j2qiDIPQROPsTHl9FhjCiwh_o',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `transactions!A2:CO`,
// //             majorDimension: "ROWS",
// //             values: sheetArrays
// //             // values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         // sheetArray
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// // // 9/6/2021
// // exports.babelAddMonthlyDueToSheet = functions.https.onRequest((req, res) => {
// //   const startDate = moment('2017-07-01');
// //   const endDate = moment('2021-12-31');

// //   const userQuery = admin.firestore().collection('users').get();
// //   const packageQuery = admin.firestore().collection('packages').get();

// //   var MonthDiff = 0;
// //   MonthDiff = Math.max(endDate.diff(startDate, 'months'));
// //   var monthlyObj = {};
// //   // default
// //   for (var i=0; i<=MonthDiff; i++){
// //     // const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// //     const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').endOf('month').clone().add(i, 'month');
// //     const iterationFormat = iterationStartMoment.format('YYYYMMDD');
    
// //     if (!monthlyObj[iterationFormat]){
// //       monthlyObj[iterationFormat] = {
// //         totalOutStanding:0,
// //         totalOutStandingTTDI:0,
// //         totalOutStandingKLCC:0,
// //         totalActive:0,
// //       };
// //     }
// //   }

// //   return Promise.all([userQuery, packageQuery]).then(result=>{
// //     const userRes = result[0];
// //     const pkgRes = result[1];
    
// //     var pkgMap = {};
// //     pkgRes && pkgRes.forEach(doc=>{
// //       pkgMap[doc.id]=doc.data();
// //     });
   
// //     var userMap = {};
// //     userRes && userRes.forEach(doc=>{
// //       const data = doc.data();
// //       // userMap[doc.id]=data;
// //       const cancellationDate = data && data.cancellationDate;
// //       const packageId = data && data.packageId;
// //       const membershipStarts = data && (data.autoMembershipStarts || data.membershipStarts);
// //       const membershipEnds = data && (data.autoMembershipEnds || data.membershipEnds);
// //       const email = data && data.email;
// //       const membershipEndsDate = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('months').format('YYYYMMDD');
// //       const packageData = packageId && pkgMap[packageId];
// //       const packageBase = packageData && packageData.base;

// //       if (membershipStarts && membershipEnds && !email.includes('faizul') 
// //       ){
// //         Object.entries(monthlyObj).forEach(([date,value]) => {
// //           if (packageId && membershipEnds && moment(getTheDate(membershipEnds)).isSameOrBefore(moment(date)) && 
// //             (!cancellationDate 
// //               || moment(getTheDate(cancellationDate)).isAfter(moment(date))
// //             ))
// //             {
// //             monthlyObj[date] = {
// //               date,
// //               totalOutStanding:monthlyObj[date].totalOutStanding+1,
// //               totalOutStandingTTDI:(packageBase && packageBase==='TTDI')? monthlyObj[date].totalOutStandingTTDI+1:monthlyObj[date].totalOutStandingTTDI,
// //               totalOutStandingKLCC:(packageBase && packageBase==='KLCC')? monthlyObj[date].totalOutStandingKLCC+1:monthlyObj[date].totalOutStandingKLCC,
// //               totalActive:monthlyObj[date].totalActive
// //             }
// //           }
// //         });

// //         // if (!monthlyObj[membershipEndsDate] && membershipEnds){
// //         //   monthlyObj[membershipEndsDate] = {
// //         //     date:membershipEndsDate,
// //         //     totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? 1:0,
// //         //     totalOutStandingTTDI:(packageBase && packageBase==='TTDI')? moment(membershipEnds).isBefore(moment())? 1:0:0,
// //         //     totalOutStandingKLCC:(packageBase && packageBase==='KLCC')? moment(membershipEnds).isBefore(moment())? 1:0:0,
// //         //     totalActive:membershipEnds && moment(membershipEnds).isSameOrAfter(moment())? 1:0
// //         //   };
// //         // }
// //         // else if (monthlyObj[membershipEndsDate] && membershipEnds){
// //         //   monthlyObj[membershipEndsDate] = {
// //         //     date:membershipEndsDate,
// //         //     totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? monthlyObj[membershipEndsDate].totalOutStanding+1:0,
// //         //     totalOutStandingTTDI: (packageBase && packageBase==='TTDI')? membershipEnds && moment(membershipEnds).isBefore(moment())? monthlyObj[membershipEndsDate].totalOutStandingTTDI+1:monthlyObj[membershipEndsDate].totalOutStandingTTDI:monthlyObj[membershipEndsDate].totalOutStandingTTDI,
// //         //     totalOutStandingKLCC: (packageBase && packageBase==='KLCC')? membershipEnds && moment(membershipEnds).isBefore(moment())? monthlyObj[membershipEndsDate].totalOutStandingKLCC+1:monthlyObj[membershipEndsDate].totalOutStandingKLCC:monthlyObj[membershipEndsDate].totalOutStandingKLCCC,
// //         //     totalActive:membershipEnds && moment(membershipEnds).isSameOrAfter(moment())? monthlyObj[membershipEndsDate].totalActive+1:monthlyObj[membershipEndsDate].totalActive
// //         //     // ...monthlyObj[cancelEndDate]
// //         //   };
// //         // }

// //       }
// //     });

// //     // sorting
// //     const orderedObj = Object.keys(monthlyObj).sort().reduce(
// //       (obj, key) => { 
// //         obj[key] = monthlyObj[key]; 
// //         return obj;
// //       }, 
// //       {}
// //     );

// //     var sheetOutStandingTTDI = [];
// //     var sheetOutStandingKLCC = [];
// //     var sheetOutStanding = [];
// //     var sheetArray = [];
// //     Object.entries(orderedObj).forEach(([date,value]) => {

// //       // sheetRow = [
// //       //   value.totalFreeze? value.totalFreeze:0,
// //       //   value.totalFreezeTTDI? value.totalFreezeTTDI:0,
// //       //   value.totalFreezeKLCC? value.totalFreezeKLCC:0,
// //       // ];
// //       if (
// //         moment(date).isSameOrAfter(startDate.endOf('month')) 
// //         && moment(date).isBefore(endDate)
// //         // startDate.endOf('months').isSameOrAfter(date)
// //         // && moment(date).isBefore(endDate)
// //         ){
// //         sheetOutStanding.push(value.totalOutStanding? value.totalOutStanding:0);
// //         sheetOutStandingTTDI.push(value.totalOutStandingTTDI? value.totalOutStandingTTDI:0);
// //         sheetOutStandingKLCC.push(value.totalOutStandingKLCC? value.totalOutStandingKLCC:0);
// //       }
// //     });
    
// //     sheetOutStanding.unshift('Total OutStanding');
// //     sheetOutStandingTTDI.unshift('Total Outstanding TTDI');
// //     sheetOutStandingKLCC.unshift('Total Outstanding KLCC');
  
// //     sheetArray.push(sheetOutStanding, sheetOutStandingTTDI, sheetOutStandingKLCC);

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId:'11y7jQl9ieY299x9WJ2j4KMBy_SQxcxqjJ6X8RVT7Azc',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `monthly due!A2:CO`,
// //             majorDimension: "ROWS",
// //             // values: theSheetArray
// //             values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },
// //     });
// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         monthlyObj
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// // // 9/6/2021
// // exports.babelMonthlyCountSummary = functions.https.onRequest((req, res) => {

// //   const startDate = moment('2017-07-01');
// //   const endDate = moment('2021-12-31');

// //   const paymentQuery = admin.firestore().collection('payments').get();
// //   const userQuery = admin.firestore().collection('users').get();
// //   const packageQuery = admin.firestore().collection('packages').get();

// //   var MonthDiff = 0;
// //   MonthDiff = Math.max(endDate.diff(startDate, 'months'));
// //   var monthlyObj = {};
// //   // default
// //   for (var i=0; i<=MonthDiff; i++){
// //     // const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// //     const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').endOf('month').clone().add(i, 'month');
// //     const iterationFormat = iterationStartMoment.format('YYYYMMDD');
    
// //     if (!monthlyObj[iterationFormat]){
// //       monthlyObj[iterationFormat] = {
// //         totalFreeze:0,
// //         totalFreezeTTDI:0,
// //         totalFreezeKLCC:0,
// //         totalCancel:0,
// //         totalCancelTTDI:0,
// //         totalCancelKLCC:0,
// //         totalOutStanding:0,
// //         totalOutStandingTTDI:0,
// //         totalOutStandingKLCC:0,
// //         totalActive:0,
// //       };
// //     }
// //   }

// //   return Promise.all([packageQuery, userQuery, paymentQuery]).then(result=>{

// //     const pkgRes = result[0];
// //     const userRes = result[1];
// //     const paymentRes = result[2];

// //     var pkgMap = {};
// //     pkgRes && pkgRes.forEach(doc=>{
// //       pkgMap[doc.id]=doc.data();
// //     });

// //     var userMap = {};
// //     userRes && userRes.forEach(doc=>{
// //       const data = doc.data();
// //       userMap[doc.id]=data;
// //       const cancellationDate = data && data.cancellationDate;
// //       const packageId = data && data.packageId;
// //       const membershipStarts = data && (data.autoMembershipStarts || data.membershipStarts);
// //       const membershipEnds = data && (data.autoMembershipEnds || data.membershipEnds);
// //       const email = data && data.email;
// //       const cancelEndDate = cancellationDate && moment(getTheDate(cancellationDate)).tz('Asia/Kuala_Lumpur').endOf('months').format('YYYYMMDD');
// //       const packageData = packageId && pkgMap[packageId];
// //       const packageBase = packageData && packageData.base;

// //       // for cancellation
// //       if (membershipStarts && membershipEnds && !email.includes('faizul') 
// //       // && moment(getTheDate(cancellationDate)).isSameOrAfter(startDate)
// //       // && moment(getTheDate(cancellationDate)).isBefore(endDate)
// //       ){
// //         if (!monthlyObj[cancelEndDate] && cancellationDate){
// //           monthlyObj[cancelEndDate] = {
// //             date:cancelEndDate,
// //             totalFreeze:0,
// //             totalFreezeTTDI:0,
// //             totalFreezeKLCC:0,
// //             totalCancel:1,
// //             totalCancelTTDI:0,
// //             totalCancelKLCC:0,
// //             totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? 1:0,
// //             totalOutStandingTTDI:0,
// //             totalOutStandingKLCC:0,
// //             totalActive:0,
// //           };
// //         }
// //         else if (monthlyObj[cancelEndDate] && cancellationDate){
// //           monthlyObj[cancelEndDate] = {
// //             date:cancelEndDate,
// //             totalFreeze:monthlyObj[cancelEndDate].totalFreeze+1,
// //             totalFreezeTTDI:monthlyObj[cancelEndDate].totalFreezeTTDI,
// //             totalFreezeKLCC:monthlyObj[cancelEndDate].totalFreezeKLCC,
// //             totalCancel:monthlyObj[cancelEndDate].totalCancel+1,
// //             totalCancelTTDI:(packageBase && packageBase==='TTDI')? monthlyObj[cancelEndDate].totalCancelTTDI+1:monthlyObj[cancelEndDate].totalCancelTTDI,
// //             totalCancelKLCC:(packageBase && packageBase==='KLCC')? monthlyObj[cancelEndDate].totalCancelKLCC+1:monthlyObj[cancelEndDate].totalCancelKLCC,
// //             totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? monthlyObj[cancelEndDate].totalOutStanding+1:0,
// //             totalOutStandingTTDI:0,
// //             totalOutStandingKLCC:0,
// //             totalActive:0,
// //             // ...monthlyObj[cancelEndDate]
// //           };
// //         }

// //       }
// //     });

// //     var sheetFreezeRow = [];
// //     var sheetArray = [];
// //     paymentRes && paymentRes.forEach(doc=>{
// //       const data = doc.data();
// //       const createdAt = data && data.createdAt;
// //       const source = data && data.source;
      
// //       const freezeFor = data && data.freezeFor;
// //       const freezeForEndDate = freezeFor && moment(getTheDate(freezeFor)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //       const userId = data && data.userId;
// //       const userData = userId && userMap[userId];
// //       const userPackageId = userData && userData.packageId;
// //       const packageData = userPackageId && pkgMap[userPackageId];
// //       const packageBase = packageData && packageData.base;
// //       const userEmail = userData && userData.email;
// //       const membershipStarts = userData && (userData.autoMembershipStarts || userData.membershipStarts);
// //       const membershipEnds = userData && (userData.autoMembershipEnds || userData.membershipEnds);

// //       if (source && source === 'freeze' && freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(startDate) 
// //         && userPackageId
// //         && membershipStarts && membershipEnds
// //         && !userEmail.includes('faizul')
// //         ){
        
// //         if (!monthlyObj[freezeForEndDate]){
// //           monthlyObj[freezeForEndDate] = {
// //             date:freezeForEndDate,
// //             totalFreeze:1,
// //             totalFreezeTTDI:(packageBase && packageBase==='TTDI')? 1:0,
// //             totalFreezeKLCC:(packageBase && packageBase==='KLCC')? 1:0,
// //             totalCancel:0,
// //             totalCancelTTDI:0,
// //             totalCancelKLCC:0,
// //             totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? 1:0,
// //             totalOutStandingTTDI:0,
// //             totalOutStandingKLCC:0,
// //             totalActive:0,
// //           };
// //         }
// //         else if (monthlyObj[freezeForEndDate]){

// //           monthlyObj[freezeForEndDate] = {
// //             date:freezeForEndDate,
// //             totalFreeze:monthlyObj[freezeForEndDate].totalFreeze+1,
// //             totalFreezeTTDI:(packageBase && packageBase==='TTDI')? monthlyObj[freezeForEndDate].totalFreezeTTDI+1:monthlyObj[freezeForEndDate].totalFreezeTTDI,
// //             totalFreezeKLCC:(packageBase && packageBase==='KLCC')? monthlyObj[freezeForEndDate].totalFreezeKLCC+1:monthlyObj[freezeForEndDate].totalFreezeKLCC,
// //             totalCancel:monthlyObj[freezeForEndDate].totalCancel,
// //             totalCancelTTDI:monthlyObj[freezeForEndDate].totalCancelTTDI,
// //             totalCancelKLCC:monthlyObj[freezeForEndDate].totalCancelKLCC,
// //             totalOutStanding:membershipEnds && moment(membershipEnds).isBefore(moment())? monthlyObj[freezeForEndDate].totalOutStanding+1:0,
// //             totalOutStandingTTDI:0,
// //             totalOutStandingKLCC:0,
// //             totalActive:0,
// //             // ...monthlyObj[freezeForEndDate]
// //           };
// //         }
// //       }
      
// //     });

// //     // sorting
// //     const orderedObj = Object.keys(monthlyObj).sort().reduce(
// //       (obj, key) => { 
// //         obj[key] = monthlyObj[key]; 
// //         return obj;
// //       }, 
// //       {}
// //     );

// //     var sheetFreezeTTDI = [];
// //     var sheetFreezeKLCC = [];
// //     var sheetCancel = [];
// //     var sheetCancelTTDI = [];
// //     var sheetCancelKLCC = [];
// //     var sheetOutStanding = [];
// //     Object.entries(orderedObj).forEach(([date,value]) => {

// //       // sheetRow = [
// //       //   value.totalFreeze? value.totalFreeze:0,
// //       //   value.totalFreezeTTDI? value.totalFreezeTTDI:0,
// //       //   value.totalFreezeKLCC? value.totalFreezeKLCC:0,
// //       // ];
// //       if (
// //         moment(date).isSameOrAfter(startDate.endOf('month')) 
// //         && moment(date).isBefore(endDate)
// //         // startDate.endOf('months').isSameOrAfter(date)
// //         // && moment(date).isBefore(endDate)
// //         ){
// //         sheetFreezeRow.push(value.totalFreeze? value.totalFreeze:0);
// //         sheetFreezeTTDI.push(value.totalFreezeTTDI? value.totalFreezeTTDI:0);
// //         sheetFreezeKLCC.push(value.totalFreezeKLCC? value.totalFreezeKLCC:0);
// //         sheetCancel.push(value.totalCancel? value.totalCancel:0);
// //         sheetCancelTTDI.push(value.totalCancelTTDI? value.totalCancelTTDI:0);
// //         sheetCancelKLCC.push(value.totalCancelKLCC? value.totalCancelKLCC:0);
// //         sheetOutStanding.push(value.totalOutStanding? value.totalOutStanding:0);
// //       }
// //     });
// //     sheetFreezeRow.unshift('Total Freeze');
// //     sheetFreezeTTDI.unshift('Total Freeze (TTDI)');
// //     sheetFreezeKLCC.unshift('Total Freeze (KLCC)');
// //     sheetCancel.unshift('Total Cancel');
// //     sheetCancelTTDI.unshift('Total Cancel TTDI');
// //     sheetCancelKLCC.unshift('Total Cancel KLCC');
// //     sheetOutStanding.unshift('Total OutStanding');
// //     sheetArray.push(sheetFreezeRow, sheetFreezeTTDI, sheetFreezeKLCC, 
// //       sheetCancel, sheetCancelTTDI, sheetCancelKLCC,
// //       sheetOutStanding
// //       );

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId:'11y7jQl9ieY299x9WJ2j4KMBy_SQxcxqjJ6X8RVT7Azc',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `monthlysummary!A2:CO`,
// //             majorDimension: "ROWS",
// //             // values: theSheetArray
// //             values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },
// //     });
// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         monthlyObj
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// // // 4/6/2021
// // exports.babelAccountingSummaryAdyenVend = functions.https.onRequest((req, res) => {
// //   // for POST
// //   const itemData = req.body;
// //   const endDate = (itemData && itemData.endDate)? itemData.endDate : moment().format('YYYY-MM-DD');
// //   const startDate = (itemData && itemData.startDate)? itemData.startDate : moment().format('YYYY-MM-DD');
// //   // const endDate = (itemData && itemData.endDate)? itemData.endDate : moment().format('YYYY-MM-DD');
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   const paymentQuery = admin.firestore().collection('payments').get();
// //   const userQuery = admin.firestore().collection('users').get();
// //   const vendSaleQuery = admin.firestore().collection('vendSales').get();

// //   // const freezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
// //   // const startDate = moment('2017-07-01');
// //   // const endDate = moment('2021-12-31');
// //   // const startDate = moment('2020-03-17');
// //   // const endDate = moment('2020-03-18');

// //   return Promise.all([packageQuery, userQuery, paymentQuery, vendSaleQuery]).then(result=>{
 
// //     const pkgRes = result[0];
// //     const userRes = result[1];
// //     const paymentRes = result[2];
// //     const vendSaleRes = result[3];

// //     var MonthDiff = 0;
// //     MonthDiff = Math.max(endDate.diff(startDate, 'months'));
// //     var paymentObjByDate = {}; 
// //     var memberObjByPkgName = {};

// //     var pkgMap = {};
// //     var productIdPackageMap = {};
// //     var pkgNameRM = [];
// //     var pkgNameTransCount = [];
// //     var sheetArray = [];
// //     pkgRes && pkgRes.forEach(doc=>{
// //       pkgMap[doc.id]=doc.data();
// //       const data = doc.data();
// //       const packageName = data && data.name;
// //       const packageBase = data && data.base;
// //       pkgNameRM = [`${packageName} RM`];
// //       pkgNameTransCount = [`${packageName} number`]
// //       sheetArray.push(pkgNameRM, pkgNameTransCount);

// //       const vendProductIds = data && data.vendProductIds;
// //       // console.log('vendProductId: ', data);
// //       vendProductIds && vendProductIds.forEach(vendProductId=>{
// //         // productIdPackageMap[vendProductId] = doc.id;
// //         productIdPackageMap[vendProductId] = doc.data();
// //       });

// //       // default
// //       if (packageName){
// //         for (var i=0; i<=MonthDiff; i++){
// //           // const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// //           const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').endOf('month').clone().add(i, 'month');
// //           const iterationFormat = iterationStartMoment.format('YYYYMMDD');
          
// //           if (!memberObjByPkgName[packageName]){
// //             memberObjByPkgName[packageName] = {};
// //           }
// //           else if (!memberObjByPkgName[packageName][iterationFormat]){
// //             memberObjByPkgName[packageName][iterationFormat]={
// //               packageName,
// //               packageBase:packageBase? packageBase:'no package base', 
// //               totalCount:0, 
// //               totalCountOnline:0, 
// //               totalPayments:0, 
// //               totalOnlinePayment:0, 
// //               totalFreeze:0
// //             }
// //           }
// //         }
// //       }
// //     });

// //     paymentRes && paymentRes.forEach(doc=>{
// //       const data = doc.data();
// //       const createdAt = data && data.createdAt;
// //       const createdAtEndOfMonthMoment = createdAt && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //       const source = data && data.source;
// //       const type = data && data.type;
// //       const status = data && data.status;
// //       const packageId = data && data.packageId;
// //       const packageData = packageId && pkgMap[packageId];
// //       const packageName = packageData && packageData.name;
// //       const packageBase = packageData && packageData.base;
// //       const totalPrice = data && data.totalPrice;

// //       if (createdAt && totalPrice && packageName && source && (source === 'adyen' || source === 'pbonline') && type && (type === 'membership') && status && status === 'CLOSED'){
// //         if (!memberObjByPkgName[packageName]){
// //           memberObjByPkgName[packageName] = {};
// //         }
// //         else if (!memberObjByPkgName[packageName][createdAtEndOfMonthMoment]){
// //           memberObjByPkgName[packageName][createdAtEndOfMonthMoment]={
// //             packageName, 
// //             packageBase:packageBase? packageBase:'no package base', 
// //             totalCount:0, 
// //             totalCountOnline:1,
// //             totalPayments:parseFloat(totalPrice), 
// //             totalVendPayment:0,
// //             totalOnlinePayment:parseFloat(totalPrice), 
// //             totalFreeze:0
// //           }
// //         }
// //         else{
// //           memberObjByPkgName[packageName][createdAtEndOfMonthMoment]={
// //             packageName, 
// //             packageBase:memberObjByPkgName[packageName][createdAtEndOfMonthMoment].packageBase? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].packageBase:null,  
// //             totalCount:memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalCount? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalCount:0, 
// //             totalCountOnline:memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalCountOnline? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalCountOnline+1:1, 
// //             totalPayments: memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalPayments? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalPayments + parseFloat(totalPrice):parseFloat(totalPrice), 
// //             totalVendPayment: memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalVendPayment? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalVendPayment:0, 
// //             totalOnlinePayment: memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalOnlinePayment? memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalOnlinePayment + parseFloat(totalPrice):parseFloat(totalPrice), 
// //             totalFreeze:0
// //           }
// //         }
// //       }
// //       // for freeze
// //       // else if (createdAt && source && source === 'freeze'){
// //       //   if (!memberObjByPkgName[packageName]){
// //       //     memberObjByPkgName[packageName] = {};
// //       //   }
// //       //   else if (!memberObjByPkgName[packageName][createdAtEndOfMonthMoment]){
// //       //     memberObjByPkgName[packageName][createdAtEndOfMonthMoment]={
// //       //       packageName, 
// //       //       packageBase:packageBase? packageBase:'no package base', 
// //       //       totalCount:0, 
// //       //       totalCountOnline:0,
// //       //       totalPayments:0, 
// //       //       totalVendPayment:0,
// //       //       totalOnlinePayment:0, 
// //       //       totalFreeze:1
// //       //     }
// //       //   }
// //       //   else if (memberObjByPkgName[packageName][createdAtEndOfMonthMoment]){
// //       //     memberObjByPkgName[packageName][createdAtEndOfMonthMoment]={
// //       //       ...memberObjByPkgName[packageName][createdAtEndOfMonthMoment],
// //       //       totalFreeze:memberObjByPkgName[packageName][createdAtEndOfMonthMoment].totalFreeze
// //       //     }
// //       //   }
// //       // }
      
// //     });

// //     var vendSaleMap = {};
// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const created_at = data && data.created_at;
// //       const createdAtEndMonthMoment = moment(getTheDate(created_at)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');

// //       const lineItems = data.line_items;
// //       const registerSaleProducts = data.register_sale_products;
// //       const items = lineItems ? lineItems : (registerSaleProducts?registerSaleProducts : null);

// //       // checking for the product that been sold
// //       items && items.map(registerSaleProduct=>{
// //         const productId = registerSaleProduct.product_id; //same like packageID
// //         const packageData = productIdPackageMap[productId];
// //         const packageName = packageData && packageData.name;
// //         const packageBase = packageData && packageData.base;

// //         // todo. check if discount applied
// //         const price_total = registerSaleProduct.price_total? registerSaleProduct.price_total: registerSaleProduct.amount? registerSaleProduct.amount:null;
// //         const status = data && data.status;
// //         const closedStatus = status && (status === 'CLOSED' || status === 'LAYBY_CLOSED')

// //         if (packageData && price_total && closedStatus && packageName){
// //           // console.log('createdAtEndMonthMoment: ', createdAtEndMonthMoment);
// //           if (!memberObjByPkgName[packageName]){
// //             memberObjByPkgName[packageName] = {};
// //           }
// //           else if (!memberObjByPkgName[packageName][createdAtEndMonthMoment]){
// //             memberObjByPkgName[packageName][createdAtEndMonthMoment]={
// //               packageName, 
// //               packageBase:packageBase? packageBase:'no package base', 
// //               totalCount:1, 
// //               totalCountOnline:0,
// //               totalPayments:parseFloat(price_total),
// //               totalOnlinePayment:0, 
// //               totalVendPayment:parseFloat(price_total), 
// //               totalFreeze:0
// //             }
// //           }
// //           else{
// //             memberObjByPkgName[packageName][createdAtEndMonthMoment]={
// //               packageName, 
// //               packageBase:memberObjByPkgName[packageName][createdAtEndMonthMoment].packageBase? memberObjByPkgName[packageName][createdAtEndMonthMoment].packageBase:null,  
// //               totalCount:memberObjByPkgName[packageName][createdAtEndMonthMoment].totalCount? memberObjByPkgName[packageName][createdAtEndMonthMoment].totalCount+1:1, 
// //               totalPayments: memberObjByPkgName[packageName][createdAtEndMonthMoment].totalPayments? memberObjByPkgName[packageName][createdAtEndMonthMoment].totalPayments + parseFloat(price_total):parseFloat(price_total), 
// //               totalVendPayment: memberObjByPkgName[packageName][createdAtEndMonthMoment].totalVendPayment? memberObjByPkgName[packageName][createdAtEndMonthMoment].totalVendPayment + parseFloat(price_total):parseFloat(price_total), 
// //               totalFreeze:0,
// //               totalOnlinePayment: memberObjByPkgName[packageName][createdAtEndMonthMoment].totalOnlinePayment? memberObjByPkgName[packageName][createdAtEndMonthMoment].totalOnlinePayment:0, 
// //               totalCountOnline: memberObjByPkgName[packageName][createdAtEndMonthMoment].totalCountOnline? memberObjByPkgName[packageName][createdAtEndMonthMoment].totalCountOnline:0, 
// //             }
// //           }
// //         }
// //       });
// //     });

// //     var userMap = {};
// //     // userRes && userRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds: null;
// //     //   const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts? data.membershipStarts:null;
// //     //   const packageId = data && data.packageId;
     
// //     //  if (membershipEnds && membershipStarts){
// //     //   const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //     //   const membershipStartsFormat = membershipStarts && moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //     //   const membershipStartMax = moment(getTheDate(membershipStarts)).isBefore(startDate)? startDate:membershipStarts;
// //     //   const membershipEndMax = moment(getTheDate(membershipEnds)).isAfter(endDate)? endDate:membershipEnds;
// //     //   var MonthDiffMembership = 0;
// //     //   MonthDiffMembership = Math.max(moment(getTheDate(membershipEndMax)).tz('Asia/Kuala_Lumpur').endOf('month').diff(moment(getTheDate(membershipStartMax)).tz('Asia/Kuala_Lumpur').endOf('month'), 'months')) + 1;

// //     //   if (packageId){
// //     //     const packageData = packageId && pkgMap[packageId];
// //     //     const packageName = packageData && packageData.name;
// //     //     if (!memberObjByPkgName){
// //     //       memberObjByPkgName={};
// //     //     }
// //     //     else if (!memberObjByPkgName[packageName]){
// //     //       memberObjByPkgName[packageName] = {};
// //     //     }
       
// //     //     for (var j=0; j<=MonthDiffMembership; j++){
// //     //       const iterationStartMoment = moment(membershipStartMax).clone().endOf('month').add(j, 'month');
// //     //       const iterationFormat = iterationStartMoment.format('YYYYMMDD');
// //     //       if (!memberObjByPkgName[packageName]){
// //     //         memberObjByPkgName[packageName] = {};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName][iterationFormat]){
// //     //         memberObjByPkgName[packageName][iterationFormat]={
// //     //           packageName, 
// //     //           totalCount:1, 
// //     //           totalFreeze:0
// //     //         }
// //     //       }
// //     //       else if (memberObjByPkgName[packageName][iterationFormat]){
// //     //         memberObjByPkgName[packageName][iterationFormat]={
// //     //           packageName, 
// //     //           totalCount:memberObjByPkgName[packageName][iterationFormat].totalCount? memberObjByPkgName[packageName][iterationFormat].totalCount+1:1, 
// //     //           totalFreeze:0
// //     //         }
// //     //       }
// //     //     }
// //     //   }

// //     //  }

// //     //   // if (membershipEnds && membershipStarts){
// //     //   //   const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //     //   //   const packageData = packageId && pkgMap[packageId];
// //     //   //   const packageName = packageData && packageData.name;

// //     //   //   if (packageName && membershipEndsFormat){
// //     //   //     if (!memberObjByPkgName){
// //     //   //       memberObjByPkgName={};
// //     //   //     }
// //     //   //     else if (!memberObjByPkgName[packageName]){
// //     //   //       memberObjByPkgName[packageName] = {};
// //     //   //     }
// //     //   //     else if (!memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //   //       memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //   //         packageName, 
// //     //   //         totalCount:1,
// //     //   //         totalFreezeCount:0
// //     //   //         // totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //     //   //       }
// //     //   //     }
// //     //   //     else if (memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //   //       memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //   //         packageName, 
// //     //   //         // totalCount:1
// //     //   //         totalFreezeCount:0,
// //     //   //         totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //     //   //       }
// //     //   //     }
// //     //   //   }
// //     //   // }
// //     // });

// //     // freezeRes && freezeRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const freezeFor = data && data.freezeFor;
// //     //   const userId = data && data.userId;
// //     //   const userData = userId && userMap[userId];
// //     //   const membershipEnds = userData.autoMembershipEnds? userData.autoMembershipEnds: userData.membershipEnds? userData.membershipEnds: null;
// //     //   const membershipStarts = userData.autoMembershipStarts? userData.autoMembershipStarts:userData.membershipStarts? userData.membershipStarts:null;
// //     //   const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');

// //     //   if (freezeFor && membershipEndsFormat){
// //     //      if (!memberObjByPkgName){
// //     //         memberObjByPkgName={};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName]){
// //     //         memberObjByPkgName[packageName] = {};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //         memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //           packageName, 
// //     //           totalCount:0,
// //     //           totalFreezeCount:1
// //     //           // totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //     //         }
// //     //       }
// //     //       else if (memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //         memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //           packageName, 
// //     //           // totalCount:1
// //     //           totalFreezeCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalFreezeCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalFreezeCount + 1):1,
// //     //           totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount):0
// //     //         }
// //     //       }
// //     //   }
// //     // });

// //     // paymentRes && paymentRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const createdAt = data && data.createdAt;
// //     //   const status = data && data.status;
// //     //   const packageId = data && data.packageId;
// //     //   const packageData = packageId && pkgMap[packageId];
// //     //   const packageName = packageData && packageData.name;
// //     //   pkgNameRM = `${packageName} RM`;
// //     //   pkgNameTransCount = `${packageName} number`;
// //     //   const totalPrice = data && data.totalPrice;

// //     //   const createdAtFormat = createdAt && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //     //   const createdAtValidation = createdAt && moment(getTheDate(createdAt)).isSameOrAfter(startDate) && moment(getTheDate(createdAt)).isSameOrBefore(endDate);
// //     //   // console.log('createdAtFormat: ', createdAtFormat);
// //     //   if (packageId && packageName && totalPrice && status && status === 'CLOSED' && createdAtValidation){
// //     //     if (!paymentObjByDate){
// //     //       paymentObjByDate = {};
// //     //     }
// //     //     else if (!paymentObjByDate[packageName]){
// //     //       paymentObjByDate[packageName] = {};
// //     //     }
// //     //     else if (!paymentObjByDate[packageName][createdAtFormat]){
// //     //       paymentObjByDate[packageName][createdAtFormat] = {
// //     //         packageName, 
// //     //         totalPayment: parseFloat(totalPrice), 
// //     //         totalCount: 1
// //     //       }
// //     //     }
// //     //     else if (paymentObjByDate[packageName][createdAtFormat]){
// //     //       paymentObjByDate[packageName][createdAtFormat] = {
// //     //         packageName, 
// //     //         totalPayment: (paymentObjByDate && paymentObjByDate[packageName][createdAtFormat].totalPayment)? (parseFloat(paymentObjByDate[packageName][createdAtFormat].totalPayment) + parseFloat(totalPrice)):parseFloat(totalPrice), 
// //     //         totalCount: (paymentObjByDate && paymentObjByDate[packageName][createdAtFormat].totalCount)? (paymentObjByDate[packageName][createdAtFormat].totalCount + 1):1
// //     //       }
// //     //     }
// //     //   }

// //     // });

   
// //     var theSheetArray = [];
    
// //     // theSheetRow.push('12-Month Renewal Membership (All Access) RM', paymentObjByDate["12-Month Renewal Membership (All Access)"]["20190831"].totalPayment);

// //     // theSheetArray.push(theSheetRow);
// //     var totalKLCCCount = 0;
// //     var totalTTDICount = 0;
    
// //     Object.entries(memberObjByPkgName).forEach(([pkgName,value1]) => {
// //       // theSheetRow.push(pkgName);
// //       var theSheetRow = []; // for vend
// //       var theSheetRowCount = [];
// //       var theSheetRowOnline = [];
// //       var theSheetRowOnlineCount = [];
// //       Object.entries(value1).forEach(([dateString, value]) => {
// //         // for vend
// //         theSheetRowCount.push((value && value.totalCount)? value.totalCount:0);
// //         theSheetRow.push((value && value.totalVendPayment)? value.totalVendPayment:0);
// //         // for online payment
// //         theSheetRowOnlineCount.push((value && value.totalCountOnline)? value.totalCountOnline:0);
// //         theSheetRowOnline.push((value && value.totalOnlinePayment)? value.totalOnlinePayment:0);

// //         // if (value && value.totalCount>0 && value.packageBase && value.packageBase === 'KLCC'){
// //         //   totalKLCCCount+=1;
// //         // }
// //         // if (value && value.totalCount>0 && value.packageBase && value.packageBase === 'TTDI'){
// //         //   totalTTDICount+=1;
// //         // }
  
// //       });
// //       theSheetRow.unshift(`${pkgName} (VEND) RM`);
// //       theSheetRowCount.unshift(`${pkgName} (VEND) Count`);

// //       // online
// //       theSheetRowOnline.unshift(`${pkgName} (ADYEN/PBONLINE) RM`);
// //       theSheetRowOnlineCount.unshift(`${pkgName} (ADYEN/PBONLINE) Count`);

// //       theSheetArray.push(theSheetRow, theSheetRowCount, theSheetRowOnline, theSheetRowOnlineCount);
// //       // theSheetArray.push(theSheetRowCount);
// //     });

// //     // hardcode 
// //     // theSheetRow.push(paymentObjByDate[][]);
// //     // sheetArray.sort((a,b)=>{
// //     //   var pkgNameA = a[0];
// //     //   var pkgNameB = b[0];
// //     //   if (pkgNameA < pkgNameB) {return -1}
// //     //   if (pkgNameA > pkgNameB) {return 1}
// //     //   return 0;
// //     // });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId:'11y7jQl9ieY299x9WJ2j4KMBy_SQxcxqjJ6X8RVT7Azc',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             // range: `all  transactions (faizul)!A2:CO`,
// //             range: `all  transactions (custom)!A2:CO`,
// //             majorDimension: "ROWS",
// //             values: theSheetArray
// //             // values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         productIdPackageMap,
// //         MonthDiff,
// //         theSheetArray,
// //         memberObjByPkgName,
// //         // sheetArray
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// // exports.babelAccountingSummaryActiveMember = functions.https.onRequest((req, res) => {

// //   // for POST
// //   const itemData = req.body;
// //   // const endDate = (itemData && itemData.endDate)? itemData.endDate : moment().format('YYYY-MM-DD');
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   // const paymentQuery = admin.firestore().collection('payments').get();
// //   const userQuery = admin.firestore().collection('users').get();
// //   const freezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
// //   const startDate = moment('2019-08-01');
// //   const endDate = moment('2021-06-30');

// //   return Promise.all([packageQuery, userQuery, freezeQuery]).then(result=>{
 
// //     const pkgRes = result[0];
// //     const userRes = result[1];
// //     const freezeRes = result[2];

// //     var MonthDiff = 0;
// //     MonthDiff = Math.max(endDate.diff(startDate, 'months'));
// //     var paymentObjByDate = {}; 
// //     var memberObjByPkgName = {};

// //     var pkgMap = {};
// //     var pkgNameRM = [];
// //     var pkgNameTransCount = [];
// //     var sheetArray = [];
// //     pkgRes && pkgRes.forEach(doc=>{
// //       pkgMap[doc.id]=doc.data();
// //       const data = doc.data();
// //       const packageName = data && data.name;
// //       pkgNameRM = [`${packageName} RM`];
// //       pkgNameTransCount = [`${packageName} number`]
// //       sheetArray.push(pkgNameRM, pkgNameTransCount);

// //       // default
// //       if (packageName){
// //         for (var i=0; i<=MonthDiff; i++){
// //           // const iterationStartMoment = moment(startDate).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// //           const iterationStartMoment = moment(startDate).endOf('month').clone().add(i, 'month');
// //           const iterationFormat = iterationStartMoment.format('YYYYMMDD');
          
// //           if (!memberObjByPkgName[packageName]){
// //             memberObjByPkgName[packageName] = {};
// //           }
// //           else if (!memberObjByPkgName[packageName][iterationFormat]){
// //             memberObjByPkgName[packageName][iterationFormat]={packageName, totalCount:0, totalFreeze:0}
// //           }
// //         }
// //       }
// //     });

// //     var userMap = {};
// //     userRes && userRes.forEach(doc=>{
// //       const data = doc.data();
// //       const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds: null;
// //       const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts? data.membershipStarts:null;
// //       const packageId = data && data.packageId;
     
// //      if (membershipEnds && membershipStarts){
// //       const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //       const membershipStartsFormat = membershipStarts && moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //       const membershipStartMax = moment(getTheDate(membershipStarts)).isBefore(startDate)? startDate:membershipStarts;
// //       const membershipEndMax = moment(getTheDate(membershipEnds)).isAfter(endDate)? endDate:membershipEnds;
// //       var MonthDiffMembership = 0;
// //       MonthDiffMembership = Math.max(moment(getTheDate(membershipEndMax)).tz('Asia/Kuala_Lumpur').endOf('month').diff(moment(getTheDate(membershipStartMax)).tz('Asia/Kuala_Lumpur').endOf('month'), 'months')) + 1;

// //       if (packageId){
// //         const packageData = packageId && pkgMap[packageId];
// //         const packageName = packageData && packageData.name;
// //         if (!memberObjByPkgName){
// //           memberObjByPkgName={};
// //         }
// //         else if (!memberObjByPkgName[packageName]){
// //           memberObjByPkgName[packageName] = {};
// //         }
       
// //         for (var j=0; j<=MonthDiffMembership; j++){
// //           const iterationStartMoment = moment(membershipStartMax).clone().endOf('month').add(j, 'month');
// //           const iterationFormat = iterationStartMoment.format('YYYYMMDD');
// //           if (!memberObjByPkgName[packageName]){
// //             memberObjByPkgName[packageName] = {};
// //           }
// //           else if (!memberObjByPkgName[packageName][iterationFormat]){
// //             memberObjByPkgName[packageName][iterationFormat]={
// //               packageName, 
// //               totalCount:1, 
// //               totalFreeze:0
// //             }
// //           }
// //           else if (memberObjByPkgName[packageName][iterationFormat]){
// //             memberObjByPkgName[packageName][iterationFormat]={
// //               packageName, 
// //               totalCount:memberObjByPkgName[packageName][iterationFormat].totalCount? memberObjByPkgName[packageName][iterationFormat].totalCount+1:1, 
// //               totalFreeze:0
// //             }
// //           }
// //         }
// //       }

// //      }

// //       // if (membershipEnds && membershipStarts){
// //       //   const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //       //   const packageData = packageId && pkgMap[packageId];
// //       //   const packageName = packageData && packageData.name;

// //       //   if (packageName && membershipEndsFormat){
// //       //     if (!memberObjByPkgName){
// //       //       memberObjByPkgName={};
// //       //     }
// //       //     else if (!memberObjByPkgName[packageName]){
// //       //       memberObjByPkgName[packageName] = {};
// //       //     }
// //       //     else if (!memberObjByPkgName[packageName][membershipEndsFormat]){
// //       //       memberObjByPkgName[packageName][membershipEndsFormat] = {
// //       //         packageName, 
// //       //         totalCount:1,
// //       //         totalFreezeCount:0
// //       //         // totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //       //       }
// //       //     }
// //       //     else if (memberObjByPkgName[packageName][membershipEndsFormat]){
// //       //       memberObjByPkgName[packageName][membershipEndsFormat] = {
// //       //         packageName, 
// //       //         // totalCount:1
// //       //         totalFreezeCount:0,
// //       //         totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //       //       }
// //       //     }
// //       //   }
// //       // }
// //     });

// //     // freezeRes && freezeRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const freezeFor = data && data.freezeFor;
// //     //   const userId = data && data.userId;
// //     //   const userData = userId && userMap[userId];
// //     //   const membershipEnds = userData.autoMembershipEnds? userData.autoMembershipEnds: userData.membershipEnds? userData.membershipEnds: null;
// //     //   const membershipStarts = userData.autoMembershipStarts? userData.autoMembershipStarts:userData.membershipStarts? userData.membershipStarts:null;
// //     //   const membershipEndsFormat = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');

// //     //   if (freezeFor && membershipEndsFormat){
// //     //      if (!memberObjByPkgName){
// //     //         memberObjByPkgName={};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName]){
// //     //         memberObjByPkgName[packageName] = {};
// //     //       }
// //     //       else if (!memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //         memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //           packageName, 
// //     //           totalCount:0,
// //     //           totalFreezeCount:1
// //     //           // totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount + 1):1
// //     //         }
// //     //       }
// //     //       else if (memberObjByPkgName[packageName][membershipEndsFormat]){
// //     //         memberObjByPkgName[packageName][membershipEndsFormat] = {
// //     //           packageName, 
// //     //           // totalCount:1
// //     //           totalFreezeCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalFreezeCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalFreezeCount + 1):1,
// //     //           totalCount: (memberObjByPkgName && memberObjByPkgName[packageName][membershipEndsFormat].totalCount)? (memberObjByPkgName[packageName][membershipEndsFormat].totalCount):0
// //     //         }
// //     //       }
// //     //   }
// //     // });

// //     // paymentRes && paymentRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const createdAt = data && data.createdAt;
// //     //   const status = data && data.status;
// //     //   const packageId = data && data.packageId;
// //     //   const packageData = packageId && pkgMap[packageId];
// //     //   const packageName = packageData && packageData.name;
// //     //   pkgNameRM = `${packageName} RM`;
// //     //   pkgNameTransCount = `${packageName} number`;
// //     //   const totalPrice = data && data.totalPrice;

// //     //   const createdAtFormat = createdAt && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').endOf('month').format('YYYYMMDD');
// //     //   const createdAtValidation = createdAt && moment(getTheDate(createdAt)).isSameOrAfter(startDate) && moment(getTheDate(createdAt)).isSameOrBefore(endDate);
// //     //   // console.log('createdAtFormat: ', createdAtFormat);
// //     //   if (packageId && packageName && totalPrice && status && status === 'CLOSED' && createdAtValidation){
// //     //     if (!paymentObjByDate){
// //     //       paymentObjByDate = {};
// //     //     }
// //     //     else if (!paymentObjByDate[packageName]){
// //     //       paymentObjByDate[packageName] = {};
// //     //     }
// //     //     else if (!paymentObjByDate[packageName][createdAtFormat]){
// //     //       paymentObjByDate[packageName][createdAtFormat] = {
// //     //         packageName, 
// //     //         totalPayment: parseFloat(totalPrice), 
// //     //         totalCount: 1
// //     //       }
// //     //     }
// //     //     else if (paymentObjByDate[packageName][createdAtFormat]){
// //     //       paymentObjByDate[packageName][createdAtFormat] = {
// //     //         packageName, 
// //     //         totalPayment: (paymentObjByDate && paymentObjByDate[packageName][createdAtFormat].totalPayment)? (parseFloat(paymentObjByDate[packageName][createdAtFormat].totalPayment) + parseFloat(totalPrice)):parseFloat(totalPrice), 
// //     //         totalCount: (paymentObjByDate && paymentObjByDate[packageName][createdAtFormat].totalCount)? (paymentObjByDate[packageName][createdAtFormat].totalCount + 1):1
// //     //       }
// //     //     }
// //     //   }

// //     // });

   
// //     var theSheetArray = [];
    
// //     // theSheetRow.push('12-Month Renewal Membership (All Access) RM', paymentObjByDate["12-Month Renewal Membership (All Access)"]["20190831"].totalPayment);

// //     // theSheetArray.push(theSheetRow);
    
// //     Object.entries(memberObjByPkgName).forEach(([pkgName,value1]) => {
// //       // theSheetRow.push(pkgName);
// //       var theSheetRow = []; 
// //       var theSheetRowCount = [];
// //       Object.entries(value1).forEach(([dateString, value]) => {
  
// //         theSheetRowCount.push((value && value.totalCount)? value.totalCount:0);
  
// //       });
// //       // theSheetRow.unshift(`${pkgName} RM`);
// //       theSheetRowCount.unshift(`${pkgName}`);

// //       // theSheetArray.push(theSheetRow, theSheetRowCount);
// //       theSheetArray.push(theSheetRowCount);
// //     });

// //     // hardcode 
// //     // theSheetRow.push(paymentObjByDate[][]);
// //     // sheetArray.sort((a,b)=>{
// //     //   var pkgNameA = a[0];
// //     //   var pkgNameB = b[0];
// //     //   if (pkgNameA < pkgNameB) {return -1}
// //     //   if (pkgNameA > pkgNameB) {return 1}
// //     //   return 0;
// //     // });

// //     const updateSheetPromise = updateGoogleSheet({
// //       // spreadsheetId: '1t9vYWpfkbThuRdVkwbHUY8kcN1Cd-OFu6_hsp7oHw4k',
// //       spreadsheetId:'1Uqywmt1NT-4qFq2m_H6utzmLr_yjIFCniqOXAsthtj8',
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `test!A${rowsCount+2}:J`,
// //             range: `mtd active members!A2:BZ`,
// //             majorDimension: "ROWS",
// //             values: theSheetArray
// //             // values: sheetArray
// //             // values: [['6-Month Term Membership (All Access)', '666', '9090'], ['3M August 2020 (single access)', 'test']]
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         MonthDiff,
// //         theSheetArray,
// //         memberObjByPkgName,
// //         sheetArray
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     });
// //   });
// // });

// send klcc sales with zero lajuceria sales
exports.klccLajuCeriaSales_Manual = functions.https.onRequest((req, res) => {
  // var url = `https://app.babel.fit`;

  // to get data from lajuceria email
  const body = req.body;
  console.log('reqBody: ', body);
  // const itemData = body && JSON.parse(body);
  const itemData = body;
  // console.log('itemData: ', itemData);
  // const from = itemData && itemData.from;
  // console.log('from: ', from);
  const plain = itemData && itemData.plain;
  // console.log('plain: ', plain);
  const html = itemData && itemData.html;
   // console.log('html:', html)
  // sconsole.log('fileName: ', fileName);
  const fileName = (itemData && itemData.fileName)? itemData.fileName:null;
  const dateFromFileName = fileName? fileName.slice(10, 18) : moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYYMMDD'); // hardcode to get the date
  console.log('dateFromFileName: ', dateFromFileName);
  // const attachmentContent = attachments && Buffer.from(itemData.attachments[0]['content'], 'base64').toString('utf-8');
  if (dateFromFileName){
    var dateStringText = (fileName && dateFromFileName)? moment(dateFromFileName).tz('Asia/Kuala_Lumpur').startOf('day').format('DDMMYYYY'):moment().tz('Asia/Kuala_Lumpur').startOf('day').format('DDMMYYYY');
    const zeroFileLajuCeriaText = 
    `71000010|${dateFromFileName}|${dateStringText}|00|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|01|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|02|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|03|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|04|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|05|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|06|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|07|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|08|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|09|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|10|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|11|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|12|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|13|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|14|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|15|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|16|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|17|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|18|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|19|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|20|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|21|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|22|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y\n71000010|${dateFromFileName}|${dateStringText}|23|0|0.00|0.00|0.00|0.00|0|0.00|0.00|0.00|0.00|0.00|0.00|0.00|Y`
    const attachmentContent = itemData && (itemData.attachmentContent || zeroFileLajuCeriaText);
  
  // console.log('attachments: ', attachments);
  // console.log('attachmentContent: ', attachmentContent);

    console.log('contains attachment && fileName');
    // convert the attachemnt to obj
    // remove \n
    var theAttachment = attachmentContent && attachmentContent.split("\n");
    // divide into 24 hours
    theAttachment.splice(24,1);
    var arrayContent = [];
    var objContent = {};
    theAttachment && theAttachment.forEach((data, index)=>{
      arrayContent = data.split('|');
      // console.log('arrayContent: ', arrayContent);
      const machineId = arrayContent[0];
      const batchId = arrayContent[1];
      const date = arrayContent[2];
      const hour = arrayContent[3];
      const receiptCount = arrayContent[4];
      const totalnetSales = arrayContent[5];
      const totalSST = arrayContent[6];
      const totalDiscount = arrayContent[7];
      const totalServiceCharge = arrayContent[8];
      const totalPax = arrayContent[9];
      const totalCash =  arrayContent[10];
      const totalTNG = arrayContent[11];
      const totalVisa = arrayContent[12];
      const totalMasterCard = arrayContent[13];
      const totalAmex = arrayContent[14];
      const totalVoucher = arrayContent[15];
      const totalOthers = arrayContent[16];
      const sstRegistered = arrayContent[17];
    
      objContent[index]={
        machineId, batchId, date, hour, receiptCount, totalnetSales, totalSST, totalDiscount, totalServiceCharge,
        totalPax, totalCash, totalTNG, totalVisa, totalMasterCard, totalAmex, totalVoucher, totalOthers, sstRegistered
      }
    });

    // console.log('objContent:', objContent);
    
    // for KLCC
    var posObj = {};
    var theDateString = (fileName && dateFromFileName)? moment(dateFromFileName).tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'):moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD');
    // to create 24hour obj
    for (var i=0; i<=23; i++){
      posObj[moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('YYYY-MM-DDTHH')] = {
        currentTime:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour'),
        machineId:71000010, 
        batchId:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').format('YYYYMMDD'),
        date:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').format('DDMMYYYY'),
        hour:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('HH'),
        receiptCount:0, //default
        totalnetSales:'0.00', //before SST
        totalSST:'0.00',
        totalDiscount:'0.00',
        totalServiceCharge:'0.00',
        totalPax:0, // for F&B only
        totalCash:'0.00',
        totalTNG:'0.00',
        totalVisa:'0.00',
        totalMasterCard:'0.00',
        totalAmex:'0.00',
        totalVoucher:'0.00',
        totalOthers:'0.00',
        sstRegistered:'Y'
      };
    }

    // to get data from vendSales & adyen
    // get the yesterday sales
    // var theDateString = moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'day').format('YYYY-MM-DD');
    const vendSalesQuery = admin.firestore().collection('vendSales')
      .where('createdDay', '==', theDateString)
      .where('outlet_id', '==', '0af7b240-aba0-11e9-fb5b-b0907137b026') // klcc outlet
      .get();
    // const adyenPaymentQuery = admin.firestore().collection('adyTransactions').get();
    const adyenPaymentQuery = admin.firestore().collection('payments')
      .where('source', '==', 'adyen')
      .where('status', '==', 'CLOSED')
      .where('type', '==', 'membership')
      .get();
    const packageQuery = admin.firestore().collection('packages').where('base', '==', 'KLCC').get();

    return Promise.all([vendSalesQuery, adyenPaymentQuery, packageQuery]).then(results=>{
      
      const vendSaleRes = results[0];
      const adyenRes = results[1];
      const packageRes = results[2];

      var vendSaleMap = {};
      var vendSaleCountFB = 0; // vendsale count from firebase
      var finalString = 'saya';
      var finalArrayString = [];
      // console.log('vendSalesQuery: ', vendSaleRes);
      vendSaleRes.forEach((vendSale)=>{
        const data = vendSale.data();
        const status = data && data.status;
        const created_at = data && data.created_at;
        const createdTime = data && data.createdTime;
        const createdAtMalaysia = created_at && moment(created_at).tz('Asia/Kuala_Lumpur');
        const register_sale_payments = data && data.register_sale_payments;
        const payment_type = register_sale_payments && register_sale_payments[0] && register_sale_payments[0].payment_type;
        const payment_type_name = payment_type && payment_type.name;
        const totals = data && data.totals;
        const total_price = (totals && totals.total_price)? totals.total_price:0
        const total_tax = totals && totals.total_tax;
        const register_sale_products = data.register_sale_products;
        var total_discount = 0.0;
        register_sale_products && register_sale_products.forEach(prod=>{
          const discount = prod && prod.discount;
          const prodId = prod && prod.id;
          const price_total = prod && prod.price_total;
          if (discount && parseFloat(discount)>0){
            total_discount+=discount;
          }
          // for discount SKU
          if (prodId && prodId === 'd14ffa87-ea1c-ae38-11eb-92a9d8656e3e'){
            total_discount+=Math.abs(price_total);
          }
        });

        const outlet_id = data && data.outlet_id;
        
        // const createdAtMalaysiaHour = createdAtMalaysia && createdAtMalaysia.format('HH');
        const createdAtMalaysiaHour = created_at && moment(created_at).add(8, 'hours').format('HH');
        // const createdAtMalaysiaHour = created_at && moment(created_at).format('HH');
        // console.log('vendSaleData: ', data);
        // for KLCC
        if (data && vendSale.id && (status && status!=='VOIDED') && (outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026')){
          vendSaleCountFB += 1;
          vendSaleMap[vendSale.id] = data;

          Object.entries(posObj).forEach(([key,value]) => {
            // const hourKey = moment(key).format('HH');
            const hourKey = moment(key).tz('Asia/Kuala_Lumpur').format('HH');
            // posObj[key].receiptCount = posObj[key].receiptCount + 1;
            // posObj[key].totalnetSales = posObj[key].totalnetSales + total_price;

            // if (createdAtMalaysia && createdAtMalaysia.isSameOrAfter(moment(key)) && createdAtMalaysia.add(1, 'hours').isBefore(moment(key))){
            // if (createdAtMalaysia && moment(key).isSameOrAfter(createdAtMalaysia) && moment(key).add(1, 'hours').isBefore(createdAtMalaysia)){
            if (createdAtMalaysiaHour && (hourKey===createdAtMalaysiaHour)){
              posObj[key].receiptCount =+ 1;
              posObj[key].totalnetSales = parseFloat(posObj[key].totalnetSales) + parseFloat(total_price);
              posObj[key].totalSST = parseFloat(posObj[key].totalSST) + parseFloat(total_tax);
              posObj[key].totalDiscount = parseFloat(posObj[key].totalDiscount) + parseFloat(total_discount);
              
              if (payment_type_name && payment_type_name==='Cash'){
                posObj[key].totalCash = parseFloat(posObj[key].totalCash) + parseFloat(total_price);
              }
              else if (payment_type_name && (payment_type_name.includes('Credit') || payment_type_name.includes('Debit'))){
                posObj[key].totalVisa = parseFloat(posObj[key].totalVisa) + parseFloat(total_price);
              }

            }
          });
        }
      });

      var pkgMap = {};
      packageRes && packageRes.forEach(doc=>{
        pkgMap[doc.id]=doc.data();
      })
      // console.log('posObj: ', posObj);

      var adyenSaleMap = {};
      var adyenSaleCountFB = 0; // adyen count from firebase
      var adyenSaleArray = [];

      adyenRes && adyenRes.forEach(doc=>{
        const data = doc.data();
        const createdAt = data && data.createdAt;
        const status = data && data.status;
        const totalPrice = data && data.totalPrice;
        const packageId = data && data.packageId;
        const packageData = packageId && pkgMap[packageId];
        const isKLCCPkg = packageData && (packageData.base === 'KLCC');
        const valueWithSST = totalPrice;
        const valueWithoutSST = valueWithSST && (valueWithSST/1.06);
        const paymentMethod = data && data.paymentType;
        const createdAtMalaysia = createdAt && moment(createdAt).tz('Asia/Kuala_Lumpur');
        const createdAtMalaysiaHour = createdAtMalaysia && createdAtMalaysia.format('HH');
        const sstTax = parseFloat(valueWithSST) - parseFloat(valueWithoutSST);

        if (status && status === 'CLOSED' && moment(getTheDate(createdAt)).isSameOrAfter(moment(theDateString)) 
          && isKLCCPkg
          && moment(getTheDate(createdAt)).isBefore(moment(theDateString).add(1,'day'))
        ){
          console.log('found adyen moment: ', moment(createdAt).format('DDMMYYYY'));
          console.log('found adyen hour: ', moment(createdAt).format('HH'));
          console.log('valueWithSST: ', valueWithSST);
          console.log('adyId: ', doc.id);

          Object.entries(posObj).forEach(([key,value]) => {
            // const hourKey = moment(key).format('HH');
            const hourKey = moment(key).tz('Asia/Kuala_Lumpur').format('HH');
            // posObj[key].receiptCount = posObj[key].receiptCount + 1;
            // posObj[key].totalnetSales = posObj[key].totalnetSales + total_price;

            // if (createdAtMalaysia && createdAtMalaysia.isSameOrAfter(moment(key)) && createdAtMalaysia.add(1, 'hours').isBefore(moment(key))){
            // if (createdAtMalaysia && moment(key).isSameOrAfter(createdAtMalaysia) && moment(key).add(1, 'hours').isBefore(createdAtMalaysia)){
            if (createdAtMalaysia && (hourKey===createdAtMalaysiaHour)){
              posObj[key].receiptCount = posObj[key].receiptCount + 1;
              posObj[key].totalnetSales = (parseFloat(posObj[key].totalnetSales) + parseFloat(valueWithoutSST)).toFixed(2);
              posObj[key].totalSST = (parseFloat(posObj[key].totalSST) + parseFloat(sstTax)).toFixed(2);
              // for visa
              if(paymentMethod && paymentMethod === 'visa'){
                posObj[key].totalVisa = (parseFloat(posObj[key].totalVisa) + parseFloat(valueWithoutSST)).toFixed(2);
              }
              // for mastercard
              else if(paymentMethod && paymentMethod === 'mc'){
                posObj[key].totalMasterCard = (parseFloat(posObj[key].totalMasterCard) + parseFloat(valueWithoutSST)).toFixed(2);
              }
              // posObj[key].totalDiscount = parseFloat(posObj[key].totalDiscount) + parseFloat(total_discount);
              // if (payment_type_name && (payment_type_name.includes('Credit') || payment_type_name.includes('Debit'))){
              //   posObj[key].totalVisa = parseFloat(posObj[key].totalVisa) + parseFloat(total_price);
              // }

            }
          });
        }

      });

      var combinedObj = {};
      var posObjText = '';
      var finalStringklcc = '';
      var PosObjTextArray = [];
      // Object.fromEntries(Object.entries(posObj).sort());
      Object.entries(posObj).forEach(([keyklcc,valueklcc]) => {
        // rewrite to klcc text - to show via email
        posObjText = `${valueklcc.machineId}|${valueklcc.batchId}|${(valueklcc.date)}|${valueklcc.hour}|${valueklcc.receiptCount}|${valueklcc.totalnetSales}|${valueklcc.totalSST}|${valueklcc.totalDiscount}|${valueklcc.totalServiceCharge}|${valueklcc.totalServiceCharge}|${valueklcc.totalPax}|${valueklcc.totalCash}|${valueklcc.totalTNG}|${valueklcc.totalVisa}|${valueklcc.totalMasterCard}|${valueklcc.totalAmex}|${valueklcc.totalVoucher}|${valueklcc.totalOthers}|${valueklcc.sstRegistered}`
        finalStringklcc = [posObjText];
        PosObjTextArray.push(finalStringklcc);

        Object.entries(objContent).forEach(([keylaju,valuelaju]) => {
          const keyklcchour = moment(keyklcc).tz('Asia/Kuala_Lumpur').format('HH');

          if (parseInt(keyklcchour) === parseInt(keylaju)){
            // combinedObj[keyklcc]={
            combinedObj[keylaju]={
              machineId:valuelaju.machineId, // 1
              batchId:valueklcc.batchId, // 2
              date:valuelaju.date, // 3
              hour:valuelaju.hour, // 4
              receiptCount:parseInt(valuelaju.receiptCount)+parseInt(valueklcc.receiptCount), // 5
              totalnetSales:parseFloat(parseFloat(valuelaju.totalnetSales)+parseFloat(valueklcc.totalnetSales)).toFixed(2), // 6
              totalSST:parseFloat(parseFloat(valuelaju.totalSST)+parseFloat(valueklcc.totalSST)).toFixed(2), // 7
              totalDiscount: parseFloat(parseFloat(valuelaju.totalDiscount)+parseFloat(valueklcc.totalDiscount)).toFixed(2), //8
              totalServiceCharge: (parseFloat(valuelaju.totalServiceCharge)+parseFloat(valueklcc.totalServiceCharge)).toFixed(2), // 9
              totalPax: parseFloat(valuelaju.totalPax)+parseFloat(valueklcc.totalPax), //10
              totalCash: (parseFloat(valuelaju.totalCash)+parseFloat(valueklcc.totalCash)).toFixed(2), //11
              totalTNG: (parseFloat(valuelaju.totalTNG)+parseFloat(valueklcc.totalTNG)).toFixed(2), //12
              totalVisa: (parseFloat(valuelaju.totalVisa)+parseFloat(valueklcc.totalVisa)).toFixed(2), //13
              totalMasterCard: (parseFloat(valuelaju.totalMasterCard)+parseFloat(valueklcc.totalMasterCard)).toFixed(2), //14
              totalAmex: (parseFloat(valuelaju.totalAmex)+parseFloat(valueklcc.totalAmex)).toFixed(2), //15
              totalVoucher:(parseFloat(valuelaju.totalVoucher)+parseFloat(valueklcc.totalVoucher)).toFixed(2), //16
              totalOthers:(parseFloat(valuelaju.totalOthers)+parseFloat(valueklcc.totalOthers)).toFixed(2), //17
              sstRegistered:'Y'
            }
          }
        });
      });

      // console.log('combinedObj: ', combinedObj);
      var theString = '';
      var finalString = [];
      var finalArrayString = [];
      // Object.fromEntries(Object.entries(combinedObj).sort());
      // Object.fromEntries(Object.entries(combinedObj).sort())
      // const orderedCombinedObj = o => Object.keys(o).sort().reduce((r, k) => (r[k] = o[k], r), {});
      // const orderedCombinedObj = Object.keys(combinedObj).sort().reduce(
      //   (obj, key) => { 
      //     obj[key] = combinedObj[key]; 
      //     return obj;
      //   }, 
      //   {}
      // );
      const orderedCombinedObj = Object.keys(combinedObj).reduce((a, c) => (a[c] = combinedObj[c], a), {});
      console.log('orderedCombinedObj: ', orderedCombinedObj);
      
      Object.entries(orderedCombinedObj).forEach(([key,value]) => {
        const hourKey = moment(key).format('HH');
        theString = `${value.machineId}|${value.batchId}|${value.date}|${value.hour}|${value.receiptCount}|${value.totalnetSales}|${value.totalSST}|${value.totalDiscount}|${value.totalServiceCharge}|${value.totalPax}|${value.totalCash}|${value.totalTNG}|${value.totalVisa}|${value.totalMasterCard}|${value.totalAmex}|${value.totalVoucher}|${value.totalOthers}|${value.sstRegistered}`;
        // finalString.concat(`${value.machineId} | ${value.batchId} | ${value.date} | ${value.hour} | ${value.receiptCount} | ${value.totalnetSales} | ${value.totalSST} | ${value.totalDiscount} | ${value.totalServiceCharge} | ${value.totalPax} | ${value.totalCash} | ${value.totalTNG} | ${value.totalVisa} | ${value.totalMasterCard} | ${value.totalAmex} | ${value.totalVoucher} | ${value.totalOthers} | ${value.sstRegistered}` + "\n");
        finalString = [theString];
        finalArrayString.push(finalString);
      });

      // console.log('finalString: ', finalString);
      // console.log('theString: ', theString);
      // console.log('finalArrayString: ', finalArrayString);
      var textoDownloadklcc = PosObjTextArray.join("\n");
      var textoDownload = finalArrayString.join("\n");
      console.log("textoDownload", textoDownload);
      const buf = Buffer.from(textoDownload).toString('base64');
      const buf2 = Buffer.from(textoDownload, 'utf-8');
      console.log('buf: ', buf);
      console.log('buf2: ', buf2);
      const Blob = require('node-blob');
      let blob = new Blob([buf], { type: "text/plain" });
      let blob2 = new Blob([textoDownload], { type: "text/plain;charset=utf-8" });
      console.log('Blob - ', blob);
      console.log('Blob2 - ', blob2);
      // var blob = new Blob([textoDownload], {type: "text/plain;charset=utf-8"});
      // console.log('theblob: ', blob);
      // const fs = require('fs');

      // fs.writeFile('faizulbabel.txt', 'Hello World!', function (err) {
      //   if (err) return console.log(err);
      //   console.log('Hello World > helloworld.txt');
      // });

    
      // var PromiseFtp = require('promise-ftp');
      // console.log('PromiseFtp ');
      // // var fs = require('fs');
      // // console.log('fs');
      // var ftp = new PromiseFtp();
      // ftp.connect({host: 'babeloffice.ddns.net', user: 'faizul', password: 'ryanwong'})
      // .then(function (serverMessage) {
      //   console.log('ftpMessage: ', serverMessage);
      //   // return ftp.put(textoDownload, 'faizul.txt');
      //   return ftp.put(buf, 'faizul.txt');
      // }).then(function () {
      //   console.log('ftpEnd: ');
      //   return ftp.end();
      // }).catch(error=>{
      //   console.log('ftp error: ', error);
      //   return ftp.end();
      // })

      // for sftp
      let Client = require('ssh2-sftp-client');
      let sftp = new Client();
      var emailPromise;

      // only send via ftp and email if blob2 is created successfully
      if (blob2 && textoDownload){
        sftp.connect({
          host: '202.136.18.59',
          port: '22',
          username: '71000010',
          password: 'S8Zd211'
        }).then(() => {
          // return sftp.list('/');
          return sftp.put(buf2, `/H71000010_${moment(theDateString).format('YYYYMMDD')}.txt`);
          // sftp.put(buf2, `/H71000010_test321.txt`);
          // return sftp.put(blob, '/H71000010_faizulTest.txt');
        }).then(data => {
          // console.log('the data info: ', data);
          // checking if the file already exist
          // return sftp.list(`/H71000010_${moment(theDateString).format('YYYYMMDD')}.txt`);
          emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, data, textoDownloadklcc, true);
          sftp.end();
          return Promise.all([emailPromise]).then(result=>{
            return res.status(200).send({success:true, fileUploaded:fileName, textoDownload, theAttachment});
          });
          //return sftp.end();
        // }).then(dataFromFtp=>{
        //   // console.log('dataFromFTP: ', dataFromFtp);
        //   emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, dataFromFtp, true);
        //   return Promise.all([emailPromise]).then(result=>{
        //     return res.status(200).send({success:true, fileUploaded:fileName, textoDownload});
        //   });
        
        // }).then(()=>{
        //   return sftp.end();
        }).catch(err => {
          console.log('error sftp: ', err);
          emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, 'null', 'null', false, err);
          sftp.end();
          return Promise.all([emailPromise]).then(result=>{
            return res.status(200).send({success:false, fileUploaded:fileName, textoDownload, err, dateFromFileName, theAttachment});
          })
        });
      }
      else{
        return sendMailLajuCeria('faizul.j@boontan.net', 'no attachmentContent found', 'no text found', 'nodataFromFtp', '', false, 'no attachment found').then(()=>{
          return res.status(200).send({success:false, theAttachment})
        });
      }
    });
    
    // else{
    //   return sendMailLajuCeria('faizul.j@boontan.net', 'no blob found', 'no text found', false, 'no attachment found');
    // }
    // var ftp = new PromiseFtp();
    // ftp.connect({host:'babeloffice.ddns.net', user: 'faizul', password: 'ryanwong'})
    // .then(function (serverMessage) {
    //   console.log('Server message: '+serverMessage);
    //   return ftp.list('/');
    // }).then(function (list) {
    //   console.log('Directory listing:');
    //   console.dir(list);
    //   return ftp.end();
    // });

    // var emailPromise = sendMailLajuCeria('faizul.j@boontan.net', blob2, textoDownload);
    // return Promise.all([emailPromise]).then(result=>{
    //   return res.status(200).send({test:'test', textoDownload});
    // });
  


  
  // var request = require("request");
  // const corsFn = cors({ origin: true });
  // return corsFn(req, res, () => {
  //     // const optionBody = JSON.parse(JSON.stringify(req.body));
  //   // const optionMethod = req.method;

  //   // token will be expired on 22/10/2021
  //   const option = {
  //       uri: url,
  //       method: 'GET',
  //       // body: Object.assign({}, body),
  //       // json: true
  //   };
  //   request(option, function (error, response) {
  //       res.contentType('application/json');
  //       if (response.statusCode === 200) {
  //         var responseBody = JSON.parse(response.body);
  //         console.log('resStatus:', response.statusCode, response.statusMessage);
  //         // console.log('theRes:')
  //         // to enable cors
  //         res.set({
  //           'content-type': 'application/json',
  //           'warning': "with content type charset encoding will be added by default",
  //           "Access-Control-Allow-Headers" : "Content-Type",
  //           "Access-Control-Allow-Origin": "*",
  //           "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
  //         });
  //         res.status(response.statusCode).send({
  //           success:true, 
  //           responseBody:responseBody,
  //           status: response.statusCode,
  //           // theRes: res,
  //         });
  //       }
  //       else {
  //           console.log('Status:', response.statusCode, response.statusMessage);
  //           console.log('Error:', error);
  //           res.status(response.statusCode).send({ data: 'Fail in authorising recurring payment' });
  //       }
  //   });
  // });
  }
  else{
    console.log('no text found');
    return sendMailLajuCeria('faizul.j@boontan.net', 'no attachmentContent found', 'no attachment found', 'no dataFromFtp', false, 'no attachment found').then(result=>{
      return res.status(200).send({success:false, message:'no attachmentContent found', dateFromFileName, theAttachment});
    });
  }
});

// to get email content from lajuCeria & produce the final txt file
exports.klccLajuCeriaSales = functions.https.onRequest((req, res) => {
  // var url = `https://app.babel.fit`;

  // to get data from lajuceria email
  const body = req.body;
  // console.log('reqBody: ', body);
  // const itemData = body && JSON.parse(body);
  const itemData = body;
  console.log('itemData: ', itemData);

  // send the copy email
  sendCopyMailLajuCeria('faizul.j@boontan.net', itemData);
  // const itemDataStringify = itemData && JSON.stringify(itemData);
  // console.log('itemDataStringify: ', itemDataStringify);
  // const itemDataParse = JSON.parse(itemDataStringify);
  // console.log('itemDataParse: ', itemDataParse);

  // const itemDataToString = itemDataParse && itemDataParse.toString('utf-8');
  // console.log('itemDataToString: ', itemDataToString);
  // const itemDataBuffer = Buffer.from(itemData, 'base64').toString('utf-8');
  // console.log('itemDataBuffer: ', itemDataBuffer)
  // const itemDataParse = itemDataBuffer && JSON.parse(itemDataBuffer);
  // console.log('itemDataParse: ', itemDataParse);

  const from = itemData && itemData.from;
  console.log('from: ', from);
  const plain = itemData && itemData.plain;
  console.log('plain: ', plain);
  const html = itemData && itemData.html;
  console.log('html:', html);
  const attachments = itemData && itemData.attachments && itemData.attachments[0];
  const fileName = itemData && itemData.attachments && itemData.attachments[0] && itemData.attachments[0]['file_name'];
  console.log('fileName: ', fileName);
  const dateFromFileName = fileName && fileName.slice(10, 18); // hardcode to get the date
  console.log('dateFromFileName: ', dateFromFileName);
  const attachmentContent = attachments && Buffer.from(itemData.attachments[0]['content'], 'base64').toString('utf-8');

  console.log('attachments: ', attachments);
  console.log('attachmentContent: ', attachmentContent);

  if (attachments && fileName){
    console.log('contains attachment && fileName');
    // convert the attachemnt to obj
    // remove \n
    var theAttachment = attachmentContent && attachmentContent.split("\n");
    // divide into 24 hours
    theAttachment.splice(24,1);
    var arrayContent = [];
    var objContent = {};
    theAttachment && theAttachment.forEach((data, index)=>{
      arrayContent = data.split('|');
      // console.log('arrayContent: ', arrayContent);
      const machineId = arrayContent[0];
      const batchId = arrayContent[1];
      const date = arrayContent[2];
      const hour = arrayContent[3];
      const receiptCount = arrayContent[4];
      const totalnetSales = arrayContent[5];
      const totalSST = arrayContent[6];
      const totalDiscount = arrayContent[7];
      const totalServiceCharge = arrayContent[8];
      const totalPax = arrayContent[9];
      const totalCash =  arrayContent[10];
      const totalTNG = arrayContent[11];
      const totalVisa = arrayContent[12];
      const totalMasterCard = arrayContent[13];
      const totalAmex = arrayContent[14];
      const totalVoucher = arrayContent[15];
      const totalOthers = arrayContent[16];
      const sstRegistered = arrayContent[17];
    
      objContent[index]={
        machineId, batchId, date, hour, receiptCount, totalnetSales, totalSST, totalDiscount, totalServiceCharge,
        totalPax, totalCash, totalTNG, totalVisa, totalMasterCard, totalAmex, totalVoucher, totalOthers, sstRegistered
      }
    });

    // console.log('objContent:', objContent);
    
    // for KLCC
    var posObj = {};
    var theDateString = (fileName && dateFromFileName)? moment(dateFromFileName).tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'):moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'day').format('YYYY-MM-DD');
    // to create 24hour obj
    for (var i=0; i<=23; i++){
      posObj[moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('YYYY-MM-DDTHH')] = {
        currentTime:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour'),
        machineId:71000010, 
        batchId:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').format('YYYYMMDD'),
        date:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').format('DDMMYYYY'),
        hour:moment(theDateString).tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('HH'),
        receiptCount:0, //default
        totalnetSales:'0.00', //before SST
        totalSST:'0.00',
        totalDiscount:'0.00',
        totalServiceCharge:'0.00',
        totalPax:0, // for F&B only
        totalCash:'0.00',
        totalTNG:'0.00',
        totalVisa:'0.00',
        totalMasterCard:'0.00',
        totalAmex:'0.00',
        totalVoucher:'0.00',
        totalOthers:'0.00',
        sstRegistered:'Y'
      };
    }

    // to get data from vendSales & adyen
    // get the yesterday sales
    // var theDateString = moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'day').format('YYYY-MM-DD');
    const vendSalesQuery = admin.firestore().collection('vendSales')
      .where('createdDay', '==', theDateString)
      .where('outlet_id', '==', '0af7b240-aba0-11e9-fb5b-b0907137b026') // klcc outlet
      .get();
    // const adyenPaymentQuery = admin.firestore().collection('adyTransactions').get();
    const adyenPaymentQuery = admin.firestore().collection('payments')
      .where('source', '==', 'adyen')
      .where('status', '==', 'CLOSED')
      .where('type', '==', 'membership')
      .get();
    const packageQuery = admin.firestore().collection('packages').where('base', '==', 'KLCC').get();

    return Promise.all([vendSalesQuery, adyenPaymentQuery, packageQuery]).then(results=>{
      
      const vendSaleRes = results[0];
      const adyenRes = results[1];
      const packageRes = results[2];

      var vendSaleMap = {};
      var vendSaleCountFB = 0; // vendsale count from firebase
      var finalString = 'saya';
      var finalArrayString = [];
      // console.log('vendSalesQuery: ', vendSaleRes);
      vendSaleRes.forEach((vendSale)=>{
        const data = vendSale.data();
        const status = data && data.status;
        const created_at = data && data.created_at;
        const createdTime = data && data.createdTime;
        const createdAtMalaysia = created_at && moment(created_at).tz('Asia/Kuala_Lumpur');
        const register_sale_payments = data && data.register_sale_payments;
        const payment_type = register_sale_payments && register_sale_payments[0] && register_sale_payments[0].payment_type;
        const payment_type_name = payment_type && payment_type.name;
        const totals = data && data.totals;
        const total_price = (totals && totals.total_price)? totals.total_price:0
        const total_tax = totals && totals.total_tax;
        const register_sale_products = data.register_sale_products;
        var total_discount = 0.0;
        register_sale_products && register_sale_products.forEach(prod=>{
          const discount = prod && prod.discount;
          const prodId = prod && prod.id;
          const price_total = prod && prod.price_total;
          if (discount && parseFloat(discount)>0){
            total_discount+=discount;
          }
          // for discount SKU
          if (prodId && prodId === 'd14ffa87-ea1c-ae38-11eb-92a9d8656e3e'){
            total_discount+=Math.abs(price_total);
          }
        });

        const outlet_id = data && data.outlet_id;
        
        // const createdAtMalaysiaHour = createdAtMalaysia && createdAtMalaysia.format('HH');
        const createdAtMalaysiaHour = created_at && moment(created_at).add(8, 'hours').format('HH');
        // const createdAtMalaysiaHour = created_at && moment(created_at).format('HH');
        // console.log('vendSaleData: ', data);
        // for KLCC
        if (data && vendSale.id && (status && status!=='VOIDED') && (outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026')){
          vendSaleCountFB += 1;
          vendSaleMap[vendSale.id] = data;

          Object.entries(posObj).forEach(([key,value]) => {
            // const hourKey = moment(key).format('HH');
            const hourKey = moment(key).tz('Asia/Kuala_Lumpur').format('HH');
            // posObj[key].receiptCount = posObj[key].receiptCount + 1;
            // posObj[key].totalnetSales = posObj[key].totalnetSales + total_price;

            // if (createdAtMalaysia && createdAtMalaysia.isSameOrAfter(moment(key)) && createdAtMalaysia.add(1, 'hours').isBefore(moment(key))){
            // if (createdAtMalaysia && moment(key).isSameOrAfter(createdAtMalaysia) && moment(key).add(1, 'hours').isBefore(createdAtMalaysia)){
            if (createdAtMalaysiaHour && (hourKey===createdAtMalaysiaHour)){
              posObj[key].receiptCount =+ 1;
              posObj[key].totalnetSales = parseFloat(posObj[key].totalnetSales) + parseFloat(total_price);
              posObj[key].totalSST = parseFloat(posObj[key].totalSST) + parseFloat(total_tax);
              posObj[key].totalDiscount = parseFloat(posObj[key].totalDiscount) + parseFloat(total_discount);
              
              if (payment_type_name && payment_type_name==='Cash'){
                posObj[key].totalCash = parseFloat(posObj[key].totalCash) + parseFloat(total_price);
              }
              else if (payment_type_name && (payment_type_name.includes('Credit') || payment_type_name.includes('Debit'))){
                posObj[key].totalVisa = parseFloat(posObj[key].totalVisa) + parseFloat(total_price);
              }

            }
          });
        }
      });

      var pkgMap = {};
      packageRes && packageRes.forEach(doc=>{
        pkgMap[doc.id]=doc.data();
      })
      // console.log('posObj: ', posObj);

      var adyenSaleMap = {};
      var adyenSaleCountFB = 0; // adyen count from firebase
      var adyenSaleArray = [];

      adyenRes && adyenRes.forEach(doc=>{
        const data = doc.data();
        const createdAt = data && data.createdAt;
        const status = data && data.status;
        const totalPrice = data && data.totalPrice;
        const packageId = data && data.packageId;
        const packageData = packageId && pkgMap[packageId];
        const isKLCCPkg = packageData && (packageData.base === 'KLCC');
        const valueWithSST = totalPrice;
        const valueWithoutSST = valueWithSST && (valueWithSST/1.06);
        const paymentMethod = data && data.paymentType;
        const createdAtMalaysia = createdAt && moment(createdAt).tz('Asia/Kuala_Lumpur');
        const createdAtMalaysiaHour = createdAtMalaysia && createdAtMalaysia.format('HH');
        const sstTax = parseFloat(valueWithSST) - parseFloat(valueWithoutSST);

        if (status && status === 'CLOSED' && moment(getTheDate(createdAt)).isSameOrAfter(moment(theDateString)) 
          && isKLCCPkg
          && moment(getTheDate(createdAt)).isBefore(moment(theDateString).add(1,'day'))
        ){
          console.log('found adyen moment: ', moment(createdAt).format('DDMMYYYY'));
          console.log('found adyen hour: ', moment(createdAt).format('HH'));
          console.log('valueWithSST: ', valueWithSST);
          console.log('adyId: ', doc.id);

          Object.entries(posObj).forEach(([key,value]) => {
            // const hourKey = moment(key).format('HH');
            const hourKey = moment(key).tz('Asia/Kuala_Lumpur').format('HH');
            // posObj[key].receiptCount = posObj[key].receiptCount + 1;
            // posObj[key].totalnetSales = posObj[key].totalnetSales + total_price;

            // if (createdAtMalaysia && createdAtMalaysia.isSameOrAfter(moment(key)) && createdAtMalaysia.add(1, 'hours').isBefore(moment(key))){
            // if (createdAtMalaysia && moment(key).isSameOrAfter(createdAtMalaysia) && moment(key).add(1, 'hours').isBefore(createdAtMalaysia)){
            if (createdAtMalaysia && (hourKey===createdAtMalaysiaHour)){
              posObj[key].receiptCount = posObj[key].receiptCount + 1;
              posObj[key].totalnetSales = (parseFloat(posObj[key].totalnetSales) + parseFloat(valueWithoutSST)).toFixed(2);
              posObj[key].totalSST = (parseFloat(posObj[key].totalSST) + parseFloat(sstTax)).toFixed(2);
              // for visa
              if(paymentMethod && paymentMethod === 'visa'){
                posObj[key].totalVisa = (parseFloat(posObj[key].totalVisa) + parseFloat(valueWithoutSST)).toFixed(2);
              }
              // for mastercard
              else if(paymentMethod && paymentMethod === 'mc'){
                posObj[key].totalMasterCard = (parseFloat(posObj[key].totalMasterCard) + parseFloat(valueWithoutSST)).toFixed(2);
              }
              // posObj[key].totalDiscount = parseFloat(posObj[key].totalDiscount) + parseFloat(total_discount);
              // if (payment_type_name && (payment_type_name.includes('Credit') || payment_type_name.includes('Debit'))){
              //   posObj[key].totalVisa = parseFloat(posObj[key].totalVisa) + parseFloat(total_price);
              // }

            }
          });
        }

      });

      var combinedObj = {};
      var posObjText = '';
      var finalStringklcc = '';
      var PosObjTextArray = [];
      // Object.fromEntries(Object.entries(posObj).sort());
      Object.entries(posObj).forEach(([keyklcc,valueklcc]) => {
        // rewrite to klcc text - to show via email
        posObjText = `${valueklcc.machineId}|${valueklcc.batchId}|${(valueklcc.date)}|${valueklcc.hour}|${valueklcc.receiptCount}|${valueklcc.totalnetSales}|${valueklcc.totalSST}|${valueklcc.totalDiscount}|${valueklcc.totalServiceCharge}|${valueklcc.totalServiceCharge}|${valueklcc.totalPax}|${valueklcc.totalCash}|${valueklcc.totalTNG}|${valueklcc.totalVisa}|${valueklcc.totalMasterCard}|${valueklcc.totalAmex}|${valueklcc.totalVoucher}|${valueklcc.totalOthers}|${valueklcc.sstRegistered}`
        finalStringklcc = [posObjText];
        PosObjTextArray.push(finalStringklcc);

        Object.entries(objContent).forEach(([keylaju,valuelaju]) => {
          const keyklcchour = moment(keyklcc).tz('Asia/Kuala_Lumpur').format('HH');

          if (parseInt(keyklcchour) === parseInt(keylaju)){
            // combinedObj[keyklcc]={
            combinedObj[keylaju]={
              machineId:valuelaju.machineId, // 1
              batchId:valueklcc.batchId, // 2
              date:valuelaju.date, // 3
              hour:valuelaju.hour, // 4
              receiptCount:parseInt(valuelaju.receiptCount)+parseInt(valueklcc.receiptCount), // 5
              totalnetSales:parseFloat(parseFloat(valuelaju.totalnetSales)+parseFloat(valueklcc.totalnetSales)).toFixed(2), // 6
              totalSST:parseFloat(parseFloat(valuelaju.totalSST)+parseFloat(valueklcc.totalSST)).toFixed(2), // 7
              totalDiscount: parseFloat(parseFloat(valuelaju.totalDiscount)+parseFloat(valueklcc.totalDiscount)).toFixed(2), //8
              totalServiceCharge: (parseFloat(valuelaju.totalServiceCharge)+parseFloat(valueklcc.totalServiceCharge)).toFixed(2), // 9
              totalPax: parseFloat(valuelaju.totalPax)+parseFloat(valueklcc.totalPax), //10
              totalCash: (parseFloat(valuelaju.totalCash)+parseFloat(valueklcc.totalCash)).toFixed(2), //11
              totalTNG: (parseFloat(valuelaju.totalTNG)+parseFloat(valueklcc.totalTNG)).toFixed(2), //12
              totalVisa: (parseFloat(valuelaju.totalVisa)+parseFloat(valueklcc.totalVisa)).toFixed(2), //13
              totalMasterCard: (parseFloat(valuelaju.totalMasterCard)+parseFloat(valueklcc.totalMasterCard)).toFixed(2), //14
              totalAmex: (parseFloat(valuelaju.totalAmex)+parseFloat(valueklcc.totalAmex)).toFixed(2), //15
              totalVoucher:(parseFloat(valuelaju.totalVoucher)+parseFloat(valueklcc.totalVoucher)).toFixed(2), //16
              totalOthers:(parseFloat(valuelaju.totalOthers)+parseFloat(valueklcc.totalOthers)).toFixed(2), //17
              sstRegistered:'Y'
            }
          }
        });
      });

      // console.log('combinedObj: ', combinedObj);
      var theString = '';
      var finalString = [];
      var finalArrayString = [];
      // Object.fromEntries(Object.entries(combinedObj).sort());
      // Object.fromEntries(Object.entries(combinedObj).sort())
      // const orderedCombinedObj = o => Object.keys(o).sort().reduce((r, k) => (r[k] = o[k], r), {});
      // const orderedCombinedObj = Object.keys(combinedObj).sort().reduce(
      //   (obj, key) => { 
      //     obj[key] = combinedObj[key]; 
      //     return obj;
      //   }, 
      //   {}
      // );
      const orderedCombinedObj = Object.keys(combinedObj).reduce((a, c) => (a[c] = combinedObj[c], a), {});
      console.log('orderedCombinedObj: ', orderedCombinedObj);
      
      Object.entries(orderedCombinedObj).forEach(([key,value]) => {
        const hourKey = moment(key).format('HH');
        theString = `${value.machineId}|${value.batchId}|${value.date}|${value.hour}|${value.receiptCount}|${value.totalnetSales}|${value.totalSST}|${value.totalDiscount}|${value.totalServiceCharge}|${value.totalPax}|${value.totalCash}|${value.totalTNG}|${value.totalVisa}|${value.totalMasterCard}|${value.totalAmex}|${value.totalVoucher}|${value.totalOthers}|${value.sstRegistered}`;
        // finalString.concat(`${value.machineId} | ${value.batchId} | ${value.date} | ${value.hour} | ${value.receiptCount} | ${value.totalnetSales} | ${value.totalSST} | ${value.totalDiscount} | ${value.totalServiceCharge} | ${value.totalPax} | ${value.totalCash} | ${value.totalTNG} | ${value.totalVisa} | ${value.totalMasterCard} | ${value.totalAmex} | ${value.totalVoucher} | ${value.totalOthers} | ${value.sstRegistered}` + "\n");
        finalString = [theString];
        finalArrayString.push(finalString);
      });

      // console.log('finalString: ', finalString);
      // console.log('theString: ', theString);
      // console.log('finalArrayString: ', finalArrayString);
      var textoDownloadklcc = PosObjTextArray.join("\n");
      var textoDownload = finalArrayString.join("\n");
      console.log("textoDownload", textoDownload);
      const buf = Buffer.from(textoDownload).toString('base64');
      const buf2 = Buffer.from(textoDownload, 'utf-8');
      console.log('buf: ', buf);
      console.log('buf2: ', buf2);
      const Blob = require('node-blob');
      let blob = new Blob([buf], { type: "text/plain" });
      let blob2 = new Blob([textoDownload], { type: "text/plain;charset=utf-8" });
      console.log('Blob - ', blob);
      console.log('Blob2 - ', blob2);
      // var blob = new Blob([textoDownload], {type: "text/plain;charset=utf-8"});
      // console.log('theblob: ', blob);
      // const fs = require('fs');

      // fs.writeFile('faizulbabel.txt', 'Hello World!', function (err) {
      //   if (err) return console.log(err);
      //   console.log('Hello World > helloworld.txt');
      // });

    
      // var PromiseFtp = require('promise-ftp');
      // console.log('PromiseFtp ');
      // // var fs = require('fs');
      // // console.log('fs');
      // var ftp = new PromiseFtp();
      // ftp.connect({host: 'babeloffice.ddns.net', user: 'faizul', password: 'ryanwong'})
      // .then(function (serverMessage) {
      //   console.log('ftpMessage: ', serverMessage);
      //   // return ftp.put(textoDownload, 'faizul.txt');
      //   return ftp.put(buf, 'faizul.txt');
      // }).then(function () {
      //   console.log('ftpEnd: ');
      //   return ftp.end();
      // }).catch(error=>{
      //   console.log('ftp error: ', error);
      //   return ftp.end();
      // })

      // for sftp
      let Client = require('ssh2-sftp-client');
      let sftp = new Client();
      var emailPromise;

      // only send via ftp and email if blob2 is created successfully
      if (blob2 && textoDownload){
        sftp.connect({
          host: '202.136.18.59',
          port: '22',
          username: '71000010',
          password: 'S8Zd211'
        }).then(() => {
          // return sftp.list('/');
          return sftp.put(buf2, `/H71000010_${moment(theDateString).format('YYYYMMDD')}.txt`);
          // sftp.put(buf2, `/H71000010_test321.txt`);
          // return sftp.put(blob, '/H71000010_faizulTest.txt');
        }).then(data => {
          // console.log('the data info: ', data);
          // checking if the file already exist
          // return sftp.list(`/H71000010_${moment(theDateString).format('YYYYMMDD')}.txt`);
          emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, data, textoDownloadklcc, true);
          sftp.end();
          return Promise.all([emailPromise]).then(result=>{
            return res.status(200).send({success:true, fileUploaded:fileName, textoDownload});
          });
          //return sftp.end();
        // }).then(dataFromFtp=>{
        //   // console.log('dataFromFTP: ', dataFromFtp);
        //   emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, dataFromFtp, true);
        //   return Promise.all([emailPromise]).then(result=>{
        //     return res.status(200).send({success:true, fileUploaded:fileName, textoDownload});
        //   });
        
        // }).then(()=>{
        //   return sftp.end();
        }).catch(err => {
          console.log('error sftp: ', err);
          emailPromise = sendMailLajuCeria('faizul.j@boontan.net', attachmentContent, textoDownload, 'null', 'null', false, err);
          sftp.end();
          return Promise.all([emailPromise]).then(result=>{
            return res.status(200).send({success:false, fileUploaded:fileName, textoDownload, err});
          })
        });
      }
      else{
        var emailErrorPromise = sendMailLajuCeria('faizul.j@boontan.net', 'no attachmentContent found', 'no text found', 'nodataFromFtp', '', false, 'no attachment found');
        return Promise.all([emailErrorPromise]).then(result=>{
          return res.status(200).send({success:false, message:'no attachmentContent found'});
        });
        // return sendMailLajuCeria('faizul.j@boontan.net', 'no attachmentContent found', 'no text found', 'nodataFromFtp', '', false, 'no attachment found');
        // .then(result=>{
        //   return res.status(200).send({success:false, message:'no attachmentContent found'});
        // });
      }
    });
    
    // else{
    //   return sendMailLajuCeria('faizul.j@boontan.net', 'no blob found', 'no text found', false, 'no attachment found');
    // }
    // var ftp = new PromiseFtp();
    // ftp.connect({host:'babeloffice.ddns.net', user: 'faizul', password: 'ryanwong'})
    // .then(function (serverMessage) {
    //   console.log('Server message: '+serverMessage);
    //   return ftp.list('/');
    // }).then(function (list) {
    //   console.log('Directory listing:');
    //   console.dir(list);
    //   return ftp.end();
    // });

    // var emailPromise = sendMailLajuCeria('faizul.j@boontan.net', blob2, textoDownload);
    // return Promise.all([emailPromise]).then(result=>{
    //   return res.status(200).send({test:'test', textoDownload});
    // });
  


  
  // var request = require("request");
  // const corsFn = cors({ origin: true });
  // return corsFn(req, res, () => {
  //     // const optionBody = JSON.parse(JSON.stringify(req.body));
  //   // const optionMethod = req.method;

  //   // token will be expired on 22/10/2021
  //   const option = {
  //       uri: url,
  //       method: 'GET',
  //       // body: Object.assign({}, body),
  //       // json: true
  //   };
  //   request(option, function (error, response) {
  //       res.contentType('application/json');
  //       if (response.statusCode === 200) {
  //         var responseBody = JSON.parse(response.body);
  //         console.log('resStatus:', response.statusCode, response.statusMessage);
  //         // console.log('theRes:')
  //         // to enable cors
  //         res.set({
  //           'content-type': 'application/json',
  //           'warning': "with content type charset encoding will be added by default",
  //           "Access-Control-Allow-Headers" : "Content-Type",
  //           "Access-Control-Allow-Origin": "*",
  //           "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
  //         });
  //         res.status(response.statusCode).send({
  //           success:true, 
  //           responseBody:responseBody,
  //           status: response.statusCode,
  //           // theRes: res,
  //         });
  //       }
  //       else {
  //           console.log('Status:', response.statusCode, response.statusMessage);
  //           console.log('Error:', error);
  //           res.status(response.statusCode).send({ data: 'Fail in authorising recurring payment' });
  //       }
  //   });
  // });
  }
  else{
    console.log('no text found');
    return sendMailLajuCeria('faizul.j@boontan.net', 'no attachmentContent found', 'no attachment found', 'no dataFromFtp', false, 'no attachment found');
  }
});


// // // cron job to add users to sheets
// // exports.addUsersToSheets = functions.https.onRequest((req, res) => {
// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const usersQuery = admin.firestore().collection('users').get();
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   const paymentQuery = admin.firestore().collection('payments')
// //     .where('source', '==', 'freeze')
// //     .get();

// //   return Promise.all([usersQuery, packageQuery, paymentQuery]).then(result=>{
// //     var batch = admin.firestore().batch();
// //     const usersResults = result[0];
// //     const packageResults = result[1];
// //     const freezeResults = result[2];

// //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// //     var pkgMap = {};
// //     packageResults && packageResults.forEach(pkg=>{
// //       pkgMap[pkg.id] = pkg.data();
// //     });

// //     var freezeMap = {};
// //     freezeResults && freezeResults.forEach(freeze=>{
// //       const data = freeze.data();
// //       const freezeFor = data && data.freezeFor;
// //       const freezeType = data && data.freezeType;
// //       const createdAt = data && data.createdAt;
// //       const userId = data && data.userId;
// //       if (userId && freezeFor && createdAt 
// //         && moment(getTheDate(createdAt)).isSameOrAfter(moment('20200801')) 
// //         // && freezeType 
// //         && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20210101'))
// //         && moment(getTheDate(freezeFor)).isBefore(moment('20210401'))
// //       ){
// //         freezeMap[userId] = data;
// //       }
// //     });

// //     var users = [];
// //     usersResults.forEach(user=>{
// //       if (user && user.data()){
// //         const data = user.data();
// //         const cancelledMember = data.cancellationDate? true:false;
// //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// //         // const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// //         const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts: data.membershipStarts? data.membershipStarts:null; 
// //         const packageId = data.packageId||null;
// //         const packageData = packageId && pkgMap[packageId];
// //         const packageName = packageData && packageData.name;
// //         const packageBase = packageData && packageData.base;
// //         // const isKLCCPkg = packageId && isKLCCPackage(packageId);
// //         const isKLCCPkg = packageBase && (packageBase === 'KLCC');
// //         const promoJan2020 = data && data.promoJan2020;
// //         const phone = data && data.phone;
// //         const malaysiaPhoneNum = phone? (typeof phone === 'string')? (phone.charAt(0)==='0')? `6${phone}`:phone:phone:null;
// //         // const isSpecialFreeze2021Data = freezeMap[user.id];
// //         const isContainFreeze = freezeMap[user.id];
// //         const achieveTarget = data && data.achieveTarget;

// //         const userData = [
// //           data.createdAt ? moment(getTheDate(data.createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : null,
// //           data.index ? data.index:'',
// //           user.id,
// //           data.membershipCard ? data.membershipCard : '',
// //           data.gantnerCardNumber ? data.gantnerCardNumber : '',
// //           data.name ? data.name : '',
// //           data.firstName ? data.firstName : '',
// //           data.lastName ? data.lastName : '',
// //           data.nric ? data.nric : '',
// //           data.passport ? data.passport : '',
// //           data.nationality ? data.nationality : '',
// //           data.race ? data.race : '',
// //           data.gender ? data.gender : '',
// //           malaysiaPhoneNum? malaysiaPhoneNum:'',
// //           data.email ? data.email : '',
// //           data.mcId ? data.mcId : '',
// //           // data.packageId ? data.packageId : '',
// //           isKLCCPkg? 'KLCC': ' ',
// //           packageName,
// //           data.paymentMode ? data.paymentMode : '',
// //           membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           data.autoDiff ? data.autoDiff : '',
// //           data.freeMonths ? data.freeMonths : '',
// //           data.freePT ? data.freePT : '',
// //           data.freeGift ? data.freeGift : '',
// //           data.referredByUserId ? data.referredByUserId : '',
// //           data.trainerId ? data.trainerId : '',
// //           data.inductionDate ? moment(getTheDate(data.inductionDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           data.inductionDone ? data.inductionDone : '',
// //           data.cancellationDate ? moment(getTheDate(data.cancellationDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// //           data.cancellationReason ? data.cancellationReason : '',
// //           data.remarks ? data.remarks : '',
// //           data.hasRecurring? data.hasRecurring:'false',
// //           data.isStaff? data.isStaff:'',
// //           data.promoJan2020? data.promoJan2020:'null',
// //           data.promoAug2020? data.promoAug2020: 'null',
// //           data.promoSep2020? data.promoSep2020: 'null',
// //           data.promoMidSep2020? data.promoMidSep2020: 'null',
// //           isContainFreeze? 'yes':'no',
// //           achieveTarget? achieveTarget:'no target yet'
// //           // isSpecialFreeze2021Data? 'yes':'no'
// //         ];

// //         // if (membershipStarts){
// //         // if (data.hasRecurring){
// //           users.push(userData);
// //         // }
// //       }
// //     });

// //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// //     users.sort((a,b)=>{
// //       var dateA = new Date(a[18]);
// //       var dateB = new Date(b[18]);
// //       if (dateA < dateB) {return -1}
// //       if (dateA > dateB) {return 1}
// //       return 0;
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId: CONFIG_SHEET_ID,
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             range: `AUTO USERS3!A2:AQ`,
// //             majorDimension: "ROWS",
// //             values: users
// //           }
// //         ],  // TODO: Update placeholder value.
  
// //         // TODO: Add desired properties to the request body.
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         data: 'data',
// //         // users: users,
// //         // theResponse
// //         // userCount
// //       });
// //     });
// //   });
// // });

// // // functions to add babelLifeTime to sheet
// // exports.addUserBabelLifeTimeToSheets = functions.https.onRequest((req, res) => {

// //   const itemData = req.body;
// //   const startDate = itemData.startDate;
// //   const endDate = itemData.endDate;
// //   const invoiceNumber = itemData.invoiceNumber;
// //   const emailInput = itemData.email;

// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).get():
// //   admin.firestore().collection('users').get();
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   const paymentMembershipQuery = admin.firestore().collection('payments')
// //   .where('type', '==', 'membership')
// //   .get();
// //   // for vend
// //   // const vendSalesQuery = admin.firestore().collection('vendSalesV3').get();
// //   const vendSalesQuery = admin.firestore().collection('vendSales')
// //   // temporary
// //   // .where('customer_id', '==', '0af7b240-aba0-11e7-eddc-f6130f0b69a5')
// //   // .where('invoice_number', '==', invoiceNumber)
// //   .get();
// //   const vendProductsQuery = admin.firestore().collection('vendProducts')
// //   .get();
// //   // for gantner
// //   const gantnerQuery = admin.firestore().collection('gantnerLogsByUser').get();

// //   return Promise.all([usersQuery, packageQuery, paymentMembershipQuery, 
// //     vendSalesQuery, vendProductsQuery, gantnerQuery
// //   ]).then(result=>{
// //     var batch = admin.firestore().batch();
// //     const usersResults = result[0];
// //     const packageResults = result[1];
// //     const paymentResults = result[2];
// //     const vendSalesResults = result[3];
// //     const vendProductsResults = result[4];
// //     const gantnerResults = result[5];

// //     const timestamp = admin.firestore.FieldValue.serverTimestamp();
// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// //     var pkgMap = {};
// //     packageResults && packageResults.forEach(pkg=>{pkgMap[pkg.id]=pkg.data()});

// //     var vendProdMap = {};
// //     vendProductsResults && vendProductsResults.forEach(doc=>{
// //       const data = doc.data();
// //       const productId = data && data.id;
// //       const product_type = data && data.product_type;
// //       const product_type_id = product_type && product_type.id;
// //       const product_type_name = product_type && product_type.name;
// //       const active = data && data.active;
// //       //if (active){
// //         vendProdMap[productId]=data;
// //       //}
// //     });

// //     var vendSalePTMap = {};
// //     var vendSalePTArray = [];

// //     var vendSaleRetailMap = {};
// //     var vendSaleRetailArray = [];

// //     var vendSaleAcademyMap = {};
// //     var vendSaleAcademyArray = [];

// //     var vendSaleDanceMap = {};
// //     var vendSaleDanceArray = [];

// //     vendSalesResults && vendSalesResults.forEach(doc=>{
// //       const data = doc.data();
// //       const status = data && data.status;
// //       const register_sale_products = data && data.register_sale_products;
// //       const created_at = data && data.created_at;
// //       const customer_id = data && data.customer_id;

// //       if (created_at && moment(getTheDate(created_at)).isSameOrBefore(moment(endDate))
// //         && moment(getTheDate(created_at)).isSameOrAfter(moment(startDate)) && status && status === 'CLOSED'){
// //           register_sale_products && register_sale_products.forEach(item=>{
// //             const product_id = item.product_id;
// //             const price_total = item.price_total;
// //             const productData = vendProdMap[product_id];
// //             const product_type = productData && productData.product_type;
// //             const product_type_name = product_type && product_type.name;
// //             const product_type_id = product_type && product_type.id;
// //             // product_type_name = Personal Training
// //             if (product_type_id === '0af7b240-aba0-11e7-eddc-dbd8811589b9'){
// //               vendSalePTArray = vendSalePTMap[customer_id]||[];
// //               vendSalePTArray.push(data);
// //               vendSalePTMap[customer_id]=vendSalePTArray;
// //             }
// //             // product_type_name = RETAIL
// //             else if (product_type_id === '0af7b240-aba0-11e9-fb5b-d429826c99a8'){
// //               vendSaleRetailArray = vendSaleRetailMap[customer_id]||[];
// //               vendSaleRetailArray.push(data);
// //               vendSaleRetailMap[customer_id]=vendSaleRetailArray;
// //             }
// //             // for academy
// //             else if (product_type_id === '2c0b2dbc-7d5b-4740-051f-4459f8ff2a64'){
// //               vendSaleAcademyArray = vendSaleAcademyMap[customer_id]||[];
// //               vendSaleAcademyArray.push(data);
// //               vendSaleAcademyMap[customer_id]=vendSaleAcademyArray;
// //             }
// //             // for babel dance & dance
// //             else if (product_type_id === '0af7b240-aba0-11e9-fb5b-d4298b938f64' || product_type_id === 'da1dbf59-2a2f-9295-67b5-bb39941e87a0'){
// //               vendSaleDanceArray = vendSaleDanceMap[customer_id]||[];
// //               vendSaleDanceArray.push(data);
// //               vendSaleDanceMap[customer_id]=vendSaleDanceArray;
// //             }

// //           });
// //       }

// //     });

// //     // var paymentMap = {};
// //     // var paymentMapArray = [];
// //     // var joinMapTotalPrice = {};
// //     var paymentsForUserId = [];
// //     var paymentsByUserId = {};
    
// //     paymentResults && paymentResults.forEach(doc=>{
// //       const data = doc.data();
// //       const createdAt = data && data.createdAt;
// //       const type = data && data.type;
// //       const source = data && data.source;
// //       const totalPrice = data && data.totalPrice;
// //       const userId = data && data.userId;
     
// //       if (userId && source
// //         && createdAt && moment(getTheDate(createdAt)).isSameOrBefore(moment(endDate))
// //         && moment(getTheDate(createdAt)).isSameOrAfter(moment(startDate))
// //       ){
// //         paymentsForUserId = paymentsByUserId[userId] || [];
// //         paymentsForUserId.push(data);
// //         paymentsByUserId[userId] = paymentsForUserId;
// //         // paymentMap[userId]=data;
// //         // paymentMapArray.push(paymentMap[userId]);
// //         // joinMapTotalPrice[userId]=data;
// //       }
// //     })

// //     var gantnerLogsForUserId = [];
// //     var gantnerLogsByUserId = {};

// //     gantnerResults && gantnerResults.forEach(doc=>{
// //       if (doc.id && doc.data()){
// //         gantnerLogsByUserId[doc.id]=doc.data();
// //       }
// //     });

// //     // console.log('gantnerLogsByUserId1: ', gantnerLogsByUserId);

// //     var users = [];

// //     usersResults.forEach(user=>{
// //       if (user && user.data()){
// //         const data = user.data();
// //         const cancelledMember = data.cancellationDate? true:false;
// //         const vendCustomerId = data && data.vendCustomerId;
// //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// //         const membershipEndsMoment = autoMembershipEnds? moment(getTheDate(autoMembershipEnds)): membershipEnds? moment(getTheDate(membershipEnds)):null;
// //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// //         // const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// //         const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts: data.membershipStarts? data.membershipStarts:null; 
// //         const packageId = data.packageId||null;
// //         const packageData = packageId && pkgMap[packageId];
// //         const packageName = packageData && packageData.name;
// //         // const isKLCCPkg = packageId && isKLCCPackage(packageId);
// //         // const promoJan2020 = data && data.promoJan2020;
// //         const phone = data && data.phone;
// //         const malaysiaPhoneNum = phone? (typeof phone === 'string')? (phone.charAt(0)==='0')? `6${phone}`:phone:phone:null;
// //         const joinDate = data && data.joinDate;
// //         //const joinTotalPrice = joinMapTotalPrice[user.id];
      
// //         var vendPTTotalPrice = 0;
// //         const vendPTData = vendSalePTMap[vendCustomerId];
// //         vendPTData && vendPTData.forEach(item=>{
// //           const register_sale_payments = item.register_sale_payments;
// //           register_sale_payments && register_sale_payments.forEach(item2=>{
// //             const amount = item2.amount;
// //             vendPTTotalPrice += amount;
// //           })
// //         });

// //         var vendRetailTotalPrice = 0;
// //         const vendRetailData = vendSaleRetailMap[vendCustomerId];
// //         vendRetailData && vendRetailData.forEach((item, index, array)=>{
// //           const register_sale_products = item.register_sale_products;
// //           const vendId = item.id;
// //           // register_sale_products && register_sale_products.forEach(item2=>{
// //           //   const amount = item2.price_total;
// //           //   vendRetailTotalPrice += parseFloat(amount);
// //           // });
// //           const register_sale_payments = item.register_sale_payments;
// //           register_sale_payments && register_sale_payments.forEach(item2=>{
// //             const amount = item2.amount;
// //             // console.log('theamount: ', amount);
// //             // console.log('thei: ', index);
// //             // // console.log('array: ', array);
// //             // console.log('arraylength: ', array.length);
// //             // if (vendId && array[index].length<1){
// //             //   vendRetailTotalPrice += amount;
// //             // }
          
// //             // check if the previous vendId is the same as current vendId
// //             if (vendId && array.length>1 && index>0){
// //               if (array[index-1].id === vendId){
// //                 vendRetailTotalPrice = amount;
// //               }
// //               else{
// //                 vendRetailTotalPrice += amount;
// //               }
// //             }
// //             else{
// //               vendRetailTotalPrice += amount;
// //             }
            
// //           // });
// //             const line_items = item.line_items;
// //             line_items && line_items.forEach(item3=>{
// //               const amount = item3.price_total;
// //               vendRetailTotalPrice += amount;
// //             });
// //           });
// //         });
// //         // console.log('vendRetailTotalPrice: ', vendRetailTotalPrice);
// //         var vendAcademyTotalPrice = 0;
// //         const vendAcademyData = vendSaleAcademyMap[vendCustomerId];
// //         vendAcademyData && vendAcademyData.forEach(item=>{
// //           const register_sale_payments = item.register_sale_payments;
// //           register_sale_payments && register_sale_payments.forEach(item2=>{
// //             const amount = item2.amount;
// //             vendAcademyTotalPrice += amount;
// //           })
// //         });

// //         var vendDanceTotalPrice = 0;
// //         const vendDanceData = vendSaleDanceMap[vendCustomerId];
// //         vendDanceData && vendDanceData.forEach(item=>{
// //           const register_sale_payments = item.register_sale_payments;
// //           register_sale_payments && register_sale_payments.forEach(item2=>{
// //             const amount = item2.amount;
// //             vendDanceTotalPrice += amount;
// //           })
// //         });

// //         // calculate for vend personal training
// //         // register_sale_payments && register_sale_payments.forEach(item=>{
// //         //   const amount = item.amount;
// //         //   vendPTTotalPrice += amount;
// //         //      // temporarily
// //         //   testRegister_sale_payments.push(item);
// //         // });

// //         const paymentMembershipData = paymentsByUserId[user.id];
// //         var totalFreezeCount = 0;
// //         var totalActiveCount = 0;
// //         var totalPurchaseOnline = 0;
// //         var totalPurchaseVend = 0;
        
// //         paymentMembershipData && paymentMembershipData.forEach(data=>{
// //           const source = data && data.source;
// //           const totalPrice = data && data.totalPrice;
// //           console.log('totalPrice: ', totalPrice);
// //           const status = data && data.status;
// //           const quantity = (data && data.quantity)? data.quantity:1;
// //           const renewalTerm = (data && data.renewalTerm)? data.renewalTerm:'month';
// //           if (source && source === 'freeze'){
// //             totalFreezeCount+=1;
// //           }
// //           else if (source && (source === 'vend' || source === 'adyen' || source === 'pbonline' || source === 'join' || source === 'refer'
// //           || source === 'luckyDraw' || source === 'promo' || source === 'free' || source === 'complimentary' || source === 'jfr')){
// //             if (renewalTerm === 'month' || 'monthly'){totalActiveCount+=1*quantity}
// //             else if (renewalTerm === 'year' || renewalTerm === 'yearly'){
// //               totalActiveCount+=12*quantity; // add 12 months
// //             }
// //             else if (renewalTerm === 'biyear' || renewalTerm === 'biyearly'){
// //               totalActiveCount+=6*quantity; // add 6 months
// //             }
// //             else if (renewalTerm === 'quarterly'){
// //               totalActiveCount+=3*quantity; // add 3 months
// //             }
// //             else if (renewalTerm === '4monthly'){
// //               totalActiveCount+=4*quantity; // add 4 months
// //             }
// //           }
// //           // to count total in adyen & pbonline
// //           if (source && (source === 'adyen' || source === 'pbonline') && status && status === 'CLOSED'){
// //             totalPurchaseOnline+=parseFloat(totalPrice);
// //           }
// //           // todo:layby?
// //           else if (source && (source === 'vend') && status && (status === 'CLOSED' || status === 'CONFIRM')){
// //             totalPurchaseVend+=parseFloat(totalPrice);
// //             console.log('totalPurchaseVend: ', totalPurchaseVend);
// //           }
// //         });

// //         const prepaidMonths = 
// //           // (membershipStarts && membershipEndsMoment && cancelledMember)?
// //           // ((moment(getTheDate(data.cancellationDate)).diff(membershipEndsMoment, 'months', true))) : 
// //           (membershipStarts && membershipEndsMoment)? (membershipEndsMoment.diff(moment(endDate), 'months', true)):'null';

// //         const activeMonths = 
// //           // (membershipStarts && membershipEndsMoment && cancelledMember)?  
// //           // (moment(getTheDate(data.cancellationDate)).diff(membershipEndsMoment, 'months', true) - totalFreezeCount) :
// //           (membershipStarts && membershipEndsMoment)? 
// //           ((membershipEndsMoment.diff(moment(getTheDate(membershipStarts)), 'months', true)) - totalFreezeCount):'null';

// //         const cancelPeriodMonths = cancelledMember? 
// //           moment(getTheDate(data.cancellationDate)).diff(membershipEndsMoment, 'months', true) :
// //           'null';

// //         const gantnerData = gantnerLogsByUserId[user.id];
// //         // console.log('gantnerData: ', gantnerData);
// //         var visitCount = (gantnerData && Object.keys(gantnerData).length)||'0';

// //         const userData = [
// //           user.id,
// //           data.name ? data.name : '',
// //           data.email ? data.email : '',
// //           malaysiaPhoneNum? malaysiaPhoneNum:'',
// //           '', // todo: Joining Promo - 1st package name (check remark/notes from vendSale?)
// //           packageName,
// //           '', // first membership transaction date from vend and adyen?
// //           // '', // first membership source?
// //           joinDate? moment(getTheDate(joinDate)).format('YYYY-MM-DD'):'null',
// //           membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY-MM'):'null', // membership month start
// //           membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY-MM-DD'):'null',
// //           membershipEndsMoment? membershipEndsMoment.format('YYYY-MM-DD'):'null',
// //           data.cancellationDate? moment(getTheDate(data.cancellationDate)).format('YYYY-MM-DD'):'null',
// //           cancelPeriodMonths, // cancel date - end date
// //           prepaidMonths, // for prepaid month, end date - today
// //           activeMonths, // active month
// //           visitCount, // for total visit
// //           totalFreezeCount? totalFreezeCount:'0',
// //           totalActiveCount? totalActiveCount:'0',
// //           totalPurchaseOnline? parseFloat(totalPurchaseOnline).toFixed(2):'0', // Online Membership (adyen, pbonline)
// //           totalPurchaseVend? parseFloat(totalPurchaseVend).toFixed(2):'0', // vend transaction
// //           vendPTTotalPrice? parseFloat(vendPTTotalPrice).toFixed(2):'0', // vend transaction for personal training
// //           '', // adyTotalPrice
// //           vendRetailTotalPrice? parseFloat(vendRetailTotalPrice).toFixed(2):'0', // vend retails
// //           '', // adyTotalPrice
// //           vendAcademyTotalPrice? parseFloat(vendAcademyTotalPrice).toFixed(2):'0', // vend academy
// //           vendDanceTotalPrice? parseFloat(vendDanceTotalPrice).toFixed(2):'0', // vend dance
// //         ];

// //         // if (membershipStarts){
// //         // if (data.hasRecurring){
// //           users.push(userData);
// //         // }
// //       }
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId: CONFIG_SHEET_ID,
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             range: `babelLifeTime!A2:AO`,
// //             majorDimension: "ROWS",
// //             values: users
// //           }
// //         ],  // TODO: Update placeholder value.
  
// //         // TODO: Add desired properties to the request body.
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         // gantnerLogsByUserId,
// //         // vendRetailTotalPrice,
// //         // CONFIG_SHEET_ID,
// //         // vendSalePTMap
// //         // vendSaleRetailMap,
// //         // vendSaleAcademyMap,
// //         // vendSaleDanceMap,
// //         // vendProdMap,
// //         // vendSalePTMapTest:vendSalePTMap['023c72a6-e9a0-11eb-e2fd-70fb31c9b896'].register_sale_payments,
// //         // vendSalePTMap,
// //         // testRegister_sale_payments
// //         // paymentsByUserId
// //         // data: 'data',
// //         // users: users,
// //         // theResponse
// //         // userCount
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false, error
// //       });
// //     })
// //   });
// // });



// // exports.addAllMembershipHistoryToSheet = functions.https.onRequest((req, res) => {
// //   const usersQuery = admin.firestore().collection('users')
// //     // .where('email', '==', 'roshankanesan90@gmail.com')
// //     .get();
// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const packageQuery = admin.firestore().collection('packages').get();
// //   const paymentQuery = admin.firestore().collection('payments')
// //     // .where('userId', '==', '1XrR1zRiUoJORRfdTo3z')
// //     .where('type', '==', 'membership')
// //     // .where('paid', '==', true)
// //     // .where('')
// //     //.where('createdAt', '>=', moment('20200630').startOf('day').toDate())
// //     .get();
// //   // const freezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();


// //   return Promise.all([usersQuery, packageQuery, paymentQuery]).then(result=>{
// //     var batch = admin.firestore().batch();
// //     const usersResults = result[0];
// //     const packageResults = result[1];
// //     const paymentResults = result[2];

// //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// //     var pkgMap = {};
// //     packageResults && packageResults.forEach(pkg=>{
// //       pkgMap[pkg.id] = pkg.data();
// //     });

// //     var users = [];
// //     var paymentMap = {};
// //     var freezeMap = {};
// //     var freeMap = {};
// //     var paymentArray = [];
// //     var freezeArray = [];

// //     // paymentResults && paymentResults.forEach(payment=>{
// //     //   const data = payment.data();
// //     //   const createdAt = data.createdAt;
// //     //   const totalPrice = data.totalPrice;
// //     //   const quantity = data.quantity||1;
// //     //   const userId = data.userId;
// //     //   const packageId = data.packageId||null;
// //     //   const source = data.source;
// //     //   const freezeFor = data.freezeFor;
      
// //     //   // for free
// //     //   if (packageId && parseInt(totalPrice)===0 && moment(getTheDate(createdAt)).isSameOrAfter(moment().subtract(1, 'months'))){
// //     //     paymentMap[userId] = data;
// //     //   }
// //     //   if (source && source === 'freeze' && freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment().subtract(1,'months').add(1, 'days'))){
// //     //     freezeMap[userId] = data;
// //     //   }
// //     // });

// //     var paymentsForUserId = [];
// //     var paymentsByUserId = {};
// //     var payments = {};
    
// //     var paymentFreezeForUserId = [];
// //     var paymentFreezeByUserId = {};

// //     var paymentFreezeTerminatedForUserId = [];
// //     var paymentFreezeTerminatedByUserId = {};

// //     var paymentFreeForUserId = [];
// //     var paymentFreeByUserId = {};

// //     paymentResults.forEach(payment=>{
// //       if (payment && payment.data()){
// //         const data = payment.data();
// //         const createdAt = data.createdAt? data.createdAt:null;
// //         const type = data && data.type;
// //         const userId = data && data.userId;
// //         const status = data && data.status;
// //         const source = data && data.source;
// //         const renewalTerm = data && data.renewalTerm;
// //         const quantity = data && (data.quantity?data.quantity:1);
// //         const transactionId = data && data.transactionId;
// //         const vendSaleId = data && data.vendSaleId;
// //         const packageId = data && data.packageId;
// //         const packageData = pkgMap[packageId];
// //         const packageName = packageData && packageData.name;
// //         const packageBase = packageData && packageData.base;
// //         var totalPrice = data && data.totalPrice;

// //         // store the payment
// //         if((status === 'CLOSED' || status === 'LAYBY_CLOSED') && type === 'membership' && userId &&
// //         source && (source === 'vend' || source === 'adyen' || source === 'pbonline')
// //        ){

// //         // store yearly package
// //         if (renewalTerm && (renewalTerm === 'yearly'||renewalTerm === 'year')){
// //           paymentsForUserId = paymentsByUserId[userId] || [];
// //           for (var i = 0; i< quantity*12; i++){
// //             paymentsForUserId.push({
// //               createdAt:moment(getTheDate(createdAt)).add(i, 'months'),
// //               paymentDate:createdAt,
// //               source, transactionId, vendSaleId, 
// //               visitLeft: (quantity*12) - i,
// //               visitMax: quantity*12,
// //               packageName, totalPrice,
// //               pricePermonth:(totalPrice/(quantity*12)),
// //               cycle:`${i+1}/${quantity*12}`,
// //               cycleNumber:i+1,
// //               quantity, packageBase
// //             });
// //           }
// //           paymentsByUserId[userId] = paymentsForUserId;
// //         }
// //         else if (renewalTerm && (renewalTerm === 'biyearly'||renewalTerm === 'biyear')){
// //           paymentsForUserId = paymentsByUserId[userId] || [];
// //           for (var j = 0; j< quantity*6; j++){
// //             paymentsForUserId.push({
// //               createdAt:moment(getTheDate(createdAt)).add(j, 'months'),
// //               paymentDate:createdAt,
// //               source, transactionId, vendSaleId,
// //               visitLeft: quantity*6 - j,
// //               visitMax: quantity*6,
// //               packageName, totalPrice, 
// //               pricePermonth:(totalPrice/(quantity*6)),
// //               cycle:`${j+1}/${quantity*6}`,
// //               cycleNumber:j+1,
// //               quantity, packageBase
// //             });
// //           }
// //           paymentsByUserId[userId] = paymentsForUserId;
// //         }
// //         else if (renewalTerm && (renewalTerm === 'quarterly')){
// //           paymentsForUserId = paymentsByUserId[userId] || [];
// //           for (var k = 0; k< quantity*3; k++){
// //             paymentsForUserId.push({
// //               createdAt:moment(getTheDate(createdAt)).add(k, 'months'),
// //               paymentDate:createdAt,
// //               source, transactionId, vendSaleId,
// //               visitLeft: quantity*3 - k,
// //               visitMax: quantity*3,
// //               packageName, totalPrice, 
// //               pricePermonth:(totalPrice/(quantity*3)),
// //               cycle:`${k+1}/${quantity*3}`,
// //               cycleNumber:k+1,
// //               quantity, packageBase
// //             });
// //           }
// //           paymentsByUserId[userId] = paymentsForUserId;
// //         }
// //         else if (renewalTerm && (renewalTerm === '4monthly')){
// //           paymentsForUserId = paymentsByUserId[userId] || [];
// //           for (var l = 0; l< quantity*4; l++){
// //             paymentsForUserId.push({
// //               createdAt:moment(getTheDate(createdAt)).add(l, 'months'),
// //               paymentDate:createdAt,
// //               source, transactionId, vendSaleId,
// //               visitLeft: quantity*4 - l,
// //               visitMax: quantity*4,
// //               packageName, totalPrice, 
// //               pricePermonth:(totalPrice/(quantity*4)),
// //               cycle:`${l+1}/${quantity*4}`,
// //               cycleNumber: l+1,
// //               quantity, packageBase
// //             });
// //           }
// //           paymentsByUserId[userId] = paymentsForUserId;
// //         }
// //         else if (renewalTerm && (renewalTerm === 'month'||renewalTerm === 'monthly')){
// //           paymentsForUserId = paymentsByUserId[userId] || [];
        
// //           if(totalPrice && (totalPrice === 0 || totalPrice === '0.00' || totalPrice === '0')){
// //           paymentsForUserId.push({
// //             createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
// //             paymentDate:createdAt,
// //             source, transactionId, vendSaleId,
// //             visitLeft: 1,
// //             visitMax: 1,
// //             packageName, totalPrice, 
// //             pricePermonth:(totalPrice/(quantity)),
// //             cycleNumber:1, packageBase,
// //             // cycle:`${m+1}/${quantity}`,
// //             quantity,
// //             status: 'reward / free'
// //           });
// //           }
// //           else{
// //             for (var m = 0; m< quantity; m++){
// //               paymentsForUserId.push({
// //                 createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
// //                 paymentDate:createdAt,
// //                 source, transactionId, vendSaleId,
// //                 visitLeft: 1,
// //                 visitMax: 1,
// //                 packageName, totalPrice, 
// //                 pricePermonth:(totalPrice/(quantity)),
// //                 cycle:`${m+1}/${quantity}`,
// //                 cycleNumber:m+1,
// //                 quantity, packageBase
// //               });
// //             }
// //           }
// //           paymentsByUserId[userId] = paymentsForUserId;
// //         }
// //       }
// //       else if (source && source === 'freezeTerminate'){
// //         paymentFreezeTerminatedForUserId = paymentFreezeTerminatedByUserId[userId] || [];
// //         paymentFreezeTerminatedForUserId.push(data);
// //         paymentFreezeTerminatedByUserId[userId] = paymentFreezeTerminatedForUserId;
// //       }
// //       else if (source && source === 'freeze'){
// //         paymentFreezeForUserId = paymentFreezeByUserId[userId] || [];
// //         for (var n = 0; n<quantity; n++){
// //           paymentFreezeForUserId.push(data);
// //           paymentFreezeByUserId[userId] = paymentFreezeForUserId;
// //           paymentFreezeByUserId[userId].freezeFor = data && data.freezeFor && moment(getTheDate(data.freezeFor)).add(n, 'months')
// //           paymentFreezeByUserId[userId].quantity = quantity;
// //         }
// //       }
// //       else if (source && (source === 'join' || source === 'luckyDraw' || source === 'promo' || source === 'free' || source === 'complimentary' || source === 'jfr' || source === 'refer')){
// //         paymentFreeForUserId = paymentFreeByUserId[userId] || [];
// //         paymentFreeForUserId.push(data);
// //         paymentFreeByUserId[userId] = paymentFreeForUserId;
// //         paymentFreeByUserId[userId].createdAt = data && data.createdAt && moment(getTheDate(data.createdAt))
// //       }
// //     }
// //     else{
// //       // console.log('not related data: ', data);
// //     }
// //     // else if (status === 'VOIDED'){
// //     //   console.log(moment(getTheDate(createdAt)).format('YYYY-MM-DD'));
// //     // }

// //     });

// //     usersResults.forEach(user=>{
// //       if (user && user.data()){
// //         const data = user.data();
// //         const userId = user && user.id;
// //         const cancelledMember = data.cancellationDate? true:false;
// //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// //         // const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// //         const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts: data.membershipStarts? data.membershipStarts:null; 
// //         const packageId = data.packageId||null;
// //         const packageData = packageId && pkgMap[packageId];
// //         const packageName = packageData && packageData.name;
// //         const packagePrice = (packageData && packageData.price)? packageData.price:0;
// //         const packagePriceWithTax = (packageData && packageData.priceWithTax)? packageData.priceWithTax:0;
// //         const phone = data && data.phone;
// //         const paymentData = userId && paymentMap[userId];
// //         var freePaymentCount = 0;
// //         const freezeData = userId && freezeMap[userId];
// //         var userFreezeCount = 0;
// //         // freezeData && Object.keys(freezeData).forEach(key=>{
// //         //   // const freezeFor = freezeData[key].freezeFor;
// //         //   // if (freezeFor){
// //         //     userFreezeCount += 1;
// //         //   // }
// //         // });

// //         // paymentData && Object.keys(paymentData).forEach(key=>{
// //         //   // const freezeFor = paymentData[key].freezeFor;
// //         //   // if (freezeFor){
// //         //   //   userFreezeCount += 1;
// //         //   // }
// //         //   freePaymentCount+=1;
// //         // });

// //         // paymentData && paymentData.forEach(payment=>{
// //         //   const createdAt = payment.createdAt;
// //         //   const totalPrice = payment.totalPrice;
// //         //   const status = payment.status;

// //         //   if ((status === 'CLOSED') && (parseInt(totalPrice) === 0) && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().subtract(1, 'months'))){
// //         //     freePaymentCount+=1;
// //         //   }
// //         // });
        
// //         // const freezeData = userId && freezeMap[userId];
// //         // freezeData && freezeData.forEach(freeze=>{
// //         //   // if more than today
// //         //   const freezeFor = freeze.freezeFor;
// //         //   if (moment.getTheDate(freezeFor).isSameOrAfter(moment())){
// //         //     userFreezeCount += 1;
// //         //   }
// //         // });

// //         const freeAccessData = paymentFreeByUserId[userId];
// //         const freezeUserData = paymentFreezeByUserId[userId];
// //         const paymentUserData = paymentsByUserId[userId];
// //         const freezeTerminateUserData = paymentFreezeTerminatedByUserId[userId];

// //         freeAccessData && freeAccessData.forEach(free=>{
// //           const createdAt = free.createdAt;
// //           if (createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().subtract(1, 'days'))){
// //             freePaymentCount+=1;
// //           }
          
// //         });
// //         freezeUserData && freezeUserData.forEach(freeze=>{
// //           const freezeFor = freeze.freezeFor;
// //           if (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment().subtract(1, 'days'))){
// //             userFreezeCount += 1;
// //           }
// //         });

// //         paymentUserData && paymentUserData.forEach(payment=>{
// //           const createdAt = payment.createdAt;
// //           const totalPrice = payment.totalPrice;
// //           if (createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().subtract(1, 'days')) && parseInt(totalPrice)===0){
// //             freePaymentCount+=1;
// //           }
// //         });

// //         var MonthDiff = 0;
// //         var totalDiffWithoutFreeze = 0;
// //         var totalPackagePrice = 0;
// //         // user monthDiff 
// //         if (membershipStarts && autoMembershipEnds){
// //           MonthDiff = Math.max(moment(getTheDate(autoMembershipEnds)).diff(moment(), 'months'));
// //           totalDiffWithoutFreeze = MonthDiff - userFreezeCount - freePaymentCount;
// //           // check if contain freeze
// //           totalPackagePrice = totalDiffWithoutFreeze * parseFloat(packagePrice);
// //         }

// //         // const paymentData = paymentMap[userId]||null;
// //         // const pricePerMonth = 
// //         // console.log('monthDiff: ', monthsDiff);
// //         // console.log('currentMemberMonthDiff: ', currentMemberMonthDiff);
// //         // // console.log('paymentData: ', paymentData);

// //         // var userPaymentArrays = [];
// //        if ((autoMembershipEnds||membershipEnds) && membershipStarts && !cancelledMember){
// //         const userData = [
// //           data.name? data.name:'',
// //           data.email? data.email:'',
// //           data.phone? data.phone:'',
// //           packageName? packageName:'',
// //           packagePrice? packagePrice:'0',
// //           userFreezeCount? userFreezeCount:'0',
// //           freePaymentCount? freePaymentCount:'0',
// //           MonthDiff? MonthDiff:'0',
// //           totalDiffWithoutFreeze? totalDiffWithoutFreeze:'0',
// //           totalPackagePrice? totalPackagePrice:'0'
// //           // membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY-MM-DD'):'',
        
// //         ];
// //         users.push(userData);
// //        }
// //       }
// //     });

// //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// //     // users.sort((a,b)=>{
// //     //   var dateA = new Date(a[18]);
// //     //   var dateB = new Date(b[18]);
// //     //   if (dateA < dateB) {return -1}
// //     //   if (dateA > dateB) {return 1}
// //     //   return 0;
// //     // });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId: CONFIG_SHEET_ID,
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             range: `AUTO USERS4!A3:AX`,
// //             majorDimension: "ROWS",
// //             values: users
// //           }
// //         ],  // TODO: Update placeholder value.
  
// //         // TODO: Add desired properties to the request body.
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         // users: users,
// //         // theResponse
// //         // userCount
// //       });
// //     });
// //   });
// // });

// // cron job to add number of visitors to sheets
// exports.addVisitorReportToSheets = functions.https.onRequest((req, res) => {
//   const usersQuery = admin.firestore().collection('users').get();

//   return Promise.all([usersQuery]).then(result=>{
//     var batch = admin.firestore().batch();
//     const usersResults = result[0];

//     const timestamp = admin.firestore.FieldValue.serverTimestamp();

//     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
//     // const startOfMonth = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');
//     // const endOfMonth = moment('20200731').tz('Asia/Kuala_Lumpur').startOf('day');
//     // const dayDiff = endOfMonth.diff(startOfMonth, 'days');
//     // console.log('dayDiff: ', dayDiff);

//     var sheetReport = [];
//     var visitorCountTTDI = 0;
//     var visitorCountKLCC = 0;
//     var visitorCountNonRegister = 0;

//     usersResults.forEach(user=>{
//       if (user && user.data()){
//         const data = user.data();
//         const isTodayJoinDate = (data && data.joinDate)? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').startOf('day').isSameOrAfter(startOfTodayMoment):false;
//         // const isTodayJoinDate = (data && data.joinDate)? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').startOf('day').isSame(moment('2020-09-07').startOf('day')):false;
//         const firstJoinVisit = data && data.firstJoinVisit;
        
//         // for (var i = 0; i<dayDiff; i++){

//         // }

//         // var sheetData = [

//         // ]
//         // for daily
//         if (isTodayJoinDate && firstJoinVisit && firstJoinVisit==='TTDI'){
//           visitorCountTTDI += 1;
//         }
//         else if (isTodayJoinDate && firstJoinVisit && firstJoinVisit==='KLCC'){
//           visitorCountKLCC += 1;
//         }
//         // for visitors that created from vend (not created from the registration)
//         else if (isTodayJoinDate){
//           visitorCountNonRegister += 1;
//         }
//       }
//     });

//     const getSheetPromise = getGoogleSheetPromise({
//       spreadsheetId: CONFIG_SHEET_ID,
//       range: `AUTO VISITOR REPORT COUNT!A2:F`,
//     });
  
//     return getSheetPromise.then((result)=>{
//       console.log('theresult: ', result);
//       const values = result && result.values;
//       const rowsCount = (values && values.length)? values.length:0;
      
//       sheetReport = [[
//         rowsCount + 1,
//         startOfTodayMoment.format('DD/MM/YYYY'),
//         startOfTodayMoment.format('dddd'),
//         visitorCountKLCC, 
//         visitorCountTTDI,
//         // visitorCountNonRegister
//       ]];
      
//       console.log('sheetReport: ', sheetReport);

//       const updateSheetPromise = updateGoogleSheet({
//         spreadsheetId: CONFIG_SHEET_ID,
//         // valueInputOption: 'RAW',
        
//         resource: {
//           // How the input data should be interpreted.
//           valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
//           // The new values to apply to the spreadsheet.
//           data: [
//             {
//               range: `AUTO VISITOR REPORT COUNT!A${rowsCount+2}:F`,
//               majorDimension: "ROWS",
//               values: sheetReport
//             }
//           ],  
//         },

//       });

//       return updateSheetPromise.then((result)=>{
//         // console.log('theresult: ', result);
//         return res.status(200).send({
//           success:true,
//           data: 'data',
//           sheetReport
//         });
//       });
//     });
//   });
// });

// // // cron job to add number of visitors to sheets
// // exports.addmemberReportToSheets = functions.https.onRequest((req, res) => {
// //   const usersQuery = admin.firestore().collection('users').get();
// //   const paymentsQuery = admin.firestore().collection('payments')
// //     .where('source', '==', 'freeze')
// //     .get();

// //   return Promise.all([usersQuery, paymentsQuery]).then(result=>{
// //     var batch = admin.firestore().batch();
// //     const usersResults = result[0];
// //     const paymentsResults = result[1];

// //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //     const startOfMonth = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');
// //     const endOfMonth = moment().tz('Asia/Kuala_Lumpur').startOf('day');
    
// //     const dayDiff = endOfMonth.diff(startOfMonth, 'days');
// //     console.log('dayDiff: ', dayDiff);

// //     var sheetReport = [];
// //     var allUsersCount = 0;
// //     var allUsersWithCreatedAtCount = 0;
// //     var allRegisteredUserCount = 0;
// //     var visitorCount = 0;
// //     var totalVisitorTier1Count = 0; // visitor with join date
// //     var totalVisitorTier2Count = 0; // visitor with created at, without join date
// //     var totalVisitorCount = 0; // combine visitor tier 1 and 2
// //     var visitorCountTTDI = 0;
// //     var visitorCountKLCC = 0;

// //     var activePaidCountTTDI = 0;
// //     var activePaidCountKLCC = 0;

// //     // for termination
// //     var cancelCountTTDI = 0;
// //     var cancelCountKLCC = 0;
// //     var totalCancelCountTTDI = 0
// //     var totalCancelCountKLCC = 0;
// //     var totalCancelComplimentary = 0;
// //     var totalCancelMonthlyAllAccess = 0;
// //     var totalCancelMonthlySingleAccess = 0;
// //     var totalCancel6MAllAccess = 0;
// //     var totalCancelCP290 = 0;
// //     var totalCancel6MRenewal = 0;
// //     var totalCancelComplimentaryPromo = 0;
// //     var totalCancel3MJanPromoAllAccess = 0;
// //     var totalCancel12TermRenewalSingleAccess = 0;
// //     var totalCancelYearlySingleAccess = 0;
// //     var totalCancelCP180 = 0;
// //     var totalCancel3MTermMembershipAllAccess = 0;
// //     var totalCancel6MSingleAccess = 0;
// //     var totalCancelCP210 = 0;
// //     var totalCancelCP310 = 0;
// //     var totalCancel3MJanPromoSingleAccess = 0;
// //     var totalCancel12TermYearlyAllAccess = 0;
// //     var totalCancel3MJan2020PromoSingleAcces = 0;
// //     var totalCancelCP230 = 0;
// //     var totalCancel3MTermSingle = 0;
// //     var totalCancelWithoutPkg = 0;
// //     var totalCancel = 0;
// //     var complimentaryCount = 0;

// //     // for freeze
// //     var totalFreezeCountTTDI = 0;
// //     var totalFreezeCountKLCC = 0;
// //     var totalFreezeCountComplimentary = 0;
// //     var totalFreezeMonthlyAllAccess = 0;
// //     var totalFreezeMonthlySingleAccess = 0;
// //     var totalFreeze6MAllAccess = 0;
// //     var totalFreezeCP290 = 0;
// //     var totalFreeze6MRenewal = 0;
// //     var totalFreezeComplimentaryPromo = 0;
// //     var totalFreeze3MJanPromoAllAccess = 0;
// //     var totalFreeze12TermRenewalSingleAccess = 0;
// //     var totalFreezeYearlySingleAccess = 0;
// //     var totalFreezeCP180 = 0;
// //     var totalFreeze3MTermMembershipAllAccess = 0;
// //     var totalFreeze6MSingleAccess = 0;
// //     var totalFreezeCP210 = 0;
// //     var totalFreezeCP310 = 0;
// //     var totalFreeze3MJanPromoSingleAccess = 0;
// //     var totalFreeze12TermYearlyAllAccess = 0;
// //     var totalFreeze3MJan2020PromoSingleAcces = 0;
// //     var totalFreezeCP230 = 0;
// //     var totalFreeze3MTermSingle = 0;
// //     var totalFreezeWithoutPkg = 0;
// //     var totalFreezeCount = 0;

// //     // for active member
// //     var totalActiveCountKLCC = 0;
// //     var totalActiveCountTTDI = 0;
// //     var totalActiveCountComplimentary = 0;
// //     var totalActiveMonthlyAllAccess = 0;
// //     var totalActiveMonthlySingleAccess = 0;
// //     var totalActive6MAllAccess = 0;
// //     var totalActiveCP290 = 0;
// //     var totalActive6MRenewal = 0;
// //     var totalActiveComplimentaryPromo = 0;
// //     var totalActive3MJanPromoAllAccess = 0;
// //     var totalActive12TermRenewalSingleAccess = 0;
// //     var totalActiveYearlySingleAccess = 0;
// //     var totalActiveCP180 = 0;
// //     var totalActive3MTermMembershipAllAccess = 0;
// //     var totalActive6MSingleAccess = 0;
// //     var totalActiveCP210 = 0;
// //     var totalActiveCP310 = 0;
// //     var totalActive3MJanPromoSingleAccess = 0;
// //     var totalActive12TermYearlyAllAccess = 0;
// //     var totalActive3MJan2020PromoSingleAcces = 0;
// //     var totalActiveCP230 = 0;
// //     var totalActive3MTermSingle = 0;
// //     var totalActiveWithoutPkg = 0;
// //     var totalActiveCount = 0;

// //     // for expired member
// //     var totalExpiredCountKLCC = 0;
// //     var totalExpiredCountTTDI = 0;
// //     var totalExpiredCountComplimentary = 0;
// //     var totalExpiredMonthlyAllAccess = 0;
// //     var totalExpiredMonthlySingleAccess = 0;
// //     var totalExpired6MAllAccess = 0;
// //     var totalExpiredCP290 = 0;
// //     var totalExpired6MRenewal = 0;
// //     var totalExpiredComplimentaryPromo = 0;
// //     var totalExpired3MJanPromoAllAccess = 0;
// //     var totalExpired12TermRenewalSingleAccess = 0;
// //     var totalExpiredYearlySingleAccess = 0;
// //     var totalExpiredCP180 = 0;
// //     var totalExpired3MTermMembershipAllAccess = 0;
// //     var totalExpired6MSingleAccess = 0;
// //     var totalExpiredCP210 = 0;
// //     var totalExpiredCP310 = 0;
// //     var totalExpired3MJanPromoSingleAccess = 0;
// //     var totalExpired12TermYearlyAllAccess = 0;
// //     var totalExpired3MJan2020PromoSingleAcces = 0;
// //     var totalExpiredCP230 = 0;
// //     var totalExpired3MTermSingle = 0;
// //     var totalExpiredWithoutPkg = 0;
// //     var totalExpiredCount = 0;

// //     const freezeMap = {};
// //     var userIdFreezeMap = {};
// //     paymentsResults.forEach(payment=>{
// //       const data = payment.data();
// //       const freezeFor = data && data.freezeFor;
// //       const userId = data && data.userId;
// //       // const isFreezeMonth = freezeFor && moment(getTheDate(freezeFor)).isBetween(startOfMonth.clone().subtract(1, 'days'), endOfMonth.clone().add(1, 'days'));
// //       const isFreezeMonth = freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(startOfMonth.clone().subtract(0, 'days'));
// //       if (isFreezeMonth){
// //         userIdFreezeMap[userId] = data;
// //       }
// //     });

// //     console.log('userIdFreezeMap: ', userIdFreezeMap);

// //     usersResults.forEach(user=>{
// //       if (user && user.data()){
// //         const data = user.data();
// //         const email = data && data.email;
// //         const isCreatedUser = (data && data.createdAt)? moment(getTheDate(data.createdAt)).clone().tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(endOfMonth.clone()):false;
// //         const isTodayJoinDate = (data && data.joinDate)? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').startOf('day').isBetween(startOfMonth.clone().subtract(1,'days'), endOfMonth.clone().add(1, 'days')):false;
// //         // for all member and visitors
// //         const isRegisteredUser = (data && data.joinDate)? moment(getTheDate(data.joinDate)).clone().tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(endOfMonth.clone()):false;
// //         // to calculate total visitor
// //         const isVisitor = (data && data.joinDate)? moment(getTheDate(data.joinDate)).clone().tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(endOfMonth.clone()):false;
// //         const roles = data && data.roles;
// //         const firstJoinVisit = data && data.firstJoinVisit;
// //         const packageId = data && data.packageId;
// //         const isKLCCMember = packageId && isKLCCPackage(packageId); // klcc
// //         const isTTDIMember = packageId && isTTDIPackage(packageId); // ttdi
// //         const membershipEnd = data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// //         const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts? data.membershipStarts:null;
// //         const cancellationDate = data && data.cancellationDate;
// //         // const isRegisteredMember = membershipStarts && startOfMonth.isBetween(moment(getTheDate(membershipStarts)).subtract(1, 'days'), moment(getTheDate(membershipStarts)).add(1, 'months'))
// //         const isExpired = membershipStarts && membershipEnd && endOfMonth.isBefore(moment(getTheDate(membershipEnd)));
        
// //         const freezeData = userIdFreezeMap[user.id];
// //         // console.log('freezeData: ', freezeData);

// //         const isActiveMember = membershipStarts && membershipEnd && moment(getTheDate(membershipEnd)).clone().isSameOrAfter(startOfMonth) && moment(getTheDate(membershipStarts)).clone().isSameOrBefore(startOfMonth);
// //         // const isActiveMember = membershipStarts && membershipEnd && moment(getTheDate(membershipEnd)).clone().isSameOrAfter(startOfMonth);
// //         // new terminated member
// //         const isCancelMember = cancellationDate && moment(getTheDate(cancellationDate)).clone().isBetween(startOfMonth.clone().subtract(1, 'days'), endOfMonth.clone().add(1, 'days'));
// //        // total terminated member
// //         const isTerminatedMember = cancellationDate && moment(getTheDate(cancellationDate)).clone().isSameOrBefore(endOfMonth.clone());
// //         const isComplimentaryPkg = packageId && (packageId === 'yKLfNYOPzXHoAiknAT24');
// //         const isComplimentaryMember = isComplimentaryPkg && !isTerminatedMember && !freezeData;
// //         // const isCancel = cancellationDate;
// //         // const isFreeze = moment(getTheDate(freezeFor)).isBetween(moment(startDateString).clone(), moment(endDateString).clone());

// //         // for daily visitor
// //         // if (isTodayJoinDate && firstJoinVisit && firstJoinVisit==='TTDI'){
// //         //   visitorCountTTDI += 1;
// //         // }
// //         // else if (isTodayJoinDate && firstJoinVisit && firstJoinVisit==='KLCC'){
// //         //   visitorCountKLCC += 1;
// //         // }

// //         // for all users
// //         allUsersCount += 1;
// //         // for all user with createdAt field
// //         if(isCreatedUser){
// //           allUsersWithCreatedAtCount += 1;
// //         }
// //         // for all registered users
// //         if(isRegisteredUser){
// //           allRegisteredUserCount += 1;
// //         }
// //         // for visitor
// //         if (isTodayJoinDate && !roles && (!membershipStarts || moment(getTheDate(membershipStarts)).isSameOrBefore(endOfMonth))){
// //           visitorCount += 1;
// //         }
// //         // for total visitor count tier 1
// //         if (isVisitor && !roles && (!membershipStarts || !moment(getTheDate(membershipStarts)).clone().isSameOrBefore(startOfMonth.clone()))){
// //           totalVisitorTier1Count += 1;
// //         }
// //         // for total visitor count tier 2
// //         if (!isVisitor && !roles && isCreatedUser && (!membershipStarts || !moment(getTheDate(membershipStarts)).clone().isSameOrBefore(startOfMonth.clone()))){
// //           totalVisitorTier2Count += 1;
// //         }
// //         // for total visitor count
// //         if (!roles && (!membershipStarts || !moment(getTheDate(membershipStarts)).clone().isSameOrBefore(startOfMonth.clone()))){
// //           totalVisitorCount += 1;
// //         }

// //         // for new terminated member
// //         if (isKLCCMember && isCancelMember){
// //           cancelCountKLCC += 1;
// //         }
// //         else if (isTTDIMember && isCancelMember){
// //           cancelCountTTDI += 1;
// //         }
        
// //         if (isTerminatedMember){
// //           totalCancel += 1;
// //         }
// //         // for total terminated member
// //         if (isKLCCMember && isTerminatedMember){
// //           totalCancelCountKLCC += 1;
// //         }
// //         else if (isTTDIMember && isTerminatedMember){
// //           totalCancelCountTTDI += 1;
// //         }

// //         // termination for each package
// //         if (isComplimentaryPkg && isTerminatedMember){
// //           totalCancelComplimentary += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='89THMCx0BybpSVJ1J8oz'){ // 6M
// //           totalCancel6MAllAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='BKcaoWGrWKYihS40MpGd'){ // CP290
// //           totalCancelCP290 += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='DjeVJskpeZDdEGlcUlB1'){ // 6M renewal
// //           totalCancel6MRenewal += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='L6sJtsKG68LpEUH3QeD4'){ // complimentary promo
// //           totalCancelComplimentaryPromo += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='LNGWNSdm6kf4rz1ihj0i'){ // 3M JanPromo all access
// //           totalCancel3MJanPromoAllAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='TJ7Fiqgrt6EHUhR5Sb2q'){ // monthly all access
// //           totalCancelMonthlyAllAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='VWEHvdhNVW0zL8ZAeXJX'){ // 12M renewal
// //           totalCancel12TermRenewalSingleAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='WmcQo1XVXehGaxhSNCKa'){ // yearly
// //           totalCancelYearlySingleAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='ZEDcEHZp3fKeQOkDxCH8'){ // CP180
// //           totalCancelCP180 += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='aTHIgscCxbwjDD8flTi3'){ // 3M term all access
// //           totalCancel3MTermMembershipAllAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='duz1AkLuin8nOUd7r66L'){ // 6M single access
// //           totalCancel6MSingleAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='dz8SAwq99GWdEvHCKST2'){ // CP210
// //           totalCancelCP210 += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='eRMTW6cQen6mcTJgKEvy'){ // CP310
// //           totalCancelCP310 += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='k7As68CqGsFbKZh1Imo4'){ // 3M Jan2020 Promo (Single Club)
// //           totalCancel3MJan2020PromoSingleAcces += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='q7SXXNKv83MkkJs8Ql0n'){ // 12m Term (All Clubs)
// //           totalCancel12TermYearlyAllAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='vf2jCUOEeDDiIQ0S42BJ'){ // monthly single access
// //           totalCancelMonthlySingleAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='w12J3n9Qs6LTViI6HaEY'){ // 3M Jan2020 Promo (Single Club).
// //           totalCancel3MJanPromoSingleAccess += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='wpUO5vxWmme7KITqSITo'){ // CP230
// //           totalCancelCP230 += 1;
// //         }
// //         else if (isTerminatedMember && packageId && packageId==='yQFACCzpS4DKcDyYftBx'){ // 3M Term Membership
// //           totalCancel3MTermSingle += 1;
// //         }
// //         else if (isTerminatedMember){
// //           console.log('isterminated with no package', email);
// //           totalCancelWithoutPkg += 1;
// //         }

// //          // for freeze member
// //         if (freezeData){
// //           totalFreezeCount += 1;
// //         }
// //         if (freezeData && isKLCCMember){
// //           totalFreezeCountKLCC += 1;
// //         }
// //         else if(freezeData && isTTDIMember){
// //           totalFreezeCountTTDI += 1;
// //         }

// //         // freeze for each package
// //         if(freezeData && isComplimentaryPkg){ // complimentary
// //           totalFreezeCountComplimentary += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='89THMCx0BybpSVJ1J8oz'){ // 6M
// //           totalFreeze6MAllAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='BKcaoWGrWKYihS40MpGd'){ // CP290
// //           totalFreezeCP290 += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='DjeVJskpeZDdEGlcUlB1'){ // 6M renewal
// //           totalFreeze6MRenewal += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='L6sJtsKG68LpEUH3QeD4'){ // complimentary promo
// //           totalFreezeComplimentaryPromo += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='LNGWNSdm6kf4rz1ihj0i'){ // 3M JanPromo all access
// //           totalFreeze3MJanPromoAllAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='TJ7Fiqgrt6EHUhR5Sb2q'){ // monthly all access
// //           totalFreezeMonthlyAllAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='VWEHvdhNVW0zL8ZAeXJX'){ // 12M renewal
// //           totalFreeze12TermRenewalSingleAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='WmcQo1XVXehGaxhSNCKa'){ // yearly
// //           totalFreezeYearlySingleAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='ZEDcEHZp3fKeQOkDxCH8'){ // CP180
// //           totalFreezeCP180 += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='aTHIgscCxbwjDD8flTi3'){ // 3M term all access
// //           totalFreeze3MTermMembershipAllAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='duz1AkLuin8nOUd7r66L'){ // 6M single access
// //           totalFreeze6MSingleAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='dz8SAwq99GWdEvHCKST2'){ // CP210
// //           totalFreezeCP210 += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='eRMTW6cQen6mcTJgKEvy'){ // CP310
// //           totalFreezeCP310 += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='k7As68CqGsFbKZh1Imo4'){ // 3M Jan2020 Promo (Single Club)
// //           totalFreeze3MJan2020PromoSingleAcces += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='q7SXXNKv83MkkJs8Ql0n'){ // 12m Term (All Clubs)
// //           totalFreeze12TermYearlyAllAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='vf2jCUOEeDDiIQ0S42BJ'){ // monthly single access
// //           totalFreezeMonthlySingleAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='w12J3n9Qs6LTViI6HaEY'){ // 3M Jan2020 Promo (Single Club).
// //           totalFreeze3MJanPromoSingleAccess += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='wpUO5vxWmme7KITqSITo'){ // CP230
// //           totalFreezeCP230 += 1;
// //         }
// //         else if (freezeData && packageId && packageId==='yQFACCzpS4DKcDyYftBx'){ // 3M Term Membership
// //           totalFreeze3MTermSingle += 1;
// //         }
// //         else if (freezeData){
// //           console.log('freeze without package ', email);
// //           totalFreezeWithoutPkg += 1;
// //         }

// //         if (isComplimentaryMember){
// //           complimentaryCount += 1;
// //         }
       
// //         const isActiveMemberWithoutFreezeTerminate = isActiveMember && !freezeData && !isTerminatedMember;

// //         // for active member
// //         if(isActiveMemberWithoutFreezeTerminate){
// //           totalActiveCount += 1;
// //         }
// //         if(isKLCCMember && isActiveMemberWithoutFreezeTerminate){
// //           totalActiveCountKLCC += 1;
// //         }
// //         else if (isTTDIMember && isActiveMemberWithoutFreezeTerminate){
// //           totalActiveCountTTDI += 1;
// //         }
// //         // active for each package
// //         if(isActiveMemberWithoutFreezeTerminate && isComplimentaryPkg){ // complimentary
// //           totalActiveCountComplimentary += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='89THMCx0BybpSVJ1J8oz'){ // 6M
// //           totalActive6MAllAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='BKcaoWGrWKYihS40MpGd'){ // CP290
// //           totalActiveCP290 += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='DjeVJskpeZDdEGlcUlB1'){ // 6M renewal
// //           totalActive6MRenewal += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='L6sJtsKG68LpEUH3QeD4'){ // complimentary promo
// //           totalActiveComplimentaryPromo += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='LNGWNSdm6kf4rz1ihj0i'){ // 3M JanPromo all access
// //           totalActive3MJanPromoAllAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='TJ7Fiqgrt6EHUhR5Sb2q'){ // monthly all access
// //           totalActiveMonthlyAllAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='VWEHvdhNVW0zL8ZAeXJX'){ // 12M renewal
// //           totalActive12TermRenewalSingleAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='WmcQo1XVXehGaxhSNCKa'){ // yearly
// //           totalActiveYearlySingleAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='ZEDcEHZp3fKeQOkDxCH8'){ // CP180
// //           totalActiveCP180 += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='aTHIgscCxbwjDD8flTi3'){ // 3M term all access
// //           totalActive3MTermMembershipAllAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='duz1AkLuin8nOUd7r66L'){ // 6M single access
// //           totalActive6MSingleAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='dz8SAwq99GWdEvHCKST2'){ // CP210
// //           totalActiveCP210 += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='eRMTW6cQen6mcTJgKEvy'){ // CP310
// //           totalActiveCP310 += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='k7As68CqGsFbKZh1Imo4'){ // 3M Jan2020 Promo (Single Club)
// //           totalActive3MJan2020PromoSingleAcces += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='q7SXXNKv83MkkJs8Ql0n'){ // 12m Term (All Clubs)
// //           totalActive12TermYearlyAllAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='vf2jCUOEeDDiIQ0S42BJ'){ // monthly single access
// //           totalActiveMonthlySingleAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='w12J3n9Qs6LTViI6HaEY'){ // 3M Jan2020 Promo (Single Club).
// //           totalActive3MJanPromoSingleAccess += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='wpUO5vxWmme7KITqSITo'){ // CP230
// //           totalActiveCP230 += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate && packageId && packageId==='yQFACCzpS4DKcDyYftBx'){ // 3M Term Membership
// //           totalActive3MTermSingle += 1;
// //         }
// //         else if (isActiveMemberWithoutFreezeTerminate){
// //           console.log('freeze without package ', email);
// //           totalActiveWithoutPkg += 1;
// //         }

// //         const isExpiredMember = isExpired && !isTerminatedMember 
// //           // && (!isComplimentaryPkg || packageId!=='L6sJtsKG68LpEUH3QeD4')
// //         // for expired member
// //         if(isExpiredMember && packageId){
// //           totalExpiredCount += 1;
// //         }
// //         if(isKLCCMember && isExpiredMember){
// //           totalExpiredCountKLCC += 1;
// //         }
// //         else if (isTTDIMember && isExpiredMember){
// //           totalExpiredCountTTDI += 1;
// //         }
// //         // active for each package
// //         if(isExpiredMember && isComplimentaryPkg){ // complimentary
// //           totalExpiredCountComplimentary += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='89THMCx0BybpSVJ1J8oz'){ // 6M
// //           totalExpired6MAllAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='BKcaoWGrWKYihS40MpGd'){ // CP290
// //           totalExpiredCP290 += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='DjeVJskpeZDdEGlcUlB1'){ // 6M renewal
// //           totalExpired6MRenewal += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='L6sJtsKG68LpEUH3QeD4'){ // complimentary promo
// //           totalExpiredComplimentaryPromo += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='LNGWNSdm6kf4rz1ihj0i'){ // 3M JanPromo all access
// //           totalExpired3MJanPromoAllAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='TJ7Fiqgrt6EHUhR5Sb2q'){ // monthly all access
// //           totalExpiredMonthlyAllAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='VWEHvdhNVW0zL8ZAeXJX'){ // 12M renewal
// //           totalExpired12TermRenewalSingleAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='WmcQo1XVXehGaxhSNCKa'){ // yearly
// //           totalExpiredYearlySingleAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='ZEDcEHZp3fKeQOkDxCH8'){ // CP180
// //           totalExpiredCP180 += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='aTHIgscCxbwjDD8flTi3'){ // 3M term all access
// //           totalExpired3MTermMembershipAllAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='duz1AkLuin8nOUd7r66L'){ // 6M single access
// //           totalExpired6MSingleAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='dz8SAwq99GWdEvHCKST2'){ // CP210
// //           totalExpiredCP210 += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='eRMTW6cQen6mcTJgKEvy'){ // CP310
// //           totalExpiredCP310 += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='k7As68CqGsFbKZh1Imo4'){ // 3M Jan2020 Promo (Single Club)
// //           totalExpired3MJan2020PromoSingleAcces += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='q7SXXNKv83MkkJs8Ql0n'){ // 12m Term (All Clubs)
// //           totalExpired12TermYearlyAllAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='vf2jCUOEeDDiIQ0S42BJ'){ // monthly single access
// //           totalExpiredMonthlySingleAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='w12J3n9Qs6LTViI6HaEY'){ // 3M Jan2020 Promo (Single Club).
// //           totalExpired3MJanPromoSingleAccess += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='wpUO5vxWmme7KITqSITo'){ // CP230
// //           totalExpiredCP230 += 1;
// //         }
// //         else if (isExpiredMember && packageId && packageId==='yQFACCzpS4DKcDyYftBx'){ // 3M Term Membership
// //           totalExpired3MTermSingle += 1;
// //         }
// //         else if (isExpiredMember){
// //           console.log('freeze without package ', email);
// //           totalExpiredWithoutPkg += 1;
// //         }
// //       }
// //     });

// //     const getSheetPromise = getGoogleSheetPromise({
// //       spreadsheetId: CONFIG_SHEET_ID,
// //       range: `AUTO MEMBER REPORT COUNT!A2:DT`,
// //     });
    
// //     return getSheetPromise.then((result)=>{
// //       console.log('theresult: ', result);
// //       const values = result && result.values;
// //       const rowsCount = (values && values.length)? values.length:0;
      
// //       sheetReport = [[
// //         rowsCount + 1,
// //         startOfMonth.clone().format('YYYYMMDD'),
// //         allUsersCount,
// //         allUsersWithCreatedAtCount,
// //         allRegisteredUserCount,
// //         // visitorCountKLCC, 
// //         // visitorCountTTDI,
// //         // visitorCount,
// //         totalVisitorTier1Count,
// //         totalVisitorTier2Count,
// //         totalVisitorCount,
// //         complimentaryCount,
// //         // for termination
// //         totalCancel,
// //         totalCancelCountKLCC,
// //         totalCancelCountTTDI,
// //         totalCancelComplimentary,
// //         totalCancelMonthlyAllAccess,
// //         totalCancelMonthlySingleAccess,
// //         totalCancel6MAllAccess,
// //         totalCancelCP290,
// //         totalCancel6MRenewal,
// //         totalCancelComplimentaryPromo,
// //         totalCancel3MJanPromoAllAccess,
// //         totalCancel12TermRenewalSingleAccess,
// //         totalCancelYearlySingleAccess,
// //         totalCancelCP180,
// //         totalCancel3MTermMembershipAllAccess,
// //         totalCancel6MSingleAccess,
// //         totalCancelCP210,
// //         totalCancelCP310,
// //         totalCancel3MJanPromoSingleAccess,
// //         totalCancel12TermYearlyAllAccess,
// //         totalCancel3MJan2020PromoSingleAcces,
// //         totalCancelCP230,
// //         totalCancel3MTermSingle,
// //         totalCancelWithoutPkg,

// //         // for freeze
// //         totalFreezeCount,
// //         totalFreezeCountKLCC,
// //         totalFreezeCountTTDI,
// //         totalFreezeCountComplimentary,
// //         totalFreezeMonthlyAllAccess,
// //         totalFreezeMonthlySingleAccess,
// //         totalFreeze6MAllAccess,
// //         totalFreezeCP290,
// //         totalFreeze6MRenewal,
// //         totalFreezeComplimentaryPromo,
// //         totalFreeze3MJanPromoAllAccess,
// //         totalFreeze12TermRenewalSingleAccess,
// //         totalFreezeYearlySingleAccess,
// //         totalFreezeCP180,
// //         totalFreeze3MTermMembershipAllAccess,
// //         totalFreeze6MSingleAccess,
// //         totalFreezeCP210,
// //         totalFreezeCP310,
// //         totalFreeze3MJanPromoSingleAccess,
// //         totalFreeze12TermYearlyAllAccess,
// //         totalFreeze3MJan2020PromoSingleAcces,
// //         totalFreezeCP230,
// //         totalFreeze3MTermSingle,
// //         totalFreezeWithoutPkg,

// //         // for active
// //         totalActiveCount,
// //         totalActiveCountKLCC,
// //         totalActiveCountTTDI,
// //         totalActiveCountComplimentary,
// //         totalActiveMonthlyAllAccess,
// //         totalActiveMonthlySingleAccess,
// //         totalActive6MAllAccess,
// //         totalActiveCP290,
// //         totalActive6MRenewal,
// //         totalActiveComplimentaryPromo,
// //         totalActive3MJanPromoAllAccess,
// //         totalActive12TermRenewalSingleAccess,
// //         totalActiveYearlySingleAccess,
// //         totalActiveCP180,
// //         totalActive3MTermMembershipAllAccess,
// //         totalActive6MSingleAccess,
// //         totalActiveCP210,
// //         totalActiveCP310,
// //         totalActive3MJanPromoSingleAccess,
// //         totalActive12TermYearlyAllAccess,
// //         totalActive3MJan2020PromoSingleAcces,
// //         totalActiveCP230,
// //         totalActive3MTermSingle,
// //         totalActiveWithoutPkg,

// //         // for expired
// //         totalExpiredCount,
// //         totalExpiredCountKLCC,
// //         totalExpiredCountTTDI,
// //         totalExpiredCountComplimentary,
// //         totalExpiredMonthlyAllAccess,
// //         totalExpiredMonthlySingleAccess,
// //         totalExpired6MAllAccess,
// //         totalExpiredCP290,
// //         totalExpired6MRenewal,
// //         totalExpiredComplimentaryPromo,
// //         totalExpired3MJanPromoAllAccess,
// //         totalExpired12TermRenewalSingleAccess,
// //         totalExpiredYearlySingleAccess,
// //         totalExpiredCP180,
// //         totalExpired3MTermMembershipAllAccess,
// //         totalExpired6MSingleAccess,
// //         totalExpiredCP210,
// //         totalExpiredCP310,
// //         totalExpired3MJanPromoSingleAccess,
// //         totalExpired12TermYearlyAllAccess,
// //         totalExpired3MJan2020PromoSingleAcces,
// //         totalExpiredCP230,
// //         totalExpired3MTermSingle,
// //         totalExpiredWithoutPkg,
        
// //       ]];
      
// //       console.log('sheetReport: ', sheetReport);

// //       const updateSheetPromise = updateGoogleSheet({
// //         spreadsheetId: CONFIG_SHEET_ID,
// //         // valueInputOption: 'RAW',
        
// //         resource: {
// //           // How the input data should be interpreted.
// //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
// //           // The new values to apply to the spreadsheet.
// //           data: [
// //             {
// //               range: `AUTO MEMBER REPORT COUNT!A${rowsCount+2}:DT`,
// //               majorDimension: "ROWS",
// //               values: sheetReport
// //             }
// //           ],  
// //         },

// //       });

// //       return updateSheetPromise.then((result)=>{
// //         // console.log('theresult: ', result);
// //         return res.status(200).send({
// //           success:true,
// //           data: 'data',
// //           sheetReport
        
// //         });
// //       });
// //     });
// //   });
// // });

// // // // // function add class to firebase
// // // // exports.addClass = functions.https.onCall((data, context) => {

// // // //   const name = data.name;
// // // //   const description = data.description;
// // // //   const instructorName = data.instructorName;
// // // //   const maxCapacity = data.maxCapacity;
// // // //   const venue = data.venue;
// // // //   const classDuration = data.classDuration;
// // // //   const availableDate = data.availableDate;
// // // //   const classDate = data.classDate;
// // // //   const expiredDate = data.expiredDate;
// // // //   const vendProductId = data.vendProductId;
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   if(!name || !description || !instructorName || !maxCapacity || !venue || !classDuration
// // // //     || !availableDate || !classDate || !expiredDate || !vendProductId
// // // //     ){
// // // //     console.log('Missing data', name, description, instructorName, maxCapacity, venue, classDuration);
// // // //     return Promise.resolve();
// // // //   }

// // // //   console.log('Adding class...', name);
// // // //   const classDetails = {
// // // //     createdAt : timestamp,
// // // //     active:true,
// // // //     name, description, instructorName, maxCapacity, venue, classDuration, vendProductId,	
// // // //     availableDate: admin.firestore.Timestamp.fromDate(availableDate),
// // // //     classDate: admin.firestore.Timestamp.fromDate(classDate),
// // // //     expiredDate: admin.firestore.Timestamp.fromDate(expiredDate),
// // // //   }

// // // //   return admin.firestore().collection('classes').add(classDetails).then(classRef=>{
// // // //     return classRef.id;
// // // //   }).catch((error)=>{
// // // //     console.log('Error', error.message);
// // // //     return Promise.resolve();
// // // //   });
// // // // });

// // // // exports.addInvoiceForMembership = functions.https.onCall((data, context) => {
// // // //   const email = data.email;
// // // //   const name = data.name;
// // // //   const phone = data.phone;
// // // //   const icNumber = data.icnumber;
// // // //   const refSource = data.refSource;
// // // //   const postcode = data.postcode;
// // // //   const mcId = data.mcId;
// // // //   const vendProductIds = data.vendProductIds;
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   const userData = {
// // // //     createdAt:timestamp,
// // // //     email,
// // // //     name,
// // // //     phone,
// // // //     icNumber,
// // // //     refSource,
// // // //     postcode,
// // // //     mcId,
// // // //   }

// // // //   if(!email || (!vendProductIds) || (vendProductIds && !(Object.keys(vendProductIds).length > 0))){
// // // //     console.log('Missing data', email, name, phone, vendProductIds);
// // // //     return Promise.resolve();
// // // //   }

// // // //   console.log('Adding invoice...', email, name, phone, vendProductIds);

// // // //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// // // //   var vendQueryPromises = [];
// // // //   Object.keys(vendProductIds).forEach(vid=>{
// // // //     const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vid).get();
// // // //     vendQueryPromises.push(vendQueryPromise);
// // // //   });

// // // //   var userRef = null;

// // // //   return userQueryPromise.then(userResult=>{
// // // //     if(userResult && userResult.docs.length === 0){
// // // //       //user doesn't exist so create
// // // //       console.log("Adding user...", email, name, phone);
// // // //       return admin.firestore().collection('users').add(userData);
// // // //     }else{
// // // //       const userRef = userResult.docs[0];
// // // //       console.log("Found user...", userRef.data());
// // // //       return Promise.resolve(userRef);
// // // //     }
// // // //   }).then(user=>{
// // // //     userRef = user;
// // // //     console.log('Adding invoice for user', userRef.id);
// // // //     return Promise.all(vendQueryPromises);

// // // //   }).then(vendResults=>{

// // // //     var sumTotalPrice = 0;
// // // //     var vendProducts = [];
// // // //     vendResults.forEach(vendDoc=>{
// // // //       if(vendDoc.exists){
// // // //         const id = vendDoc.id;
// // // //         const vendProductData = vendDoc.data();
// // // //         const vendProductName = vendProductData.name;
// // // //         const vendSupplyPrice = vendProductData.supply_price;
// // // //         const vendPriceBookPrice = vendProductData.price_book_entries && vendProductData.price_book_entries.length > 0 && vendProductData.price_book_entries[0].price;
// // // //         const vendPriceAmount = vendSupplyPrice && parseFloat(vendSupplyPrice) > 0 ? vendSupplyPrice : vendPriceBookPrice;
// // // //         const unitPrice = parseInt(vendPriceAmount);
// // // //         const quantity = vendProductIds[id];
// // // //         const totalPrice = unitPrice*quantity;
// // // //         vendProducts.push({vendProductId:id, vendProductName, quantity, unitPrice, totalPrice});
// // // //         sumTotalPrice += totalPrice;
// // // //       }
// // // //     });

// // // //     var amount = `${sumTotalPrice}00`;
// // // //     const concatLength = 12-amount.length;
// // // //     for (var i = 0; i < concatLength; i++) {
// // // //       amount = '0'.concat(amount);
// // // //     }

// // // //     const invoiceData = {
// // // //       createdAt : timestamp,
// // // //       paid : false,
// // // //       paymentFailed : false,
// // // //       paymentId : null,
// // // //       userId : userRef.id,
// // // //       totalPrice : `${sumTotalPrice}`,
// // // //       amount : amount,
// // // //       receiptMailed : false,
// // // //       type : 'membership',
// // // //       vendProducts: vendProducts,
// // // //       hasSST : true
// // // //     }

// // // //     console.log('Adding invoice', invoiceData);

// // // //     return admin.firestore().collection('invoices').add(invoiceData);
// // // //   }).then(invoiceRef=>{
// // // //     console.log('Added invoice', invoiceRef.id);
// // // //     return invoiceRef.id;
// // // //   }).catch((error)=>{
// // // //     console.log('Error', error.message);
// // // //     return Promise.resolve();
// // // //   });
// // // // });

// add invoice for freeze v2
exports.addInvoiceForFreezeMembershipv2 = functions.https.onCall((data, context) => {
  const email = data.email;
  const name = data.name;
  const vendProductId = data.vendProductId;
  const freezeDate = data.freezeDate;
  var vendProductName, sstTax = 0;
  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  if(!email || !vendProductId || !freezeDate){
    console.log('Missing data', email, name, vendProductId, freezeDate);
    return Promise.resolve();
  }

  console.log('Adding invoice...', email, name, vendProductId);

  const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
 
  var userRef = null;

  return userQueryPromise.then(userResult=>{
    if(userResult && userResult.docs.length === 0){
      //user doesn't exist so create
      console.log("Adding user...", email, name);
      return Promise.resolve();
      // return admin.firestore().collection('users').add(userData);
    }else{
      const userRef = userResult.docs[0];
      console.log("Found user...", userRef.data());
      return Promise.resolve(userRef);
    }
  }).then(user=>{
    userRef = user;
    console.log('Adding invoice for user', userRef.id);
    return Promise.all([vendQueryPromise]);

  }).then(vendResults=>{

    var unitPrice = 0;
    var sumTotalPrice = 0;
    var vendProducts = [];
    vendResults.forEach(vendDoc=>{
      if(vendDoc.exists){
        const id = vendDoc.id;
        const vendProductData = vendDoc.data();
        vendProductName = vendProductData.name;
        const vendSupplyPrice = vendProductData.supply_price;
        const vendPriceBookPrice = vendProductData.price_book_entries && vendProductData.price_book_entries.length > 0 && vendProductData.price_book_entries[0].price;
        const vendPriceAmount = vendSupplyPrice;
        unitPrice = parseFloat(vendPriceAmount).toFixed(2);
        const quantity = 1; // hardcode
        const sstTax = parseFloat(parseFloat(unitPrice*quantity)*0.06).toFixed(2);
        console.log('sstTax: ', sstTax);
        const totalPrice = (unitPrice + sstTax);
        console.log('totalPrice: ', totalPrice);
        vendProducts.push({vendProductId:id, vendProductName, quantity, unitPrice, totalPrice});
        // vendProductId = id;
        // sumTotalPrice += totalPrice;
        sumTotalPrice = totalPrice;
      }
    });

    console.log('sumTotalPrice: ', sumTotalPrice);

    // var amount = sumTotalPrice.toString().includes('.')? `${sumTotalPrice.toString().split('.').join("")}0`:`${sumTotalPrice}00`;
    // const concatLength = 12-amount.length;
    // for (var i = 0; i < concatLength; i++) {
    //   amount = '0'.concat(amount);
    // }

    var amount = get12StringAmount(sumTotalPrice);

    const invoiceData = {
      createdAt : timestamp,
      paid : false,
      paymentFailed : false,
      paymentId : null,
      userId : userRef.id,
      // totalPrice : `${sumTotalPrice}`,
      // amount : amount,
      // hardcode
      totalPrice : `53`,
      amount:'000000005300',
      quantity:1,
      receiptMailed : false,
      type : 'membership',
      // freezeFor: new Date(freezeDate),
      freezeFor: moment(freezeDate).tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
      vendProducts: vendProducts,
      vendProductId,
      vendProductName,
      unitPrice,
      // tax:sstTax,
      tax:'3',
      withSST:true
    }

    // console.log('Adding invoice', invoiceData);

    return admin.firestore().collection('invoices').add(invoiceData);
  }).then(invoiceRef=>{
    console.log('Added invoice', invoiceRef.id);
    return invoiceRef.id;
  }).catch((error)=>{
    console.log('Error', error.message);
    return Promise.resolve();
  });
});

// amount with SST
exports.addInvoiceForMembershipv2 = functions.https.onCall((data, context) => {
  const email = data.email;
  const name = data.name;
  const phone = data.phone;
  const icNumber = data.icnumber;
  const refSource = data.refSource;
  const postcode = data.postcode;
  const mcId = data.mcId;
  const vendProductIds = data.vendProductIds;
  const promoType = data.promoType;
  const achieveTarget = data.achieveTarget;
  var vendProductId, vendProductName, sstTax = 0;
  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  const vAug20SingleAccess = '83d318ff-64ab-3cc8-9ba4-98f740bc48f2';
  const vAug20AllAccess = '211aad2d-0a2a-fdc7-d79a-7eabc28d5994';
  const vSep20AllAccess = 'e4c23eae-4a4d-9191-f92f-98afe0e3dd08';

  const vMidSep20SingleAccess = 'e456b524-4689-49eb-808a-08b9a3700aa3';
  const vMidSep20AllAccess = 'e1611259-cb7b-1854-df22-2f9a672233ba';
  const vFLX2022SingleAccess = `47fb7227-5ac2-403c-ac57-50d906cb3c7c`;
  const vFLX2022AllAccess = `9effa0bd-59d8-4d55-a470-f34fadd3d5eb`;
  const vBuy3MSingleAccess = `4208ae87-5052-c06c-fd6a-8acdf892187b`;
  const vBuy3MAllAccess = `e30c71cd-282b-1c2b-041a-9b4ababc2b00`;
  // for 6M vendProdId
  const vBuy6MSingleAccess = `9432c162-a74d-bdfa-d1ad-27c1e3b5d653`;
  const vBuy6MAllAccess = `4ddc74ce-db5f-0d4d-f3e2-4c44f87fff4f`;

  // for 12M vendProdId
  const vBuy12MSingleAccess = `0af7b240-aba0-11e7-eddc-dbd880f58a4f` || `d282c703-a741-0aac-9b07-a719ca323d6f`;
  const vBuy12MAllAccess = `2d6c5a58-dc00-1186-f6fb-37f63454dcd0`||`4ad967da-8d67-8d93-6d7a-81b3e52040a4`;

  const userData = {
    createdAt:timestamp,
    joinDate:timestamp,
    email,
    name,
    phone,
    icNumber,
    refSource,
    postcode,
    mcId,
    achieveTarget
  }

  if(!email || (!vendProductIds) || (vendProductIds && !(Object.keys(vendProductIds).length > 0))){
    console.log('Missing data', email, name, phone, vendProductIds);
    return Promise.resolve();
  }

  if (promoType){
    userData.createdFrom = promoType;
    if (promoType === 'aug2020'){
      userData.promoAug2020 = 0; 
    userData.promoAug2020 = 0; 
      userData.promoAug2020 = 0; 
    }
    else if (promoType === 'sep2020'){
      userData.promoSep2020 = 0;
    userData.promoSep2020 = 0; 
      userData.promoSep2020 = 0;
    }
    else if (promoType === 'midSep2020'){
      userData.promoMidSep2020 = 0;
    }
  }

  console.log('Adding invoice...', email, name, phone, vendProductIds);

  const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  var vendQueryPromises = [];
  Object.keys(vendProductIds).forEach(vid=>{
    const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vid).get();
    vendQueryPromises.push(vendQueryPromise);
  });

  var userRef = null;

  return userQueryPromise.then(userResult=>{
    if(userResult && userResult.docs.length === 0){
      //user doesn't exist so create
      console.log("Adding user...", email, name, phone);
      return admin.firestore().collection('users').add(userData);
    }
    else{
      const userRef = userResult.docs[0];
      console.log("Found user...", userRef.data());
      return Promise.resolve(userRef);
    }
  }).then(user=>{
    userRef = user;
    console.log('Adding invoice for user', userRef.id);
    return Promise.all(vendQueryPromises);

  }).then(vendResults=>{

    var sumTotalPrice = 0;
    var vendProducts = [];
    vendResults.forEach(vendDoc=>{
      if(vendDoc.exists){
        const id = vendDoc.id;

        const vendProductData = vendDoc.data();
        console.log('vendProductData: ', vendProductData);
        vendProductName = vendProductData && vendProductData.name;
        const vendSupplyPrice = vendProductData.supply_price;
        // const vendPriceBookPrice = vendProductData.price_book_entries && vendProductData.price_book_entries.length > 0 && vendProductData.price_book_entries[0].price;
        //const vendPriceAmount = vendSupplyPrice && parseFloat(vendSupplyPrice) > 0 ? vendSupplyPrice : vendPriceBookPrice;
        const unitPrice = vendSupplyPrice;
        const quantity = vendProductIds[id];
        const sstTax = unitPrice*quantity*0.06;
        // console.log('sstTax: ', sstTax);

        const totalPrice = parseFloat(unitPrice*quantity + sstTax).toFixed(2);
        vendProducts.push({vendProductId:id, vendProductName, quantity, unitPrice, totalPrice});
        vendProductId = id;
        sumTotalPrice += totalPrice;
      }
    });

    // var optionsEdit = vendGetProductDetails(vendProductRef.id);
    // return rp2(optionsEdit).then(function (res){
    //   console.log('optionEditRes: ', res);

    //   const data = res && res.data;
    //   const priceWithTax = data && data.price_including_tax;
    //   const priceWithoutTax = data && data.price_excluding_tax;
    //   const tax = priceWithTax - priceWithoutTax;
    //   const unitPrice = priceWithTax || parseInt(vendProductData.supply_price);

    //   const quantity = 1
    //   const totalPrice = priceWithTax*quantity;
    //   amount = `${totalPrice*100}`;
    //   const concatLength = 12-amount.length;
    //   for (var i = 0; i < concatLength; i++) {
    //     amount = '0'.concat(amount);
    //   }
    //   //add invoice
    //   const invoiceData = {
    //     createdAt : timestamp,
    //     packageId : null,
    //     paid : false,
    //     paymentFailed : false,
    //     paymentId : null,
    //     userId : userRef.id,
    //     unitPrice : `${unitPrice}`,
    //     totalPrice : `${totalPrice}`,
    //     amount : amount,
    //     tax: parseFloat(tax).toFixed(2),
    //     quantity : quantity,
    //     receiptMailed : false,
    //     type : 'onlinemywellness',
    //     selectedDay,
    //     selectedAMPM,
    //     trainerName,
    //     coachName,
    //     ighandleName,
    //     phone,
    //     vendProductId : vendProductRef.id,
    //     vendProductName : vendProductData.name,
    //     withSST:true,
    //     // hasSST:true
    //   }
    //   console.log('invoiceData: ', invoiceData);
    //   invoiceRef = admin.firestore().collection('invoices').doc();
    //   batch.set(invoiceRef, invoiceData);
    //   return batch.commit();

    // })

    console.log('sumTotalPrice: ', sumTotalPrice);

    var amount = get12StringAmount(sumTotalPrice);

    const invoiceData = {
      createdAt : timestamp,
      paid : false,
      paymentFailed : false,
      paymentId : null,
      userId : userRef.id,
      totalPrice : `${sumTotalPrice}`,
      amount : amount,
      receiptMailed : false,
      type : 'membership',
      vendProducts: vendProducts,
      vendProductId,
      vendProductName,
      tax:sstTax,
      withSST:true,
    }

    console.log('Adding invoice', invoiceData);

    if (promoType){
      invoiceData.promoType = promoType;
      invoiceData.isPromo = true;
      if (promoType==='sep2020'){
        invoiceData.packageId = 'uQO2UsaRiqXtzPKjTSIS'; //packageId for september 2020 (all access)
      }
      if(vendProductId === vAug20SingleAccess){
        invoiceData.packageId = 'AHgEEavKwpJoGTMOzUdX'; //packageId for August 2020 (single access)
      }
      else if (vendProductId === vAug20AllAccess){
        invoiceData.packageId = 'YsOxVJGLRXrHDgNTBach'; //packageId for August 2020 (all access)
      }
      else if (vendProductId === vMidSep20SingleAccess){
        invoiceData.packageId = 'hUZjGJR77bP30I3fjvwD'; //packageId for mid september 2020 (single access)
      }
      else if (vendProductId === vMidSep20AllAccess){
        invoiceData.packageId = 'kh513XOaG7eLX4z9G0Ft'; //packageId for mid september 2020 (all access)
      }
      else if (vendProductId === vFLX2022AllAccess){
        invoiceData.packageId = 'UQHWN9nsDAZiuiBlcsP7'; // packageId for FLX2022 all access
      }
      else if (vendProductId === vFLX2022SingleAccess){
        invoiceData.packageId = 'nVBuI66WGttWrwL4mDuy'; // packageId for FLX2022 single access
      }
      
      if (promoType && promoType === 'freeMonthPromo'){ // for free month promo
        invoiceData.containFreeMonth=true;
        if (vendProductId === vBuy3MSingleAccess){
          invoiceData.packageId = 'yQFACCzpS4DKcDyYftBx';
          invoiceData.freeMonthPackageId = 'vf2jCUOEeDDiIQ0S42BJ';
          invoiceData.freeMonthQty=1;
          invoiceData.renewalTerm='quarterly';
        }
        else if (vendProductId === vBuy3MAllAccess){
          invoiceData.packageId = 'aTHIgscCxbwjDD8flTi3';
          invoiceData.freeMonthPackageId = 'TJ7Fiqgrt6EHUhR5Sb2q';
          invoiceData.freeMonthQty=1;
          invoiceData.renewalTerm='quarterly';
        }
        else if (vendProductId === vBuy6MSingleAccess){
          invoiceData.packageId = 'duz1AkLuin8nOUd7r66L';
          invoiceData.freeMonthPackageId = 'vf2jCUOEeDDiIQ0S42BJ';
          invoiceData.freeMonthQty=2;
          invoiceData.renewalTerm='biyearly';
        }
        else if (vendProductId === vBuy6MAllAccess){
          invoiceData.packageId = '89THMCx0BybpSVJ1J8oz';
          invoiceData.freeMonthPackageId = 'TJ7Fiqgrt6EHUhR5Sb2q';
          invoiceData.freeMonthQty=2;
          invoiceData.renewalTerm='biyearly';
        }
        else if (vendProductId === vBuy12MSingleAccess){
          invoiceData.packageId = 'WmcQo1XVXehGaxhSNCKa';
          invoiceData.freeMonthPackageId = 'vf2jCUOEeDDiIQ0S42BJ';
          invoiceData.freeMonthQty=4;
          invoiceData.renewalTerm='yearly';
        }
        else if (vendProductId === vBuy12MAllAccess){
          invoiceData.packageId = 'q7SXXNKv83MkkJs8Ql0n';
          invoiceData.freeMonthPackageId = 'TJ7Fiqgrt6EHUhR5Sb2q';
          invoiceData.freeMonthQty=4
          invoiceData.renewalTerm='yearly';
        }
      }
    }

    return admin.firestore().collection('invoices').add(invoiceData);
  }).then(invoiceRef=>{
    console.log('Added invoice', invoiceRef.id);
    return invoiceRef.id;
  }).catch((error)=>{
    console.log('Error', error.message);
    return Promise.resolve();
  });
});

// // // // exports.addInvoiceForProducts = functions.https.onCall((data, context) => {
// // // //   const email = data.email;
// // // //   const name = data.name;
// // // //   const phone = data.phone;
// // // //   const vendProductIds = data.vendProductIds;
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   if(!email || (!vendProductIds) || (vendProductIds && !(Object.keys(vendProductIds).length > 0))){
// // // //     console.log('Missing data', email, name, phone, vendProductIds);
// // // //     return Promise.resolve();
// // // //   }

// // // //   console.log('Adding invoice...', email, name, phone, vendProductIds);

// // // //   const userData = {
// // // //     createdAt:timestamp,
// // // //     email, phone, name
// // // //   }
// // // //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// // // //   var vendQueryPromises = [];
// // // //   Object.keys(vendProductIds).forEach(vid=>{
// // // //     const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vid).get();
// // // //     vendQueryPromises.push(vendQueryPromise);
// // // //   });

// // // //   var userRef = null;

// // // //   return userQueryPromise.then(userResult=>{
// // // //     if(userResult && userResult.docs.length === 0){
// // // //       //user doesn't exist so create
// // // //       console.log("Adding user...", email, name, phone);

// // // //       return admin.firestore().collection('users').add(userData);
// // // //     }else{
// // // //       const userRef = userResult.docs[0];
// // // //       console.log("Found user...", userRef.data());

// // // //       return Promise.resolve(userRef);
// // // //     }
// // // //   }).then(user=>{

// // // //     userRef = user;

// // // //     console.log('Adding invoice for user', userRef.id);

// // // //     return Promise.all(vendQueryPromises);

// // // //   }).then(vendResults=>{

// // // //     var sumTotalPrice = 0;
// // // //     var vendProducts = [];
// // // //     vendResults.forEach(vendDoc=>{
// // // //       if(vendDoc.exists){
// // // //         const id = vendDoc.id;
// // // //         const vendProductData = vendDoc.data();
// // // //         const vendProductName = vendProductData.name;
// // // //         const vendSupplyPrice = vendProductData.supply_price;
// // // //         const vendPriceBookPrice = vendProductData.price_book_entries && vendProductData.price_book_entries.length > 0 && vendProductData.price_book_entries[0].price;
// // // //         const vendPriceAmount = vendSupplyPrice && parseFloat(vendSupplyPrice) > 0 ? vendSupplyPrice : vendPriceBookPrice;
// // // //         const unitPrice = parseInt(vendPriceAmount);
// // // //         const quantity = vendProductIds[id];
// // // //         const totalPrice = unitPrice*quantity;
// // // //         vendProducts.push({vendProductId:id, vendProductName, quantity, unitPrice, totalPrice});
// // // //         sumTotalPrice += totalPrice;
// // // //       }
// // // //       else{
// // // //         console.log('vendDoc not exist');
// // // //         return Promise.resolve();
// // // //       }
// // // //     });

// // // //     var amount = `${sumTotalPrice}00`;
// // // //     const concatLength = 12-amount.length;
// // // //     for (var i = 0; i < concatLength; i++) {
// // // //       amount = '0'.concat(amount);
// // // //     }

// // // //     const invoiceData = {
// // // //       createdAt : timestamp,
// // // //       paid : false,
// // // //       paymentFailed : false,
// // // //       paymentId : null,
// // // //       userId : userRef.id,
// // // //       totalPrice : `${sumTotalPrice}`,
// // // //       amount : amount,
// // // //       receiptMailed : false,
// // // //       type : 'product',
// // // //       vendProducts: vendProducts,
// // // //       hasSST : true
// // // //     }

// // // //     console.log('Adding invoice', invoiceData);

// // // //     return admin.firestore().collection('invoices').add(invoiceData);
// // // //   }).then(invoiceRef=>{
// // // //     console.log('Added invoice', invoiceRef.id);
// // // //     return invoiceRef.id;
// // // //   }).catch((error)=>{
// // // //     console.log('Error', error.message);
// // // //     return Promise.resolve();
// // // //   });
// // // // });

// // // add invoice for online mywellness
// // exports.addInvoiceForVWellness = functions.https.onCall((data, context) => {
// //   const email = data.email;
// //   const name = data.name;
// //   const phone = data.phone;
// //   const vendProductId = data.vendProductId;
// //   const trainerName = data.selectedTrainer;
// //   const ighandleName = data.ighandlename;
// //   const coachName = data.selectedCoach;
// //   const selectedAMPM = data.selectedAMPM;
// //   const selectedDay = data.selectedDay;
// //   // console.log('data: ', data);

// //   if(!email || !vendProductId || !name || !trainerName || !phone || !ighandleName || !coachName || !selectedAMPM || !selectedDay){
// //     console.log('Missing data', email, name, phone, vendProductId, trainerName);
// //     return Promise.resolve();
// //   }

// //   console.log('Adding invoice...', email, name, phone, vendProductId);

// //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// //   var vendProductRef = null;
// //   var vendProductData = null;
// //   var userData = {createdAt:timestamp, email, name, phone};

// //   const batch = admin.firestore().batch();
// //   var invoiceRef = null;
// //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// //     const userResult = results[0];
// //     vendProductRef = results[1];
// //     console.log('vendProductRef: ', vendProductRef);
// //     vendProductData = vendProductRef && vendProductRef.data();
// //     var userRef = null;
// //     if(userResult && userResult.docs.length === 0){
// //       //user doesn't exist so create
// //       console.log("Adding user...", email, name, phone);
// //       userRef = admin.firestore().collection('users').doc();
// //       batch.set(userRef, userData);
// //       // return Promise.resolve(userRef);
// //     }else{
// //       userRef = userResult.docs[0];
// //       console.log("Found user...", userRef.data());
// //       // return Promise.resolve(userRef);
// //     }

// //     console.log('Adding invoice for user and product', userRef.id, vendProductData);

// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetProductDetails(vendProductRef.id);
// //     return rp2(optionsEdit).then(function (res){
// //       console.log('optionEditRes: ', res);

// //       const data = res && res.data;
// //       const priceWithTax = data && data.price_including_tax;
// //       const priceWithoutTax = data && data.price_excluding_tax;
// //       const tax = priceWithTax - priceWithoutTax;
// //       const unitPrice = priceWithTax || parseInt(vendProductData.supply_price);

// //       const quantity = 1
// //       const totalPrice = priceWithTax*quantity;
// //       const amount = get12StringAmount(totalPrice);
// //       //add invoice
// //       const invoiceData = {
// //         createdAt : timestamp,
// //         packageId : null,
// //         paid : false,
// //         paymentFailed : false,
// //         paymentId : null,
// //         userId : userRef.id,
// //         unitPrice : `${unitPrice}`,
// //         totalPrice : `${totalPrice}`,
// //         amount : amount,
// //         tax: parseFloat(tax).toFixed(2),
// //         quantity : quantity,
// //         receiptMailed : false,
// //         type : 'onlinemywellness',
// //         selectedDay,
// //         selectedAMPM,
// //         trainerName,
// //         coachName,
// //         ighandleName,
// //         phone,
// //         vendProductId : vendProductRef.id,
// //         vendProductName : vendProductData.name,
// //         withSST:true,
// //         // hasSST:true
// //       }
// //       console.log('invoiceData: ', invoiceData);
// //       invoiceRef = admin.firestore().collection('invoices').doc();
// //       batch.set(invoiceRef, invoiceData);
// //       return batch.commit();

// //     }).catch(function (err){
// //       console.log('error getting vend product: ', err);
// //       return Promise.resolve();
// //     });
// //   }).then(()=>{
// //     console.log('Added invoice', invoiceRef.id);
// //     return invoiceRef.id;
// //   }).catch((error)=>{
// //     console.log('Error', error.message);
// //     return Promise.resolve();
// //   });
// // });

// // // create invoice for vClass
// // exports.addInvoiceForVClass = functions.https.onCall((data, context) => {
// //   const email = data.email;
// //   const name = data.name;
// //   const phone = data.phone;
// //   const quantity = data.quantity||1;
// //   const vendProductId = data.vendProductId;
// //   const trainerName = data.trainerName;
// //   const selectedAMPM = data.selectedAMPM;
// //   const selectedDay = data.selectedDay;
// //   const selectedClass = data.selectedClass;

// //   console.log('data: ', data);

// //   if(!email || !vendProductId || !trainerName || !selectedClass){
// //     console.log('Missing data', email, name, phone, vendProductId, trainerName);
// //     return Promise.resolve();
// //   }

// //   // console.log('Adding invoice...', email, name, phone, vendProductId);

// //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// //   var vendProductRef = null;
// //   var vendProductData = null;
// //   var userData = {createdAt:timestamp, email, name, phone};

// //   const batch = admin.firestore().batch();
// //   var invoiceRef = null;
// //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// //     const userResult = results[0];
// //     vendProductRef = results[1];
// //     // console.log('vendProductRef: ', vendProductRef);
// //     vendProductData = vendProductRef && vendProductRef.data();
// //     var userRef = null;
// //     if(userResult && userResult.docs.length === 0){
// //       //user doesn't exist so create
// //       console.log("Adding user...", email, name, phone);
// //       userRef = admin.firestore().collection('users').doc();
// //       batch.set(userRef, userData);
// //       // return Promise.resolve(userRef);
// //     }else{
// //       userRef = userResult.docs[0];
// //       console.log("Found user...", userRef.data());
// //       // return Promise.resolve(userRef);
// //     }

// //   // console.log('Adding invoice for user and product', userRef.id, vendProductData);
  
// //   var rp2 = require('request-promise');
// //   var optionsEdit = vendGetProductDetails(vendProductRef.id);
// //     return rp2(optionsEdit).then(function (res){
// //       // console.log('optionEditRes: ', res);

// //       const data = res && res.data;
// //       const priceWithTax = data && data.price_including_tax;
// //       const supply_price = data && data.supply_price;
// //       const priceWithoutTax = data && data.price_excluding_tax;
// //       var tax = (parseFloat(priceWithTax - priceWithoutTax)*quantity).toFixed(2);
// //       var unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || parseFloat(priceWithTax).toFixed(2);
// //       var totalPrice = priceWithTax*quantity;
// //       var unitDiscount, totalDiscount = 0;
// //       var totalPriceWithDiscount = totalPrice; // default price is the same as totalPrice
// //       // var totalTax = (parseFloat(tax) * quantity).toFixed(2);
// //       // const amount = (quantity>=5)? get12StringAmount(totalPriceWithDiscount):get12StringAmount(totalPrice);
// //       const amount = get12StringAmount(totalPrice);

// //       //add invoice
// //       const invoiceData = {
// //         createdAt : timestamp,
// //         packageId : null,
// //         paid : false,
// //         paymentFailed : false,
// //         paymentId : null,
// //         userId : userRef.id,
// //         unitPrice : `${unitPrice}`,
// //         totalPrice : `${totalPrice}`,
// //         amount : amount,
// //         tax: parseFloat(tax).toFixed(2),
// //         quantity : quantity,
// //         receiptMailed : false,
// //         type : 'vClass',
// //         selectedDay,
// //         selectedAMPM,
// //         trainerName,
// //         vendProductId : vendProductRef.id,
// //         vendProductName : vendProductData.name,
// //         phoneNum:phone,
// //         hasSST:true,
// //         selectedClass,
// //       }

// //       // console.log('invoiceData: ', invoiceData);
// //       invoiceRef = admin.firestore().collection('invoices').doc();
// //       batch.set(invoiceRef, invoiceData);
// //       return batch.commit();
// //     }).catch(function (err){
// //       console.log('error getting vend product: ', err);
// //       return Promise.resolve();
// //     });
// //   }).then(()=>{
// //     console.log('Added invoice', invoiceRef.id);
// //     return invoiceRef.id;
// //   }).catch((error)=>{
// //     console.log('Error', error.message);
// //     return Promise.resolve();
// //   });
// // });

// create invoice for angpau 2022
exports.addInvoiceForAngpau = functions.https.onCall((data, context) => {
  const email = data.email && data.email.toLowerCase();
  const name = data.name;
  const phone = data.phone;
  const nric = data.nric;
  const qty = data.qty||1;
  const refSource = data.refSource;
  const achieveTargetSource = data.achieveTargetSource;
  const selectedPkgId = data.selectedPkgId;
  const vendProductId = selectedPkgId? selectedPkgId.vendProdId:null;
  const angpauRefEmail = data.refererEmail;
  const refererName = data.refererName;

  console.log('data: ', data);

  if(!email || !vendProductId || !name || !phone || !selectedPkgId || !angpauRefEmail || !refererName){
    console.log('Missing data', email, phone, vendProductId, selectedPkgId, angpauRefEmail, refererName);
    return Promise.resolve();
  }

  // disable it
  return Promise.resolve();
  // console.log('Adding invoice...', email, name, phone, vendProductId);

  // const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  // const memberRefQueryPromise = admin.firestore().collection('users').where('email', '==', angpauRefEmail).limit(1).get();
  // const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
  // var vendProductRef = null;
  // var vendProductData = null;
  // var userData = {createdAt:timestamp, email, name, phone, nric, refSource, achieveTargetSource, angpauRefEmail, createdFrom:'angpau2022'};

  // const batch = admin.firestore().batch();
  // var invoiceRef = null;
  // return Promise.all([userQueryPromise, vendQueryPromise, memberRefQueryPromise]).then(results=>{
  //   const userResult = results[0];
  //   vendProductRef = results[1];
  //   const memberReferralResult = results[2];

  //   // console.log('vendProductRef: ', vendProductRef);
  //   vendProductData = vendProductRef && vendProductRef.data();
  //   var userRef = null;
  //   if(userResult && userResult.docs.length === 0){
  //     //user doesn't exist so create
  //     console.log("Adding user...", email, phone);
  //     userRef = admin.firestore().collection('users').doc();
  //     batch.set(userRef, userData);
  //     // return Promise.resolve(userRef);
  //   }else{
  //     userRef = userResult.docs[0];
  //     console.log("Found user...", userRef.data());
  //     const userId = userRef.id;
  //     if (userId){
  //       batch.update(admin.firestore().collection('users').doc(userId), userData);
  //     }
  //     // return Promise.resolve(userRef);
  //   }

  //   var memberRef = null;
  //   var memberData;
  //   if(memberReferralResult && memberReferralResult.docs.length === 0){
  //    console.log('no user found.... ')
  //   }
  //   else{
  //     memberRef = memberReferralResult && memberReferralResult.docs[0];
  //     const memberRefId = memberRef.id;
  //     // memberData = memberRef.
  //   }
  // // console.log('Adding invoice for user and product', userRef.id, vendProductData);
  
  // var rp2 = require('request-promise');
  // var optionsEdit = vendGetProductDetails(vendProductRef.id);
  //   return rp2(optionsEdit).then(function (res){
  //     // console.log('optionEditRes: ', res);

  //     const data = res && res.data;
  //     const priceWithTax = data && data.price_including_tax;
  //     const supply_price = data && data.supply_price;
  //     const priceWithoutTax = data && data.price_excluding_tax;
  //     var tax = (parseFloat(priceWithTax - priceWithoutTax)*qty).toFixed(2);
  //     var unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || parseFloat(priceWithTax).toFixed(2);
  //     var totalPrice = priceWithTax*qty;
  //     var totalPriceWithDiscount = totalPrice; // default price is the same as totalPrice
  //     // var totalTax = (parseFloat(tax) * quantity).toFixed(2);
  //     // const amount = (quantity>=5)? get12StringAmount(totalPriceWithDiscount):get12StringAmount(totalPrice);
  //     const amount = get12StringAmount(totalPrice);

  //     //add invoice
  //     const invoiceData = {
  //       createdAt : timestamp,
  //       paid : false,
  //       paymentFailed : false,
  //       paymentId : null,
  //       userId : userRef.id,
  //       unitPrice : `${unitPrice}`,
  //       totalPrice : `${totalPrice}`,
  //       amount : amount,
  //       tax: parseFloat(tax).toFixed(2),
  //       quantity : qty,
  //       receiptMailed : false,
  //       type : 'membership',
  //       vendProductId : vendProductRef.id,
  //       vendProductName : vendProductData.name,
  //       hasSST:true,
  //       promoType:'angpau2022',
  //       isPromo:true,
  //       packageId: selectedPkgId.packageId,
  //       angpauRefEmail,
  //       angpauRefUserId:memberRef.id,
  //       angpauRefName:refererName
  //     }

  //     // console.log('invoiceData: ', invoiceData);
  //     invoiceRef = admin.firestore().collection('invoices').doc();
  //     batch.set(invoiceRef, invoiceData);
  //     return batch.commit();
  //   }).catch(function (err){
  //     console.log('error getting vend product: ', err);
  //     return Promise.resolve();
  //   });
  // }).then(()=>{
  //   console.log('Added invoice', invoiceRef.id);
  //   return invoiceRef.id;
  // }).catch((error)=>{
  //   console.log('Error', error.message);
  //   return Promise.resolve();
  // });
});

// create invoice for FLX
exports.addInvoiceForFLX = functions.https.onCall((data, context) => {
  const email = data.email;
  const name = data.name;
  const phone = data.phone;
  const nric = data.nric;
  const qty = data.qty||1;
  const refSource = data.refSource;
  const achieveTargetSource = data.achieveTargetSource;
  const vendProductId = data.selectedVendPkgId;

  console.log('data: ', data);

  if(!email || !vendProductId || !name || !phone || !nric ){
    console.log('Missing data', email, phone, vendProductId, refSource);
    return Promise.resolve();
  }

  // console.log('Adding invoice...', email, name, phone, vendProductId);

  const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
  var vendProductRef = null;
  var vendProductData = null;
  var userData = {createdAt:timestamp, email, name, phone, nric, refSource, achieveTargetSource, createdFrom:'flx'};

  const batch = admin.firestore().batch();
  var invoiceRef = null;
  return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
    const userResult = results[0];
    vendProductRef = results[1];
    // console.log('vendProductRef: ', vendProductRef);
    vendProductData = vendProductRef && vendProductRef.data();
    var userRef = null;
    if(userResult && userResult.docs.length === 0){
      //user doesn't exist so create
      console.log("Adding user...", email, phone);
      userRef = admin.firestore().collection('users').doc();
      batch.set(userRef, userData);
      // return Promise.resolve(userRef);
    }else{
      userRef = userResult.docs[0];
      console.log("Found user...", userRef.data());
      const userId = userRef.id;
      if (userId){
        batch.update(admin.firestore().collection('users').doc(userId), userData);
      }
      // return Promise.resolve(userRef);
    }

  // console.log('Adding invoice for user and product', userRef.id, vendProductData);
  
  var rp2 = require('request-promise');
  var optionsEdit = vendGetProductDetails(vendProductRef.id);
    return rp2(optionsEdit).then(function (res){
      // console.log('optionEditRes: ', res);

      const data = res && res.data;
      const priceWithTax = data && data.price_including_tax;
      const supply_price = data && data.supply_price;
      const priceWithoutTax = data && data.price_excluding_tax;
      var tax = (parseFloat(priceWithTax - priceWithoutTax)*qty).toFixed(2);
      var unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || parseFloat(priceWithTax).toFixed(2);
      var totalPrice = priceWithTax*qty;
      var totalPriceWithDiscount = totalPrice; // default price is the same as totalPrice
      // var totalTax = (parseFloat(tax) * quantity).toFixed(2);
      // const amount = (quantity>=5)? get12StringAmount(totalPriceWithDiscount):get12StringAmount(totalPrice);
      const amount = get12StringAmount(totalPrice);
      const packageId = (vendProductRef.id === '47fb7227-5ac2-403c-ac57-50d906cb3c7c')? 'nVBuI66WGttWrwL4mDuy':(vendProductRef.id === '9effa0bd-59d8-4d55-a470-f34fadd3d5eb')?'UQHWN9nsDAZiuiBlcsP7':null;

      //add invoice
      const invoiceData = {
        createdAt : timestamp,
        paid : false,
        paymentFailed : false,
        paymentId : null,
        userId : userRef.id,
        unitPrice : `${unitPrice}`,
        totalPrice : `${totalPrice}`,
        amount : amount,
        tax: parseFloat(tax).toFixed(2),
        quantity : qty,
        receiptMailed : false,
        type : 'membership',
        vendProductId : vendProductRef.id,
        vendProductName : vendProductData.name,
        hasSST:true,
        promoType:'flx',
        isPromo:true,
        createdFromApp:true,
        packageId
      }

      // console.log('invoiceData: ', invoiceData);
      invoiceRef = admin.firestore().collection('invoices').doc();
      batch.set(invoiceRef, invoiceData);
      return batch.commit();
    }).catch(function (err){
      console.log('error getting vend product: ', err);
      return Promise.resolve();
    });
  }).then(()=>{
    console.log('Added invoice', invoiceRef.id);
    return invoiceRef.id;
  }).catch((error)=>{
    console.log('Error', error.message);
    return Promise.resolve();
  });
});

// // // create invoice for spin bike
// // exports.addInvoiceForSpinBikeRental = functions.https.onCall((data, context) => {
// //   const email = data.email;
// //   const firstName = data.firstName;
// //   const lastName = data.lastName;
// //   const icNumber = data.icNumber;
// //   const qty = data.qty||1;
// //   const deliveryAddress = data.deliveryAddress;
// //   const deliveryCity = data.deliveryCity;
// //   const deliveryCountry = data.deliveryCountry;
// //   const phone = data.phone;
// //   const landedOrCondo = data.landedOrCondo;
// //   const deliveryNotes = data.deliveryNotes;

// //   const vendProductId = data.vendProductId;

// //   console.log('data: ', data);

// //   if(!email || !vendProductId || !firstName || !lastName || !phone || !deliveryAddress){
// //     console.log('Missing data', email, firstName, lastName, phone, vendProductId, deliveryAddress);
// //     return Promise.resolve();
// //   }

// //   // console.log('Adding invoice...', email, name, phone, vendProductId);

// //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// //   var vendProductRef = null;
// //   var vendProductData = null;
// //   var userData = {createdAt:timestamp, email, firstName, lastName, name:`${firstName} ${lastName}`, phone, icNumber};

// //   const batch = admin.firestore().batch();
// //   var invoiceRef = null;
// //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// //     const userResult = results[0];
// //     vendProductRef = results[1];
// //     // console.log('vendProductRef: ', vendProductRef);
// //     vendProductData = vendProductRef && vendProductRef.data();
// //     var userRef = null;
// //     if(userResult && userResult.docs.length === 0){
// //       //user doesn't exist so create
// //       console.log("Adding user...", email, phone);
// //       userRef = admin.firestore().collection('users').doc();
// //       batch.set(userRef, userData);
// //       // return Promise.resolve(userRef);
// //     }else{
// //       userRef = userResult.docs[0];
// //       console.log("Found user...", userRef.data());
// //       // return Promise.resolve(userRef);
// //     }

// //   // console.log('Adding invoice for user and product', userRef.id, vendProductData);
  
// //   var rp2 = require('request-promise');
// //   var optionsEdit = vendGetProductDetails(vendProductRef.id);
// //     return rp2(optionsEdit).then(function (res){
// //       // console.log('optionEditRes: ', res);

// //       const data = res && res.data;
// //       const priceWithTax = data && data.price_including_tax;
// //       const supply_price = data && data.supply_price;
// //       const priceWithoutTax = data && data.price_excluding_tax;
// //       var tax = (parseFloat(priceWithTax - priceWithoutTax)*qty).toFixed(2);
// //       var unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || parseFloat(priceWithTax).toFixed(2);
// //       var totalPrice = priceWithTax*qty;
// //       var totalPriceWithDiscount = totalPrice; // default price is the same as totalPrice
// //       // var totalTax = (parseFloat(tax) * quantity).toFixed(2);
// //       // const amount = (quantity>=5)? get12StringAmount(totalPriceWithDiscount):get12StringAmount(totalPrice);
// //       const amount = get12StringAmount(totalPrice);

// //       //add invoice
// //       const invoiceData = {
// //         createdAt : timestamp,
// //         paid : false,
// //         paymentFailed : false,
// //         paymentId : null,
// //         userId : userRef.id,
// //         unitPrice : `${unitPrice}`,
// //         totalPrice : `${totalPrice}`,
// //         amount : amount,
// //         tax: parseFloat(tax).toFixed(2),
// //         quantity : qty,
// //         receiptMailed : false,
// //         type : 'spinBikeRental',
// //         vendProductId : vendProductRef.id,
// //         vendProductName : vendProductData.name,
// //         phoneNum:phone,
// //         hasSST:true,
// //         deliveryAddress,
// //         deliveryCity,
// //         deliveryCountry,
// //         deliveryNotes,
// //         deliveryFee:200,
// //         deliveryVendProductId:'8aea002d-7eaa-1a6b-362d-933243a75823', //hardcode, need to change
// //         depositVendProductId:'8aea002d-7eaa-1a6b-362d-933243a75823', //hardcode, need to change
// //         depositFee:500,
// //         landedOrCondo
// //       }

// //       // console.log('invoiceData: ', invoiceData);
// //       invoiceRef = admin.firestore().collection('invoices').doc();
// //       batch.set(invoiceRef, invoiceData);
// //       return batch.commit();
// //     }).catch(function (err){
// //       console.log('error getting vend product: ', err);
// //       return Promise.resolve();
// //     });
// //   }).then(()=>{
// //     console.log('Added invoice', invoiceRef.id);
// //     return invoiceRef.id;
// //   }).catch((error)=>{
// //     console.log('Error', error.message);
// //     return Promise.resolve();
// //   });
// // });

// // // create invoice for virtual trainer
// // // exports.addInvoiceForProductVT = functions.region('asia-east2').https.onCall((data, context) => {
// // exports.addInvoiceForProductVT = functions.https.onCall((data, context) => {
// //   const email = data.email;
// //   const name = data.name;
// //   const phone = data.phone;
// //   const quantity = data.quantity||1;
// //   const vendProductId = data.vendProductId;
// //   const trainerName = data.trainerName;
// //   const selectedAMPM = data.selectedAMPM;
// //   const selectedDay = data.selectedDay;

// //   // console.log('data: ', data);

// //   if(!email || !vendProductId || !trainerName){
// //     console.log('Missing data', email, name, phone, vendProductId, trainerName);
// //     return Promise.resolve();
// //   }

// //   // console.log('Adding invoice...', email, name, phone, vendProductId);

// //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// //   var vendProductRef = null;
// //   var vendProductData = null;
// //   var userData = {createdAt:timestamp, email, name, phone};

// //   const batch = admin.firestore().batch();
// //   var invoiceRef = null;
// //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// //     const userResult = results[0];
// //     vendProductRef = results[1];
// //     // console.log('vendProductRef: ', vendProductRef);
// //     vendProductData = vendProductRef && vendProductRef.data();
// //     var userRef = null;
// //     if(userResult && userResult.docs.length === 0){
// //       //user doesn't exist so create
// //       console.log("Adding user...", email, name, phone);
// //       userRef = admin.firestore().collection('users').doc();
// //       batch.set(userRef, userData);
// //       // return Promise.resolve(userRef);
// //     }else{
// //       userRef = userResult.docs[0];
// //       console.log("Found user...", userRef.data());
// //       // return Promise.resolve(userRef);
// //     }

// //   // console.log('Adding invoice for user and product', userRef.id, vendProductData);
  
// //   var rp2 = require('request-promise');
// //   var optionsEdit = vendGetProductDetails(vendProductRef.id);
// //     return rp2(optionsEdit).then(function (res){
// //       // console.log('optionEditRes: ', res);

// //       const data = res && res.data;
// //       const priceWithTax = data && data.price_including_tax;
// //       const supply_price = data && data.supply_price;
// //       const priceWithoutTax = data && data.price_excluding_tax;
// //       var tax = (parseFloat(priceWithTax - priceWithoutTax)*quantity).toFixed(2);
// //       var unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || parseFloat(priceWithTax).toFixed(2);
// //       var totalPrice = priceWithTax*quantity;
// //       var unitDiscount, totalDiscount = 0;
// //       var totalPriceWithDiscount = totalPrice; // default price is the same as totalPrice
// //       // var totalTax = (parseFloat(tax) * quantity).toFixed(2);
// //       // const amount = (quantity>=5)? get12StringAmount(totalPriceWithDiscount):get12StringAmount(totalPrice);
// //       const amount = get12StringAmount(totalPrice);

// //       //add invoice
// //       const invoiceData = {
// //         createdAt : timestamp,
// //         packageId : null,
// //         paid : false,
// //         paymentFailed : false,
// //         paymentId : null,
// //         userId : userRef.id,
// //         unitPrice : `${unitPrice}`,
// //         totalPrice : `${totalPrice}`,
// //         amount : amount,
// //         tax: parseFloat(tax).toFixed(2),
// //         quantity : quantity,
// //         receiptMailed : false,
// //         type : 'virtualTraining',
// //         selectedDay,
// //         selectedAMPM,
// //         trainerName,
// //         vendProductId : vendProductRef.id,
// //         vendProductName : vendProductData.name,
// //         withSST:true,
// //         phoneNum:phone
// //         // hasSST:true
// //       }

// //       if (quantity>=5){
// //          // hardcode
// //         // unitPrice = unitPrice-20;
// //         unitDiscount = 20;
// //         totalDiscount = (unitDiscount*quantity);
// //         totalPriceWithDiscount = totalPrice - totalDiscount;

// //         invoiceData.unitDiscount = unitDiscount;
// //         invoiceData.totalDiscount = totalDiscount;
// //         invoiceData.totalPriceWithDiscount = totalPriceWithDiscount.toFixed(2);
// //         // replacing the amount for the price with discount
// //         invoiceData.amount = get12StringAmount(totalPriceWithDiscount);
// //       }
// //       // console.log('invoiceData: ', invoiceData);
// //       invoiceRef = admin.firestore().collection('invoices').doc();
// //       batch.set(invoiceRef, invoiceData);
// //       return batch.commit();
// //     }).catch(function (err){
// //       console.log('error getting vend product: ', err);
// //       return Promise.resolve();
// //     });
// //   }).then(()=>{
// //     console.log('Added invoice', invoiceRef.id);
// //     return invoiceRef.id;
// //   }).catch((error)=>{
// //     console.log('Error', error.message);
// //     return Promise.resolve();
// //   });
// // });

// // exports.addInvoiceForProductVClass = functions.https.onCall((data, context) => {
  
// //   const name = data.name;
// //   const ighandlename = data.ighandlename;
// //   const email = data.email;
// //   const phone = data.phone;
// //   const city = data.city;
// //   const selectedMemberOption = data.selectedMemberOption;
// //   const vendProductId = data.vendProductId;

// //   // console.log('data: ', data);

// //   if(!name || !email || !phone || !city || !selectedMemberOption || !vendProductId || !ighandlename ){
// //     console.log('Missing data', email, name, phone, vendProductId);
// //     return Promise.resolve();
// //   }

// //   console.log('Adding invoice...', email, name, phone, vendProductId);

// //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// //   var vendProductRef = null;
// //   var vendProductData = null;
// //   var userData = {createdAt:timestamp, email, name, phone};

// //   const batch = admin.firestore().batch();
// //   var invoiceRef = null;
// //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// //     const userResult = results[0];
// //     vendProductRef = results[1];
// //     console.log('vendProductRef: ', vendProductRef);
// //     vendProductData = vendProductRef && vendProductRef.data();
// //     var userRef = null;
// //     if(userResult && userResult.docs.length === 0){
// //       //user doesn't exist so create
// //       console.log("Adding user...", email, name, phone);
// //       userRef = admin.firestore().collection('users').doc();
// //       batch.set(userRef, userData);
// //       // return Promise.resolve(userRef);
// //     }else{
// //       userRef = userResult.docs[0];
// //       console.log("Found user...", userRef.data());
// //       // return Promise.resolve(userRef);
// //     }

// //     console.log('Adding invoice for user and product', userRef.id, vendProductData);

// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetProductDetails(vendProductRef.id);
// //     return rp2(optionsEdit).then(function (res){
// //       console.log('optionEditRes: ', res);

// //       const data = res && res.data;
// //       const priceWithTax = data && data.price_including_tax;
// //       const priceWithoutTax = data && data.price_excluding_tax;
// //       const tax = priceWithTax - priceWithoutTax;
// //       const unitPrice = parseInt(vendProductData.supply_price) || priceWithTax;

// //       const quantity = 1
// //       const totalPrice = priceWithTax*quantity;
// //       const amount = get12StringAmount(totalPrice);
// //       //add invoice
// //       const invoiceData = {
// //         createdAt : timestamp,
// //         packageId : null,
// //         paid : false,
// //         paymentFailed : false,
// //         paymentId : null,
// //         userId : userRef.id,
// //         unitPrice : `${unitPrice}`,
// //         totalPrice : `${totalPrice}`,
// //         tax:tax.toFixed(2),
// //         amount : amount,
// //         quantity : quantity,
// //         receiptMailed : false,
// //         type : 'virtualClass',
// //         ighandlename,
// //         phone,
// //         city,
// //         selectedMemberOption,
// //         vendProductId : vendProductRef.id,
// //         vendProductName : vendProductData.name,
// //         withSST:true,
// //         // hasSST:true
// //       }
// //       invoiceRef = admin.firestore().collection('invoices').doc();
// //       batch.set(invoiceRef, invoiceData);
// //       return batch.commit();

// //     }).catch(function (err){
// //       console.log('error getting vend product: ', err);
// //       return Promise.resolve();
// //     })
// //   }).then(()=>{
// //     console.log('Added invoice', invoiceRef.id);
// //     return invoiceRef.id;
// //   }).catch((error)=>{
// //     console.log('Error', error.message);
// //     return Promise.resolve();
// //   });
// // });

// // create invoice for babel dance
// exports.addInvoiceForBabelDance = functions.https.onCall((data, context) => {
  
//   const name = data.name;
//   const ighandlename = data.ighandleName;
//   const email = data.email;
//   const phone = data.phone;
//   const city = data.city;
//   const classDate = data.classDate;
//   const classTime = data.classTime;
//   const classRemark = data.classRemark;
//   const selectedMemberOption = data.selectedMemberOption;
//   const instructorName = data.instructorName;
//   const vendProductId = data.vendProductId;
//   const classId = data.classId;
//   const classType = data.classType;

//   console.log('data: ', data);

//   if(!name || !email || !phone || !city || !vendProductId || !ighandlename ){
//     console.log('Missing data', email, name, phone, vendProductId);
//     return Promise.resolve();
//   }

//   console.log('Adding invoice...', email, name, phone, vendProductId);

//   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
//   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
//   const dancePaymentQueryPromise = admin.firestore().collection('payments').where('classType', '==', 'outdoor').get();
//   var vendProductRef = null;
//   var vendProductData = null;
//   var userData = {createdAt:timestamp, email, name, phone};

//   const batch = admin.firestore().batch();
//   var invoiceRef = null;
//   return Promise.all([userQueryPromise, vendQueryPromise, dancePaymentQueryPromise]).then(results=>{
//     const userResult = results[0];
//     vendProductRef = results[1];
//     console.log('vendProductRef: ', vendProductRef);
//     vendProductData = vendProductRef && vendProductRef.data();
//     var userRef = null;
//     if(userResult && userResult.docs.length === 0){
//       //user doesn't exist so create
//       console.log("Adding user...", email, name, phone);
//       userRef = admin.firestore().collection('users').doc();
//       batch.set(userRef, userData);
//       // return Promise.resolve(userRef);
//     }else{
//       userRef = userResult.docs[0];
//       console.log("Found user...", userRef.data());
//       // return Promise.resolve(userRef);
//     }

//     console.log('Adding invoice for user and product', userRef.id, vendProductData);

//     var rp2 = require('request-promise');
//     var optionsEdit = vendGetProductDetails(vendProductRef.id);
//     return rp2(optionsEdit).then(function (res){
//       console.log('optionEditRes: ', res);

//       const data = res && res.data;
//       const priceWithTax = data && data.price_including_tax;
//       const priceWithoutTax = data && data.price_excluding_tax;
//       const tax = priceWithTax - priceWithoutTax;
//       const unitPrice = parseInt(vendProductData.supply_price) || priceWithTax;
//       const is_active = data && data.is_active;

//       if (!is_active){
//         return Promise.resolve();
//       }
//       const quantity = 1
//       const totalPrice = priceWithTax*quantity;
//       const amount = get12StringAmount(totalPrice);
//       //add invoice
//       const invoiceData = {
//         createdAt : timestamp,
//         packageId : null,
//         paid : false,
//         paymentFailed : false,
//         paymentId : null,
//         userId : userRef.id,
//         unitPrice : `${unitPrice}`,
//         totalPrice : `${totalPrice}`,
//         tax:tax.toFixed(2),
//         amount : amount,
//         quantity : quantity,
//         receiptMailed : false,
//         type : 'babelDance',
//         vendProductId : vendProductRef.id,
//         vendProductName : vendProductData.name,
//         withSST:true,
//         ighandlename,
//         phone,
//         city,
//         instructorName,
//         classDate,
//         classTime,
//         classRemark,
//         selectedMemberOption,
//         classId,
//         classType:classType?classType:null
//       }
//       invoiceRef = admin.firestore().collection('invoices').doc();
//       batch.set(invoiceRef, invoiceData);
//       return batch.commit();
//       // return Promise.resolve();
//     }).catch(function (err){
//       console.log('error getting vend product: ', err);
//     });

//     // const unitPrice = parseInt(vendProductData.supply_price);

//     // const quantity = 1
//     // const totalPrice = unitPrice*quantity;
//     // amount = `${totalPrice}00`;
//     // const concatLength = 12-amount.length;
//     // for (var i = 0; i < concatLength; i++) {
//     //   amount = '0'.concat(amount);
//     // }
//     // //add invoice
//     // const invoiceData = {
//     //   createdAt : timestamp,
//     //   packageId : null,
//     //   paid : false,
//     //   paymentFailed : false,
//     //   paymentId : null,
//     //   userId : userRef.id,
//     //   unitPrice : `${unitPrice}`,
//     //   totalPrice : `${totalPrice}`,
//     //   amount : amount,
//     //   quantity : quantity,
//     //   receiptMailed : false,
//     //   type : 'babelDance',
//     //   ighandlename,
//     //   phone,
//     //   city,
//     //   instructorName,
//     //   classDate,
//     //   classTime,
//     //   classRemark,
//     //   selectedMemberOption,
//     //   vendProductId : vendProductRef.id,
//     //   vendProductName : vendProductData.name,
//     //   hasSST:true
//     // }
//     // invoiceRef = admin.firestore().collection('invoices').doc();
//     // batch.set(invoiceRef, invoiceData);
//     // return batch.commit();

//   }).then(()=>{
//     console.log('Added invoice', invoiceRef.id);
//     return invoiceRef.id;
//   }).catch((error)=>{
//     console.log('Error', error.message);
//     return Promise.resolve();
//   });
// });

// // // // // create invoice for personal trainer v2
// // // // exports.addInvoiceForPersonalTraining = functions.https.onCall((data, context) => {
// // // //   const email = data.email;
// // // //   const name = data.name;
// // // //   const phone = data.phone;
// // // //   const userId = data.userId;
// // // //   const vendProductId = data.vendProductId;
// // // //   const ptType = data.ptType? data.ptType:'limited';
// // // //   // const selectedTime = data.selectedTime;
// // // //   // const selectedAppointType = data.selectedAppointType;
// // // //   const credit = data.credit? data.credit:5;

// // // //   // console.log('data: ', data);

// // // //   if(!email || !vendProductId || !userId){
// // // //     console.log('Missing data', email, name, vendProductId);
// // // //     return Promise.resolve();
// // // //   }

// // // //   console.log('Adding invoice...', email, name, phone, vendProductId);

// // // //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// // // //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// // // //   var vendProductRef = null;
// // // //   var vendProductData = null;
// // // //   var userData = {createdAt:timestamp, email, name, phone};

// // // //   const batch = admin.firestore().batch();
// // // //   var invoiceRef = null;
// // // //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// // // //     const userResult = results[0];
// // // //     vendProductRef = results[1];
// // // //     console.log('vendProductRef: ', vendProductRef);
// // // //     vendProductData = vendProductRef && vendProductRef.data();
// // // //     var userRef = null;
// // // //     if(userResult && userResult.docs.length === 0){
// // // //       //user doesn't exist so create
// // // //       console.log("Adding user...", email, name, phone);
// // // //       userRef = admin.firestore().collection('users').doc();
// // // //       batch.set(userRef, userData);
// // // //       // return Promise.resolve(userRef);
// // // //     }else{
// // // //       userRef = userResult.docs[0];
// // // //       console.log("Found user...", userRef.data());
// // // //       // return Promise.resolve(userRef);
// // // //     }

// // // //     console.log('Adding invoice for user and product', userRef.id, vendProductData);

// // // //     const unitPrice = parseInt(vendProductData.supply_price);
// // // //     const quantity = 1
// // // //     const totalPrice = unitPrice*quantity;

// // // //     const amount = get12StringAmount(totalPrice);
    
// // // //     //add invoice
// // // //     const invoiceData = {
// // // //       createdAt : timestamp,
// // // //       paid : false,
// // // //       paymentFailed : false,
// // // //       paymentId : null,
// // // //       userId : userRef.id,
// // // //       unitPrice : `${unitPrice}`,
// // // //       totalPrice : `${totalPrice}`,
// // // //       amount : amount,
// // // //       quantity : quantity,
// // // //       receiptMailed : false,
// // // //       type : 'personalTraining',
// // // //       ptType, 
// // // //       // selectedTime,
// // // //       // appointmentType:selectedAppointType.id,
// // // //       // appoinmentName:selectedAppointType.name,
// // // //       // appoinmentScheduleUrl:selectedAppointType.schedulingUrl,
// // // //       vendProductId : vendProductRef.id,
// // // //       // calendarId: selectedAppointType.calendarIDs,
// // // //       vendProductName : vendProductData.name,
// // // //       hasSST:true,
// // // //       credit
// // // //     }
// // // //     invoiceRef = admin.firestore().collection('invoices').doc();
// // // //     batch.set(invoiceRef, invoiceData);
// // // //     return batch.commit();

// // // //   }).then(()=>{
// // // //     console.log('Added invoice', invoiceRef.id);
// // // //     return invoiceRef.id;
// // // //   }).catch((error)=>{
// // // //     console.log('Error', error.message);
// // // //     return Promise.resolve();
// // // //   });
// // // // });

// // // // // create invoice for personal trainer
// // // // exports.addInvoiceForProductPT = functions.https.onCall((data, context) => {
// // // //   const email = data.email;
// // // //   const name = data.name;
// // // //   const phone = data.phone;
// // // //   const vendProductId = data.vendProductId;
// // // //   const selectedTime = data.selectedTime;
// // // //   const selectedAppointType = data.selectedAppointType;
// // // //   const credit = data.credit? data.credit:5;

// // // //   // console.log('data: ', data);

// // // //   if(!email || !vendProductId || !selectedAppointType || !selectedTime){
// // // //     console.log('Missing data', email, name, phone, vendProductId, selectedAppointType, selectedTime);
// // // //     return Promise.resolve();
// // // //   }

// // // //   console.log('Adding invoice...', email, name, phone, vendProductId, selectedAppointType, selectedTime);

// // // //   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
// // // //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
// // // //   var vendProductRef = null;
// // // //   var vendProductData = null;
// // // //   var userData = {email, name, phone};

// // // //   const batch = admin.firestore().batch();
// // // //   var invoiceRef = null;
// // // //   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
// // // //     const userResult = results[0];
// // // //     vendProductRef = results[1];
// // // //     console.log('vendProductRef: ', vendProductRef);
// // // //     vendProductData = vendProductRef && vendProductRef.data();
// // // //     var userRef = null;
// // // //     if(userResult && userResult.docs.length === 0){
// // // //       //user doesn't exist so create
// // // //       console.log("Adding user...", email, name, phone);
// // // //       userRef = admin.firestore().collection('users').doc();
// // // //       batch.set(userRef, userData);
// // // //       // return Promise.resolve(userRef);
// // // //     }else{
// // // //       userRef = userResult.docs[0];
// // // //       console.log("Found user...", userRef.data());
// // // //       // return Promise.resolve(userRef);
// // // //     }

// // // //     console.log('Adding invoice for user and product', userRef.id, vendProductData);

// // // //     const unitPrice = parseInt(vendProductData.supply_price);
// // // //     const quantity = 1
// // // //     const totalPrice = unitPrice*quantity;
// // // //     const amount = get12StringAmount(totalPrice);
// // // //     //add invoice
// // // //     const invoiceData = {
// // // //       createdAt : timestamp,
// // // //       paid : false,
// // // //       paymentFailed : false,
// // // //       paymentId : null,
// // // //       userId : userRef.id,
// // // //       unitPrice : `${unitPrice}`,
// // // //       totalPrice : `${totalPrice}`,
// // // //       amount : amount,
// // // //       quantity : quantity,
// // // //       receiptMailed : false,
// // // //       type : 'personalTraining',
// // // //       selectedTime,
// // // //       appointmentType:selectedAppointType.id,
// // // //       appoinmentName:selectedAppointType.name,
// // // //       appoinmentScheduleUrl:selectedAppointType.schedulingUrl,
// // // //       vendProductId : vendProductRef.id,
// // // //       calendarId: selectedAppointType.calendarIDs,
// // // //       vendProductName : vendProductData.name,
// // // //       hasSST:true,
// // // //       credit
// // // //     }
// // // //     invoiceRef = admin.firestore().collection('invoices').doc();
// // // //     batch.set(invoiceRef, invoiceData);
// // // //     return batch.commit();

// // // //   }).then(()=>{
// // // //     console.log('Added invoice', invoiceRef.id);
// // // //     return invoiceRef.id;
// // // //   }).catch((error)=>{
// // // //     console.log('Error', error.message);
// // // //     return Promise.resolve();
// // // //   });
// // // // });

// exports.addInvoiceForProduct = functions.https.onCall((data, context) => {
//   const email = data.email;
//   const name = data.name;
//   const phone = data.phone;
//   const vendProductId = data.vendProductId;
//    // for rm20 class
//    const danceClassRemark = data.danceClassRemark||null;
//    const ighandlename = data.ighandlename||null;

//    // console.log('danceClassRemark: ', danceClassRemark);

//   if(!email || !vendProductId){
//     console.log('Missing data', email, name, phone, vendProductId);
//     return Promise.resolve();
//   }

//   // add in temporarily. if the user doesnt clear the cache, he/she still can make payment from the app, disable it
//   if (vendProductId === '51a1f440-45c3-d544-eba1-de1f28ed5e64'){
//     console.log('vend product is no longer available');
//     return Promise.resolve();
//   }

//   console.log('Adding invoice...', email, name, phone, vendProductId);

//   const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
//   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
//   var vendProductRef = null;
//   var vendProductData = null;
//   var userData = {email, name, phone};

//   const batch = admin.firestore().batch();
//   var invoiceRef = null;
//   return Promise.all([userQueryPromise, vendQueryPromise]).then(results=>{
//     const userResult = results[0];
//     vendProductRef = results[1];
//     vendProductData = vendProductRef && vendProductRef.data();
//     var userRef = null;
//     if(userResult && userResult.docs.length === 0){
//       //user doesn't exist so create
//       console.log("Adding user...", email, name, phone);
//       userRef = admin.firestore().collection('users').doc();
//       batch.set(userRef, userData);
//       // return Promise.resolve(userRef);
//     }else{
//       userRef = userResult.docs[0];
//       console.log("Found user...", userRef.data());

//       // return Promise.resolve(userRef);
//     }

//     console.log('Adding invoice for user and product', userRef.id, vendProductData);

//     const unitPrice = parseInt(vendProductData.supply_price);
//     const quantity = 1
//     const totalPrice = unitPrice*quantity;
//     const amount = get12StringAmount(totalPrice);
//     //add invoice
//     const invoiceData = {
//       createdAt : timestamp,
//       packageId : null,
//       paid : false,
//       paymentFailed : false,
//       paymentId : null,
//       userId : userRef.id,
//       unitPrice : `${unitPrice}`,
//       totalPrice : `${totalPrice}`,
//       amount : amount,
//       quantity : quantity,
//       receiptMailed : false,
//       type : 'product',
//       vendProductId : vendProductRef.id,
//       vendProductName : vendProductData.name,
//       hasSST:true
//     }
//     if (danceClassRemark){
//       invoiceData.danceClassRemark = danceClassRemark;
//       invoiceData.phone = phone;
//       invoiceData.ighandlename = ighandlename;
//     }
//     invoiceRef = admin.firestore().collection('invoices').doc();
//     batch.set(invoiceRef, invoiceData);
//     return batch.commit();

//   }).then(()=>{
//     console.log('Added invoice', invoiceRef.id);
//     return invoiceRef.id;
//   }).catch((error)=>{
//     console.log('Error', error.message);
//     return Promise.resolve();
//   });
// });

// // add invoice for product v2
exports.addInvoiceForProductv2 = functions.https.onCall((data, context) => {
  const email = data.email;
  const name = data.name;
  const phone = data.phone;
  const vendProductId = data.vendProductId;
  const matchedPromo = data.matchedPromo;
  const quantity = data.quantity||1;
   // console.log('danceClassRemark: ', danceClassRemark);
   // console.log('addInvoiceForProductv2 data: ', data);

  if(!email || !vendProductId || !quantity){
    console.log('Missing data', email, name, vendProductId);
    return Promise.resolve();
  }
  // console.log('vendPromo: ', matchedPromo);
  // console.log('Adding invoice...', email, name, phone, vendProductId);

  const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vendProductId).get();
  const packageQuery = admin.firestore().collection('packages').get();
  // const vendPromoQueryPromise = admin.firestore().collection('vendPromos').get();

  var vendProductRef = null;
  var vendProductData = null;
  var userData = {email, name, phone};

  // console.log('userData: ', userData);
  const batch = admin.firestore().batch();
  var invoiceRef = null;
  return Promise.all([userQueryPromise, vendQueryPromise, packageQuery]).then(results=>{
    const userResult = results[0];
    vendProductRef = results[1];
    const pkgRes = results[2];
    // const vendPromoRes = results[2];

    // var promoByProdIdMap = {};
    // vendPromoRes && vendPromoRes.forEach(doc=>{
    //   const data = doc.data();
    //   const condition = data && data.condition;
    //   const include = condition && condition.include;
    //   const exclude = condition && condition.exclude;

    //   include && include.forEach(incData=>{
    //     const field = incData && incData.field; 
    //     const value = incData && incData.value;
    //     if (field === 'product_id' && value && value === vendProductId){
    //       // map by vendProductId
    //       promoByProdIdMap[value] = data;
    //     }
    //     // if (field === 'brand_id' && value){
    //     //   // get all vendproduct by brandId
    //     //   const productByBrandMapData = productByBrandMap[value];           
    //     //   const vendProductId = productByBrandMapData && productByBrandMapData.id;
    //     //   // console.log('vendProductId: ', vendProductId);
    //     //   if (vendProductId){
    //     //     promoByProdIdMap[vendProductId] = data;
    //     //   }
    //     // }
    //     // if (field === 'supplier_id' && value){

    //     // }
    //     // if (field === 'type_id' && value){
    //     //   const productBytypeData = productBytypeMap[value];
    //     //   const vendProductId = productBytypeData && productBytypeData.id;
    //     //   if (vendProductId){
    //     //     promoByProdIdMap[vendProductId] = data;
    //     //   }
    //     // }
    //   });
    // });

    var pkgMap = {};
    var pkgMapByVendProdId = {};
    pkgRes.forEach(doc=>{
      const data = doc.data();
      const vendProductIds = data.vendProductIds;
      // console.log('vendProductIds from pkg: ', vendProductIds);
      if (vendProductIds){
        vendProductIds.forEach(vendId=>{
          // console.log('vendId from vendProdIds: ', vendId);
          pkgMapByVendProdId[vendId]=data;
          pkgMapByVendProdId[vendId].packageId = doc.id;
        })
      }
      pkgMap[doc.id]=doc.data();
    });

    vendProductData = vendProductRef && vendProductRef.data();
    var userRef = null;
    if(userResult && userResult.docs.length === 0){
      //user doesn't exist so create
      // console.log("Adding user...", email, name, phone);
      userRef = admin.firestore().collection('users').doc();
      batch.set(userRef, userData);
      // return Promise.resolve(userRef);
    }else{
      userRef = userResult.docs[0];
      // console.log("Found user...", userRef.data());

      // return Promise.resolve(userRef);
    }

    console.log('Adding invoice for user and product', userRef.id, vendProductData);


    var rp2 = require('request-promise');
    // console.log('vendProductRef.id: ', vendProductRef.id);
    // var optionsEdit = vendGetProductDetails(vendProductRef.id);

    // return rp2(optionsEdit).then(function (res){
      // console.log('optionEditRes: ', res);

      // const data = res && res.data;
      // console.log('resdata: ', data);
      
      // const priceWithoutTax = vendProductData && vendProductData.supply_price;
      // console.log('priceWithoutTax: ', priceWithoutTax);
      // const priceWithTax = priceWithoutTax * 1.06; // hardcode
      // const isPromo = (matchedPromo && Object.keys(matchedPromo).length > 0);
      // const actionPromoValue = isPromo && matchedPromo.action && matchedPromo.action.value;
      // const actionPromoType = isPromo && matchedPromo.action && matchedPromo.action.type;
      // console.log('matchedPromo: ', matchedPromo);
      // console.log('Object.keys(matchedPromo).length: ', Object.keys(matchedPromo).length);
      // console.log('isPromo: ', isPromo);
      // console.log('actionPromoValue: ', actionPromoValue);
      // console.log('actionPromoType: ', actionPromoType);
      // console.log('quantity: ', quantity);
     
      // // const unitDiscount = 
      // var tax = priceWithTax - priceWithoutTax;
      // // const promoPriceTax = isPromo && actionPromoType && actionPromoType === 'basic_percent_discount' && actionPromoValue && actionPromoValue*actionPromoValue;
      // // const priceAfterPromo = parseFloat(vendPrice - promoPriceTax).toFixed(2);

      // const unitPrice = parseFloat(vendProductData.supply_price).toFixed(2) || priceWithTax;
      // var totalTax = 
      //   (isPromo && actionPromoType && actionPromoType === 'fixed_price_discount')? actionPromoValue * 0.06:
      //   parseFloat(tax*quantity).toFixed(2);
      
      // console.log('priceWithTax: ', priceWithTax);
      // // console.log('priceWithTax*quantity*actionPromoValue: ', parseFloat(priceWithTax) * parseInt(quantity) * parseFloat(1-actionPromoValue));

      // const totalPrice =
      //   (isPromo && actionPromoType && actionPromoType === 'basic_percent_discount')? (actionPromoValue && (priceWithTax*quantity*(1-actionPromoValue))):
      //   (isPromo && actionPromoType && actionPromoType === 'basic_fixed_discount')? (actionPromoValue && ((priceWithTax-actionPromoValue)*quantity)):
      //   (isPromo && actionPromoType && actionPromoType === 'fixed_pool_discount')? (actionPromoValue && ((priceWithTax*quantity)-actionPromoValue)):
      //   (isPromo && actionPromoType && actionPromoType === 'percent_pool_discount')? (actionPromoValue && ((priceWithTax*quantity)*(1-actionPromoValue))):
      //   (isPromo && actionPromoType && actionPromoType === 'fixed_price_discount')? (actionPromoValue):
      //   // (actionPromoType && actionPromoType === 'percent_discount')? (actionPromoValue && (priceWithTax - actionPromoValue)):
      //   // (actionPromoType && actionPromoType === 'fixed_discount')? (actionPromoValue && (priceWithTax - actionPromoValue));
      //   parseFloat(priceWithTax*quantity).toFixed(2);

      // const amount = get12StringAmount(totalPrice);

      // //add invoice
      // const invoiceData = {
      //   createdAt : timestamp,
      //   packageId : null,
      //   paid : false,
      //   paymentFailed : false,
      //   paymentId : null,
      //   userId : userRef.id,
      //   unitPrice : `${unitPrice}`,
      //   totalPrice : `${totalPrice}`,
      //   tax:totalTax,
      //   amount : amount,
      //   quantity : quantity,
      //   receiptMailed : false,
      //   type : 'product',
      //   // vendProductId : vendProductRef.id,
      //   vendProductId : vendProductData.id,
      //   vendProductName : vendProductData.name,
      //   withSST:true,
      // }
      // console.log('invoiceData: ', invoiceData);
      // if (matchedPromo && Object.keys(matchedPromo).length != 0){
      //   //todo: to simplify the promo. just show promoId instead
      //   invoiceData.matchedPromo = matchedPromo;
      //   invoiceData.actionPromoValue = actionPromoValue;
      //   invoiceData.actionPromoType = actionPromoType;
      //   invoiceData.promoId = matchedPromo && matchedPromo.id;
      // }

      const pkgData = vendProductId && pkgMapByVendProdId[vendProductId];
      // console.log('pkgMapByVendProdId: ', pkgMapByVendProdId);
      // // console.log('vendProductId: ', vendProductId);
      // console.log('packageName: ', pkgData);

    const unitPrice = parseInt(vendProductData.supply_price) * 1.06; // hardcode
    const quantity = 1
    const totalPrice = unitPrice*quantity;
    const amount = get12StringAmount(totalPrice);
    //add invoice
    const invoiceData = {
      createdAt : timestamp,
      packageId : pkgData? pkgData.packageId? pkgData.packageId:null:null,
      paid : false,
      paymentFailed : false,
      paymentId : null,
      userId : userRef.id,
      unitPrice : `${unitPrice}`,
      totalPrice : `${totalPrice}`,
      amount : amount,
      quantity : quantity,
      receiptMailed : false,
      // type : 'product',
      // vendProductId : vendProductRef.id,
      type : pkgData? 'membership':'product',
      vendProductId:vendProductId,
      vendProductName : vendProductData.name,
      hasSST:true
    }

      invoiceRef = admin.firestore().collection('invoices').doc();
      batch.set(invoiceRef, invoiceData);
      return batch.commit();

    // }).catch(function (err){
    //   console.log('error getting vend product: ', err);
    // });

  }).then(()=>{
    console.log('Added invoice', invoiceRef.id);
    return invoiceRef.id;
  }).catch((error)=>{
    console.log('Error', error.message);
    return Promise.resolve();
  });
});

// add invoice for product v2
exports.addInvoiceForJoiningnMembershipProduct = functions.https.onCall((data, context) => {
  const email = data.email;
  const name = data.name;
  const phone = data.phone;
  const vendProductIds = data.vendProductIds;

   // console.log('danceClassRemark: ', danceClassRemark);
   console.log('addInvoiceForProductv2 data: ', data);

  if(!email || !vendProductIds){
    console.log('Missing data', email, name, phone, vendProductIds);
    return Promise.resolve();
  }

  console.log('Adding invoice...', email, name, phone, vendProductIds);

  const userQueryPromise = admin.firestore().collection('users').where('email', '==', email).limit(1).get();
  
  var userData = {email, name, phone};

  // console.log('userData: ', userData);
  const batch = admin.firestore().batch();
  var invoiceRef = null;
  return Promise.all([userQueryPromise]).then(results=>{
    const userResult = results[0];
   
    var userRef = null;
    if(userResult && userResult.docs.length === 0){
      //user doesn't exist so create
      console.log("Adding user...", email, name, phone);
      userRef = admin.firestore().collection('users').doc();
      batch.set(userRef, userData);
      // return Promise.resolve(userRef);
    }else{
      userRef = userResult.docs[0];
      // console.log("Found user...", userRef.data());

      // return Promise.resolve(userRef);
    }

    console.log('Adding invoice for user and product', userRef.id);
  //     Object.keys(vendProductIds).forEach(vid=>{
  //   const vendQueryPromise = admin.firestore().collection('vendProducts').doc(vid).get();
  //   vendQueryPromises.push(vendQueryPromise);
  // });
    
    const vendProdId = Object.keys(vendProductIds)[0];
    console.log('vendProdId: ', vendProdId);
    var rp2 = require('request-promise');
    var optionsEdit = vendGetProductDetails(vendProdId);
    return rp2(optionsEdit).then(function (res){
      // console.log('optionEditRes: ', res);

      const data = res && res.data;
      console.log('resData: ', data);
      const priceWithTax = data && data.price_including_tax;
      const priceWithoutTax = data && data.price_excluding_tax;
      const tax = priceWithTax - priceWithoutTax;
      const unitPrice = parseInt(data.supply_price) || priceWithTax;

      const quantity = 1
      const totalPrice = priceWithTax*quantity;
      const amount = get12StringAmount(totalPrice);
      //add invoice
      const invoiceData = {
        createdAt : timestamp,
        packageId : null,
        paid : false,
        paymentFailed : false,
        paymentId : null,
        userId : userRef.id,
        unitPrice : `${unitPrice}`,
        totalPrice : `${totalPrice}`,
        tax:tax.toFixed(2),
        amount : amount,
        quantity : quantity,
        receiptMailed : false,
        type : 'membership',
        // vendProductId : vendProductRef.id,
        vendProductId:vendProdId,
        // vendProductName : data.name,
        // withSST:true,
        hasSST:true
      }
      invoiceRef = admin.firestore().collection('invoices').doc();
      batch.set(invoiceRef, invoiceData);
      return batch.commit();

    }).catch(function (err){
      console.log('error getting vend product: ', err);
    });
    
  }).then(()=>{
    console.log('Added invoice', invoiceRef.id);
    return invoiceRef.id;
  }).catch((error)=>{
    console.log('Error', error.message);
    return `invalidLink${error.message}`
    // return Promise.resolve();
  });
});

// // create custome token, response = custom token
// exports.createCustomToken = functions.https.onRequest((request, response) => {

//   const uid = 'jahsjdhkajasahd';

//   return admin
//     .auth()
//     .createCustomToken(uid)
//     .then((customToken) => {
//       console.log('customToken: ', customToken);
//       // Send token back to client
//       return response.status(200).send({
//         customToken
//       });
//     })
//     .catch((error) => {
//       console.log('Error creating custom token:', error);
//       return response.status(200).send({
//         error
//       });
//     });
// });

// exports.addnullvptinvoice = functions.https.onRequest((request, response) => {
//   const addInvoiceForProductVT = admin.firebase.functions().httpsCallable('addInvoiceForProductVT');
//   addInvoiceForProductVT({}).then(invoiceRef=>{
//     console.log('hello');
//     return "test";
//   }).catch(e=>{
//     console.log(e);
//   }) 
//   response.send("Hello from Firebase!");
//  });

// // // // var appointmentArray = [];

// // // // const express = require('express');
// // // // const app = express();
// // // // // app.use(cors());
// // // // // Automatically allow cross-origin requests
// // // // // const cors = require("cors");
// // // // app.use(cors({ origin: true }));
// // // // app.get('/videoconf', (req, res)=>{
// // // //   console.log('videoConfPage') // /admin
// // // //   res.send({
// // // //     success:true,
// // // //     message:`videoConfPage`
// // // //   })
// // // // });
// // // // // build multiple CRUD interfaces:
// // // // // app.get('/:id', (req, res) => res.send(widgets.getById(req.params.id)));
// // // // // app.post('/', (req, res) => res.send(widgets.create()));
// // // // // app.put('/:id', (req, res) => res.send(widgets.update(req.params.id, req.body)));
// // // // // app.delete('/:id', (req, res) => res.send(widgets.delete(req.params.id)));
// // // // // app.get('/', (req, res) => res.send(widgets.list()));
// // // // // View all packages
// // // // app.get('/packages', (req, res) => {
// // // //   const packageQuery = admin.firestore().collection('packages').get();
// // // //   return Promise.all([packageQuery]).then(results=>{
// // // //     const packagesResults = results[0];
// // // //     console.log('packagesResults: ', packagesResults);

// // // //     var packageMap = {};
// // // //     packagesResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       packageMap[doc.id] = data;
// // // //     });

// // // //     console.log('packageMap: ', packageMap);
// // // //     // return Promise.resolve();
// // // //     return res.send(200).status(packageMap);
// // // //   })
// // // // })

// // // // app.get('/buypt', (req, res) => {

// // // //   var Acuity = require('acuityscheduling');
// // // //   var acuity = Acuity.basic({
// // // //     userId: '19463819',
// // // //     apiKey: 'ce1bf0313a0259f39b2e20c7fb48e11d'
// // // //   });

// // // //   acuity.request('/appointments', function (err, res, appointments) {
// // // //     if (err) return console.error(err);
// // // //     console.log('appointments:', appointments);
// // // //     // appointmentArray.push(appointments);
// // // //     console.log('theresult: ', res);
// // // //     // var session = req.session;
// // // //     // return res.status(200).send('OK');
// // // //     // return appointments;
// // // //     // return res;
// // // //     // return Promise.resolve();

// // // //   })

// // // //   return res.status(200).send({
// // // //     success:true,
// // // //     data:'data'
// // // //   });
// // // // })

// // // // // Expose Express API as a single Cloud Function:
// // // // exports.widgets = functions.https.onRequest(app);


// // // for acuity
// // var Acuity = require('acuityscheduling');
// // const { getVendProducts } = require('../src/selectors');
// // var acuity = Acuity.basic({
// //   userId: '19463819',
// //   apiKey: 'ce1bf0313a0259f39b2e20c7fb48e11d'
// // });

// // var allAppointmentsArray = [];
// // exports.getAllAppointments = functions.https.onRequest((req, res) => {

// //   acuity.request('appointments', function (err, res, appointments) {
// //     if (err) return console.error(err);
// //     console.log('getAllAppointments: ', appointments);

// //     console.log('the response: ', res);
// //     allAppointmentsArray = appointments;
// //     return allAppointmentsArray
// //     // return res.status(200).send({
// //     //   appointments: appointments
// //     // })
// //   });

// //   return res.status(200).send({
// //     success:true,
// //     data:'data',
// //     appointments: allAppointmentsArray
// //   })
// // });

// // function download(filename, text) {
// //   var element = document.createElement('a');
// //   element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
// //   element.setAttribute('download', filename);

// //   element.style.display = 'none';
// //   document.body.appendChild(element);

// //   element.click();

// //   document.body.removeChild(element);
// // }

// // exports.saveTextFile = functions.https.onRequest((req, res) => {
// //   var fs = require('fs');

// //   fs.writeFile('/Users/faizul/mynewfile3.txt', 'Hello content!', function (err) {
// //     if (err){
// //       return res.status(200).send({success:false, err});
// //     }
// //     else{
// //       return res.status(200).send({success:true, message:'file successfully saved'});
// //     }
// //   });
// // });

// // // for POS integration with KLCC
// // exports.getTotalDailySalesForPOS = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   var batch = admin.firestore().batch();
// //   var vendSaleRef = null;

// //   var theString=''; 
// //   const vendSalesQuery = admin.firestore().collection('vendSales').where('createdDay', '==', moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD')).get();
// //   const adyenPaymentQuery = admin.firestore().collection('adyTransactions').get();
// //   // return corsFn(req, res, () => {
// //   //   const optionBody = JSON.parse(JSON.stringify(req.body));
// //   //   const optionMethod = req.method;

// //   //   // const vendSalesQuery = admin.firestore().collection('vendSales').where(moment('created_at').tz('Asia/Kuala_Lumpur'), '>=', moment().tz('Asia/Kuala_Lumpur').startOf('day')).get();
// //   //   const vendSalesQuery = admin.firestore().collection('vendSales').where('createdDay', '==', moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD')).get();

// //   var posObj = {};
// //   var posArray = [];
// //   // var posObjTemp = {};
// //   // to create 24hour obj
// //   for (var i=0; i<=23; i++){
// //     posObj[moment().tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('YYYY-MM-DDTHH')] = {
// //       currentTime:moment().tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour'),
// //       machineId:71000010, 
// //       batchId:moment().tz('Asia/Kuala_Lumpur').format('YYYYMMDD'), // need to recheck
// //       date:moment().tz('Asia/Kuala_Lumpur').startOf('days').format('DDMMYYYY'),
// //       hour:moment().tz('Asia/Kuala_Lumpur').startOf('days').add(i, 'hour').format('HH'),
// //       receiptCount:0, //default
// //       totalnetSales:0, //before SST
// //       totalSST:0,
// //       totalDiscount:0,
// //       totalServiceCharge:0,
// //       totalPax:0, // for F&B only
// //       totalCash:0,
// //       totalTNG:0,
// //       totalVisa:0,
// //       totalMasterCard:0,
// //       totalAmex:0,
// //       totalVoucher:0,
// //       totalOthers:0,
// //       sstRegistered:'Y'
// //     };
// //     // posArray.push(posObjTemp);
// //   }
// //    // posArray.push(posObjTemp);

// //   return Promise.all([vendSalesQuery, adyenPaymentQuery]).then(results=>{
    
// //     const vendSaleRes = results[0];
// //     const adyenRes = results[1];

// //     var vendSaleMap = {};
// //     var vendSaleCountFB = 0; // vendsale count from firebase
// //     var finalString = 'saya';
// //     var finalArrayString = [];
// //     // console.log('vendSalesQuery: ', vendSaleRes);
// //     vendSaleRes.forEach((vendSale)=>{
// //       const data = vendSale.data();
// //       const status = data && data.status;
// //       const created_at = data && data.created_at;
// //       const createdAtMalaysia = created_at && moment(created_at).tz('Asia/Kuala_Lumpur');
// //       const register_sale_payments = data && data.register_sale_payments;
// //       const payment_type = register_sale_payments && register_sale_payments[0] && register_sale_payments[0].payment_type;
// //       const payment_type_name = payment_type && payment_type.name;
// //       const totals = data && data.totals;
// //       const total_price = (totals && totals.total_price)? totals.total_price:0
// //       const total_tax = totals && totals.total_tax;
// //       const register_sale_products = data.register_sale_products;
// //       var total_discount = 0.0;
// //       register_sale_products && register_sale_products.forEach(prod=>{
// //         const discount = prod && prod.discount;
// //         const prodId = prod && prod.id;
// //         const price_total = prod && prod.price_total;
// //         if (discount && parseFloat(discount)>0){
// //           total_discount+=discount;
// //         }
// //         // for discount SKU
// //         if (prodId && prodId === 'd14ffa87-ea1c-ae38-11eb-92a9d8656e3e'){
// //           total_discount+=Math.abs(price_total);
// //         }
// //       });

// //       const outlet_id = data && data.outlet_id;
      

// //       const createdAtMalaysiaHour = createdAtMalaysia && createdAtMalaysia.format('HH');
// //       // console.log('vendSaleData: ', data);
// //       // for KLCC
// //       if (data && vendSale.id && (status && status!=='VOIDED') && (outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026')){
// //         vendSaleCountFB += 1;
// //         vendSaleMap[vendSale.id] = data;

        
// //         Object.entries(posObj).forEach(([key,value]) => {
// //           const hourKey = moment(key).format('HH');
// //           // posObj[key].receiptCount = posObj[key].receiptCount + 1;
// //           // posObj[key].totalnetSales = posObj[key].totalnetSales + total_price;

// //           // if (createdAtMalaysia && createdAtMalaysia.isSameOrAfter(moment(key)) && createdAtMalaysia.add(1, 'hours').isBefore(moment(key))){
// //           // if (createdAtMalaysia && moment(key).isSameOrAfter(createdAtMalaysia) && moment(key).add(1, 'hours').isBefore(createdAtMalaysia)){
// //           if (createdAtMalaysia && (hourKey===createdAtMalaysiaHour)){
// //             posObj[key].receiptCount =+ 1;
// //             posObj[key].totalnetSales = parseFloat(posObj[key].totalnetSales) + parseFloat(total_price);
// //             posObj[key].totalSST = parseFloat(posObj[key].totalSST) + parseFloat(total_tax);
// //             posObj[key].totalDiscount = parseFloat(posObj[key].totalDiscount) + parseFloat(total_discount);
            
// //             if (payment_type_name && payment_type_name==='Cash'){
// //               posObj[key].totalCash = parseFloat(posObj[key].totalCash) + parseFloat(total_price);
// //             }
// //             else if (payment_type_name && (payment_type_name.includes('Credit') || payment_type_name.includes('Debit'))){
// //               posObj[key].totalVisa = parseFloat(posObj[key].totalVisa) + parseFloat(total_price);
// //             }

// //           }
// //         });
// //       }
// //     });

// //     var adyenSaleMap = {};
// //     var adyenSaleCountFB = 0; // adyen count from firebase
// //     var adyenSaleArray = [];

// //     adyenRes && adyenRes.forEach(doc=>{
// //       const data = doc.data();
// //       const notificationItems = data.notificationItems && data.notificationItems.length > 0 && data.notificationItems[0];
// //       const NotificationRequestItem = notificationItems && notificationItems.NotificationRequestItem;
// //       const success = NotificationRequestItem && NotificationRequestItem.succes;
// //       const eventCode = NotificationRequestItem && NotificationRequestItem.eventCode;
// //       const createdAt = NotificationRequestItem && NotificationRequestItem.eventDate;

// //       // if (createdAt){
// //       //   console.log('createdAt adyen: ', moment(createdAt).format('YYYY-MM-DD'))
// //       // }
// //       if(success && createdAt && moment(createdAt).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
// //         adyenSaleCountFB+=1;
// //         adyenSaleMap = NotificationRequestItem;
// //         // adyenSaleArray.push
// //       }
// //     });

// //     // adyenSaleMap && adyenSaleMap

// //     Object.entries(posObj).forEach(([key,value]) => {
// //       const hourKey = moment(key).format('HH');
// //       theString = `${value.machineId} | ${value.batchId} | ${value.date} | ${value.hour} | ${value.receiptCount} | ${value.totalnetSales} | ${value.totalSST} | ${value.totalDiscount} | ${value.totalServiceCharge} | ${value.totalPax} | ${value.totalCash} | ${value.totalTNG} | ${value.totalVisa} | ${value.totalMasterCard} | ${value.totalAmex} | ${value.totalVoucher} | ${value.totalOthers} | ${value.sstRegistered}`;
// //       // finalString.concat(`${value.machineId} | ${value.batchId} | ${value.date} | ${value.hour} | ${value.receiptCount} | ${value.totalnetSales} | ${value.totalSST} | ${value.totalDiscount} | ${value.totalServiceCharge} | ${value.totalPax} | ${value.totalCash} | ${value.totalTNG} | ${value.totalVisa} | ${value.totalMasterCard} | ${value.totalAmex} | ${value.totalVoucher} | ${value.totalOthers} | ${value.sstRegistered}` + "\n");
// //       finalString = [theString];
// //       finalArrayString.push(finalString);
// //     });
    
// //     // download("hello.txt",finalString);

// //     // var FileSaver = require('file-saver');
// //     // // var theCSVformat = this.ConvertToCSV(finalData);
// //     // var blob = new Blob([finalArrayString.join()], {type: "text/plain;charset=utf-8"});
// //     // FileSaver.saveAs(blob, "BFMReport.csv");
    
// //     const fs = require('fs');
// //     let data = "This is a file containing a collection of movies.";

// //     // fs.writeFile('helloworld.txt', 'Hello Faizulhadi!', function (err) {
// //     //   if (err) return console.log('error saving the file:', err);
// //     //   console.log('The file was saved!');
// //     // });
// //     // fs.writeFileSync('faizulhadijamilkacak', theString);
// //     // fs.writeFile("/Users/faizul", "Hey there!", function(err) {
// //     //   if(err) {
// //     //       return console.log(err);
// //     //   }
// //     //   console.log("The file was saved!");
// //     // });

// //     // return fs.writeFile('helloworld.txt', 'Hello Faizulhadi!', function (err) {
// //     //   if (err) return console.log('error saving the file:', err);
// //     //   else{
// //         return res.status(200).send({
// //           success:true,
// //           finalString,
// //           finalArrayString,
// //           finalRes:finalArrayString.join("\n"),
// //           theString,
// //           vendSaleCountFB,
// //           vendSaleMap,
// //           adyenSaleCountFB,
// //           adyenSaleMap,
// //           posObj,
// //         });
// //     //   }
// //     //   // console.log('The file was saved!');
// //     // });
    
// //     // var rp2 = require('request-promise');
// //     // // var optionsEdit = vendGetVendSale();
// //     // // const date_from = '2020-07-10'
// //     // // const date_to = '2020-07-12';
// //     // const date_from = moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD');
// //     // const date_to = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days').format('YYYY-MM-DD');
// //     // // const date_from = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(8, 'hours').format('YYYY-MM-DDTHH:mm:ss') + `Z`;
// //     // // const date_to = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(8, 'hours').add(1, 'days').format('YYYY-MM-DDTHH:mm:ss') + `Z`;

// //     // // const date_from = moment().startOf('day').format('YYYY-MM-DD') + `T00:00:00Z`;
// //     // // const date_to = moment().startOf('day').add(1, 'days').format('YYYY-MM-DD') + `T00:00:00Z`;
// //     // var optionEdit = searchVend(date_from, date_to);

// //     // var paymentMap = {};
// //     // var missingVend = [];
// //     // var missingFB = [];
// //     // var paymentIdArray = [];
// //     // var newVendSaleCount = 0;
// //     // return rp2(optionEdit).then(function (result){
// //     //   // get the data array
// //     //   const data = result && result.data;
// //     //   data && data.forEach((saleData)=>{

// //     //     const created_at = saleData && saleData.created_at;
// //     //     const paymentId = saleData && saleData.id;
        
// //     //     paymentMap[paymentId] = saleData;
// //     //     paymentIdArray.push(paymentId);

// //     //     // vendSaleRef = admin.firestore().collection('vendSalesV2').doc(paymentId);
// //     //     batch.set(admin.firestore().collection('vendSales').doc(paymentId), saleData);
// //     //     if(newVendSaleCount >= 499){
// //     //       batch.commit();
// //     //       newVendSaleCount = 0
// //     //       batch = admin.firestore().batch();
// //     //     }
// //     //     newVendSaleCount += 1;
// //     //     // batch.set(vendSaleRef, saleData);
// //     //   });
    
// //     //   const version = result && result.version;
// //     //   // return batch.commit();

// //     //   var theObject = {
// //     //     success:true,
// //     //     message: 'no vendSale added',
// //     //     createdAt: timestamp
// //     //   }
  
// //     //   if(newVendSaleCount > 0){
// //     //     // return 
// //     //     return batch.commit().then(()=>{
// //     //       // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //     //       // console.log('New invoices', newInvoiceCount);
// //     //       // console.log('Deleted invoices', needsDeleteCount);
// //     //       const keyPaymentArray = Object.keys(paymentMap);
          
// //     //       const keyVendSaleArray = Object.keys(vendSaleMap);

// //     //       for (var i in keyVendSaleArray){
// //     //         if (!keyPaymentArray.includes(keyVendSaleArray[i])){
// //     //           console.log('payment is missing: ', keyVendSaleArray[i]);
// //     //           missingVend.push(keyVendSaleArray[i]);
// //     //         }
// //     //       }

// //     //       for (var j in keyPaymentArray){
// //     //         if (!keyVendSaleArray.includes(keyPaymentArray[j])){
// //     //           console.log('payment is missing: ', keyPaymentArray[j]);
// //     //           missingFB.push(keyPaymentArray[j]);
// //     //         }
// //     //       }
// //     //       // keyVendSaleArray.forEach((keyVendSale)=>{
// //     //       //   keyPaymentArray.forEach((keyPayment)=>{

// //     //       //   });
// //     //       // });

// //     //       //if ()

// //     //       theObject = {
// //     //         success:true,
// //     //         message: 'OK',
// //     //         newVendSaleCount,
// //     //         vendSaleCountFB,
// //     //         keyPaymentMap: Object.keys(paymentMap),
// //     //         keyVendSaleMap: Object.keys(vendSaleMap),
// //     //         missingVend,
// //     //         missingFB,
// //     //         paymentMap,
// //     //         vendSaleMap,
// //     //         createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //     //         createdAtTime: moment(timestamp).format('hh:mm:ss')
// //     //       };
          
// //     //       // return res.status(200).send({success:true, theObject}); 

// //     //       return sendWarningVendEmail(moment(timestamp).format('DD-MM-YYYY'), vendSaleCountFB, newVendSaleCount).then(results=>{
// //     //         return res.status(200).send(theObject);
// //     //       });
          
// //     //     }).catch((error)=>{
// //     //       console.log('error batch: ', error);
// //     //     });
// //     //     // return res.status(200).send(theObject);
// //     //   }else{
// //     //     // admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //     //     return res.status(200).send(theObject);
// //     //   }

// //     //   // return res.status(200).send({success:true, paymentMap, version}); 
// //     // });
// //   // });
// //   });
// // });



// // // transfer payment to vendSalesV2
// // exports.transferToVendSaleV2 = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   var batch = admin.firestore().batch();
// //   var vendSaleRef = null;

// //   return corsFn(req, res, () => {
// //     const optionBody = JSON.parse(JSON.stringify(req.body));
// //     const optionMethod = req.method;

// //     const vendSalesQuery = admin.firestore().collection('vendSales').where('createdDay', '==', moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD')).get();
// //     // const vendSalesQuery = admin.firestore().collection('vendSales').where('createdDay', '==', moment('2020-08-21').tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD')).get();

// //     return Promise.all([vendSalesQuery]).then(results=>{
     
// //       const vendSaleRes = results[0];

// //       var vendSaleMap = {};
// //       var vendSaleCountFB = 0; // vendsale count from firebase
// //       // console.log('vendSalesQuery: ', vendSaleRes);
// //       vendSaleRes.forEach((vendSale)=>{
// //         const data = vendSale.data();
// //         const status = data && data.status;
// //         // console.log('vendSaleData: ', data);
// //         if (data && vendSale.id && (status && status!=='VOIDED')){
// //           vendSaleCountFB += 1;
// //           vendSaleMap[vendSale.id] = data;
// //         }
// //       });

// //       var rp2 = require('request-promise');
// //       // var optionsEdit = vendGetVendSale();
// //       // const date_from = '2020-07-10'
// //       // const date_to = '2020-07-12';
// //       const date_from = moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD');
// //       const date_to = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days').format('YYYY-MM-DD');
// //       // const date_from = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(8, 'hours').format('YYYY-MM-DDTHH:mm:ss') + `Z`;
// //       // const date_to = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(8, 'hours').add(1, 'days').format('YYYY-MM-DDTHH:mm:ss') + `Z`;
  
// //       // const date_from = moment().startOf('day').format('YYYY-MM-DD') + `T00:00:00Z`;
// //       // const date_to = moment().startOf('day').add(1, 'days').format('YYYY-MM-DD') + `T00:00:00Z`;
// //       var optionEdit = searchVend(date_from, date_to);
  
// //       var paymentMap = {};
// //       var missingVend = [];
// //       var missingFB = [];
// //       var paymentIdArray = [];
// //       var newVendSaleCount = 0;
// //       return rp2(optionEdit).then(function (result){
// //         // get the data array
// //         const data = result && result.data;
// //         data && data.forEach((saleData)=>{
  
// //           const created_at = saleData && saleData.created_at;
// //           const paymentId = saleData && saleData.id;
         
// //           paymentMap[paymentId] = saleData;
// //           paymentIdArray.push(paymentId);
  
// //           // vendSaleRef = admin.firestore().collection('vendSalesV2').doc(paymentId);
// //           batch.set(admin.firestore().collection('vendSales').doc(paymentId), saleData);
// //           if(newVendSaleCount >= 499){
// //             batch.commit();
// //             newVendSaleCount = 0
// //             batch = admin.firestore().batch();
// //           }
// //           newVendSaleCount += 1;
// //           // batch.set(vendSaleRef, saleData);
// //         });
      
// //         const version = result && result.version;
// //         // return batch.commit();
  
// //         var theObject = {
// //           success:true,
// //           message: 'no vendSale added',
// //           createdAt: timestamp
// //         }
    
// //         if(newVendSaleCount > 0){
// //           // return 
// //           return batch.commit().then(()=>{
// //             // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //             // console.log('New invoices', newInvoiceCount);
// //             // console.log('Deleted invoices', needsDeleteCount);
// //             const keyPaymentArray = Object.keys(paymentMap);
           
// //             const keyVendSaleArray = Object.keys(vendSaleMap);

// //             for (var i in keyVendSaleArray){
// //               if (!keyPaymentArray.includes(keyVendSaleArray[i])){
// //                 console.log('payment is missing: ', keyVendSaleArray[i]);
// //                 missingVend.push(keyVendSaleArray[i]);
// //               }
// //             }

// //             for (var j in keyPaymentArray){
// //               if (!keyVendSaleArray.includes(keyPaymentArray[j])){
// //                 console.log('payment is missing: ', keyPaymentArray[j]);
// //                 missingFB.push(keyPaymentArray[j]);
// //               }
// //             }
// //             // keyVendSaleArray.forEach((keyVendSale)=>{
// //             //   keyPaymentArray.forEach((keyPayment)=>{

// //             //   });
// //             // });

// //             //if ()

// //             theObject = {
// //               success:true,
// //               message: 'OK',
// //               newVendSaleCount,
// //               vendSaleCountFB,
// //               keyPaymentMap: Object.keys(paymentMap),
// //               keyVendSaleMap: Object.keys(vendSaleMap),
// //               missingVend,
// //               missingFB,
// //               paymentMap,
// //               vendSaleMap,
// //               createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //               createdAtTime: moment(timestamp).format('hh:mm:ss')
// //             };
            
// //             // return res.status(200).send({success:true, theObject}); 

// //             return sendWarningVendEmail(moment(timestamp).format('DD-MM-YYYY'), vendSaleCountFB, newVendSaleCount).then(results=>{
// //               return res.status(200).send(theObject);
// //             });
           
// //           }).catch((error)=>{
// //             console.log('error batch: ', error);
// //           });
// //           // return res.status(200).send(theObject);
// //         }else{
// //           // admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //           return res.status(200).send(theObject);
// //         }
  
// //         // return res.status(200).send({success:true, paymentMap, version}); 
// //       });
// //     });
// //   });
// // });

// // // get daily adyen transaction
// // exports.getDailyAdyenTransaction = functions.https.onRequest((req, res) => {
// //   const adyenQuery = admin.firestore().collection('adyTransactions').get();
// //   // const invoiceQuery = admin.firestore().collection('invoices')
// //   //   .where('type', '==', 'membership')
// //   //   .where('paid', '==', true)
// //   //   .where('createdAt', '>=', moment().tz('Asia/Kuala_Lumpur').startOf('days'))
// //   //   .get();
// //   const paymentQuery = admin.firestore().collection('payments')
// //     .where('type', '==', 'membership')
// //     .where('source', '==', 'adyen')
// //     .where('status', '==', 'CLOSED')
// //     .get();
// //   return Promise.all([adyenQuery, paymentQuery]).then(result=>{
// //     const adyenRes = result[0];
// //     const paymentRes = result[1];
// //     // console.log('acuityResult: ', acuityResult);

// //     var adyenCountDaily = 0;
// //     var adyenCountCloseDaily = 0;
// //     var adyenCountAutoChargeDaily = 0;
// //     var adyenCountManualChargeDaily = 0;
// //     var adyenCountFailDaily = 0;
// //     var adyenCountNotEnoughBalanceDaily = 0;
// //     var adyenCountRefusedDaily = 0;
// //     var adyenCount800ContractNotFoundDaily = 0;
// //     var adyenCountBlockedCardDaily = 0;
// //     var adyenCountFraudDaily = 0;
// //     var adyenCountInvalidCardNumDaily = 0;
// //     var adyenCount803PaymentDetailsNotFoundDaily = 0;
// //     var adyenCountFailUnknownReason = 0;
// //     var adyenCountRefundedDaily = 0;
// //     var largestAmount = 0;
// //     var totalAmount = 0;
// //     var adyenMembershipCountDaily = 0;
// //     var adyenMembershipTotalAmountDaily = 0;

// //     var adyenSuccessMap = {};
// //     var adyenRefundMap = {};
// //     // temporary
// //     var unknownPaymentMap = {};
// //     var failReason = [];
// //     var membershipPaymentMap = {};
// //     var adyenPaymentMap = {}

// //     paymentRes && paymentRes.forEach(doc=>{
// //       const data = doc.data();
// //       const paymentId = doc.id;
// //       const createdAt = data && data.createdAt;
// //       const totalPrice = (data && data.totalPrice)? parseFloat(data.totalPrice):0;
// //       // const isPaymentTodayDate = createdAt && moment(createdAt).isBetween(moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'days'), moment().tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days'));
// //       const isPaymentTodayDate = createdAt && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'));
// //       if (isPaymentTodayDate){
// //         adyenMembershipCountDaily+=1;
// //         adyenMembershipTotalAmountDaily = adyenMembershipTotalAmountDaily+totalPrice;
// //         membershipPaymentMap[doc.id]=data;
// //       }
// //     });

// //     adyenRes && adyenRes.forEach(doc=>{
// //       const data = doc.data();
// //       const transactionId = doc.id;
// //       const notificationItem = data.notificationItems && data.notificationItems.length > 0 && data.notificationItems[0];
// //       const notificationRequestItem = notificationItem && notificationItem.NotificationRequestItem;
// //       const pspReference = notificationRequestItem.pspReference;
// //       const invoiceId = notificationRequestItem.merchantReference;
// //       const eventCode = notificationRequestItem.eventCode;
// //       const eventDate = notificationRequestItem.eventDate;
// //       const success = notificationRequestItem.success;
// //       const reason = notificationRequestItem.reason;
// //       const amount = notificationRequestItem.amount;
// //       const amountValue = amount && amount.value;
// //       const additionalData = notificationRequestItem && notificationRequestItem.additionalData;
// //       const recurringProcessingModel = additionalData && additionalData.recurringProcessingModel;
// //       // for auto charge and subscription
// //       const isAutoCharge = recurringProcessingModel && recurringProcessingModel === 'Subscription';
// //       const isManualCharge = recurringProcessingModel && recurringProcessingModel === 'CardOnFile';

// //       // var isTodayDate = eventDate && moment(eventDate).isBetween(moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'days'), moment().tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days'));
// //       // testing
// //       // var isTodayDate = eventDate && moment(eventDate).isBetween(moment('2020-10-13').tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'days'), moment('2020-10-13').tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days'));
// //       var isTodayDate = eventDate && moment(eventDate).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'));

// //       if (isTodayDate){
// //         adyenCountDaily+=1;
// //         if (success && success === "true" && eventCode && eventCode === "AUTHORISATION"){
// //           adyenPaymentMap[doc.id]=data;
// //           adyenCountCloseDaily+=1;
// //           totalAmount = totalAmount + amountValue;
// //           adyenSuccessMap[doc.id]=notificationRequestItem;
// //           if (amountValue > largestAmount){
// //             largestAmount = amountValue;
// //           }
// //           if (isAutoCharge){
// //             adyenCountAutoChargeDaily+=1;
// //           }
// //           if (isManualCharge){
// //             adyenCountManualChargeDaily+=1;
// //           }
// //         }
// //         else if (success && success === "false" && eventCode === "AUTHORISATION"){
// //           adyenCountFailDaily+=1;
// //           failReason.push(reason);
// //           if (reason && reason === "Not enough balance"){
// //             adyenCountNotEnoughBalanceDaily+=1;
// //           }
// //           else if (reason && reason === "Refused"){
// //             adyenCountRefusedDaily+=1;
// //           }
// //           else if (reason && reason === "800 Contract not found"){
// //             adyenCount800ContractNotFoundDaily+=1;
// //           }
// //           else if (reason && reason === "FRAUD"){
// //             adyenCountFraudDaily+=1;
// //           }
// //           else if (reason && reason === "Invalid Card Number"){
// //             adyenCountInvalidCardNumDaily+=1;
// //           }
// //           else if (reason && reason === "803 PaymentDetail not found"){
// //             adyenCount803PaymentDetailsNotFoundDaily+=1;
// //           }
// //           else {
// //             adyenCountFailUnknownReason+=1;
// //           }
// //         }
// //         else if (eventCode && eventCode === "REFUND"){
// //           adyenCountRefundedDaily+=1;
// //           adyenRefundMap[doc.id]=notificationRequestItem;
// //         }
// //         else{
// //           unknownPaymentMap[doc.id]=notificationRequestItem;
// //           failReason.push(reason);
// //         }
// //       }
// //     });

// //     var request = require("request");
// //     request.post(
// //       "https://hooks.slack.com/services/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",
// //         {json:{
// //           blocks:[
// //             {
// //               "type": "divider"
// //             },
// //             {
// //               "type": "header",
// //               "text": {
// //                 "type": "plain_text",
// //                 "text": `Adyen Sales Summary on ${moment().tz('Asia/Kuala_Lumpur').startOf('day').format('DD-MM-YYYY')}`,
// //                 "emoji": true
// //               }
// //             },
// //             {
// //               "type": "section",
// //               "block_id": "adyen1",
// //               "fields": [
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `-*All Transactions count*:${adyenCountDaily}\n-*Total Sale*:RM${(totalAmount/100).toFixed(2)}\n -*Closed*:${adyenCountCloseDaily}\n-*Auto Charge Count*:${adyenCountAutoChargeDaily}\n-*Manual Charge Count*:${adyenCountManualChargeDaily}\n-*Refund*:${adyenCountRefundedDaily}\n-*Largest Amount*:RM${parseFloat(largestAmount/100).toFixed(2)}\n-*Membership Payment Count*:${adyenMembershipCountDaily}\n-*Membership Total Amount*:RM${parseFloat(adyenMembershipTotalAmountDaily).toFixed(2)}`,
// //                 },
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `*ADYEN Failed Breakdown*\n-*Total Failed*:${adyenCountFailDaily}\n-*Failed (Not Enough Balance)*:${adyenCountNotEnoughBalanceDaily}\n-*Failed (Refused)*:${adyenCountRefusedDaily}\n-*Failed (Contract Not Found)*:${adyenCount800ContractNotFoundDaily}\n-*Failed (Payment Details Not Found)*:${adyenCount803PaymentDetailsNotFoundDaily}\n-*Failed (Unknown Reason)*:${adyenCountFailUnknownReason}`,
// //                 },
// //               ]
// //             },
// //           ]
// //         }
// //       }
// //     );

// //     return res.status(200).send({
// //       success:true, 
// //       text1: `-*All Transactions count*:${adyenCountDaily}\n-*Total Sale*:RM${(totalAmount/100).toFixed(2)}\n -*Closed*:${adyenCountCloseDaily}\n-*Auto Charge Count*:${adyenCountAutoChargeDaily}\n-*Manual Charge Count*:${adyenCountManualChargeDaily}\n-*Refund*:${adyenCountRefundedDaily}\n-*Largest Amount*:RM${parseFloat(largestAmount/100).toFixed(2)}\n-*Membership Payment Count*:${adyenMembershipCountDaily}\n-*Membership Total Amount*:RM${parseFloat(adyenMembershipTotalAmountDaily).toFixed(2)}`,
// //       text2: `*ADYEN Failed Breakdown*\n-*Total Failed*:${adyenCountFailDaily}\n-*Failed (Not Enough Balance)*:${adyenCountNotEnoughBalanceDaily}\n-*Failed (Refused)*:${adyenCountRefusedDaily}\n-*Failed (Contract Not Found)*:${adyenCount800ContractNotFoundDaily}\n-*Failed (Payment Details Not Found)*:${adyenCount803PaymentDetailsNotFoundDaily}\n-*Failed (Unknown Reason)*:${adyenCountFailUnknownReason}`,
// //       adyenPaymentMap,
// //       membershipPaymentMap,
// //       // adyenCountDaily, adyenCountCloseDaily, adyenCountAutoChargeDaily, adyenCountManualChargeDaily, adyenCountFailDaily,
// //       // adyenCountNotEnoughBalanceDaily, adyenCountRefusedDaily, adyenCount800ContractNotFoundDaily, adyenCount803PaymentDetailsNotFoundDaily, adyenCountFailUnknownReason, 
// //       // adyenCountRefundedDaily, largestAmount:largestAmount/100, adyenSuccessMap, adyenRefundMap, unknownPaymentMap,
// //       // adyenMembershipCountDaily, adyenMembershipTotalAmountDaily,
// //       // failReason 

// //     })
// //   });
// // });

// // // get all vendSale
// // exports.getDailyVendSale = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
  
// //     var rp2 = require('request-promise');
// //     // var optionsEdit = vendGetVendSale();
// //     // const date_from = '2020-07-27'
// //     // const date_to = '2020-07-28';
// //     // const date_from = '2020-10-07'
// //     // const date_to = '2020-10-08';
// //     const date_from = moment().tz('Asia/Kuala_Lumpur').startOf('day').utc().format();
// //     const date_to = moment().tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days').utc().format();
// //     // testing for this date
// //     // const date_from = moment('2020-10-07').tz('Asia/Kuala_Lumpur').startOf('day').utc().format();
// //     // const date_to = moment('2020-10-07').tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'days').utc().format();
// //     var optionEdit = searchVend(date_from, date_to);

// //     const paymentMap = {};
// //     var paymentCount = 0;
// //     var vendCloseCount = 0;
// //     var vendVoidedCount = 0;
// //     var returnForCount = 0;
// //     var deletedCount = 0;
// //     var totalSale = 0;

// //     // for TTDI
// //     var paymentCountTTDI = 0;
// //     var vendCloseCountTTDI = 0;
// //     var vendVoidedCountTTDI = 0;
// //     var returnForCountTTDI = 0;
// //     var deletedCountTTDI = 0;
// //     var totalSaleTTDI = 0;

// //     // for KLCC
// //     var paymentCountKLCC = 0;
// //     var vendCloseCountKLCC = 0;
// //     var vendVoidedCountKLCC = 0;
// //     var returnForCountKLCC = 0;
// //     var deletedCountKLCC = 0;
// //     var totalSaleKLCC = 0;

// //     return rp2(optionEdit).then(function (result){
// //       // get the data array
// //       const data = result && result.data;
// //       data && data.forEach((saleData)=>{

// //         const created_at = saleData && saleData.created_at;
// //         const deleted_at = saleData && saleData.deleted_at;
// //         const paymentId = saleData && saleData.id;
// //         const outlet_id = saleData && saleData.outlet_id;
// //         const total_price_incl = saleData && saleData.total_price_incl;

// //         // hardcode  frst
// //         const outlet_TTDI = outlet_id && outlet_id === '0af7b240-abc5-11e7-eddc-d4a1c0133102';
// //         const outlet_KLCC = outlet_id && outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026';

// //         if (outlet_TTDI){
// //           paymentCountTTDI+=1;
// //         }
// //         else if (outlet_KLCC){
// //           paymentCountKLCC+=1;
// //         }

// //         // if (created_at && moment(created_at).isSameOrAfter(moment('20200101'))){
// //         paymentMap[paymentId] = saleData;
// //         paymentCount+=1;
// //         const status = saleData && saleData.status;
// //         const return_for = saleData && saleData.return_for;
// //         if (status && status==='CLOSED'){
// //           vendCloseCount+=1;
// //           totalSale = total_price_incl+totalSale;
// //           // for TTDI && KLCC
// //           if (outlet_TTDI){
// //             vendCloseCountTTDI+=1;
// //             totalSaleTTDI = total_price_incl+totalSaleTTDI;
// //           }
// //           else if (outlet_KLCC){
// //             vendCloseCountKLCC+=1;
// //             totalSaleKLCC = total_price_incl+totalSaleKLCC;
// //           }
// //         }
// //         else if (status && status === 'VOIDED'){
// //           vendVoidedCount+=1;
// //           if (outlet_TTDI){
// //             vendVoidedCountTTDI+=1;
// //           }
// //           else if (outlet_KLCC){
// //             vendVoidedCountKLCC+=1;
// //           }
// //         }
// //         if (return_for && return_for!==null){
// //           returnForCount+=1;
// //           if (outlet_TTDI){
// //             returnForCountTTDI+=1;
// //           }
// //           else if (outlet_KLCC){
// //             returnForCountKLCC+=1;
// //           }
// //         }
// //         if (deleted_at && deleted_at!==null){
// //           deletedCount+=1;
// //           if (outlet_TTDI){
// //             deletedCountTTDI+=1;
// //           }
// //           else if (outlet_KLCC){
// //             deletedCountKLCC+=1;
// //           }
// //         }

// //       });
    
// //       var dailyVendText = "Void, return, deleted: "; // default
// //       var dailyVendTextExtra = '';
// //       var dailyVendTextExtraKLCC = '';
// //       var dailyVendTextExtraTTDI = '';

// //       if (vendVoidedCount === 0 && returnForCount === 0 && deletedCount === 0){
// //         dailyVendTextExtra = '0';
// //       }
// //       if (vendVoidedCount != 0){
// //         dailyVendTextExtra = dailyVendTextExtra+`void ${vendVoidedCount},`
// //       }
// //       if (returnForCount != 0){
// //         dailyVendTextExtra = dailyVendTextExtra+`return ${returnForCount}`
// //       }
// //       if (deletedCount != 0){
// //         dailyVendTextExtra = dailyVendTextExtra+`delete ${deletedCount}`
// //       }

// //       // for KLCC
// //       if (vendVoidedCountKLCC === 0 && returnForCountKLCC === 0 && deletedCountKLCC === 0){
// //         dailyVendTextExtraKLCC = '0';
// //       }
// //       if (vendVoidedCountKLCC != 0){
// //         dailyVendTextExtraKLCC = dailyVendTextExtraKLCC+`void ${vendVoidedCountKLCC},`
// //       }
// //       if (returnForCountKLCC != 0){
// //         dailyVendTextExtraKLCC = dailyVendTextExtraKLCC+`return ${returnForCountKLCC}`
// //       }
// //       if (deletedCountKLCC != 0){
// //         dailyVendTextExtraKLCC = dailyVendTextExtraKLCC+`delete ${deletedCountKLCC}`
// //       }

// //        // for TTDI
// //       if (vendVoidedCountTTDI === 0 && returnForCountTTDI === 0 && deletedCountTTDI === 0){
// //         dailyVendTextExtraTTDI = '0';
// //       }
// //       if (vendVoidedCountTTDI != 0){
// //         dailyVendTextExtraTTDI = dailyVendTextExtraTTDI+`void ${vendVoidedCountTTDI},`
// //       }
// //       if (returnForCountTTDI != 0){
// //         dailyVendTextExtraTTDI = dailyVendTextExtraTTDI+`return ${returnForCountTTDI}`
// //       }
// //       if (deletedCountTTDI != 0){
// //         dailyVendTextExtraTTDI = dailyVendTextExtraTTDI+`delete ${deletedCountTTDI}`
// //       }


// //       const version = result && result.version;
// //       var request = require("request");
// //       request.post(
// //         "https://hooks.slack.com/services/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",
// //         {json:{
// //           blocks:[
// //             {
// //               "type": "divider"
// //             },
// //             {
// //               "type": "header",
// //               // "accessory": {
// //               //   "type": "image",
// //               //   "image_url": "https://d30fzr2520l6g5.cloudfront.net/corp-images/homepage/vend-tag-logo.svg",
// //               //   "alt_text": "VEND"
// //               // },
// //               "text": {
// //                 "type": "plain_text",
// //                 "text": `Vend Sales Summary on ${moment(date_from).tz('Asia/Kuala_Lumpur').startOf('day').format('DD-MM-YYYY')}`,
// //                 "emoji": true
// //               }
// //             },
// //             {
// //               "type": "section",
// //               "block_id": "vend1",
// //               "fields": [
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `-*All Sale*:${paymentCount}\n-*Total Sale*:RM${totalSale.toFixed(2)}\n-*Closed*:${vendCloseCount}\n-${dailyVendText} ${dailyVendTextExtra}`,
// //                 },
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `***********************`,
// //                 },
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `\n*TTDI*\n-*All Sale*:${paymentCountTTDI}\n-*Total Sale*:RM${totalSaleTTDI.toFixed(2)}\n-*Closed*:${vendCloseCountTTDI}\n-${dailyVendText} ${dailyVendTextExtraTTDI}`,
// //                 },
// //                 {
// //                   "type": "mrkdwn",
// //                   "text": `\n*KLCC*\n-*All Sale*:${paymentCountKLCC}\n-*Total Sale*:RM${totalSaleKLCC.toFixed(2)}\n-*Closed*:${vendCloseCountKLCC}\n-${dailyVendText} ${dailyVendTextExtraKLCC}`,
// //                 }
// //               ]
// //             },
// //           ]
// //         }
// //       });

// //       return res.status(200).send({
// //         success:true, totalSale, totalSaleTTDI, totalSaleKLCC, paymentCount, vendCloseCount, vendVoidedCount, returnForCount, 
// //         deletedCount, paymentCountTTDI, vendCloseCountTTDI, vendVoidedCountTTDI,
// //         returnForCountTTDI, deletedCountTTDI, paymentCountKLCC, vendVoidedCountKLCC,
// //         returnForCountKLCC, deletedCountKLCC, paymentMap, version}); 
// //     });
// //   });
// // });

// // // function to get all vendSale from firestore
// // exports.getAllVendSalesTotal = functions.https.onRequest((req, res)=>{
// //   const itemData = req.body;
// //   const startDate = itemData.startDate;
// //   const endDate = itemData.endDate;
  
// //   const vendSalesQuery = admin.firestore().collection('vendSalesV3').get();

// //   var totalCloseCount = 0;
// //   var totalVoidCount = 0;
// //   var totalPrice = 0;

// //   return Promise.all([vendSalesQuery]).then(results=>{
// //     const vendRes = results[0];
// //     vendRes && vendRes.forEach(doc=>{
// //       const data = doc.data();
// //       const status = data && data.status;
// //       const totals = data && data.totals;
// //       const total_payment = totals && totals.total_payment;
// //       const created_at = data && data.created_at;
// //       if (startDate && created_at && moment(created_at).isSameOrAfter(moment(startDate).tz('Asia/Kuala_Lumpur').startOf('day'))
// //         && moment(created_at).isSameOrBefore(moment(endDate).tz('Asia/Kuala_Lumpur').endOf('day'))
// //       ){
// //         if (status && status==='CLOSED' && total_payment){
// //           totalCloseCount+=1;
// //           totalPrice=total_payment+totalPrice;
// //         }
// //         if (status && status === 'VOIDED'){
// //           totalVoidCount+=1;
// //         }
// //       }
// //     });
// //     return res.status({
// //       success:true,
// //       totalCloseCount,
// //       totalVoidCount,
// //       totalPrice
// //     })
// //   });

// // });

// // // call transferVendSaleToVendSalesV3
// // exports.callTransferVendSaleToVendSalesV3 = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   const batch = admin.firestore().batch();
// //   return corsFn(req, res, () => {
// //     // const optionBody = JSON.parse(JSON.stringify(req.body));
// //     // const optionMethod = req.method;

// //     // var vendProductObj = {};
// //     var rp2 = require('request-promise');
// //     const itemData = req.body;
// //     const startDate = itemData.startDate;
// //     const endDate = itemData.endDate;
// //     const monthsCount = itemData.monthsCount;

// //     var theUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/transferVendSaleToVendSalesV3`
// //     var optionEdit = { method: 'POST',
// //       url: theUrl,
// //       // auth: {
// //       //   bearer: vendPersonalToken
// //       // },
// //       body:{
// //         startDate : startDate,
// //         monthsCount : monthsCount,
// //       },
// //       json:true
// //     };
    
// //     for (var i = 0; i<=monthsCount; i++){
// //       // optionEdit
// //     }

// //     return rp2(optionEdit).then(function (result){
// //       // get the data array
    
// //       return res.status(200).send({
// //         success:true,
// //       }).catch(e=>{
// //         console.log('theerror: ', e);
// //         return res.status(200).send({
// //           success:false,
// //           error:e
// //         })
// //       })
// //     });
// //   });
// // });

// // // export vendSale to webhook
// // exports.transferVendSaleToVendSalesV3 = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   const batch = admin.firestore().batch();
// //   // const vendSalesQuery = admin.firestore().collection('vendSalesV3').get();
// //   // const paymentsQuery = admin.firestore().collection('payments').get();

// //   var totalCloseCount = 0;
// //   var totalVoidCount = 0;
// //   var totalPrice = 0;

// //   const getSheetPromise = getGoogleSheetPromise({
// //     spreadsheetId: CONFIG_SHEET_ID,
// //     range: `vendSales monthly summary!A2:P`
// //   });

// //   return corsFn(req, res, () => {
// //     // const optionBody = JSON.parse(JSON.stringify(req.body));
// //     // const optionMethod = req.method;

// //     // var vendProductObj = {};
// //     var rp2 = require('request-promise');
// //     const itemData = req.body;
// //     const startDate = itemData.startDate;
// //     const endDate = itemData.endDate;

// //     var optionEdit = searchVend(startDate, endDate);
// //     // var optionEdit = vendGetVendSale();

// //     const paymentMap = {};
// //     var paymentCount = 0;
// //     var paymentMethodArray = [];
// //     var paymentMethodObj = {};
// //     var paymentTextArray = [];
// //     // var paymentText = "faizul";

// //     // return Promise.all([vendSalesQuery]).then(results=>{
// //     //   const vendSalesRes = results[0];
// //     //   // const paymentsRes = results[1];

// //     //   vendSalesRes && vendSalesRes.forEach(doc=>{
// //     //     const data = doc.data();
// //     //     const id = data.id;

// //     //   })

// //     var sheetReport = [];
// //     var vendSalesArray = [];

// //       return rp2(optionEdit).then(function (result){
// //         // get the data array
// //         const data = result && result.data;
// //         data && data.forEach((saleData)=>{
  
// //           const created_at = saleData && saleData.created_at;
// //           const paymentId = saleData && saleData.id;
// //           // if (created_at && moment(created_at).isSameOrAfter(moment('20200101'))){
// //             // paymentMap[paymentId] = saleData;
// //             // paymentCount+=1;
// //           // }
// //           // equivalent to line_items
// //           // var register_sale_products = [];
// //           const status = saleData && saleData.status;
// //           const totals = saleData && saleData.totals;
// //           const total_price_incl = saleData&&saleData.total_price_incl;

// //           if (saleData){
// //             const vendSalesV3 = {
// //               created_at,
// //               id:paymentId,
// //               customer_id: saleData && saleData.customer_id,
// //               deleted_at:saleData && saleData.deleted_at,
// //               invoice_number:saleData && saleData.invoice_number,
// //               note:saleData&&saleData.note,
// //               outlet_id:saleData&&saleData.outlet_id,
// //               register_id:saleData&&saleData.register_id,
// //               register_sale_products:saleData&&saleData.line_items,
// //               register_sale_payments:saleData&&saleData.payments,
// //               return_for:saleData&&saleData.return_for,
// //               sale_date:saleData&&saleData.sale_date,
// //               short_code:saleData&&saleData.short_code,
// //               source:saleData&&saleData.source,
// //               source_id:saleData&&saleData.source_id,
// //               status:saleData&&saleData.status,
// //               taxes:saleData&&saleData.taxes,
// //               totals:{
// //                 total_price:saleData&&saleData.total_price,
// //                 total_payment:saleData&&saleData.total_price_incl,
// //                 total_tax:saleData&&saleData.total_tax
// //               },
// //               user_id:saleData&&saleData.user_id, // for CRO id
// //             };

// //             if (status && status==='CLOSED' && total_price_incl){
// //               // totalCloseCount+=1;
// //               totalPrice=(parseFloat(total_price_incl) + parseFloat(totalPrice)).toFixed(2);
// //             }
// //             if (status && status==='CLOSED'){
// //               totalCloseCount+=1;
// //             }
// //             if (status && status === 'VOIDED'){
// //               totalVoidCount+=1;
// //             }

// //             if (status && status==='CLOSED' && saleData.payments){
// //               saleData.payments.forEach(paymentData=>{
// //                 const amount = paymentData.amount;
// //                 const name = paymentData.name;
                
// //                 // if (Object.keys(paymentMethodObj)){
// //                 //   // paymentMethodArray.push(Object.keys(paymentMethodObj));
// //                 // }

// //                 // already exist
// //                 if (Object.keys(paymentMethodObj).includes(name)){
// //                   // paymentMethodObj[name] = paymentMethodObj.name + amount;
// //                   paymentMethodObj[name] = paymentMethodObj[name] + amount;
// //                 }
// //                 else{
// //                   paymentMethodObj[name] = amount;
// //                 }
// //               });
// //             }
           
// //             var vendSaleRef = admin.firestore().collection("vendSalesV3").doc(paymentId);
// //             batch.set(vendSaleRef, vendSalesV3);
// //             if(paymentCount >= 499){
// //               batch.commit();
// //               paymentCount = 0
// //               batch = admin.firestore().batch();
// //             }
// //             vendSalesArray.push(saleData);
// //             paymentCount += 1;
// //           }
         
// //           // vendSaleRef.get().then((doc)=>{
// //           //   if (!doc.exists){
// //           //     paymentCount+=1;
// //           //     // batch.set(vendSaleRef, vendSalesV3);
// //           //   }
// //           //   else{
// //           //     // todo: checking the status?
// //           //     return;
// //           //   }
// //           // });
// //           // const vendDoc = vendSaleRef.get()
// //           // if (!vendDoc.exists) {
// //           //   paymentCount+=1;
// //           //   batch.set(vendSaleRef, vendSalesV3);
// //           // } else {
// //           //   // todo: checking the status?
// //           // }
  
// //           // admin.firestore.collection('vendSalesV3').doc(paymentMap.id).set(vendSalesV3).then(()=>{
// //           //   console.log("Document successfully written!");
// //           // }).catch(e=>{
// //           //   console.log('error: ', e);
// //           // });
  
// //         });
// //         //const version = result && result.version;
       
// //       //   for (let key in paymentMethodObj) {
// //       //     if (paymentMethodObj.hasOwnProperty(key)) {
// //       //        // console.log(key, paymentMethodObj[key]);
// //       //        paymentTextArray.push(`${key}:${parseFloat(paymentMethodObj[key]).toFixed(2)}`); 
// //       //       //  paymentText.concat(`${key}:${paymentMethodObj[key]} saya`);
// //       //       // paymentText = paymentText + `${key}:${paymentMethodObj[key]} ,`;
// //       //     }
// //       //  }

// //         return batch.commit().then(()=>{
// //           for (let key in paymentMethodObj) {
// //             if (paymentMethodObj.hasOwnProperty(key)) {
// //                paymentTextArray.push(`${key}:${parseFloat(paymentMethodObj[key]).toFixed(2)}`); 
// //             }
// //          }
// //           return getSheetPromise.then((result)=>{
// //             console.log('theresult: ', result);
// //             const values = result && result.values;
// //             const rowsCount = (values && values.length)? values.length:0;
            
// //             sheetReport = [[
// //               rowsCount + 1,
// //               moment(startDate).tz('Asia/Kuala_Lumpur').startOf('day').format('MMM YYYY'),
// //               paymentCount,
// //               totalCloseCount,
// //               totalVoidCount,
// //               totalPrice,

// //               //['test1', 'test2', 'test3']
// //               // paymentMethodObj
// //             ]];
// //             // sheetReport[0].push(paymentTextArray[0]);
// //             // console.log('sheetReport: ', sheetReport);
// //             paymentTextArray && paymentTextArray.forEach(paymentData=>{
// //               sheetReport[0].push(paymentData);
// //             })
      
// //             const updateSheetPromise = updateGoogleSheet({
// //               spreadsheetId: CONFIG_SHEET_ID,
// //               // valueInputOption: 'RAW',
              
// //               resource: {
// //                 // How the input data should be interpreted.
// //                 valueInputOption: 'RAW',  // TODO: Update placeholder value.
// //                 // The new values to apply to the spreadsheet.
// //                 data: [
// //                   {
// //                     range: `vendSales monthly summary!A${rowsCount+2}:P`,
// //                     majorDimension: "ROWS",
// //                     values: sheetReport
// //                   }
// //                 ],  
// //               },
      
// //             });
      
// //             return updateSheetPromise.then((result)=>{
// //               // console.log('theresult: ', result);
// //               return res.status(200).send({
// //                 success:true,
// //                 paymentCount,
// //                 vendSalesArray,
// //                 sheetReport,
// //                 paymentTextArray,
// //                 paymentMethodObj,
// //                 paymentMethodArray,
// //               });
// //             });
// //           });

// //           // return res.status(200).send({success:true, 
// //           //   // paymentMap, 
// //           //   paymentCount,
// //           //   totalCloseCount,
// //           //   totalVoidCount,
// //           //   totalPrice
// //           // }); 
// //         }).catch(e=>{
// //           return res.status(200).send({success:false, error:e});
// //         })
// //       });

// //     // });
// //   });
// // });

// // // list the vendProducts to sheets
// // exports.vendProductToSheet = functions.https.onRequest((req, res)=>{
// //   const vendProductsQuery = admin.firestore().collection('vendProducts').get();

// //   var sheetReport = [];
// //   var productData = [];
// //   return Promise.all([vendProductsQuery]).then(results=>{
// //     const productRes = results[0];
// //     productRes && productRes.forEach(doc=>{
// //       const data = doc.data();
// //       const productId = data && data.id;
// //       const product_type = data && data.product_type;
// //       const product_type_id = product_type && product_type.id;
// //       const product_type_name = product_type && product_type.name;
// //       const supply_price = data && data.supply_price;
// //       const base_name = data && data.base_name;
// //       const name = data && data.name;
// //       const active = data && data.active;

// //       productData = [
// //         productId? productId:'',
// //         product_type_id? product_type_id:'',
// //         product_type_name? product_type_name:'',
// //         supply_price? supply_price:'',
// //         base_name? base_name:'',
// //         name? name:'',
// //         active? active:''
// //       ];
// //       sheetReport.push(productData);
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       spreadsheetId: CONFIG_SHEET_ID,
// //       // valueInputOption: 'RAW',
      
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             range: `vend products!A2:P`,
// //             majorDimension: "ROWS",
// //             values: sheetReport
// //           }
// //         ],  
// //       },

// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         sheetReport,
// //         // paymentTextArray,
// //         // paymentMethodObj,
// //         // paymentMethodArray,
// //       });
// //     });

// //   });
// // });

// // // counting vendsalesV3 (for comparison)
// // exports.vendSalesV3Count = functions.https.onRequest((req, res)=>{
// //   const vendSalesQuery = admin.firestore().collection('vendSalesV3').get();

// //   const itemData = req.body;
// //   const startDate = itemData.startDate;
// //   const endDate = itemData.endDate;

// //   const getSheetPromise = getGoogleSheetPromise({
// //     spreadsheetId: CONFIG_SHEET_ID,
// //     range: `vendSales monthly summary!A2:P`
// //   });

// //   var totalCloseCount = 0;
// //   var totalVoidCount = 0;
// //   var totalPrice = 0;
// //   var paymentCount = 0;

// //   return Promise.all([vendSalesQuery]).then(results=>{
// //     const vendSaleRes = results[0];
// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const created_at = data && data.created_at;

// //       if (created_at && moment(created_at).isSameOrAfter(moment(startDate))
// //       && moment(created_at).isSameOrBefore(moment(endDate))){
// //         const status = data && data.status;
// //         const totals = data && data.totals;
// //         const total_price_incl = totals && totals.total_price;
        
// //         paymentCount += 1;

// //         if (status && status==='CLOSED' && total_price_incl){
// //           // totalCloseCount+=1;
// //           totalPrice=(parseFloat(total_price_incl) + parseFloat(totalPrice)).toFixed(2);
// //         }
// //         if (status && status==='CLOSED'){
// //           totalCloseCount+=1;
// //         }
// //         if (status && status === 'VOIDED'){
// //           totalVoidCount+=1;
// //         }
    
// //       } 
// //     });

// //     return getSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       const values = result && result.values;
// //       const rowsCount = (values && values.length)? values.length:0;
      
// //       var sheetReport = [[
// //         rowsCount + 1,
// //         moment(startDate).tz('Asia/Kuala_Lumpur').startOf('day').format('MMM YYYY'),
// //         paymentCount,
// //         totalCloseCount,
// //         totalVoidCount,
// //         totalPrice,

// //       ]];
// //       // sheetReport[0].push(paymentTextArray[0]);
// //       // console.log('sheetReport: ', sheetReport);
// //       // paymentTextArray && paymentTextArray.forEach(paymentData=>{
// //       //   sheetReport[0].push(paymentData);
// //       // })

// //       const updateSheetPromise = updateGoogleSheet({
// //         spreadsheetId: CONFIG_SHEET_ID,
// //         // valueInputOption: 'RAW',
        
// //         resource: {
// //           // How the input data should be interpreted.
// //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
// //           // The new values to apply to the spreadsheet.
// //           data: [
// //             {
// //               range: `vendSales monthly summary!A${rowsCount+2}:P`,
// //               majorDimension: "ROWS",
// //               values: sheetReport
// //             }
// //           ],  
// //         },

// //       });

// //       return updateSheetPromise.then((result)=>{
// //         // console.log('theresult: ', result);
// //         return res.status(200).send({
// //           success:true,
// //           sheetReport,
// //           // paymentTextArray,
// //           // paymentMethodObj,
// //           // paymentMethodArray,
// //         });
// //       });
// //     });

// //   });
// // });

// // // function to transfer vendSalesV3 to payments
// // exports.transferVendSaleV3ToPayments = functions.https.onRequest((req , res)=>{
// //   const corsFn = cors({ origin: true });
// //   const batch = admin.firestore().batch();
// //   const vendSalesQuery = admin.firestore().collection('vendSalesV3').get();
// //   // const paymentsQuery = admin.firestore().collection('payments').get();
// //   const packagesQuery = admin.firestore().collection('packages').get();

// //   // const getSheetPromise = getGoogleSheetPromise({
// //   //   spreadsheetId: CONFIG_SHEET_ID,
// //   //   range: `vendSales monthly summary!A2:P`
// //   // });

// //   const itemData = req.body;
// //   const startDate = itemData.startDate;
// //   const endDate = itemData.endDate;
// //   var packageMap = {};

// //   return Promise.all([vendSalesQuery, packagesQuery]).then(results=>{
// //     const vendSaleRes = results[0];
    
// //     const packageRes = results[1];
// //     // const paymentRes = results[2];

// //     var packageMap = {};
// //     var productIdPackageMap = {};
// //     packageRes && packageRes.forEach(doc=>{
// //       packageMap[doc.id] = doc.data();
// //       const data = doc.data();
// //       const vendProductIds = data && data.vendProductIds;
// //       // console.log('vendProductId: ', data);
// //       vendProductIds && vendProductIds.forEach(vendProductId=>{
// //         productIdPackageMap[vendProductId] = doc.id;
// //       })
// //     });

// //     var existingPayments = [];
// //     // paymentRes.forEach(doc=>{
// //     //   const data = doc.data();
// //     //   const createdAt = data && data.createdAt;
// //     //   if (createdAt && moment(getTheDate(createdAt)).isSameOrBefore(moment(startDate))
// //     //   && moment(getTheDate(createdAt)).isSameOrAfter(moment(endDate))){
// //     //     existingPayments.push(doc);
// //     //   }
// //     // });

// //     var register_sale_productsMembershipCount = 0;
// //     var register_sale_productsAllCount = 0;
// //     var membershipPaymentExistCount = 0;
// //     var membershipPaymentNotExistCount = 0;
// //     var register_sale_productsNonMembershipCount = 0;
// //     var existingMembershipPaymentsArray = [];
// //     var existingMembershipPaymentsMap = {};

// //     // temporari - for test
// //     var paymentRefError = 0;
// //     var tempError = '';

// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const created_at = data.created_at;
// //       const vendSaleId = data && data.id;
// //       const register_sale_products = data && data.register_sale_products;
     
// //       if (created_at && moment(created_at).isSameOrAfter(moment(startDate))
// //       && moment(created_at).isSameOrBefore(moment(endDate))){
       
// //         register_sale_products.forEach(item=>{
// //           const vendProductId = item.product_id;
// //           const packageId = productIdPackageMap[vendProductId];
// //           const packageData = packageMap[packageId];
// //           const quantity = item.quantity;
// //           const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// //           register_sale_productsAllCount+=1;
// //           const paymentRef = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId).get();
// //           // for membership product
// //           if(packageId){
// //             register_sale_productsMembershipCount+=1;
// //             // check whether the payment is already exist at the database
// //             // paymentRef.forEach(doc=>{

// //             // });
// //             paymentRef.then((querySnapshot)=>{
// //               querySnapshot.forEach((doc) => {
// //                 // doc.data() is never undefined for query doc snapshots
// //                 // console.log(doc.id, " => ", doc.data());
// //                 // membershipPaymentExistCount+=1;
// //                 if (doc.data()){
// //                   membershipPaymentExistCount+=1;
// //                   existingMembershipPaymentsArray.push(doc.data());
// //                   existingMembershipPaymentsMap[vendSaleId] = doc.data();
// //                   // update the payment batch?

// //                   // batch.set(vendSaleRef, vendSalesV3);
// //                 }
// //                 else{
// //                   // todo: create new payment batch
// //                   membershipPaymentNotExistCount+=1;
// //                 }
// //               });
             
// //             }).catch(error=>{
// //               paymentRefError+=1;
// //               tempError = error;
// //             })
// //           }
// //           // for nonmembership payment
// //           else{
// //             register_sale_productsNonMembershipCount+=1;

// //           }
// //         });
// //       }
     
// // //             const vendProductId = item.product_id;
// // //             // const totalPrice = (item.price&& item.tax)? (parseFloat(item.price) + parseFloat(item.tax)).toFixed(2) : item.total_price? item.total_price : null;
// // //             const packageId = productIdPackageMap[vendProductId];
// // //             // console.log('modifyVendPackageId: ', packageId);
// // //             const packageData = packageMap[packageId];
// // //             const quantity = item.quantity;
// // //             const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';

// // //             if(packageId){

// // //               var paymentRefs = [];
// // //               existingPayments.forEach(existingPayment=>{

// // //                 console.log('existingPayments: ', existingPayment);

// // //                 // const existingVendSaleId = existingPayment.vendSaleId;
// // //                 const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
// // //                 console.log('existingVendSaleId: ', existingVendSaleId);

// // //                 if(existingVendSaleId === vendSaleId){
// // //                   paymentRefs.push(existingPayment);
// // //                 }
// // //               });

// // //               if(paymentRefs.length < quantity){
// // //                 for(var i=0; i < quantity; i++){
// // //                   const paymentRef = admin.firestore().collection('payments').doc();
// // //                   paymentRefs.push(paymentRef);
// // //                 }
// // //               }

// // //               paymentRefs.forEach(paymentRef=>{
// // //                 var data = paymentRef.exists && paymentRef.data();
// // //                 if(!data){
// // //                   newPaymentCount += 1;
// // //                   data = {
// // //                     createdAt : moment(getTheDate(created_at)).toDate(),
// // //                     totalPrice : total_price_incl ? total_price_incl : 0,
// // //                     tax: total_tax,
// // //                     type : 'membership',
// // //                     userId : userId,
// // //                     packageId : packageId,
// // //                     source : 'vend',
// // //                     vendProductId : vendProductId,
// // //                     vendSaleId : vendSaleId,
// // //                     renewalTerm : renewalTerm,
// // //                     status : status
// // //                   }
// // //                   console.log('Creating payment', paymentRef.id, vendSaleId, userId);
// // //                   // data.status = status;
// // //                   batch.set(paymentRef, data);
// // //                 }
// // //                 else{
                  
// // //                   // console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
// // //                   // updateCount += 1;
// // //                   // const updatedData = {
// // //                   //   createdAt : moment(getTheDate(created_at)).toDate(),
// // //                   //   totalPrice : total_price_incl ? total_price_incl : 0,
// // //                   //   tax: total_tax,
// // //                   //   type : 'membership',
// // //                   //   userId : userId,
// // //                   //   packageId : packageId,
// // //                   //   source : 'vend',
// // //                   //   vendProductId : vendProductId,
// // //                   //   vendSaleId : vendSaleId,
// // //                   //   renewalTerm : renewalTerm,
// // //                   //   status : status
// // //                   // };
// // //                   // batch.update(admin.firestore().collection('payments').doc(paymentRef.id), updatedData);
// // //                 }
// // //               });
// // //             }
// // //           });
// //     });


// //     return res.status(200).send({
// //       success:true,
// //       register_sale_productsAllCount,
// //       register_sale_productsMembershipCount,
// //       register_sale_productsNonMembershipCount,
// //       membershipPaymentExistCount,
// //       membershipPaymentNotExistCount,
// //       tempError,
// //       paymentRefError
// //     })
// //     // .catch(e=>{
// //     //   return res.status(200).send({
// //     //     success:false,
// //     //     error:e
// //     //   })
// //     // });
// //   });
// //   // return corsFn(req, res, () => {

// //   //   return res.status.send({
// //   //     success:true
// //   //   })
// //   // });
// // });

// // function difference(a1, a2) {
// //   var a2Set = new Set(a2);
// //   return a1.filter(function(x) { return !a2Set.has(x); });
// // }
// // // function to compare vend sale API and 'vendSales' collection (created via webhook)
// // // if not exist, set a new collection
// // exports.compareVendSaleWithWebhook = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   const batch = admin.firestore().batch();
  
// //   // from vendSales API
// //   var vendSaleAPICount = 0
// //   var vendSaleAPIMap = {};
// //   var vendSaleAPIArray = [];
// //   // from vendSales webhook (fb)
// //   var vendSaleWebhookCount = 0;
// //   var vendSaleWebhookMap = {};
// //   var vendSaleWebhookArray = [];

// //   // vend sale API
// //   var missingVendSaleAPICount = 0;
// //   var missingVendSaleAPIMap = {};
// //   var missingVendSaleAPIArray = [];

// //   // vend sale webhook
// //   var missingVendSaleWebhookCount = 0;
// //   var missingVendSaleWebhookMap = {};
// //   var missingVendSaleWebhookArray = [];

// //   return corsFn(req, res, () => {
// //     // const optionBody = JSON.parse(JSON.stringify(req.body));
// //     // const optionMethod = req.method;
// //     var rp2 = require('request-promise');
// //     const itemData = req.body;
// //     const startDate = itemData.startDate;
// //     const endDate = itemData.endDate;

// //     // from VEND API
// //     var optionEdit = searchVend(startDate, endDate);
// //     // var optionEdit = vendGetVendSale();

// //     // const vendSalesQuery = admin.firestore().collection('vendSales').where('createdDay', '==', moment(startDate).tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD')).get();
// //     const vendSalesQuery = admin.firestore().collection('vendSales').get();

// //     return Promise.all([vendSalesQuery]).then(results=>{
      
// //       const vendSaleRes = results[0];
// //       vendSaleRes && vendSaleRes.forEach(doc=>{
// //         const data = doc.data();
// //         const created_at = data && data.created_at;
// //         const vendId = data && data.id;
// //         if (created_at 
// //           && moment(created_at).tz('Asia/Kuala_Lumpur').startOf('day').isSameOrAfter(moment(startDate)) 
// //           && moment(created_at).tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(moment(endDate))){
// //             vendSaleWebhookCount+=1;
// //             // vendSaleWebhookArray.push(data);
// //             vendSaleWebhookMap[vendId] = data;
// //             vendSaleWebhookArray.push(vendSaleWebhookMap[vendId]);
// //             // vendSaleWebhookArray = [vendSaleWebhookMap[vendId]];
// //           }
// //       });

// //       return rp2(optionEdit).then(function (result){
// //         const data = result && result.data;
// //         data && data.forEach((saleData)=>{
// //           const vendId2 = saleData && saleData.id;
         
// //           if (vendId2 && saleData){
// //             vendSaleAPICount+=1;
// //             // vendSaleAPIArray.push(saleData);
// //             vendSaleAPIMap[vendId2] = saleData;
// //             // vendSaleAPIArray = [vendSaleAPIMap[vendId2]];
// //             vendSaleAPIArray.push(vendSaleAPIMap[vendId2]);
// //             // vendSaleWebhookArray.forEach(data=>{
// //             //   if (data.id !== vendId2){
// //             //     // data is not exist in fb webhook
// //             //     missingVendSaleCount+=1;
// //             //     // missingVendSaleMap[vendId2] = data;
// //             //     // missingVendSaleArray.push(missingVendSaleMap);
// //             //     missingVendSaleArray.push(data);
// //             //   }
// //             // });
// //           }
// //         });

// //         var theElement1 = [];
// //         var theElement2 = [];
// //         var theElement3 = [];
// //         var theElement4 = [];
// //         var mergedArray = [];
// //         var nonUniqueArray = [];

// //         vendSaleAPIArray && vendSaleAPIArray.forEach((theObj, i, array1)=>{
// //           var theFlag = 0;
// //           // if (Object.keys(array1[i])){
// //           //   theElement1.push(Object.keys(array1[i]));
// //           //   // array1.splice(i,1);
// //           // }
// //           vendSaleWebhookArray && vendSaleWebhookArray.forEach((theObj2, j, array2)=>{
// //             // if (Object.keys(array1[i])){
// //             //   theElement1.push(Object.keys(array1[i]));
// //             //   array1.splice(i,1);
// //             // }
// //             // if (array2[j] && array1[i]){
// //             //   theElement2.push(array2[j].id);
// //             //   theElement1.push(array1[i].id);
// //             //   // array2.splice(j,1);
// //             // }
// //             // array2.splice(j,1);
// //             if ((array1[i] && array1[i].id) === (array2[j] && array2[j].id)){
// //               // console.log('same object ', i);
// //               array2.splice(j, 1);
// //               theFlag = 1;
// //             }
// //           });
// //           if (theFlag === 1){
// //             missingVendSaleAPIArray.push(array1[i]);
// //           }
// //         });


// //         // missingVendSaleAPIArray = vendSaleAPIArray.filter(theObj=>{
// //         //   const theId = Object.keys(theObj);
// //         //   if (!vendSaleWebhookArray.includes(theObj)){
// //         //     return true;
// //         //   }
// //         //   else {
// //         //     return false;
// //         //   }
// //           // vendSaleWebhookArray && vendSaleWebhookArray.forEach(theObj2=>{
// //           //   const theId2 = Object.keys(theObj2);
// //           //   theElement1 = theId;
// //           //   theElement2 = theId2;

// //           //   // if (theId !== theId2){
// //           //   //   return true;
// //           //   // }
// //           //   // else{
// //           //   //   return false;
// //           //   // }
// //           // });
// //         // });
        
// //         // missingVendSaleWebhookArray = difference(vendSaleAPIArray, vendSaleWebhookArray);

// //         // missingVendSaleWebhookArray = vendSaleWebhookArray && vendSaleWebhookArray.filter((theObj, i, array1)=>{
// //         //   const theId = theObj.id;
          
// //         //   vendSaleAPIArray && vendSaleAPIArray.forEach((theObj2, j, array2)=>{
// //         //     const theId2 = theObj2.id;
// //         //     // theElement3.push(theId);
// //         //     // theElement4.push(theId2);
// //         //     if (!array2[j].includes(theObj)){
// //         //       return true;
// //         //     }
// //         //     // if (theId !== theId2){
// //         //     //   return true;
// //         //     // }
// //         //     // else{
// //         //     //   return false;
// //         //     // }
// //         //   });
// //         // });
// //         // missingVendSaleArray = vendSaleWebhookArray && vendSaleWebhookArray.filter(element=>{
           
// //         //   // console.log('element1: ', Object.keys(element));
// //         //   //theElement1.push(Object.keys(element));
// //         //   theElement1 = Object.keys(element);
// //         //   return vendSaleAPIArray.some((element2)=>{
// //         //     return (Object.keys(element) === Object.keys(element2));
// //         //   });
// //         //   // vendSaleAPIArray && vendSaleAPIArray.forEach(vendAPI=>{
// //         //   //   if (Object.keys(element) != Object.keys(vendAPI)){
// //         //   //     return true;
// //         //   //   }
// //         //   //   else {
// //         //   //     return false;
// //         //   //   }
// //         //   //});
         
// //         //   // return true;
// //         // });

// //         // const intersection = array1.filter(element => array2.includes(element));
// //         // const missingVendSaleArray = vendSaleWebhookArray && vendSaleWebhookArray.filter(element=>{
// //         //   return vendSaleAPIArray.includes(Object.keys(element.id));
// //         // });

// //         // missingVendSaleAPIArray = vendSaleAPIArray && vendSaleAPIArray.filter(element=>{
// //         //   // console.log('element1: ', Object.keys(element));
// //         //   // theElement2.push(Object.keys(element));
// //         //   theElement2 = Object.keys(element);
// //         //   vendSaleWebhookArray && vendSaleWebhookArray.forEach(vendAPI=>{
// //         //     if (Object.keys(element) != Object.keys(vendAPI)){
// //         //       return true;
// //         //     }
// //         //     else {
// //         //       return false;
// //         //     }
// //         //   });
// //         // });

// //         // combine all array into single array
// //         // mergedArray = vendSaleAPIArray.concat(vendSaleWebhookArray);
// //         // nonUniqueArray = mergedArray.filter((item,i) => mergedArray.includes(item, i+1));
// //         // const missingVendSaleArray = vendSaleWebhookArray.filter(element => {
// //         //   vendSaleAPIArray && vendSaleAPIArray.forEach(vendAPI=>{
// //         //     if (vendAPI.id != element.id){
// //         //       theElement1.push(element.id);
// //         //       return true;
// //         //     }
// //         //     else{
// //         //       theElement2.push(element.id);
// //         //       return false;
// //         //     }
// //         //   });
// //         //   // if (!vendSaleAPIArray.includes(element && element.id)){
// //         //   //   missingVendSaleCount+=1;
// //         //   //   theElement1.push(element.id);
// //         //   //   return false;
// //         //   // }
// //         //   // else{
// //         //   //   theElement2.push(element.id);
// //         //   //   return true;
// //         //   // }
// //         // });
                
// //         return res.status(200).send({
// //           vendSaleAPICount, vendSaleWebhookCount,
// //           missingVendSaleWebhookArray, missingVendSaleAPIArray,
// //           theElement1, theElement2, theElement3, theElement4,
// //           // temporary. need to disable, memmory issue
// //           vendSaleAPIArray, 
// //           vendSaleWebhookArray,
// //           // missingVendSaleArray, 
// //           // missingVendSaleAPIArray,
// //           // theElement1,
// //           // theElement2,
// //           // nonUniqueArray
// //           // vendSaleWebhookArrayObj:Object.keys(vendSaleWebhookArray),
// //           // vendSaleAPIArrayObj:Object.keys(vendSaleAPIArray),
// //         });
// //       });

// //     // const paymentMap = {};
// //     // var paymentCount = 0;
// //     // return rp2(optionEdit).then(function (result){
// //     //   // get the data array
// //     //   const data = result && result.data;
// //     //   data && data.forEach((saleData)=>{

// //     //     const created_at = saleData && saleData.created_at;
// //     //     const paymentId = saleData && saleData.id;
// //     //     // if (created_at && moment(created_at).isSameOrAfter(moment('20200101'))){
// //     //       paymentMap[paymentId] = saleData;
// //     //       paymentCount+=1;
// //     //     // }
// //     //     // equivalent to line_items
// //     //     // var register_sale_products = [];
// //     //     var totals = {};
// //     //     const vendSalesV3 = {
// //     //       created_at,
// //     //       id:paymentId,
// //     //       customer_id: saleData && saleData.customer_id,
// //     //       deleted_at:saleData && saleData.deleted_at,
// //     //       invoice_number:saleData && saleData.invoice_number,
// //     //       note:saleData&&saleData.note,
// //     //       outlet_id:saleData&&saleData.outlet_id,
// //     //       register_id:saleData&&saleData.register_id,
// //     //       register_sale_products:saleData&&saleData.line_items,
// //     //       register_sale_payments:saleData&&saleData.payments,
// //     //       return_for:saleData&&saleData.return_for,
// //     //       sale_date:saleData&&saleData.sale_date,
// //     //       short_code:saleData&&saleData.short_code,
// //     //       source:saleData&&saleData.source,
// //     //       source_id:saleData&&saleData.source_id,
// //     //       status:saleData&&saleData.status,
// //     //       taxes:saleData&&saleData.taxes,
// //     //       totals:{
// //     //         total_price:saleData&&saleData.total_price,
// //     //         total_payment:saleData&&saleData.total_price_incl,
// //     //         total_tax:saleData&&saleData.total_tax
// //     //       },
// //     //       user_id:saleData&&saleData.user_id, // for CRO id
// //     //     };
// //     //     var vendSaleRef = admin.firestore().collection("vendSalesV3").doc(paymentId);
// //     //     // paymentCount+=1;

// //     //     batch.set(vendSaleRef, vendSalesV3);
// //     //     // admin.firestore.collection('vendSalesV3').doc(paymentMap.id).set(vendSalesV3).then(()=>{
// //     //     //   console.log("Document successfully written!");
// //     //     // }).catch(e=>{
// //     //     //   console.log('error: ', e);
// //     //     // });

// //     //   });
// //     //   const version = result && result.version;
     
// //       // return batch.commit().then(()=>{
// //       //   return res.status(200).send({success:true, paymentMap, paymentCount, version}); 
// //       // });
// //     });
// //   });
// // });

// // // get all vendSale
// // exports.getVendSale = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
// //     const optionBody = JSON.parse(JSON.stringify(req.body));
// //     const optionMethod = req.method;

// //     var vendProductObj = {};
// //     var rp2 = require('request-promise');
// //     const date_from = '2020-07-27'
// //     const date_to = '2020-07-28';
// //     const itemData = req.body;
// //     const startDate = itemData.startDate;
// //     const endDate = itemData.endDate;

// //     // var optionEdit = searchVend(date_from, date_to);
// //     var optionEdit = vendGetVendSale();

// //     const paymentMap = {};
// //     var paymentCount = 0;
// //     return rp2(optionEdit).then(function (result){
// //       // get the data array
// //       const data = result && result.data;
// //       data && data.forEach((saleData)=>{

// //         const created_at = saleData && saleData.created_at;
// //         const paymentId = saleData && saleData.id;
// //         // if (created_at && moment(created_at).isSameOrAfter(moment('20200101'))){
// //           paymentMap[paymentId] = saleData;
// //           const vendSalesV3 = {
// //             created_at,
// //             id:paymentId
// //           };
// //           paymentCount+=1;
// //           admin.firestore.collection('vendSalesV3').doc(paymentMap.id).set(vendSalesV3).then(()=>{
// //             console.log("Document successfully written!");
// //           }).catch(e=>{
// //             console.log('error: ', e);
// //           });
// //         // }
// //       });
// //       // create object for vendSalesV3
      
// //       // const created_at = data && data[0].created_at;
// //       // const paymentId = data && data[0].id;
// //       const version = result && result.version;
// //       // console.log('getVendSaleresult: ', result);
// //       // console.log(moment(created_at).format('DDMMYYYY'));
// //       // paymentMap[paymentId] = data;
// //       // if (created_at && moment(created_at).isValid() && moment(created_at).isAfter(moment('20180101'))){
// //       //   paymentMap[paymentId] = data;
// //       //   // return res.status(200).send({success:true, paymentMap, version}); 
// //       // }

// //       // else{
// //       //   return res.status(200).send({success:true, isBefore2020:true}); 
// //       // }
// //       // return admin.firestore.collection('vendSalesV3').doc(paymentMap.id).set(vendSalesV3).then(()=>{
// //       return res.status(200).send({success:true, paymentMap, paymentCount, version}); 
// //       // });  
// //     });
// //   });
// // });

// // // get vend product types
// // exports.getVendProductTypes = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetProductTypes();
// //     return rp2(optionsEdit).then(function (result){
// //       return res.status(200).send({success:true, result}); 
// //     });
// //   });
// // });

// // get vend product details
// exports.getVendProductDetails = functions.https.onRequest((req, res) => {
//   const corsFn = cors({ origin: true });
//   return corsFn(req, res, () => {
//     const optionBody = JSON.parse(JSON.stringify(req.body));
//     const optionMethod = req.method;

//     var vendProductObj = {};
//     var rp2 = require('request-promise');
//     var optionsEdit = vendGetProductDetails('c8356e28-49e6-8173-912a-1e3698dbc0d9');

//     return rp2(optionsEdit).then(function (result){
//       // console.log('getVendSaleresult: ', result);

//       return res.status(200).send({success:true, result}); 
//     });
//   });
// });

// // // get all vend customers
// // exports.getVendCustomers = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
// //     const optionBody = JSON.parse(JSON.stringify(req.body));
// //     const optionMethod = req.method;

// //     var vendProductObj = {};
// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetAllCustomer();

// //     return rp2(optionsEdit).then(function (result){
// //       // console.log('getVendSaleresult: ', result);
// //       return res.status(200).send({success:true, result}); 
// //     });
// //   });
// // });

// // // get all vend customer group
// // exports.getVendCustomerGroup = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
// //     const optionBody = JSON.parse(JSON.stringify(req.body));
// //     const optionMethod = req.method;

// //     var vendProductObj = {};
// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetAllCustomerGroup();

// //     return rp2(optionsEdit).then(function (result){
// //       // console.log('getVendSaleresult: ', result);
// //       return res.status(200).send({success:true, result}); 
// //     });
// //   });
// // });

// // // get all vend gift_card
// // exports.getAllVendGiftCard = functions.https.onRequest((req, res) => {
// //   const corsFn = cors({ origin: true });
// //   return corsFn(req, res, () => {
// //     const optionBody = JSON.parse(JSON.stringify(req.body));
// //     const optionMethod = req.method;

// //     var rp2 = require('request-promise');
// //     var optionsEdit = vendGetGiftCard();

// //     return rp2(optionsEdit).then(function (result){
// //       // console.log('getVendSaleresult: ', result);
// //       return res.status(200).send({success:true, result}); 
// //     });
// //   });
// // });

// // function getVendProductByActionPromo (include, exclude){
// //   var vendProducts = {};
// //   if (!include || include === []){
// //     return vendProducts;
// //   }
// //   else if (include && include.length>0){

// //     var venProdMap = {};
// //     const vendProductQuery = admin.firestore().collection('vendProducts').get();
// //     return Promise(vendProductQuery).then(vendProdData=>{
      
// //       vendProdData.forEach(doc=>{
// //         venProdMap[doc.id]=doc.data();
// //       });

// //       include && include.forEach(incdata=>{
// //         const field = incdata.field;
// //         const value = incdata.value;
// //         if(field && value && field === 'product_id'){
// //           vendProducts[value] = venProdMap[value];
// //         }
// //       });
      
// //       return vendProducts;
// //     });
// //   }
 

  
// // }

// // // do with body first
// // // // todo: call app.babel.fit/buy/vendId/qty (24/6/2021)
// // // exports.getVendPromoByVendId = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const vendProductId = optionBody && optionBody.vendProductId;
// // //     const quantity = optionBody.quantity || 1;
// // //     console.log('theQuantity: ', quantity);
// // //     // console.log('optionBody: ', optionBody);
    
// // //     var rp2 = require('request-promise');

// // //     const vendProductQuery = admin.firestore().collection('vendProducts').where('id', '==', vendProductId).get();
// // //     const vendPromosQuery = admin.firestore().collection('vendPromos').get();

// // //     return Promise.all([vendProductQuery, vendPromosQuery]).then(result=>{
// // //       const vendProductRes = result[0];
// // //       const vendPromoRes = result[1];

// // //       var productDetails = {};
// // //       var productDetailsArray = [];
// // //       var BuyProductDetails = {};
    
// // //       // to store the categories
// // //       var tagArray = [];
// // //       var vendProdMap = {};
// // //       vendProductRes && vendProductRes.forEach(doc=>{
// // //         const data = doc.data();
// // //         const categories = data.categories;
// // //         categories && categories.forEach(item=>{
// // //           tagArray.push(item.id);
// // //         });
        
// // //         const vendSupplyPrice = data.supply_price;
// // //         const vendPriceBookPrice = data.price_book_entries && data.price_book_entries.length > 0 && data.price_book_entries[0].price;
// // //         const vendPriceAmount = vendSupplyPrice && parseFloat(vendSupplyPrice) > 0 ? vendSupplyPrice : vendPriceBookPrice;
        
// // //         productDetails[doc.id] = data;
// // //         // productDetails[doc.id].ids = [
// // //         //   data.id, 
// // //         //   data.brand? data.brand.id? data.brand.id:'':'',
// // //         //   data.product_type? data.product_type.id? data.product_type.id:'':'',
// // //         //   data.supplier? data.supplier.id? data.supplier.id:'':'',
// // //         //   tagArray, // contains array of tagIds
// // //         //   data.variant_parent_id? data.variant_parent_id:''
// // //         // ];

// // //         productDetailsArray = [
// // //           data.id, 
// // //           data.brand? data.brand.id? data.brand.id:'':'',
// // //           data.product_type? data.product_type.id? data.product_type.id:'':'',
// // //           data.supplier? data.supplier.id? data.supplier.id:'':'',
// // //           // tagArray.join(),
// // //           // tagArray,
// // //           data.variant_parent_id? data.variant_parent_id:'',
// // //         ];

// // //         tagArray && tagArray.forEach(tagId=>{
// // //           productDetailsArray.push(tagId);
// // //         });

// // //         BuyProductDetails = {
// // //           id:data.id,
// // //           brand: data.brand? data.brand.id? data.brand.id:null:null,
// // //           product_typeId: data.product_type? data.product_type.id? data.product_type.id:null:null,
// // //           supplierId: data.supplier? data.supplier.id? data.supplier.id:null:null,
// // //           tagIds:tagArray,
// // //           variant_parent_id:data.variant_parent_id? data.variant_parent_id:null,
// // //           quantity: quantity||1,
// // //           totalPrice: vendPriceAmount * quantity
// // //         }
// // //       });

// // //       // // contains all the necessary type of vendProdDetails
// // //       // productDetails.ids = [
       
// // //       // ];

// // //       var validPromoMap = {}; // list all promo, filter by start/ennddate
// // //       var matchedPromo = {};
// // //       vendPromoRes && vendPromoRes.forEach(doc=>{
// // //         const data = doc.data();
// // //         const start_time = data && data.start_time;
// // //         const end_time = data && data.end_time;
// // //         const status = data && data.status;
// // //         const action = data && data.action;
// // //         const actionInclude = action && action.include;
// // //         const actionExclude = action && action.exclude;
// // //         // show all the vendproducts from include minus exclude;
// // //         var vendProdList = getVendProductByActionPromo(actionInclude, actionExclude);
// // //         // validPromoMap[doc.id]=data;
// // //         // console.log('endtime format: ', moment(end_time).format('YYYYMMDD'));
// // //         if ((end_time && moment(end_time).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur')))
// // //           // for promo with no end date
// // //           // || (start_time && moment(start_time).isSameOrBefore(moment()) && status && status === 'active')
// // //         ){
// // //           // console.log('contains end time')
// // //           validPromoMap[doc.id]=data;
// // //           validPromoMap[doc.id].vendProdList = vendProdList;
// // //         }
// // //         // no end time
// // //         else if (end_time === null && status && status === 'active'){
// // //           // console.log('contains null endtime: ', end_time);
// // //           validPromoMap[doc.id]=data;
// // //           validPromoMap[doc.id].vendProdList = vendProdList;
// // //         }
// // //         // else if ((start_time && moment(start_time).isSameOrBefore(moment()) && status && status === 'active'))
// // //       });


// // //       //intialise object to store promo that matches Promotional conditions.
// // //       var matchedpromo = {};
// // //       Object.entries(validPromoMap).forEach(([key, value]) => {
// // //         const exclude = value.condition && value.condition.exclude;
// // //         exclude && exclude.forEach(exc=>{
// // //           const excValue = exc.value;
// // //           if (excValue && productDetailsArray.includes(excValue)){
// // //             return;
// // //           }
// // //         });

// // //         const include = value.condition && value.condition.include;
// // //         const conditionType = value.condition && value.condition.type;
// // //         const conditionQty = value.condition && value.condition.quantity;
// // //         const conditionMinQty = value.condition && value.condition.min_quantity;
// // //         const conditionMaxQty = value.condition && value.condition.max_quantity;
// // //         const conditionMinPrice = value.condition && value.condition.min_price;
// // //         // console.log('include: ', include);
// // //         // console.log('conditionQty: ', conditionQty);
// // //         const isPromoForAllProducts = conditionType && conditionType === 'product_set' && conditionQty === 1 && include && include.length === 0 && exclude && exclude.length === 0;
// // //         const isProductSetFixQty = conditionType && conditionType === 'product_set' && conditionQty;
// // //         const isProductSetMinMaxQty = conditionType && conditionType === 'product_set' && conditionMinQty && BuyProductDetails.quantity >= conditionMinQty && BuyProductDetails.quantity <= conditionMaxQty;
// // //         const isSalePriceMoreThanMinPrice = conditionType && conditionType === 'sale_price' && BuyProductDetails.totalPrice > conditionMinPrice;

// // //         console.log('isPromoForAllProducts: ', isPromoForAllProducts);
// // //         console.log('isProductSetFixQty: ', isProductSetFixQty);
// // //         console.log('isProductSetMinMaxQty: ', isProductSetMinMaxQty);
// // //         console.log('isProductSetMinMaxQty: ', isProductSetMinMaxQty);

// // //         // for all products
// // //         if (isPromoForAllProducts){
// // //           matchedpromo[vendProductId]=value;
// // //           return;
// // //         }
// // //         include && include.forEach(inc=>{
// // //           const incValue = inc.value;
// // //           const field = inc.field;
// // //           console.log('productDetailsArray.includes(incValue): ', productDetailsArray.includes(incValue));
// // //           if (incValue && productDetailsArray.includes(incValue)){
// // //             if (isProductSetFixQty || isProductSetMinMaxQty || isSalePriceMoreThanMinPrice){
// // //               matchedpromo[vendProductId]=value;
// // //             }
// // //           }
// // //         });
// // //       });

// // //       return res.status(200).send({success:true, matchedpromo, BuyProductDetails, productDetails, validPromoMap, productDetailsArray}); 
// // //       // if no promo, return to its original price
// // //       // if (matchedPromo = {}){
// // //       //   return res.status(200).send({succes:true, message:'no promotion found', productDetails, validPromoMap, productDetailsArray});
// // //       // }
// // //       // else{
// // //       //   return res.status(200).send({success:true, matchedpromo, BuyProductDetails, productDetails, validPromoMap, productDetailsArray}); 
// // //       // }
// // //     });    
// // //   });
// // // });

// // // function matchedPromoMap (data, productByBrandMap, productBytypeMap, productBySupplierMap, productByTagMap){
// // //   var promoByProdIdMap = {};
// // //   if (!data){
// // //     console.log('no data');
// // //     return {};
// // //   }
// // //   const start_time = data && data.start_time;
// // //   const end_time = data && data.end_time;

// // //   // if no endtime, check if status is active,

// // //   if (!start_time){
// // //     console.log('no start time')
// // //     return {};
// // //   }
  
// // //   const action = data && data.action;
// // //   const channels = data && data.channels;
// // //   const customer_group_ids = data && data.customer_group_ids;
// // //   const condition = data && data.condition;
// // //   const include = condition && condition.include;
// // //   const exclude = condition && condition.exclude;

// // //   include && include.forEach(incData=>{
// // //     const field = incData && incData.field; 
// // //     const value = incData && incData.value;
// // //     console.log("field", field);
// // //     if (field && field === 'product_id' && value){
// // //       console.log('vendProductId product_id: ', value);
// // //       // map by vendProductId
// // //       promoByProdIdMap[value] = data;
// // //     }
// // //     if (field === 'brand_id' && value){
// // //       // get all vendproduct by brandId
// // //       const productByBrandMapData = productByBrandMap[value];           
// // //       const vendProductId = productByBrandMapData && productByBrandMapData.id;
// // //       console.log('vendProductId brandId: ', vendProductId);
// // //       if (vendProductId){
// // //         promoByProdIdMap[vendProductId] = data;
// // //       }
// // //     }
// // //     // if (field === 'supplier_id' && value){

// // //     // }
// // //     if (field === 'type_id' && value){
// // //       const productBytypeData = productBytypeMap[value];
// // //       const vendProductId = productBytypeData && productBytypeData.id;
// // //       if (vendProductId){
// // //         promoByProdIdMap[vendProductId] = data;
// // //       }
// // //     }
// // //   });

// // //   return promoByProdIdMap;
// // // }


// // // // check if the existing vendProductId contains promo
// // // exports.getVendPromoByProductId = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const reqOption = 'POST';

// // //     // var rp2 = require('request-promise');
// // //     const vendPromosQuery = admin.firestore().collection('vendPromos').get();
// // //     const vendProductQuery = admin.firestore().collection('vendProducts').where('active', '==', true).get();

// // //     return Promise.all([vendPromosQuery, vendProductQuery]).then(result=>{
// // //       const promoRes = result[0];
// // //       const prodRes = result[1];

// // //       var productMap = {};
// // //       var productByBrandMap = {};
// // //       var productBySupplierMap = {};
// // //       var productByTagMap = {};
// // //       var productBytypeMap = {};

// // //       var promoActionMap = {};

// // //       prodRes.forEach(doc=>{
// // //         productMap[doc.id]=doc.data();
// // //         const data = doc.data();
// // //         const brand = data.brand;
// // //         const brandId = brand && brand.id;
// // //         const product_type = data.product_type;
// // //         const product_type_id = product_type && product_type.id;
// // //         const supplierId = data.supplier && data.supplier.id;
// // //         // tag is categorized by 'categories'
// // //         const categories = data.categories;
// // //         productByBrandMap[brandId] = data;
// // //         productBytypeMap[product_type_id] = data;
// // //         productBySupplierMap[supplierId] = data;
// // //         categories && categories.forEach(item=>{
// // //           const tagId = item.id;
// // //           productByTagMap[tagId] = data;
// // //         });
// // //       });

// // //       var promoMap = {};
// // //       var promoByProdIdMap = {};
// // //       promoRes.forEach(doc=>{
// // //         promoMap[doc.id]=doc.data();
// // //         const data = doc.data();
// // //         const start_time = data && data.start_time;
// // //         const end_time = data && data.end_time;
// // //         const action = data && data.action;
// // //         const channels = data && data.channels;
// // //         const customer_group_ids = data && data.customer_group_ids;

// // //         const condition = data && data.condition;
// // //         const include = condition && condition.include;
// // //         const exclude = condition && condition.exclude;

// // //         promoByProdIdMap = matchedPromoMap(data, productByBrandMap, productBytypeMap, productBySupplierMap, productByTagMap);

// // //         // include && include.forEach(incData=>{
// // //         //   const field = incData && incData.field; 
// // //         //   const value = incData && incData.value;
// // //         //   if (field === 'product_id' && value){
            
// // //         //     // map by vendProductId
// // //         //     promoByProdIdMap[value] = data;
// // //         //   }
// // //         //   if (field === 'brand_id' && value){
// // //         //     // get all vendproduct by brandId
// // //         //     const productByBrandMapData = productByBrandMap[value];           
// // //         //     const vendProductId = productByBrandMapData && productByBrandMapData.id;
// // //         //     // console.log('vendProductId: ', vendProductId);
// // //         //     if (vendProductId){
// // //         //       promoByProdIdMap[vendProductId] = data;
// // //         //     }
// // //         //   }
// // //         //   if (field === 'supplier_id' && value){

// // //         //   }
// // //         //   if (field === 'type_id' && value){
// // //         //     const productBytypeData = productBytypeMap[value];
// // //         //     const vendProductId = productBytypeData && productBytypeData.id;
// // //         //     if (vendProductId){
// // //         //       promoByProdIdMap[vendProductId] = data;
// // //         //     }
// // //         //   }
// // //         // });
// // //       });

// // //       // show product map with promotion only
     
// // //       return res.status(200).send({succes:true, 
// // //         // promoMap, 
// // //         // productMap, 
// // //         promoByProdIdMap, 
// // //         // productByBrandMap
// // //       }).catch(error=>{
// // //         return res.status(200).send({
// // //           succes:false,
// // //           error
// // //         })
// // //       })
// // //     });

// // //   });
// // // });

// // // // get promo by id (POST method)
// // // exports.getVendPromoByPromoId = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const promoId = optionBody.promoId;

// // //     var rp2 = require('request-promise');
// // //     var optionsEdit = vendGetPromotionById(promoId);

// // //     return rp2(optionsEdit).then(function (result){
// // //       // console.log('getVendSaleresult: ', result);
// // //       return res.status(200).send({success:true, result}); 
// // //     }).catch(error => {
// // //       return res.status(200).send({success:false, error}); 
// // //     });
// // //   });
// // // });

// // // // post vend promotion
// // // exports.postVendPromotion = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const vendCustomerId = optionBody && optionBody.vendCustomerId;
// // //     var rp2 = require('request-promise');

// // //     const id = optionBody.id;
// // //     const name = optionBody.name;
// // //     const start_time = optionBody.start_time;
// // //     const end_time = optionBody.end_time;
// // //     const condition = optionBody.condition;
// // //     const action = optionBody.action;
// // //     const outlet_ids = optionBody.outlet_ids;
// // //     const channels = optionBody.channels || ["Register"];
// // //     const status = optionBody.status || 'active';
// // //     const use_promo_code = optionBody.use_promo_code || false;

// // //     var optionsEdit = vendPostPromotion(id, name, start_time, end_time, condition, action, outlet_ids, channels, status, use_promo_code);
    
// // //     return rp2(optionsEdit).then(function (result){
// // //       console.log('postVendStoreCreditByUser: ', result);
// // //       // if (result && result.errors){s

// // //       // }
// // //       return res.status(200).send({success:true, result}); 
// // //     }).catch(error => {
// // //       return res.status(200).send({success:false, error}); 
// // //     });
// // //   });
// // // });

// // // // get all vend store_credit
// // // exports.getAllVendStoreCredit = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;

// // //     var rp2 = require('request-promise');
// // //     var optionsEdit = vendGetListStoreCredit();

// // //     return rp2(optionsEdit).then(function (result){
// // //       // console.log('getVendSaleresult: ', result);
// // //       return res.status(200).send({success:true, result}); 
// // //     });
// // //   });
// // // });

// // // // get vend store_credit by user
// // // exports.getVendStoreCreditByUser = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const vendCustomerId = optionBody && optionBody.vendCustomerId;
// // //     var rp2 = require('request-promise');
// // //     var optionsEdit = vendGetStoreCredit(vendCustomerId);

// // //     return rp2(optionsEdit).then(function (result){
// // //       // console.log('getVendSaleresult: ', result);
// // //       return res.status(200).send({success:true, result}); 
// // //     });
// // //   });
// // // });

// // // // post vend store_credit by user
// // // exports.postVendStoreCreditByUser = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const vendCustomerId = optionBody && optionBody.vendCustomerId;
// // //     var rp2 = require('request-promise');
// // //     // hardcode first
// // //     const store_credit_customer_id = optionBody.store_credit_customer_id;
// // //     const amount = optionBody.amount;
// // //     const type = optionBody.type;
// // //     const notes = optionBody.notes;
// // //     const user_id = optionBody.user_id;
// // //     const client_id = optionBody.client_id;

// // //     // const store_credit_customer_id = '0af7b240-aba0-11e9-fb5b-e01b45aad481123';
// // //     // const amount = 100;
// // //     // const type = 'ISSUE';
// // //     // const notes = 'test';
// // //     // const user_id = '0af7b240-aba0-11e9-fb5b-ef3bfad8b00b';
// // //     // const client_id = '5c931c5e-be54-99af-11eb-d012b93f8b45453';
// // //     var optionsEdit = createStoreCredit(vendCustomerId, store_credit_customer_id, amount, type, notes, user_id, client_id);

// // //     return rp2(optionsEdit).then(function (result){
// // //       console.log('postVendStoreCreditByUser: ', result);
// // //       // if (result && result.errors){

// // //       // }
// // //       return res.status(200).send({success:true, result}); 
// // //     }).catch(error => {
// // //       return res.status(200).send({success:false, error}); 
// // //     });
// // //   });
// // // });

// // // // add Customers to customer group
// // // exports.addCustomersToCustomerGroup = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const reqOption = 'POST';

// // //     // hardcode
// // //     var customersId = {"customer_ids": [
// // //       "0af7b240-aba0-11e9-fb5b-94c73e76ce8b"
// // //     ]}

// // //     var customerIdArray = [];
// // //     var customerObj = {"customer_ids":[]};
// // //     // get all non terminated members
// // //     const userQuery = admin.firestore().collection('users')
// // //     // .where('email', '==', 'faizulhadijamil@gmail.com')
// // //     .get();

// // //     const welcomeBackGroupId = '023c72a6-e9a0-11eb-e2fd-6e9d93f83662'; // hardcode

// // //     return Promise.all([userQuery]).then(result=>{
// // //       const userResult = result[0];

// // //       var userCount = 0;
// // //       userResult && userResult.forEach(user=>{
// // //         const data = user.data();
// // //         const cancellationDate = data.cancellationDate;
// // //         const vendCustomerId = data.vendCustomerId;
// // //         const createdAt = data && data.createdAt;
// // //         const vendCustomerGroupId = data && data.vendCustomerGroupId;
// // //         const joinDate = data && data.joinDate;
// // //         const membershipStarts = (data && data.autoMembershipStarts)? (data.autoMembershipStarts):(data && data.membershipStarts)? data.membershipStarts:null;
// // //         const membershipEnds = (data && data.autoMembershipEnds)? (data.autoMembershipEnds):(data && data.membershipEnds)? data.membershipEnds:null;
// // //         const isStaff = data && data.isStaff;

// // //         // const membershipStarts
// // //         if (!cancellationDate && !isStaff && joinDate && membershipStarts && membershipEnds && vendCustomerId && createdAt && userCount<=20 && (!vendCustomerGroupId || vendCustomerGroupId!='023c72a6-e9a0-11eb-e2fd-6e9d93f83662')){
// // //           customerIdArray.push(vendCustomerId);
// // //           userCount+=1;
// // //         }
// // //         else{
// // //           //return res.status(200).send({success:false, error:'no member found'}); 
// // //           return;
// // //         }
// // //       });

// // //       var rp2 = require('request-promise');
// // //       var optionsEdit = vendAddOrRemoveCustomersToGroup(welcomeBackGroupId, {"customer_ids":customerIdArray}, reqOption);
  
// // //       return rp2(optionsEdit).then(function (result){
// // //         // console.log('getVendSaleresult: ', result);
// // //         return res.status(200).send({success:true, result, customerIdArray}); 
// // //       }).catch(error => {
// // //         return res.status(200).send({success:false, error}); 
// // //       });
// // //     });
  
    
   
// // //   });
// // // });

// // // // delete Customers to customer group (welcome back 2.0)
// // // exports.deleteCustomersToCustomerGroup = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;
// // //     const reqOption = 'DELETE';
// // //     // hardcode
// // //     const customersId = {"customer_ids": [
// // //       "0af7b240-aba0-11e9-fb5b-94c73e76ce8b"
// // //     ]}

// // //     var customerIdArray = [];
// // //     const welcomeBackGroupId = '023c72a6-e9a0-11eb-e2fd-6e9d93f83662'; // hardcode

// // //     // get all non terminated members
// // //     const userQuery = admin.firestore().collection('users')
// // //     .where('email', '==', 'faizulhadijamil@gmail.com')
// // //     .get();

// // //     return Promise.all([userQuery]).then(result=>{
// // //       const userResult = result[0];

// // //       userResult && userResult.forEach(user=>{
// // //         const data = user.data();
// // //         const cancellationDate = data.cancellationDate;
// // //         const vendCustomerId = data.vendCustomerId;
// // //         if (!cancellationDate && vendCustomerId){
// // //           customerIdArray.push(vendCustomerId);
// // //         }
// // //         else{
// // //           //return res.status(200).send({success:false, error:'no member found'}); 
// // //           return;
// // //         }
// // //       });

// // //       var rp2 = require('request-promise');
// // //       var optionsEdit = vendAddOrRemoveCustomersToGroup(welcomeBackGroupId, {"customer_ids":customerIdArray}, reqOption);

// // //       return rp2(optionsEdit).then(function (result){
// // //         // console.log('getVendSaleresult: ', result);
// // //         return res.status(200).send({success:true, result}); 
// // //       }).catch(error => {
// // //         return res.status(200).send({success:false, error}); 
// // //       });
// // //     });

// // //   });
// // // });

// // // // acuity function with promise
// // // function acuityRequest (route, options) {
// // //   const promise = new Promise(function (resolve, reject) {

// // //     // console.log('theroute: ', route);
// // //     acuity.request(route, options, function (err, response, appointments) {
// // //       // console.log('appointments: ', appointments);
// // //       if (err) {
// // //         reject(err); // reject with connection/network error
// // //       } else {
// // //         // console.log('appointmentsResolve: ', appointments);
// // //         resolve(appointments); // resolve with response data
// // //       }
// // //     });
// // //   });
// // //   return promise;
// // // }

// // // // // const baseZoomURL = `https://api.zoom.us/v2/`;
// // // // // const zoomAuthBearer = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOm51bGwsImlzcyI6ImcwT0hydm5UUldLX29GdTRYb0RQbVEiLCJleHAiOjE2MzU0ODQ3NDAsImlhdCI6MTYwMzM0NDAwOH0.fz0LlMHlqtNW8m_XDzTSsfmA27vxxuRlyl5QpVf8Tv8';
// // // // // // to get all users from zoom
// // // // // exports.getAllZoomUsers = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     // const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     // const optionMethod = req.method;

// // // // //     // token will be expired on 22/10/2021
// // // // //     const option = {
// // // // //         uri: `${baseZoomURL}users`,
// // // // //         method: 'GET',
// // // // //         auth: {
// // // // //           bearer: zoomAuthBearer
// // // // //         },
// // // // //         // body: Object.assign({}, body),
// // // // //         // json: true
// // // // //     };
// // // // //     request(option, function (error, response) {
// // // // //         res.contentType('application/json');
// // // // //         if (response.statusCode === 200) {
// // // // //           var responseBody = JSON.parse(response.body);
// // // // //           console.log('resStatus:', response.statusCode, response.statusMessage);
// // // // //           // console.log('theRes:')
// // // // //           // to enable cors
// // // // //           res.set({
// // // // //             'content-type': 'application/json',
// // // // //             'warning': "with content type charset encoding will be added by default",
// // // // //             "Access-Control-Allow-Headers" : "Content-Type",
// // // // //             "Access-Control-Allow-Origin": "*",
// // // // //             "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
// // // // //          });
// // // // //           res.status(response.statusCode).send({
// // // // //             success:true, 
// // // // //             responseBody:responseBody,
// // // // //             users:responseBody.users,
// // // // //             status: response.statusCode,
// // // // //             // theRes: res,
// // // // //           });
// // // // //         }
// // // // //         else {
// // // // //             console.log('Status:', response.statusCode, response.statusMessage);
// // // // //             console.log('Error:', error);
// // // // //             res.status(response.statusCode).send({ data: 'Fail in authorising recurring payment' });
// // // // //         }
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to get all meeting from faizul zoom (the host)
// // // // // exports.getAllZoomMeetings = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     // const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     // const optionMethod = req.method;

// // // // //     // token will be expired on 22/10/2021
// // // // //     const option = {
// // // // //         // hardcode for faizul zoom userId
// // // // //         uri: `${baseZoomURL}users/gK8Kw5E4T4-JVy-UDZtdcw/meetings`,
// // // // //         method: 'GET',
// // // // //         auth: {
// // // // //           bearer: zoomAuthBearer
// // // // //         },
// // // // //         // body: Object.assign({}, body),
// // // // //         // json: true
// // // // //     };
// // // // //     request(option, function (error, response) {
// // // // //         res.contentType('application/json');
// // // // //         if (response.statusCode === 200) {
// // // // //           var responseBody = JSON.parse(response.body);
// // // // //           console.log('resStatus:', response.statusCode, response.statusMessage);
// // // // //           // console.log('theRes:')
// // // // //           // to enable cors
// // // // //           res.set({
// // // // //             'content-type': 'application/json',
// // // // //             'warning': "with content type charset encoding will be added by default",
// // // // //             "Access-Control-Allow-Headers" : "Content-Type",
// // // // //             "Access-Control-Allow-Origin": "*",
// // // // //             "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
// // // // //          });
// // // // //           res.status(response.statusCode).send({
// // // // //             success:true, 
// // // // //             responseBody:responseBody,
// // // // //             meetings:responseBody.meetings,
// // // // //             status: response.statusCode,
// // // // //             // theRes: res,
// // // // //           });
// // // // //         }
// // // // //         else {
// // // // //             console.log('Status:', response.statusCode, response.statusMessage);
// // // // //             console.log('Error:', error);
// // // // //             res.status(response.statusCode).send({ data: 'Fail in authorising recurring payment' });
// // // // //         }
// // // // //     });
// // // // //   });
// // // // // });

// // // // to get all acuityappointment
// // // exports.getacuityappointment = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // //     const optionMethod = req.method;

// // //     const calendarID = optionBody.calendarID;
// // //     const calendarIdLink = calendarID? `&calendarID=${calendarID}`:``;
// // //     const maxList = optionBody.maxList? `max=${optionBody.maxList}`:``;
// // //     const email = optionBody.email? `&email=${optionBody.email}`:``;
// // //     const phone = optionBody.phone? `&phone=${optionBody.phone}`:``;
// // //     const appointmentTypeID = optionBody.appointmentTypeID? `&appointmentTypeID=${optionBody.appointmentTypeID}`:``;

// // //     var option = {};
// // //     option.body = optionBody;
// // //     option.method = 'GET';
    
// // //     const availableUrl = `appointments?${maxList}${email}${phone}${appointmentTypeID}`;

// // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // //       const acuityResult = result[0];
// // //       // console.log('acuityResult: ', acuityResult);
// // //       return res.status(200).send({
// // //         success:true,
// // //         appointments:acuityResult
// // //       })
// // //     });
// // //   });
// // // });

// // // // // // to get single acuityappointment by id (using POST to send the id)
// // // // // exports.getacuityappointmentbyId = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);
// // // // //     console.log('optionBody2: ', JSON.stringify(req.body));

// // // // //     const acuityId = optionBody.acuityId;
// // // // //     console.log('acuityId: ', acuityId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;

// // // // //     // return get method?
// // // // //     const acuityAppointmentsPromise = acuityRequest(`/appointments/${acuityId}`);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointments:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to post an acuity appointment
// // // // // exports.postacuityappointment = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;
// // // // //     const userId = optionBody.userId;
// // // // //     console.log('userId: ', userId);

// // // // //     const acuityAppointmentsPromise = acuityRequest('/appointments', option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       var acuityId = acuityResult.id.toString();
// // // // //       console.log('acuityResult: ', acuityResult);
     
// // // // //       if (acuityResult.error){
// // // // //         return res.status(200).send({
// // // // //           success:false,
// // // // //           appointments:acuityResult
// // // // //         })
// // // // //       }
// // // // //       else{
// // // // //         acuityResult.fromApp = true;
// // // // //         acuityResult.userId = userId;
// // // // //         // acuityId = String(acuity.id);
// // // // //         console.log('acuityId: ', acuityResult.id);
// // // // //         acuityId = (acuityResult.id).toString();
       
// // // // //         // write to acuity firestore
// // // // //         // return admin.firestore().collection('acuity').add(acuityResult).then((docRef) => {
// // // // //         return admin.firestore().collection('acuity').doc(acuityId).set(acuityResult).then((docRef) => {
// // // // //           console.log('docRef: ', docRef.id);
// // // // //           return res.status(200).send({
// // // // //             success:true,
// // // // //             appointments:acuityResult
// // // // //           })
// // // // //         });
// // // // //       }
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to put/update an acuity appointment
// // // // // exports.updateacuityappointmentbyid = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const acuityId = optionBody.acuityId;
// // // // //     console.log('acuityId: ', acuityId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;

// // // // //     const acuityAppointmentsPromise = acuityRequest(`/appointments/${acuityId}`, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointments:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to cancel (put method) an acuity appointment
// // // // // exports.cancelacuityappointmentbyid = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const acuityId = optionBody.acuityId;
// // // // //     console.log('acuityId: ', acuityId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;

// // // // //     const acuityAppointmentsPromise = acuityRequest(`/appointments/${acuityId}/cancel`, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointments:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to reschedule (put method) an acuity appointment
// // // // // exports.rescheduleacuityappointmentbyid = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const acuityId = optionBody.acuityId;
// // // // //     console.log('acuityId: ', acuityId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;

// // // // //     const acuityAppointmentsPromise = acuityRequest(`/appointments/${acuityId}/reschedule`, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointments:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // to get all acuityappointment types
// // // exports.getacuityappointmenttypes = functions.https.onRequest((req, res) => {
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     const acuityAppointmentsPromise = acuityRequest('appointment-types');
// // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // //       const acuityResult = result[0];
// // //       // console.log('acuityResult: ', acuityResult);
// // //       return res.status(200).send({
// // //         success:true,
// // //         appointmenttypes:acuityResult
// // //       })
// // //     });
// // //   });
// // // });

// // // // // // to get all acuityappointment available date (using POST to send the appointmentTypeID)
// // // // // exports.getacuityappointmentavailabledate = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const appointmentTypeId = optionBody.appointmentTypeID;
// // // // //     const month = optionBody.month;
// // // // //     const calendarID = optionBody.calendarID;
// // // // //     const calendarIdLink = calendarID? `&calendarID=${calendarID}`:``;
// // // // //     console.log('appointmentTypeId: ', appointmentTypeId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;
    
// // // // //     const availableUrl = `availability/dates?appointmentTypeID=${appointmentTypeId}&month=${month}${calendarIdLink}&timezone=Asia/Kuala_Lumpur`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointmenttypes:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to get all acuityappointment available time (using POST to send the appointmentTypeID, month calendarID)
// // // // // exports.getacuityappointmentavailabletime = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const appointmentTypeId = optionBody.appointmentTypeID;
// // // // //     const date = optionBody.date;
// // // // //     const calendarID = optionBody.calendarID;
// // // // //     const calendarIdLink = calendarID? `&calendarID=${calendarID}`:``;
// // // // //     console.log('appointmentTypeId: ', appointmentTypeId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;
    
// // // // //     const availableUrl = `availability/times?appointmentTypeID=${appointmentTypeId}${calendarIdLink}&date=${date}&timezone=Asia/Kuala_Lumpur`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         times:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // to get all acuityappointment available class (using POST to send the month)
// // // // // exports.getacuityappointmentavailableclass = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     const month = optionBody.month;
// // // // //     const calendarID = optionBody.calendarID;
// // // // //     const calendarIdLink = calendarID? `&calendarID=${calendarID}`:``;
// // // // //     const appointmentTypeId = optionBody.appointmentTypeId;
// // // // //     const appointmentTypeIdLink = appointmentTypeId? `appointmentTypeID=${appointmentTypeId}`:``;
// // // // //     console.log('appointmentTypeId: ', appointmentTypeId);
// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;
    
// // // // //     const availableUrl = `availability/classes?${appointmentTypeIdLink}${calendarIdLink}&month=${month}&timezone=Asia/Kuala_Lumpur`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointmenttypes:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // validate available times for an appointment
// // // // // exports.validatetimesappoinment = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     const optionBody = JSON.parse(JSON.stringify(req.body));
// // // // //     const optionMethod = req.method;

// // // // //     console.log('optionBody: ', optionBody);
// // // // //     console.log('optionMethod: ', optionMethod);

// // // // //     var option = {};
// // // // //     option.body = optionBody;
// // // // //     option.method = optionMethod;
    
// // // // //     const availableUrl = `availability/check-times?`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointment:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // Get a list of blocks for the authenticated user
// // // // // exports.getacuityblocks = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     const acuityAppointmentsPromise = acuityRequest('blocks?max=50');
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         blocks:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // POST request to block off time on your calendar.
// // // // // exports.postacuityblocks = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
    
// // // // //     const availableUrl = `blocks`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointment:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // DELETE request to block off time on your calendar using Post to send block id.
// // // // // exports.delacuityblocks = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:'DELETE'
// // // // //     };
    
// // // // //     const blockId = (JSON.parse(JSON.stringify(req.body))).blockId;

// // // // //     const availableUrl = `blocks/${blockId}`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         appointment:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // Retrieves a list of calendars this user has access to
// // // // // exports.getacuitycalendars = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     const acuityAppointmentsPromise = acuityRequest('calendars');
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         calendars:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // Get package certificates.
// // // // // exports.getacuitycertificates = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {
// // // // //     const acuityAppointmentsPromise = acuityRequest('certificates');
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         certificates:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // POST request to Create a package or coupon certificate.
// // // // // exports.postacuitycertificate = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
    
// // // // //     const availableUrl = `certificates`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         certificates:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // client acuity api.
// // // // // exports.clientacuity = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
    
// // // // //     var availableUrl = `clients`;
// // // // //     const body = JSON.parse(JSON.stringify(req.body));
// // // // //     const search = body.search || null;
// // // // //     const removeClient = body.removeClient || null;
// // // // //     const firstName = body.firstName || null;
// // // // //     const lastName = body.lastName || null;

// // // // //     if (search){
// // // // //       availableUrl = `clients?search=${search}`;
// // // // //       option.method = 'GET';
// // // // //     }
// // // // //     else if (removeClient){
// // // // //       availableUrl = `clients?firstName=${firstName}&lastName=${lastName}`;
// // // // //       option.method = 'DELETE';
// // // // //     }
    
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);

// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         client:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // forms acuity api.
// // // // // exports.formssacuity = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
// // // // //     var availableUrl = `forms`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         forms:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // label acuity api.
// // // // // exports.labelsacuity = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
// // // // //     var availableUrl = `labels`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         label:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // products acuity api.
// // // // // exports.productsacuity = functions.https.onRequest((req, res) => {
// // // // //   const corsFn = cors({ origin: true });
// // // // //   return corsFn(req, res, () => {

// // // // //     var option = {
// // // // //       body:JSON.parse(JSON.stringify(req.body)),
// // // // //       method:req.method
// // // // //     };
// // // // //     var availableUrl = `products`;
// // // // //     const acuityAppointmentsPromise = acuityRequest(availableUrl, option);
// // // // //     return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //       const acuityResult = result[0];
// // // // //       // console.log('acuityResult: ', acuityResult);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         products:acuityResult
// // // // //       })
// // // // //     });
// // // // //   });
// // // // // });

// // // // // exports.addTransaction = functions.https.onRequest((req, res) => {
// // // // //   // Grab the text parameter.
// // // // //   // console.log("Begin transaction request");
// // // // //   // console.log(req);
// // // // //   // const original = req.query.text;
// // // // //   var transactionData = JSON.parse(JSON.stringify(req.body));
// // // // //   const response = transactionData.response;
// // // // //   const invoiceId = transactionData.invoiceNo;
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   transactionData.createdAt = timestamp;

// // // // //   return admin.firestore().collection('transactions').add(transactionData).then((docRef) => {
// // // // //     // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // // // //     if(invoiceId && invoiceId.length > 0){
// // // // //       console.log('Added transaction for invoice', docRef.id, invoiceId);
// // // // //       if(response === '00'){
// // // // //         return admin.firestore().collection('invoices').doc(invoiceId).update({paid:true, paymentId:null, transactionId:docRef.id}).then((docRef)=>{
// // // // //           return res.redirect(303, `https://app.babel.fit/payments/${invoiceId}`);
// // // // //         });
// // // // //       }else{
// // // // //         return res.redirect(303, `https://app.babel.fit/payments/${invoiceId}`);
// // // // //       }
// // // // //     }else{
// // // // //       return res.redirect(303, 'https://app.babel.fit/');
// // // // //     }

// // // // //     //mark invoice as paid
// // // // //   });
// // // // // });

// // // // // exports.addTransactionTest = functions.https.onRequest((req, res) => {
// // // // //   // const myLocalIp = 'http://192.168.0.183:3000';
// // // // //   const myLocalIp = 'http://192.168.2.53:3000';
// // // // //   // Grab the text parameter.
// // // // //   console.log("Begin transaction request test");
// // // // //   // console.log(req);
// // // // //   // const original = req.query.text;
// // // // //   var transactionData = JSON.parse(JSON.stringify(req.body));
// // // // //   console.log('transactionData: ', transactionData);
// // // // //   const response = transactionData.response;
// // // // //   const invoiceId = transactionData.invoiceNo;
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   transactionData.createdAt = timestamp;

// // // // //   return admin.firestore().collection('transactions').add(transactionData).then((docRef) => {
// // // // //     // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // // // //     console.log('Received transaction for invoice', docRef.id, transactionData, invoiceId);
// // // // //     if(invoiceId && invoiceId.length > 0){
// // // // //       console.log('Added transaction for invoice', docRef.id, invoiceId);
// // // // //       if(response === '00'){
// // // // //         return admin.firestore().collection('invoices').doc(invoiceId).update({paid:true, paymentId:null, transactionId:docRef.id}).then((docRef)=>{
// // // // //           // return res.redirect(303, `http://192.168.1.17:3000/payments/${invoiceId}`);
// // // // //           return res.redirect(303, myLocalIp+`/payments/${invoiceId}`);
// // // // //         });
// // // // //       }else{
// // // // //         // return res.redirect(303, `http://192.168.1.17:3000/payments/${invoiceId}`);
// // // // //         return res.redirect(303, myLocalIp+`/payments/${invoiceId}`);
// // // // //       }
// // // // //     }else{
// // // // //       return res.redirect(303, myLocalIp);
// // // // //     }

// // // // //     //mark invoice as paid
// // // // //   });
// // // // // });

// // // // // webhooks to update vendItem
// // // // exports.updateVendItem = functions.https.onRequest((req, res) => {
// // // //   const itemData = req.body;
// // // //   const itemCollectionMap = {
// // // //     'sale.update': 'vendSales',
// // // //     'customer.update': 'vendCustomers',
// // // //     'product.update': 'vendProducts'
// // // //   }
// // // //   const itemCollection = itemCollectionMap[itemData.type];
// // // //   const payload = JSON.parse(itemData.payload);
// // // //   console.log('updateVendItem: ', itemCollection, payload.id, payload);

// // // //   return admin.firestore().collection(itemCollection).doc(payload.id).set(payload).then((docRef) => {
// // // //     // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // // //     return res.status(200).send('OK');
// // // //   });
// // // // });

// // // // webhooks to update vendItem
// // // exports.updateTheVendItem = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const itemCollectionMap = {
// // //     'sale.update': 'vendSales',
// // //     'customer.update': 'vendCustomers',
// // //     'product.update': 'vendProducts'
// // //   }
// // //   const itemCollection = itemCollectionMap[itemData.type];
// // //   const payload = JSON.parse(itemData.payload);
// // //   payload.createdDay = moment(payload.created_at).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD');
// // //   // for testing only
// // //   payload.createdTime = moment(payload.created_at).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD HH:mm:ss');
// // //   // payload.createdDay = moment(payload.created_at).format('YYYY-MM-DD');
// // //   // console.log('updateVendItem: ', itemCollection, payload.id, payload);

// // //   return admin.firestore().collection(itemCollection).doc(payload.id).set(payload).then((docRef) => {
// // //     // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // //     return res.status(200).send('OK');
// // //   });
// // // });

// // // // Replace with your Xero Webhook Key
// // // // const xero_webhook_key = 'bb/s/0hlXSZPqKawfzAzicpDoSbPKP3AKFmxP4PkA3lrkXE/OfkDKxKwVGw9W27YdJEPPA+JMr4IjQNomylEBg=='
// // // // const xeroClientId = '8146FE967AE04E91B6232E91C1A73B44';
// // // // const xeroClientSecret = '7hvvHkxAARtNc-tKKx80BZp2UUIEzimcAPXxtfdPWYWKl_-6';
// // // // const crypto = require('crypto');
// // // // const xero_webhook_key = 'qifs0PO4LmOIuUtoukWCSOlyYBXkNZ/iAtVOZgzkbEyLeM0f/1uHJcb/D+U9ARviH2Cy8wXI2AtTK6NuujU2bw=='
// // // // const xeroClientId = 'C5713135BFB848419593A04529D7FFF0';
// // // // const xeroClientSecret = 'JLJ32mkhjbrD5Y0dvKZuzGAbfzOyW6WqgZkA8bK1myrz62j6';

// // // const xero_webhook_key = 'aqlWrNzCjLgPoRWiI9lvxAH7HdaBt984vOmnI7EbGXjHw9uPef0pMRhF/ToK4nBdqyLMO4MJRSn+oCv0D9549g=='
// // // const xeroClientId = '7F418B8A3FA24B82895BC388CFA5E488';
// // // const xeroClientSecret = '_pWvNuIOZeKM9j1y29YGZIeg9wfHlGAPB7mdGvUffgluAIeT';

// // // const express = require('express');
// // // const bodyParser = require('body-parser');
// // // const crypto = require('crypto');

// // // // Create a new instance of express
// // // const app = express();
// // // // Set the body parser options
// // // var xeroOptions = {type: 'application/json'};
// // // // Using the options above, create a bodyParser middleware that returns raw responses.
// // // var itrBodyParser = bodyParser.raw(xeroOptions);

// // // function getAuthenticationData (req, res) {
// // // 	return {
// // // 		decodedIdToken: req.session.decodedIdToken,
// // // 		decodedAccessToken: req.session.decodedAccessToken,
// // // 		tokenSet: req.session.tokenSet,
// // // 		allTenants: req.session.allTenants,
// // // 		activeTenant: req.session.activeTenant,
// // // 	};
// // // }

// // // const xero = new XeroClient({
// // //   clientId: xeroClientId,
// // //   clientSecret: xeroClientSecret,
// // //   redirectUris: [`http://localhost:3000/callback`],
// // //   scopes: 'openid profile email accounting.transactions offline_access'.split(" "),
// // //   state: 'returnPage=my-sweet-dashboard', // custom params (optional)
// // //   httpTimeout: 3000 // ms (optional)
// // // });

// // // app.get('/buytest', function (req, res){
// // //   // res.send(`<a href='/connect'>Connect to Xero</a>`);
// // //   res.status(200).send(`<a href='/connect'>Connect to Xero</a>`);
// // // });

// // // // Create a route that receives our webhook & pass it our itrBodyParser
// // // app.post('/xeroWebhook', itrBodyParser, function (req, res) {
// // //   console.log("Body: "+req.body.toString())
// // //   console.log("Xero Signature: "+req.headers['x-xero-signature']);
// // //   // Create our HMAC hash of the body, using our webhooks key
// // //   let hmac = crypto.createHmac("sha256", xero_webhook_key).update(req.body.toString()).digest("base64");
// // //   console.log("Resp Signature: "+hmac)

// // //   if (req.headers['x-xero-signature'] == hmac) {
// // //   	res.statusCode = 200
// // //   } else {
// // //   	res.statusCode = 401
// // //   }
// // //   console.log("Response Code: "+res.statusCode);
// // //   res.status(200).send({success:false, status:res.statusCode, hmac});
// // // });

// // // // Tell our app to listen on port 3000
// // // app.listen(3000, function (err) {
// // //   if (err) {
// // //     throw err
// // //   }
// // //   console.log('Server started on port 3000')
// // // })

// // // exports.babelFunctions = functions.https.onRequest(app);

// // // // webhooks for xero (demo - need to change)
// // // exports.updatedXero = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const xeroHeaders = req.headers;
// // //   const jsonParseItemData =  JSON.stringify(req.body);
// // //   // const theConfig =  config: {
// // //   //                     payload: {parse:false }
// // //   //                   };
// // //   const payload = req.payload || '';
// // //   var xero_signature = req.headers['x-xero-signature'];
// // //   // let hmac = crypto.createHmac("sha256", xero_webhook_key).update(jsonParseItemData).digest("base64");
// // //   let hmac = crypto.createHmac("sha256", xero_webhook_key).update(req.body.toString()).digest("base64");
// // //   // let hmac = crypto.createHmac("sha256", xero_webhook_key).update(req.body.toString()).digest("base64");
// // //   // let hmac = crypto.createHmac("sha256", xero_webhook_key).update(req.payload.toString()).digest("base64");
// // //   // const hmac = crypto.createHmac("sha256", xero_webhook_key).update('I love cupcakes').digest('hex');

// // //   const entropy = itemData && itemData.entropy;
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // //   const ObjData = {...itemData, xeroHeaders, xero_signature, hmac, method:req.method, payload, createdAt:timestamp};
// // //   const corsFn = cors({ origin: true });
// // //   return corsFn(req, res, () => {
// // //     if (req.method === 'POST') {
// // //       res.contentType('application/json');
// // //       if (xero_signature === hmac){
// // //         console.log('Signature passed! This is from Xero!');
// // //         return admin.firestore().collection('xeroInvoices').doc(entropy).set(ObjData).then((docRef) => {
// // //           return res.status(200).send({success:true, ObjData});
// // //         });
// // //       }
// // //       else {
// // //         console.log('Signature NOT passed! This is not from Xero!');
// // //         return admin.firestore().collection('xeroInvoices').doc(entropy).set(ObjData).then((docRef) => {
// // //           return res.status(200).send({success:false, ObjData});
// // //         });
// // //       }
// // //     }
// // //     else{
// // //       return admin.firestore().collection('xeroInvoices').doc(entropy).set(ObjData).then((docRef) => {
// // //         // return res.status(200).send({success:false, ObjData});
// // //         res.status(500).send('Invalid request method');
// // //       });
// // //     }
// // //   });
// // //   // return admin.firestore().collection('xeroInvoices').doc(entropy).set(ObjData).then((docRef) => {
// // //   //   // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // //   //   return res.status(200).send({success:true, ObjData});
// // //   // });
// // // });

// // // // webhooks to update the typeform
// // // exports.updateTypeForm = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const eventId = itemData && itemData.event_id;
// // //   const eventType = itemData && itemData.event_type;
// // //   const formResponse = itemData && itemData.form_response;
// // //   const ObjData = {...formResponse, eventType};
// // //   // console.log('itemData: ', itemData);
// // //   // const itemCollectionMap = {
// // //   //   'typeForm':'typeForm'
// // //   //   // 'sale.update': 'vendSales',
// // //   //   // 'customer.update': 'vendCustomers',
// // //   //   // 'product.update': 'vendProducts'
// // //   // }
// // //   // const itemCollection = itemCollectionMap[itemData];
// // //   // const payload = JSON.parse(itemData.payload);
// // //   // // payload.createdDay = moment(payload.created_at).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD');
// // //   // payload.createdDay = moment(payload.created_at).format('YYYY-MM-DD');
// // //   // // console.log('updateVendItem: ', itemCollection, payload.id, payload);

// // //   return admin.firestore().collection('typeForm').doc(eventId).set(ObjData).then((docRef) => {
// // //     // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
// // //     return res.status(200).send({success:true, itemData});
// // //   });
// // // });
// // // // // // // acuity webhooks listener
// // // // // // exports.acuityListener = functions.https.onRequest((req, res) => {
 
// // // // // //   const action = 
// // // // // //   return res.status(200).send('OK');
// // // // // // });

// // // // // // webhooks to add acuity appointment
// // // // // exports.addAcuityToFirestore = functions.https.onRequest((req, res) => {
// // // // //   //const itemData = req.body;
// // // // //   console.log('updateAppointmentItemReq: ', req.body);
// // // // //   console.log('updateAppointmentItemRes: ', res);
// // // // //   var appointmentData = JSON.parse(JSON.stringify(req.body));
// // // // //   // console.log('appointmentData: ', appointmentData);
// // // // //   const id = appointmentData.id || null;
// // // // //   var emailPromise = null;

// // // // //   var isAppoinmentCreatedFromApp = false;
// // // // //   console.log('id from acuity webhook: ', id);
// // // // //   // console.log('typedOf id: ', typeof(id));
// // // // //   // const userQueryPromise = admin.firestore().collection('users').get();
// // // // //   // const acuityPromise = admin.firestore().collection('acuity').where('id', '==', String(id)).get();

// // // // //   const acuityPromise = admin.firestore().collection('acuity').get();

// // // // //   return Promise.all([acuityPromise]).then(results=>{
// // // // //     // const userRes = results[0];
// // // // //     const acuityRes = results[0];
// // // // //     const acuityMap = {};
// // // // //     console.log('acuityRes: ', acuityRes);
// // // // //     // if(acuityRes.exists){
// // // // //       acuityRes.forEach(doc=>{
// // // // //         const acuityData = doc.data();
// // // // //         //console.log('acuityData: ', acuityData);
// // // // //         // console.log('typedOf acuityDataId: ', typeof(acuityData.id));

// // // // //         if (acuityData.id === parseInt(appointmentData.id)){
// // // // //           console.log('same id')
// // // // //           isAppoinmentCreatedFromApp = true;
// // // // //           acuityMap[doc.id] = acuityData;
// // // // //           appointmentData.fromApp = true;
// // // // //         }
// // // // //       });
// // // // //       console.log('acuityMap: ', acuityMap);
// // // // //       console.log('appointmentData: ', appointmentData);

// // // // //       if (!isAppoinmentCreatedFromApp){
// // // // //         // refetch, get it from acuity
// // // // //         appointmentData.fromApp = false;
// // // // //         const acuityAppointmentsPromise = acuityRequest(`/appointments/${appointmentData.id}`);
// // // // //         return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //           const acuityResult = result[0];
// // // // //           console.log('acuityResult: ', acuityResult);
// // // // //           acuityResult.fromApp = false;
          
// // // // //           return admin.firestore().collection('acuity').add(acuityResult).then((docRef)=>{
// // // // //             // sending email if appoinment is not from app
// // // // //             emailPromise = sendManualFromAcuityEmail(acuityResult);
           
// // // // //             return Promise.all([emailPromise]).then(result=>{
// // // // //               return res.status(200).send({
// // // // //                 success:true,
// // // // //                 appointments:acuityResult
// // // // //               })
// // // // //             });
// // // // //             // emailPromise = sendTerminationEmail(userData.email, userData.name, moment(timestamp).format('D MMM YYYY')).then(results=>{
// // // // //             //   return admin.firestore().collection('users').doc(userId).update({autoTerminate:true, cancellationDate:timestamp, cancellationReason:'autoTerminated'});
// // // // //             // });
// // // // //             // return res.status(200).send({
// // // // //             //   success:true,
// // // // //             //   appointments:acuityResult
// // // // //             // })
// // // // //           })
// // // // //         });
// // // // //       }
// // // // //     // }
// // // // //     // else{
// // // // //     //   console.log('acuity doesnt exist');
// // // // //     //   appointmentData.fromApp = false;

   

// // // // //     //   // return Promise.resolve();
// // // // //     // }
   
// // // // //     // return admin.firestore().collection('acuityAdd').doc(id).set(appointmentData).then((docRef)=>{
// // // // //     //   return res.status(200).send('OK');
// // // // //     // })
// // // // //     // const acuityData = acuityRes.data();
// // // // //     // console.log('acuityData: ', acuityData);

// // // // //     return res.status(200).send('OK');
// // // // //     // const userData = userRes.data();

// // // // //   });
  
// // // // //   // return admin.firestore().collection('acuityAdd').doc(id).set(appointmentData).then((docRef)=>{
// // // // //   //   return res.status(200).send('OK');
// // // // //   // })

// // // // // });

// // // // // // webhooks when an acuity appoinment is rescheduled
// // // // // exports.rescheduleAcuityToFirestore = functions.https.onRequest((req, res) => {
// // // // //   var appointmentData = JSON.parse(JSON.stringify(req.body));
// // // // //   return admin.firestore().collection('acuityReschedule').add(appointmentData).then((docRef)=>{
// // // // //     console.log('successfully added')
// // // // //     return res.status(200).send('OK');
// // // // //   }).catch((error)=>{
// // // // //     console.log('error adding: ', error)
// // // // //     return res.status(500).send('Error adding data: ', error);
// // // // //   })
// // // // // });

// // // // // // webhooks when an acuity appoinment is changed
// // // // // exports.updateAcuityToFirestore = functions.https.onRequest((req, res) => {
// // // // //   //const itemData = req.body;
// // // // //   // console.log('updateAppointmentItemReq: ', req.body);
// // // // //   // console.log('updateAppointmentItemRes: ', res);
// // // // //   console.log('updateAppointmentItemReq: ', req.body);
// // // // //   console.log('updateAppointmentItemRes: ', res);
// // // // //   var appointmentData = JSON.parse(JSON.stringify(req.body));
// // // // //   // console.log('appointmentData: ', appointmentData);
// // // // //   const id = appointmentData.id || null;
// // // // //   var emailPromise = null;

// // // // //   var isAppoinmentCreatedFromApp = false;
// // // // //   console.log('id from acuity webhook: ', id);
// // // // //   console.log('typedOf id: ', typeof(id));
// // // // //   // const userQueryPromise = admin.firestore().collection('users').get();
// // // // //   // const acuityPromise = admin.firestore().collection('acuity').where('id', '==', String(id)).get();

// // // // //   const acuityPromise = admin.firestore().collection('acuity').get();

// // // // //   return Promise.all([acuityPromise]).then(results=>{
// // // // //     // const userRes = results[0];
// // // // //     const acuityRes = results[0];
// // // // //     const acuityMap = {};
// // // // //     console.log('acuityRes: ', acuityRes);
// // // // //     // if(acuityRes.exists){
// // // // //       acuityRes.forEach(doc=>{
// // // // //         const acuityData = doc.data();
// // // // //         //console.log('acuityData: ', acuityData);
// // // // //         // console.log('typedOf acuityDataId: ', typeof(acuityData.id));

// // // // //         if (acuityData.id === parseInt(appointmentData.id)){
// // // // //           console.log('same id')
// // // // //           isAppoinmentCreatedFromApp = true;
// // // // //           acuityMap[doc.id] = acuityData;
// // // // //           appointmentData.fromApp = true;
// // // // //         }
// // // // //       });
// // // // //       console.log('acuityMap: ', acuityMap);
// // // // //       console.log('appointmentData: ', appointmentData);

// // // // //       if (!isAppoinmentCreatedFromApp){
// // // // //         // refetch, get it from acuity
// // // // //         appointmentData.fromApp = false;
// // // // //         const acuityAppointmentsPromise = acuityRequest(`/appointments/${appointmentData.id}`);
// // // // //         return Promise.all([acuityAppointmentsPromise]).then(result=>{
// // // // //           const acuityResult = result[0];
// // // // //           console.log('acuityResult: ', acuityResult);
// // // // //           acuityResult.fromApp = false;
          
// // // // //           return admin.firestore().collection('acuity').add(acuityResult).then((docRef)=>{
// // // // //             // sending email if appoinment is not from app
// // // // //             emailPromise = sendManualFromAcuityEmail(acuityResult);
           
// // // // //             return Promise.all([emailPromise]).then(result=>{
// // // // //               return res.status(200).send({
// // // // //                 success:true,
// // // // //                 appointments:acuityResult
// // // // //               })
// // // // //             });
// // // // //           })
// // // // //         });
// // // // //       }
// // // // //     // }
// // // // //     // else{
// // // // //     //   console.log('acuity doesnt exist');
// // // // //     //   appointmentData.fromApp = false;

   

// // // // //     //   // return Promise.resolve();
// // // // //     // }
   
// // // // //     // return admin.firestore().collection('acuityAdd').doc(id).set(appointmentData).then((docRef)=>{
// // // // //     //   return res.status(200).send('OK');
// // // // //     // })
// // // // //     // const acuityData = acuityRes.data();
// // // // //     // console.log('acuityData: ', acuityData);

// // // // //     return res.status(200).send('OK');

// // // // //   // console.log('appointmentData: ', appointmentData);
// // // // //   // const id = parseInt(appointmentData.id) || null;

// // // // //   // const action = appointmentData.action;

// // // // //   // if (appointmentData.action === "scheduled"){ //if exist, do not do anything.
// // // // //   //     if(admin.firestore().collection('acuity').where('id','==',appointmentData.id))
// // // // //   //       return null;//do nothing 
        
// // // // //   //       // run acuity function to get appointmnet details

// // // // //   //        //add returned data to firestore.
// // // // //   //         admin.firestore().collection('acuity').add().then((docRef)=>{
// // // // //   //         console.log('successfully added')
// // // // //   //         return res.status(200).send('OK');
// // // // //   //       }).catch((error)=>{
// // // // //   //         console.log('error adding: ', error)
// // // // //   //         return res.status(500).send('Error adding data: ', error);
// // // // //   //       })
// // // // //   //       //check if user exists
// // // // //   //       // if (!admin.firestore().collection('users').where('phone','==',Faizul to fill) || !admin.firestore().collection('users').where('email','==',Faizul to fill))
// // // // //   //       //   {
// // // // //   //       //     //send email to boon and billy and faizul  with full details of appointment.
// // // // //   //       //   }
// // // // //   //       //check if user has credit
// // // // //   // }

// // // // //   // return admin.firestore().collection('acuityLogs').add(appointmentData).then((docRef)=>{
// // // // //   //   console.log('successfully added')
// // // // //   //   return res.status(200).send('OK');
// // // // //   // }).catch((error)=>{
// // // // //   //   console.log('error adding: ', error)
// // // // //   //   return res.status(500).send('Error adding data: ', error);
// // // // //   // })

// // // // //   });
// // // // // });

// // // // // // action when triggering the acuity firestore
// // // // // exports.modifyAcuity = functions.firestore
// // // // //   .document('acuity/{acuityId}')
// // // // //   .onWrite((change, context) => {
// // // // //     const afterData = change.after.data();
// // // // //     const previousData = change.before.data();

// // // // //     console.log('previousData: ', previousData);
// // // // //     console.log('changeAfterData: ', afterData);

// // // // //     const userId = afterData.userId;
// // // // //     // console.log('theData: ', data);
// // // // //     if(!afterData || !userId){
// // // // //       //deleted or no userId
// // // // //       console.log('collections is deleted or no userId found!');
// // // // //       return Promise.resolve();
// // // // //     }

// // // // //      //retrieve invoice and packages
// // // // //      const paymentQuery = admin.firestore().collection('payments').where('userId', '==', userId).where('type', '==', 'personalTraining').get();

// // // // //     return Promise.all([paymentQuery]).then(results=>{
// // // // //       const paymentsResults = results[0];

// // // // //       var totalAcuityCredit = 0;
// // // // //       // search from the payment database
// // // // //       paymentsResults.forEach(doc=>{
// // // // //         // console.log('thePaymentResult: ', doc.data());
// // // // //         const paymentData = doc.data();
// // // // //         const type = paymentData && paymentData.type;
// // // // //         console.log('paymentType: ', type);
// // // // //         // if payment is not valid
// // // // //         if(doc.data().status && (doc.data().status !== 'CLOSED' && doc.data().status !== 'ONACCOUNT')){
// // // // //           return;
// // // // //         }
     
// // // // //         console.log('paymentData: ', paymentData);
// // // // //         const credit = paymentData.credit;
// // // // //         const appoinmentName = paymentData.appoinmentName;
// // // // //         const invoiceId = paymentData.invoiceId;
// // // // //         const userId = paymentData.userId;

// // // // //         console.log('appoinment credit: ', credit);
// // // // //         // if cancel, skip;
// // // // //         if (afterData.canceled){
// // // // //           console.log('appoinment has been canceled');
// // // // //           // return Promise.resolve();
// // // // //         }


// // // // //         totalAcuityCredit = totalAcuityCredit + credit;
// // // // //         console.log('totalCredit: ', totalAcuityCredit);
        
// // // // //       });

// // // // //       console.log('totalAcuityCredit: ', totalAcuityCredit);

// // // // //       // const batch = admin.firestore().batch();
// // // // //       // const userRef = admin.firestore().collection('users').doc(userId).get();

// // // // //       // batch.update(userRef, {totalAcuityCredit});
// // // // //       // return batch.commit();
     
// // // // //       // const paymentData = paymentDoc.data();
    
// // // // //       // const credit = paymentData.credit;
// // // // //       // const appoinmentName = paymentData.appoinmentName;
// // // // //       // const invoiceId = paymentData.invoiceId;
// // // // //       // const userId = paymentData.userId;

// // // // //       // console.log('userId: ', userId);
// // // // //       // console.log('credit: ', credit);
// // // // //       // const batch = admin.firestore().batch();
// // // // //       // const userRef = admin.firestore().collection('users').doc(userId).get();

// // // // //       // batch.update(userRef, {credit});
// // // // //       // return batch.commit();
// // // // //       return admin.firestore().collection('users').doc(userId).update({totalAcuityCredit}).then(res=>{
// // // // //         console.log('totalAcuity updated: ', res);
// // // // //         return Promise.resolve(); 
// // // // //       })

// // // // //       // return Promise.resolve();
// // // // //     }); 

// // // // //     // return Promise.resolve();
// // // // //   }
// // // // // );

exports.modifyTransaction = functions.firestore
  .document('transactions/{transactionId}')
  .onWrite((change, context) => {
    const data = change.after.data();
    const invoiceId = data && data.invoiceNo;
    const authorized = (data && data.response) ? data.response === '00' : false;
    console.log('Modifying transactionId for invoiceId', change.after.id, invoiceId, data);
    if(!invoiceId){
      console.log(`Transaction has no invoiceId ${change.after.id}`);
      return Promise.reject(new Error(`Transaction has no invoiceId ${change.after.id}`));
    }

    //retrieve invoice and packages
    const invoiceQuery = admin.firestore().collection('invoices').doc(invoiceId).get();
    const packagesQuery = admin.firestore().collection('packages').get();

    return Promise.all([invoiceQuery, packagesQuery]).then(results=>{
      const invoiceDoc = results[0];
      const packagesResults = results[1];

      var packageMap = {};
      var productIdPackageMap = {};
      packagesResults.forEach(doc=>{
        const data = doc.data();
        packageMap[doc.id] = data;

        const vendProductIds = data && data.vendProductIds;
        vendProductIds && vendProductIds.map(vendProductId=>{
          productIdPackageMap[vendProductId] = doc.id;
          return null;
        });
      });

      if(invoiceDoc.exists){
        const invoiceData = invoiceDoc.data();
        const paid = invoiceData.paid;
        const paymentId = invoiceData.paymentId;

        if(paid && paymentId && authorized){
          console.log(`Invoice already paid ${invoiceDoc.id}`);
          return Promise.resolve();
        }

        const userId = invoiceData.userId;
        var totalPrice = invoiceData.totalPrice;
        const vendProductId = invoiceData.vendProductId;
        var vendProductPackageId = productIdPackageMap[invoiceData.vendProductId];
        var totalPriceMembershipFromVend = 0;
        const vendProducts = invoiceData.vendProducts;

        if(!vendProductId && vendProducts){
          // const vendProducts = invoiceData.vendProducts;
          // console.log("VPS", vendProduct);
          vendProducts && vendProducts.forEach(vendProduct=>{
            // console.log("VP", vendProduct);
            const vendProductId = vendProduct.vendProductId;
            if(!vendProductPackageId){
              vendProductPackageId = productIdPackageMap[vendProductId];
              totalPriceMembershipFromVend+=vendProduct.totalPrice;
            }
          });
          totalPrice=totalPriceMembershipFromVend;
        }
        const packageId = vendProductPackageId || invoiceData.packageId;
        const quantity = invoiceData.quantity ? invoiceData.quantity : 1;
        const packageData = packageId ? packageMap[packageId] : null;
        const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
        const type = vendProductPackageId ? 'membership' : invoiceData.type;
        const detailName = invoiceData.className;
        const detailDate = invoiceData.classDate;

        //add payment
        const batch = admin.firestore().batch();
        const paymentRef = admin.firestore().collection('payments').doc();
        var paymentData = {
          createdAt : data.createdAt,
          totalPrice : totalPrice ? totalPrice : 0,
          type : type,
          userId : userId,
          packageId : packageId,
          source : 'pbonline',
          renewalTerm : renewalTerm,
          status : authorized ? 'CLOSED' : 'FAILED',
          transactionId : change.after.id,
          quantity : quantity,
          invoiceId : invoiceDoc.id,
        }
        if(type === 'product'){
          paymentData.productName = invoiceData.vendProductName;
        }
        if(detailName){
          paymentData.detailName = detailName;
        }
        if(detailDate){
          paymentData.detailDate = detailDate;
        }
        console.log('Adding paymentData for transactionId and invoiceId', paymentData, change.after.id, invoiceId);
        // console.log('Adding paymentData for transactionId and invoiceId', paymentData, change.after.id, invoiceId);
        batch.set(paymentRef, paymentData);

        //mark invoice as paid
        batch.update(invoiceDoc.ref, {paid:authorized, paymentId:paymentRef.id, paymentFailed:!authorized});

        console.log("Saving invoice and payment for transaction", invoiceId, paymentRef.id, change.after.id);

        return batch.commit();
      }else{
        console.log(`Issue with invoice: ${invoiceId} ${change.after.id}`);
        return Promise.reject(new Error(`Issue with invoice: ${invoiceId} ${change.after.id}`));
      }
    });
  }
);

function vendCustomerEditOption(firstName, lastName, email, phone, customer_group_id, vendCustomerId){
  var options = { method: 'PUT',
    url: 'https://bfitness.vendhq.com/api/2.0/customers/'+`${vendCustomerId}`,
    auth: {
      bearer: vendPersonalToken
    },
    body:{
      first_name : firstName,
      last_name : lastName,
      email : email,
      phone : phone,
      customer_group_id : customer_group_id,
      // custom_field_1: 'faizulTest'
    },
    json:true
  };
  return options;
}

// // function vendCustomerGetAll(){
// //   var options = { method: 'GET',
// //     url: 'https://bfitness.vendhq.com/api/2.0/customers/',
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     // body:{
// //     //   first_name : firstName,
// //     //   last_name : lastName,
// //     //   email : email,
// //     //   phone : phone,
// //     //   customer_group_id : customer_group_id,
// //     //   // custom_field_1: 'faizulTest'
// //     // },
// //     json:true
// //   };
// //   return options;
// // }

// // function vendCustomerAddOption(firstName, lastName, email, phone, customer_group_id){
// //   var options = { method: 'POST',
// //     url: 'https://bfitness.vendhq.com/api/2.0/customers',
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     body:{
// //       first_name : firstName,
// //       last_name : lastName,
// //       email : email,
// //       phone : phone,
// //       customer_group_id : customer_group_id
// //     },
// //     json:true
// //   };
// //   return options;
// // }


// // // post/create a promotion
// // function vendPostPromotion(id, name, start_time, end_time, condition, action, outlet_ids, channels = ["Register"], status = 'active', use_promo_code = false){
// //   var options = { method: 'POST',
// //     url: 'https://bfitness.vendhq.com/api/2.0/promotions',
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     body:{
// //      id,
// //      name,
// //      start_time,
// //      end_time,
// //      condition,
// //      action,
// //      outlet_ids,
// //      channels,
// //      // customer_group_ids,
// //      status,
// //      use_promo_code,
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // get promotion by id
// function vendGetPromotionById(promoId){
//   var options = { method: 'GET',
//     url: `https://bfitness.vendhq.com/api/2.0/promotions/${promoId}`,
//     auth: {
//       bearer: vendPersonalToken
//     },
//     json:true
//   };
//   return options;
// }

// vend get product details
function vendGetProductDetails(vendId){
  var productId = vendId? vendId:'';
  var options = { method: 'GET',
    url: `https://bfitness.vendhq.com/api/2.0/products/${productId}`,
    auth: {
      bearer: vendPersonalToken
    },
    json:true
  };
  return options;
}

// // // vend get product types
// // function vendGetProductTypes(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/product_types`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // get customers
// // function vendGetAllCustomer(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/customers/`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // list of customer group
// // function vendGetAllCustomerGroup(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/customer_groups`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // list giftcard
// // function vendGetGiftCard(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/gift_cards`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // list store_credit
// // function vendGetListStoreCredit(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/store_credits`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // list store_credit by user
// // function vendGetStoreCredit(customersId){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/store_credits/${customersId}`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // list store_credit by user
// // function createStoreCredit(customersId, store_credit_customer_id, amount, type, notes, user_id, client_id){
// //   var options = { method: 'POST',
// //     url: `https://bfitness.vendhq.com/api/2.0/store_credits/${customersId}/transactions`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     body:{
// //       store_credit_customer_id,
// //       amount, 
// //       type,
// //       notes,
// //       user_id,
// //       client_id
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// add customers to customer group
function vendAddOrRemoveCustomersToGroup(customer_group_id, customersId, reqOption){
  var options = { method:reqOption,
    url: `https://bfitness.vendhq.com/api/2.0/customer_groups/${customer_group_id}/customers`,
    auth: {
      bearer: vendPersonalToken 
    },
    body:customersId,
    json:true
  };
  return options;
}

// // // vend get vend sales
// // function vendGetVendSale(){
// //   var options = { method: 'GET',
// //     url: `https://bfitness.vendhq.com/api/2.0/sales`,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     json:true
// //   };
// //   return options;
// // }

// // // search vend sales
// // function searchVend(date_from, date_to){ 
// //   // console.log('date_from: ', date_from);
// //   // console.log('date_to: ', date_to);
// //   var theUrl = `https://bfitness.vendhq.com/api/2.0/search?type=sales&date_from=${date_from}&date_to=${date_to}`
// //   var options = { method: 'GET',
// //     url: theUrl,
// //     auth: {
// //       bearer: vendPersonalToken
// //     },
// //     // body:{
// //     //   date_from : date_from,
// //     //   date_to : date_to,
// //     //   type : 'sales',
// //     //   status : 'CLOSED'
// //     // },
// //     json:true
// //   };
// //   return options;
// // }

// // // // // // function to get package name without query
// // // // // function getPackageDetails(packageId){
// // // // //   var packageMap = {};
// // // // //   if (packageId){
// // // // //     return admin.firestore().collection('packages').doc(packageId).get().then(doc=>{
// // // // //       const data = doc.data();
// // // // //       const name = data && data.name;
// // // // //       packageMap = data;
// // // // //       console.log('packageMap: ', packageMap);
// // // // //       return packageMap;
// // // // //     });
// // // // //     // return packageMap;
// // // // //   }
// // // // //   else{
// // // // //     return null;
// // // // //   }
// // // // // }

// // // // // for successfull virtual PT transaction
// // // // exports.addUserChangeLogToSheets = functions.firestore
// // // //   .document('logs/{logId}')
// // // //   .onCreate((snap, context) => {
// // // //   // .onWrite((change, context) => {
// // // //   //.onUpdate((change, context) => {

// // // //     // const newData = change.after.data();
// // // //     // const previousData = change.before.data();

// // // //     const document = snap.data();
// // // //     // const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
// // // //     if(!document){
// // // //       //deleted
// // // //       return null;
// // // //     }
// // // //     // Get an object with the previous document value (for update or delete)
// // // //     // const oldDocument = event.data.previous.data();

// // // //     console.log('addUserChangeLogToSheetsdocument: ', document);
// // // //     // perform desired operations ...
// // // //     const executerEmail = document && document.executerEmail;
// // // //     console.log('executerEmail: ', executerEmail);
// // // //     const executerId = document && document.executerId;
// // // //     const createdDate = document && document.time;
// // // //     const userId = document && document.userId;
// // // //     const BeforeuserData = document && document.BeforeuserData;
// // // //     const afterData = document && document.afterUserData;
// // // //     const beforePackageId = BeforeuserData? BeforeuserData.packageId? BeforeuserData.packageId:'':'' ;
// // // //     const afterPackageId = afterData? afterData.packageId? afterData.packageId:'':'';
// // // //     // const beforePackageDataPromise = BeforeuserData? BeforeuserData.packageId? getPackageDetails(BeforeuserData.packageId):'':'';
// // // //     // const afterPackageDataPromise = afterData? afterData.packageId? getPackageDetails(afterData.packageId):'':'';
// // // //     const beforeReferredByUserId = BeforeuserData? BeforeuserData.referredByUserId? BeforeuserData.referredByUserId:'':'' ;
// // // //     const afterReferredByUserId = afterData? afterData.referredByUserId? afterData.referredByUserId:'':'';
// // // //     const freezeFor = document && document.freezeFor;
// // // //     const freezeQuantity = document && document.freezeQuantity;
// // // //     const action = document && document.action;
// // // //     const freezeForRemoved = document && document.freezeForRemoved;
// // // //     const beforeCancellationDate = BeforeuserData? BeforeuserData.cancellationDate? BeforeuserData.cancellationDate:'':'';
// // // //     const afterCancellationDate = afterData? afterData.cancellationDate? afterData.cancellationDate:'':'';

// // // //     // console.log('theContext: ', context);
// // // //     // console.log('newData: ', newData);
// // // //     // console.log('beforePackageData: ', beforePackageDataPromise);
// // // //     // console.log('afterPackageData: ', afterPackageDataPromise);
// // // //     // beforePackageDataPromise && beforePackageDataPromise.then((res)=>{
// // // //     //   console.log('res: ', res);
// // // //     // });

// // // //     var sheetReport = [];

// // // //     if ((BeforeuserData && BeforeuserData.packageId) || (afterData && afterData.packageId) || (BeforeuserData && BeforeuserData.referredByUserId) || 
// // // //       (afterData && afterData.referredByUserId)
// // // //       || freezeFor || freezeQuantity || freezeForRemoved || beforeCancellationDate || afterCancellationDate
// // // //       ) {
    
      
// // // //       const getSheetPromise = getGoogleSheetPromise({
// // // //         spreadsheetId: CONFIG_SHEET_ID,
// // // //         range: `AUTO USER SIG CHANGE LOG!A2:S`
// // // //       });
      
// // // //       const userQuery = admin.firestore().collection('users').doc(userId).get();
// // // //       //const usersQuery = admin.firestore().collection('users').get();
// // // //       // const referralQueryBefore = admin.firestore().collection('users').doc(beforeReferredByUserId).get();
// // // //       // const referralQueryAfter = admin.firestore().collection('users').doc(afterReferredByUserId).get();
// // // //       const packagesQuery = admin.firestore().collection('packages').get();

// // // //       return Promise.all([userQuery, packagesQuery]).then(results=>{
// // // //         const userDoc = results[0];
// // // //         const packageResults = results[1];
// // // //         // const refBeforeRes = results[2];
// // // //         // const refAfterRes = results[3];
// // // //         // const userResults = results[2];
        
// // // //         var pkgMap = {};
// // // //         packageResults && packageResults.forEach(pkg=>{
// // // //           pkgMap[pkg.id] = pkg.data();
// // // //         });

// // // //         // var userMap = {};
// // // //         // userResults && userResults.forEach(user=>{
// // // //         //   userMap[user.id]=user.data();
// // // //         //   // const userData = user.data();

// // // //         // });

// // // //         // console.log('userMap: ', userMap);
// // // //         const beforePackageData = BeforeuserData? BeforeuserData.packageId? pkgMap[BeforeuserData.packageId]:null:null;
// // // //         const afterPackageData = afterData? afterData.packageId? pkgMap[afterData.packageId]:null:null;

// // // //         if(userDoc.exists){
// // // //           const userData = userDoc.data();
// // // //           const email = userData.email;
          
// // // //           // userResults && userResults.forEach(user=>{
// // // //           //   const userData = user.data();
// // // //           //   const referredByUserId = userData && userData.referredByUserId;
// // // //           //   if (referredByUserId){
// // // //           //     // todo - to convert from member referral id to its email
// // // //           //   }
// // // //           // });          

// // // //           return getSheetPromise.then((result)=>{
// // // //             // console.log('theresult: ', result);
// // // //             const values = result && result.values;
// // // //             const rowsCount = (values && values.length)? values.length:0;
// // // //             // const userDataRefBefore = beforeReferredByUserId? userMap[beforeReferredByUserId]:null;
// // // //             // const userDataRefAfter = afterReferredByUserId? userMap[afterReferredByUserId]:null;
// // // //             // const userDataRefEmailBefore = userDataRefBefore && userDataRefBefore.email;
// // // //             // const userDataRefEmailAfter = userDataRefAfter && userDataRefAfter.email;
// // // //             // console.log('beforeReferredByUserId: ', beforeReferredByUserId && beforeReferredByUserId);
// // // //             // console.log('afterReferredByUserId: ', afterReferredByUserId && afterReferredByUserId);
// // // //             // console.log('userDataRefBefore: ', userDataRefBefore);
// // // //             // console.log('userDataRefAfter: ', userDataRefAfter); 

// // // //             var freezeForArray = [];
// // // //             var freezeDate = '';
// // // //             if (freezeFor && freezeQuantity){
// // // //               for (var i = 0; i<freezeQuantity; i++){
// // // //                 // freezeForArray.push(moment(getTheDate(freezeFor)).add(i, 'months').format('DD/MM/YYYY'));
// // // //                 freezeDate = freezeDate.concat(moment(getTheDate(freezeFor)).add(i, 'months').add(1, 'days').subtract(freezeQuantity, 'months').format('DD/MM/YYYY') + ', ');
// // // //               }
// // // //             }
// // // //             freezeForArray.join(', ');
// // // //             console.log('freezeForArray: ', freezeForArray);
// // // //             sheetReport = [[
// // // //               rowsCount + 1,
// // // //               moment(getTheDate(createdDate)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY'),
// // // //               moment(getTheDate(createdDate)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss'),
// // // //               email,
// // // //               // executerId,
// // // //               executerEmail, 
// // // //               beforePackageId,
// // // //               afterPackageId,
// // // //               beforePackageData? beforePackageData.name? beforePackageData.name: '':'',
// // // //               afterPackageData? afterPackageData.name? afterPackageData.name:'':'',
// // // //               beforeReferredByUserId,
// // // //               // '',
// // // //               //userDataRefEmailBefore,
// // // //               afterReferredByUserId,
// // // //               '',
// // // //               '',
// // // //               //userDataRefEmailAfter,
// // // //               // freezeFor? moment(getTheDate(freezeFor)).format('DD/MM/YYYY'):'',
// // // //               freezeFor? freezeDate:'',
// // // //               freezeQuantity? freezeQuantity:'',
// // // //               freezeForRemoved? moment(freezeForRemoved).format('DD/MM/YYYY'):'',
// // // //               beforeCancellationDate? (moment(getTheDate(beforeCancellationDate)).format('DD/MM/YYYY') === '01/01/1970')? '': moment(getTheDate(beforeCancellationDate)).format('DD/MM/YYYY'): '',
// // // //               afterCancellationDate? moment(getTheDate(afterCancellationDate)).format('DD/MM/YYYY'):'',
// // // //             ]];
            
// // // //             console.log('sheetReport: ', sheetReport);
      
// // // //             const updateSheetPromise = updateGoogleSheet({
// // // //               spreadsheetId: CONFIG_SHEET_ID,
// // // //               // valueInputOption: 'RAW',
              
// // // //               resource: {
// // // //                 // How the input data should be interpreted.
// // // //                 valueInputOption: 'RAW',  // TODO: Update placeholder value.
          
// // // //                 // The new values to apply to the spreadsheet.
// // // //                 data: [
// // // //                   {
// // // //                     range:`AUTO USER SIG CHANGE LOG!A${rowsCount+2}:S`,
// // // //                     majorDimension: "ROWS",
// // // //                     values: sheetReport
// // // //                   }
// // // //                 ],  
// // // //               },
      
// // // //             });
      
// // // //             return updateSheetPromise.then((result)=>{
// // // //               return Promise.resolve();
// // // //             });
        
// // // //           });

// // // //         }
// // // //         else{
// // // //           return Promise.resolve();
// // // //         }
// // // //       });

// // // //       // return admin.firestore().collection('users').doc(userId).get().then(doc=>{
// // // //       //   const data = doc.data();
// // // //       //   const email = data && data.email;

// // // //       //   return getSheetPromise.then((result)=>{
// // // //       //     console.log('theresult: ', result);
// // // //       //     const values = result && result.values;
// // // //       //     const rowsCount = (values && values.length)? values.length:0;
          
// // // //       //     sheetReport = [[
// // // //       //       rowsCount + 1,
// // // //       //       moment(getTheDate(createdDate)).format('DD/MM/YYYY'),
// // // //       //       moment(getTheDate(createdDate)).format('hh:mm:ss'),
// // // //       //       email,
// // // //       //       // executerId,
// // // //       //       executerEmail, 
// // // //       //       beforePackageId,
// // // //       //       beforePackageData? beforePackageData.name? beforePackageData.name: '':'',
// // // //       //       afterPackageId,
// // // //       //       afterPackageData? afterPackageData.name? afterPackageData.name:'':'',
// // // //       //       beforeReferredByUserId,
// // // //       //       afterReferredByUserId,
// // // //       //       freezeFor? moment(getTheDate(freezeFor)).format('DD/MM/YYYY'):'',
// // // //       //       freezeQuantity? freezeQuantity:'',
// // // //       //       beforeCancellationDate? (moment(getTheDate(beforeCancellationDate)).format('DD/MM/YYYY') === '01/01/1970')? '': moment(getTheDate(beforeCancellationDate)).format('DD/MM/YYYY'): '',
// // // //       //       afterCancellationDate? moment(getTheDate(afterCancellationDate)).format('DD/MM/YYYY'):'',
// // // //       //     ]];
          
// // // //       //     console.log('sheetReport: ', sheetReport);
    
// // // //       //     const updateSheetPromise = updateGoogleSheet({
// // // //       //       spreadsheetId: CONFIG_SHEET_ID,
// // // //       //       // valueInputOption: 'RAW',
            
// // // //       //       resource: {
// // // //       //         // How the input data should be interpreted.
// // // //       //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
        
// // // //       //         // The new values to apply to the spreadsheet.
// // // //       //         data: [
// // // //       //           {
// // // //       //             range:`AUTO USER SIG CHANGE LOG!A${rowsCount+2}:S`,
// // // //       //             majorDimension: "ROWS",
// // // //       //             values: sheetReport
// // // //       //           }
// // // //       //         ],  
// // // //       //       },
    
// // // //       //     });
    
// // // //       //     return updateSheetPromise.then((result)=>{
// // // //       //       return Promise.resolve();
// // // //       //     });
      
// // // //       //   });
// // // //       // });     
// // // //     }

// // // //     else{return Promise.resolve()}
// // // //   }
// // // // );

// // // function isEmptyObj(obj) {
// // //   return Object.keys(obj).length === 0;
// // // }

// exports.modifyGantner = functions.firestore
//   .document('gantnerLogs/{gantnerLogsId}')
//   .onCreate((snap, context) => {
//     const document = snap.data();
//     var gantnerLogsByUserIdObj = {};
//     var gantnerLogsArray = [];

//     if(!document){
//       //deleted
//       return null;
//     }
  
//     // perform desired operations ...
//     const userId = document && document.userId;
//     const createdAt = document && document.createdAt;
//     const deviceId = document && document.deviceId;
//     const authorized = document && document.authorized;

//     const gantnerDate = moment().tz('Asia/Kuala_Lumpur').format('YYYYMMDD');
//     const devicelocation = (deviceId && deviceId.includes("KLCC"))?'KLCC':'TTDI';
//     const isManualCheckIn = (deviceId && deviceId.includes('Manual'))? true:false;
//     const gantnerTime = isManualCheckIn? `Manual_${moment().tz('Asia/Kuala_Lumpur').format('HH:mm:ss')}`:moment().tz('Asia/Kuala_Lumpur').format('HH:mm:ss');

//     const gantnerByUserIdQuery = admin.firestore().collection('gantnerLogsByUser').doc(userId).get();
//     var gantnerMapArray = [];
//     var isTodayCheckin = false;
//     return gantnerByUserIdQuery.then(doc=>{
//       // check for empty object
//       if (doc.exists && doc.id && doc.data() && !isEmptyObj(doc.data())){
//         // console.log('doc.id: ', doc.id);
//         // console.log('doc is exist: ', doc.data());
//         const data = doc.data();
    
//         // create the Obj first
//         // console.log('thedata: ', data);
//         data && Object.entries(data).forEach(([key, value]) => {
//         // console.log(`${key} ${value}`); // "a 5", "b 7", "c 9"
//           const dateKey = key;
//           // console.log('dateKey: ', dateKey);
//           // only check if the date key is same or after today
//           // if (dateKey && moment(dateKey).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('days'))){
//             // isTodayCheckin = true;
//             // gantnerMapArray.push(data);
            
//             if (!gantnerLogsByUserIdObj[userId]){
//               gantnerLogsByUserIdObj[userId]={};
//             }
//             if (!gantnerLogsByUserIdObj[userId][key]){
//               gantnerLogsByUserIdObj[userId][key]=value;
//             }
//             // else{
//             //   gantnerLogsByUserIdObj[userId][key]=value;
//             // }
//             // if(!gantnerLogsByUserIdObj[userId][gantnerDate]){
//             //   gantnerLogsByUserIdObj[userId][gantnerDate] = {};
//             // }
//             // if(!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//             //   gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] = [gantnerTime];
//             // }
//             // if (gantnerLogsByUserIdObj[userId] 
//             //   && gantnerLogsByUserIdObj[userId][gantnerDate]
//             //   && gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//             //     gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].forEach(theTime=>{
//             //       console.log('theTime: ', theTime);
//             //     });
//             //   }
//           // }
//         });

//         // console.log('gantnerLogsByUserIdObj1st: ', gantnerLogsByUserIdObj);

//       // comparison with today date
//         if (gantnerLogsByUserIdObj[userId]
//           && gantnerLogsByUserIdObj[userId][gantnerDate]
//           && gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] 
//           ){
//             var newGantnerCnt = 0;
//             gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].forEach(theTime=>{
//               const timeString = theTime.includes('Manual')? `${moment().tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD')} ${theTime.replace('Manual_', '')}`:`${moment().tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD')} ${theTime}`; // get today date
//               const timeDiff = Math.abs(moment(timeString).tz('Asia/Kuala_Lumpur').diff(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur'), 'seconds'));
//               // if (timeDiff > 900){ // more than 15min
//               if (timeDiff > 900 && newGantnerCnt===0){ // more than 15min
//                 gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
//                 newGantnerCnt+=1;
//                 // console.log('push the date, and stop')
//                 // return; // stop the searching
//               }
//             });
//             // console.log('gantnerLogsByUserIdObj2s: ', gantnerLogsByUserIdObj[userId]);
//             console.log('update to firestore');
//             return admin.firestore().collection('gantnerLogsByUser').doc(userId).update(
//               gantnerLogsByUserIdObj[userId]
//             );
//             // return admin.firestore().collection('gantnerLogsByUser').doc(userId).update(
//             //   // [gantnerDate][devicelocation]
//             //   gantnerLogsByUserIdObj[userId]
//             // );
//             // return admin.firestore().collection('gantnerLogsByUser').doc(userId).update(gantnerLogsByUserIdObj[userId]);
//           }
//           // not the same device location as previous checkin
//           else{
//             // gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
//             if (!gantnerLogsByUserIdObj[userId]){
//               gantnerLogsByUserIdObj[userId]={};
//             }
//             if (!gantnerLogsByUserIdObj[userId][gantnerDate]){
//               gantnerLogsByUserIdObj[userId][gantnerDate]={};
//             }
//             if (!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//               gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]=[gantnerTime];
//             }
            
//             // console.log('gantnerLogsByUserIdObj3s: ', gantnerLogsByUserIdObj);
//             return admin.firestore().collection('gantnerLogsByUser').doc(userId).update(
//               gantnerLogsByUserIdObj[userId]
//             );
//             // return null
//           }
//       }
//       // doc doesnt exist, write to firestore
//       else{
//         // console.log('doc.data doesnt exist, write a new one to firestore');
//         if (!gantnerLogsByUserIdObj[userId]){
//           gantnerLogsByUserIdObj[userId]={};
//         }
//         if (!gantnerLogsByUserIdObj[userId][gantnerDate]){
//           gantnerLogsByUserIdObj[userId][gantnerDate]={};
//         }
//         if (!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//           gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]=[gantnerTime];
//         }
//         // console.log('gantnerLogsByUserIdObj1s: ', gantnerLogsByUserIdObj);
//         // gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]=[gantnerTime];
//         return admin.firestore().collection('gantnerLogsByUser').doc(userId).set(gantnerLogsByUserIdObj[userId]);
//       }

//       // console.log('gantnerLogsByUserIdObj1s: ', gantnerLogsByUserIdObj);

//       // if (gantnerLogsByUserIdObj[userId] 
//       //   && gantnerLogsByUserIdObj[userId][gantnerDate]
//       //   && gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //     gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].forEach(theTime=>{
//       //       console.log('theTime: ', theTime);
//       //       const timeString = `${moment().tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD')} ${theTime}`; // get today date
//       //       const timeDiff = Math.abs(moment(timeString).tz('Asia/Kuala_Lumpur').diff(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur'), 'seconds'));
//       //       console.log('timeDiff: ', timeDiff);
//       //       var biggerThan15mins = true;
//       //       // if (timeDiff > 900){ // more than 15min
//       //       //   gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
//       //       // }
//       //     });
//       //   }
//       //console.log('gantnerMapArray: ', gantnerMapArray);
    
//       // if(gantnerMapArray.length>0){
//       //   gantnerMapArray && gantnerMapArray.forEach(gantner=>{
//       //     if (!gantnerLogsByUserIdObj[userId]){
//       //       gantnerLogsByUserIdObj[userId]={};
//       //     }
//       //     if(!gantnerLogsByUserIdObj[userId][gantnerDate]){
//       //       gantnerLogsByUserIdObj[userId][gantnerDate] = {};
//       //     }
//       //     if(!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //       gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] = [gantnerTime];
//       //     }
//       //   })
//       // }
//       //if (!gantnerLogsByUserIdObj[userId]){
//       //   gantnerLogsByUserIdObj[userId]={};
//       // }
//       // if(!gantnerLogsByUserIdObj[userId][gantnerDate]){
//       //   gantnerLogsByUserIdObj[userId][gantnerDate] = {};
//       // }
//       // if(!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //   gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] = [gantnerTime];
//       //   // gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
//       //   return admin.firestore().collection('gantnerLogsByUser').doc(userId).set(gantnerLogsByUserIdObj[userId]);
//       // }
//       // // gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
//       // console.log('gantnerLogsByUserIdObj: ', gantnerLogsByUserIdObj);

//       // if(gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //   gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].forEach(theTime=>{

//       //   });
//       //   return null;
//       // }
//       // return null;
//       // if (!isTodayCheckin){
//       //   // if (!gantnerLogsByUserIdObj[userId]){
//       //   //   gantnerLogsByUserIdObj[userId]={};
//       //   // }
//       //   // if(!gantnerLogsByUserIdObj[userId][gantnerDate]){
//       //   //   gantnerLogsByUserIdObj[userId][gantnerDate] = {};
//       //   // }
//       //   // if(!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //   //   gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] = [gantnerTime];
//       //   // }
       
//       //   return admin.firestore().collection('gantnerLogsByUser').doc(userId).set(gantnerLogsByUserIdObj[userId]);
//       // }
//       // else if (gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
//       //   console.log('isTodayCheckin')
//       //   return admin.firestore().collection('gantnerLogsByUser').doc(userId).update(gantnerLogsByUserIdObj[userId]);
//       // }
//       // else{
//       //   return null;
//       // }
      
//       // const 
//     });
//   }
// );

// for now, apply this for klcc only
exports.onCreateUser = functions.firestore.document('users/{userId}')
  .onCreate((snap, context)=>{
    const document = snap.data();
    // const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
    if(!document){
      //deleted
      return null;
    }
    const email = document && document.email;
    const name = document.name;
    const createdFrom = document.createdFrom;
    const packageId = document.packageId;
    const membershipEnds = document.autoMembershipEnds? document.autoMembershipEnds:document.membershipEnds?document.membershipEnds:null;
    const firstJoinVisit = document.firstJoinVisit? document.firstJoinVisit:null;
    const visitorWelcomeEmail = document.visitorWelcomeEmail;
    const achieveTarget = document.achieveTarget;

    if (createdFrom && createdFrom === 'klccExperience'){
      // console.log('thedocument:', document);
      // console.log('context: ', context);
      const userId = context.params.userId;
      return sendSuccessfulRegVisitorEmail (email, name).then(()=>{
        console.log('sending email to: ', email);
        // return admin.firestore().collection('users').doc(userId).update({
        return admin.firestore().collection('users').doc(userId).update({
          klccExpFirstEmail:true,
          klccExpFirstEmailAt:timestamp
        });
      }).catch(err=>{
        console.log('error sending the email: ', err);
        return null;
      })
    }
    else if (!membershipEnds && !packageId && email && name && firstJoinVisit && !visitorWelcomeEmail && achieveTarget){
      return sendWelcomeNewVisitorEmail (email, name, achieveTarget).then(()=>{
        console.log('sending welcoming email to: ', email);
        const userId = context.params.userId;
        return admin.firestore().collection('users').doc(userId).update({
          visitorWelcomeEmail:true,
          visitorWelcomeEmailAt:timestamp
        }).catch(err=>{
          console.log('error sending the email: ', err);
          return null;
        })
      });
    }
    else{
      return Promise.resolve(); 
    }
});

// function to getPGMUsers
function getPGMUsers (userId, page = 1, clubId = 1){
  // const corsFn = cors({ origin: true });
  // return corsFn(req, res, () => {
  var optionsEdit = {
      'method': 'GET',
      'url': userId? `${pgmURLLive}/Users/User?userId=${userId}`: 
          page? `${pgmURLLive}/Users/Users?page=${page}`:
          clubId? `${pgmURLLive}/Users/Users?clubId=${clubId}`:
          `${pgmURLLive}/Users/Users`,
      'headers': {
          'X-Client-Id': pgmClientIdLive,
          'X-Client-Secret': pgmClientSecretLive,
          'Content-Type': 'application/json',
      },
  };
  var rp2 = require('request-promise');
  return rp2(optionsEdit).then(function (result){
      return {success:true, result:JSON.parse(result)}; 
  }).catch(error=>{
      return {success:false, error:error.message};
  })
 //  }); 
}

// search PGMuser by email
function searchPGMUserByEmail (email){
  // euphoria clubId
  const options = {
      'method':'GET',
      'url': `${pgmURLLive}/Users/Search?email=${email}`,
      'headers': {
          'X-Client-Id': pgmClientIdLive,
          'X-Client-Secret': pgmClientSecretLive,
          'Content-Type': 'application/json',
      },
  }
  var rp2 = require('request-promise');
  return rp2(options);
}

exports.modifyUser = functions.firestore
  .document('users/{userId}')
  .onWrite((change, context) => {

    const data = change.after.data();
    const previousData = change.before.data();

    const timestamp = admin.firestore.FieldValue.serverTimestamp();
    // console.log('theData: ', data);
    if(!data){
      //deleted
      return Promise.resolve();
    }

    // temporary
    // return Promise.resolve();

    const createdAt = data.createdAt;
    if(!createdAt){
      console.log('no createdAt found, creating createdAt');
      return change.after.ref.update({createdAt:data.joinDate?data.joinDate:timestamp});
    }
    
    const membershipStarts = (data && data.autoMembershipStarts)? (data.autoMembershipStarts):(data && data.membershipStarts)? data.membershipStarts:null;
    const membershipEnds = (data && data.autoMembershipEnds)? (data.autoMembershipEnds):(data && data.membershipEnds)? data.membershipEnds:null;
    const beforemembershipStarts = (previousData && previousData.autoMembershipStarts)? (previousData.autoMembershipStarts):(previousData && previousData.membershipStarts)? previousData.membershipStarts:null;
    const beforemembershipEnds = (previousData && previousData.autoMembershipEnds)? (previousData.autoMembershipEnds):(previousData && previousData.membershipEnds)? previousData.membershipEnds:null;
    const packageId = data && data.packageId;
    const PrivateClassCredit = data && data.PrivateClassCredit;

    // reward user with private class credit
    if (!beforemembershipStarts && membershipStarts && moment(getTheDate(membershipStarts)).isSameOrAfter(moment('2021-09-30'))){
      return change.after.ref.update({PrivateClassCredit:1});
    }

    const name = data.name;
    const normalizedName = name && typeof name === 'string' && name.replace(/^\s+|\s+$|\s+(?=\s)/g, '').replace(/([^\s/-]+)/g, (word) => word[0].toUpperCase() + word.slice(1).toLowerCase());
    if(name && normalizedName && name !== normalizedName){
      // console.log('updated normalize name: ', normalizedName);
      return change.after.ref.update({name:normalizedName});
    }

    const currentUserId = change.after.id;
    const currentUserRef = change.after.ref;
    const tempUserId = data.tempUserId; //Visitor without passwords
    if(tempUserId && currentUserId && currentUserRef){
      // console.log('tempUserId: ', tempUserId);
    //Executes when Visitors without passwords converts to Users
      const roles = data.roles;
      const isStaff = roles && (roles.admin || roles.mc || roles.trainer);

      var queryPromises = [];
      //performUpdates for bookings, gantnerLogs, invoices, payments, users referrals
      const bookingsQuery = admin.firestore().collection('bookings').where('userId', '==', tempUserId).get();
      const gantnerLogsQuery = admin.firestore().collection('gantnerLogs').where('userId', '==', tempUserId).get();
      const invoicesQuery = admin.firestore().collection('invoices').where('userId', '==', tempUserId).get();
      const paymentsQuery = admin.firestore().collection('payments').where('userId', '==', tempUserId).get();
      const referredPaymentsQuery = admin.firestore().collection('payments').where('referredUserId', '==', tempUserId).get();
      const usersQuery = admin.firestore().collection('users').where('referredByUserId', '==', tempUserId).get();

      queryPromises.push(bookingsQuery, gantnerLogsQuery, invoicesQuery, paymentsQuery, referredPaymentsQuery, usersQuery);

      //for trainer, bookings, sessions, users
      if(isStaff){
        const bookingsTrainerQuery = admin.firestore().collection('bookings').where('trainerId', '==', tempUserId).get();
        const bookingsBookerQuery = admin.firestore().collection('bookings').where('bookerId', '==', tempUserId).get();
        const sessionsTrainerQuery = admin.firestore().collection('sessions').where('trainerId', '==', tempUserId).get();
        const mcsQuery = admin.firestore().collection('users').where('mcId', '==', tempUserId).get();
        const trainersQuery = admin.firestore().collection('users').where('trainerId', '==', tempUserId).get();

        queryPromises.push(bookingsTrainerQuery, bookingsBookerQuery, sessionsTrainerQuery, mcsQuery, trainersQuery);
      }

      return Promise.all(queryPromises).then(results=>{
        var updates = [];
        results.forEach(result=>{
          result.forEach(doc=>{
            const data = doc.data();
            const userId = data && data.userId;
            if(userId && tempUserId === userId){
              updates.push([doc.ref, {userId:currentUserId}]);
            }
            const referredUserId = data && data.referredUserId;
            if(referredUserId && tempUserId === referredUserId){
              updates.push([doc.ref, {referredUserId:currentUserId}]);
            }
            if(isStaff){
              const trainerId = data && data.trainerId;
              if(trainerId && tempUserId === trainerId){
                updates.push([doc.ref, {trainerId:currentUserId}]);
              }
              const bookerId = data && data.bookerId;
              if(bookerId && tempUserId === bookerId){
                updates.push([doc.ref, {bookerId:currentUserId}]);
              }
            }
          });
        });

        var batchCommitPromises = [];
        var batch = admin.firestore().batch();
        var batchCount = 0;
        updates.forEach(([ref, updates]) =>{
          if(batchCount >= 500){
            batchCommitPromises.push(batch.commit());
            batch = admin.firestore().batch();
            batchCount = 0;
          }
          batch.update(ref, updates);
          batchCount += 1;
        });

        if(batchCount > 0){
          batchCommitPromises.push(batch.commit());
        }

        if(batchCommitPromises.length){
          return Promise.all(batchCommitPromises).then(()=>{
            return currentUserRef.update({tempUserId:null, migratedTempUserId : tempUserId});
          });
        }else{
          return currentUserRef.update({tempUserId:null, migratedTempUserId : tempUserId});
        }

      });
    }
    //Ignore if no start date and complimentary.
    // var membershipStarts = data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
    // console.log('membershipStart: ', membershipStarts);
    // if((data.packageId && !membershipStarts) || (data.packageId && data.packageId === 'yKLfNYOPzXHoAiknAT24')){
    //   return Promise.resolve();
    // }

    //if vend customer does not exist, Create customer in Vend.
    if(!data.vendCustomerId || (typeof data.vendCustomerId === 'string' && data.vendCustomerId.trim().length === 0)){
      // if(data.packageId || data.vendCustomerId === previousData.vendCustomerId || data.vendCustomerId.trim().length === 0){
      const email = data.email && typeof data.email === 'string' && data.email.length > 0 ? data.email.toLowerCase() : null;
      const firstName = data.name;
      const lastName = ' ';
      if(email && firstName){
        const vendCustomersQuery = admin.firestore().collection('vendCustomers').where('email', '==', email).get();
        return vendCustomersQuery.then(querySnapshot => {
          if(querySnapshot.empty){
            //push to vend
            var rp = require('request-promise');
            var options = { method: 'POST',
              url: 'https://bfitness.vendhq.com/api/2.0/customers',
              auth: {
                bearer: vendPersonalToken
              },
              body:{
                first_name : firstName,
                last_name : lastName,
                email : email,
                phone : data.phone,
                customer_group_id : '0af7b240-aba0-11e7-eddc-d511a1c39612'
              },
              json:true
            };

            console.log('creating vend customer Id: ', email);
            return rp(options);

          }
          else{
            // going here?
            console.log('query snapshot is not empty');
            // return Promise.resolve();
            // return; // 29/7/2020
            var vendId = null;
            querySnapshot.forEach(doc=>{
              // console.log('theId: ', doc.id);
              vendId = doc.id;
            });
            return currentUserRef.update({vendCustomerId:vendId});
            // return;
          }


          // querySnapshot.forEach(doc=>{
          //
          // });
        });
      }else{
        console.log('no email & firstname');
        return Promise.resolve();
      }
    }

    // if pgmUserId does not exist, update the 'users' collection with pgm userId
    // if (!data.pgmUserId && data.email){
    //   const pgmUserQuery = searchPGMUserByEmail(data.email);
    //   return pgmUserQuery.then(user => {
    //     console.log('no pgm users: ', user);
    //     return;
    //   });
    // }


    const email = data.email;
    const prevEmail = previousData && previousData.email;
    const normalizedEmail = email && typeof email === 'string' && email.length > 0 ? email.toLowerCase() : null;
    const firstName = data.name;
    const lastName = ' ';
    const phone = data.phone;
    const vendCustomerId = data.vendCustomerId;
    const promoJan2020 = data.promoJan2020||null;

    // console.log('prevEmail: ', prevEmail);
    // for CRO user change the email address, update the changes to vend
    if (email && normalizedEmail && (normalizedEmail!==prevEmail) && vendCustomerId){
      // console.log('updated email: ', normalizedEmail);
      // check the email is already exist
      const vendCustomerPrevEmailQuery = admin.firestore().collection('vendCustomers').where('email', '==', prevEmail).get();
      const vendCustomerAfterEmailQuery = admin.firestore().collection('vendCustomers').where('email', '==', normalizedEmail).get();

      return Promise.all([vendCustomerPrevEmailQuery, vendCustomerAfterEmailQuery]).then((results) => {

        const prevEmailQuery = results[0];
        const afterEmailQuery = results[1];

        if (!afterEmailQuery.empty){
          console.log('no email updates, revert back to the old email')
          // return change.after.ref.update({email:prevEmail});
          return Promise.resolve();
        }
        else{
          console.log('updating the existing vend user email ', normalizedEmail);
          var rp2 = require('request-promise');
          var optionsEdit = vendCustomerEditOption(firstName, lastName, normalizedEmail, phone, '0af7b240-aba0-11e7-eddc-d511a1c39612', vendCustomerId);
          return rp2(optionsEdit);
        }
          // var rp2 = require('request-promise');
          // var optionsEdit = vendCustomerEditOption(firstName, lastName, normalizedEmail, phone, '0af7b240-aba0-11e7-eddc-d511a1c39612', vendCustomerId);
          // return rp2(optionsEdit);
      });
    }

    // checking the database from pakages, user vendsales record, payment record
    const packagesQuery = admin.firestore().collection('packages').get();
    const vendSalesQuery = admin.firestore().collection('vendSales').where('customer_id', '==', data.vendCustomerId).get();
    const paymentsQuery = admin.firestore().collection('payments')
      .where('userId', '==', change.after.id)
      .where('type', '==', 'membership')
      // .orderBy('createdAt', 'desc')
      .get();
    const membershipEndField = data && data.membershipEnds;
    // console.log('membershipEndField: ', moment(getTheDate(membershipEndField)).format('YYYY-MM-DD'));

    return Promise.all([packagesQuery, vendSalesQuery, paymentsQuery]).then((results) => {
      // console.log('results');
      const packagesResults = results[0];
      const vendSalesResults = results[1];
      const paymentsResults = results[2];

      var productIdPackageMap = {};
      var packageMap = {};
      packagesResults.forEach(doc=>{
        const data = doc.data();
        const vendProductIds = data && data.vendProductIds;
        packageMap[doc.id]=data;
        vendProductIds && vendProductIds.map(vendProductId=>{
          productIdPackageMap[vendProductId] = doc.id;
          return null;
        });
      });

      var packageId = null;
      // if ((data.promoJan2020 && data.promoJan2020>=4) || (data.promoAug2020 && data.promoAug2020>=4)){

      // }
      if(data.packageLocked){
        packageId = data.packageId;
      }
      else if (data.complimentaryPromo){
        packageId = 'L6sJtsKG68LpEUH3QeD4';
      }
      else if (data.promoJan2020 || data.promoAug2020 || data.promoMidSep2020 || data.promoSep2020 
        || (data.createdFrom && data.createdFrom === 'angpau2022')
        ){
        packageId = data.packageId; // enable the memberconversion API
        console.log('packageId: ', packageId);
      }
      else{
        vendSalesResults.forEach(doc=>{

          if(doc.data().status !== 'CLOSED' && doc.data().status !== 'ONACCOUNT'){
            return;
          }

          const data = doc.data();
          const lineItems = data.line_items;
          const registerSaleProducts = data.register_sale_products;
          const items = lineItems ? lineItems : (registerSaleProducts?registerSaleProducts : null);

          // checking for the product that been sold
          items && items.map(registerSaleProduct=>{
            const productId = registerSaleProduct.product_id; //same like packageID
            const pId = productIdPackageMap[productId];
            if(pId){
              // console.log("package", pId);
              packageId = pId;
            }
            return null;
          });

          return;
        });

        var currentDate = null;
        // search from the payment database
        paymentsResults.forEach(doc=>{
          // console.log('thePaymentResult: ', doc.data());
          // if payment is not valid
          if(doc.data().status && (doc.data().status !== 'CLOSED' && doc.data().status !== 'ONACCOUNT')){
            return;
          }
          const createdAt = doc.data() && doc.data().createdAt;

          if(doc.data().packageId && createdAt){
            // if (currentDate && moment(getTheDate(createdAt)).isAfter(moment(currentDate))){

            // }
            // else{
            //   currentDate = createdAt;
            // }
            packageId = doc.data().packageId;
          } 
        });
      }
      //check if User packages is updated through vend and adyen sales.
      var updates = {packageId : packageId}; // update the packageId based from payment record (if it is exist)
      //To check and update membership updates.
      const membershipStarts = data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;

      //possibility, if no 'membershipStarts', 'autoMembershipEnds' will never occured
      if (membershipStarts && membershipEndField && packageId==='yKLfNYOPzXHoAiknAT24'){
        // skip payment
        console.log('skip checking for payment for complimentary')
        updates.membershipEnds = membershipEndField;
      }
      else if(membershipStarts){
        var paymentsForUser = [];
        paymentsResults.forEach(doc=>{
          // console.log('paymentsResultsData: ', doc.data());
          const inValidPayment = doc.data().status && (doc.data().status !== 'CLOSED' && doc.data().status !== 'ONACCOUNT' && doc.data().status !== 'LAYBY_CLOSED');
          const inValidAdyenPayment = doc.data().source? doc.data().source === 'adyen'? (doc.data().totalPrice === '0' || doc.data().totalPrice === 0)? true:false:false:false;
          if(inValidPayment 
            // || inValidAdyenPayment
            ){
            return;
          }
          paymentsForUser.push(doc.data());
        });
        // sort the payment data
        paymentsForUser.sort((a,b)=>{
          var dateA = a.createdAt;
          var dateB = b.createdAt;
          if (dateA < dateB) {
            return -1;
          }
          if (dateA > dateB) {
            return 1;
          }
          return 0;
        });

        // console.log('paymentsForUser: ', paymentsForUser);

        var years = 0;
        var months = 0;
        var endMoment = moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').startOf('day');
        // console.log('momentMembershipStart: ', endMoment.format('DD MM YYYY'));

        //total up paid membership months without freeze
        paymentsForUser.forEach(payment=>{
          // console.log('modifyUserPayment: ', payment);
          if(payment.source === 'freeze'){
            return;
          }
          const renewalTerm = payment.renewalTerm ? payment.renewalTerm : 'month';
          const quantity = payment.quantity ? payment.quantity : 1;
          // const freeMonthQuantity = payment.freeMonthQuantity? payment.freeMonthQuantity:0;
          if((renewalTerm === 'year') || (renewalTerm === 'yearly')){
            years += 1;
          }else if((renewalTerm === 'biyear') || (renewalTerm === 'biyearly')){
            months += 6*quantity;
          }else if(renewalTerm === 'quarterly'){
            months += 3*quantity;
          }else if(renewalTerm === '4monthly'){
            months += 4*quantity;
          }else if((renewalTerm === 'month')||(renewalTerm === 'monthly')){
            months += quantity;
          }
          // if (freeMonthQuantity && freeMonthQuantity>0){
          //   months += freeMonthQuantity;
          // }
        });

        console.log('theMonth: ', months);
        // console.log('years: ', years);
        endMoment.add(moment.duration({months:months, years:years}));
        console.log('theEndMoment: ', endMoment);
        
        //add total freeze months to above
        paymentsForUser.forEach(payment=>{
          const freezeFor = getTheDate(payment.freezeFor);
          const freezeEnd = getTheDate(payment.freezeEnd);
          const quantity = (payment && payment.quantity)? payment.quantity:1;
          // console.log('thepaymentSource: ', payment.source);
          // if(payment.source === 'freeze' && freezeFor && moment(freezeFor).isSameOrBefore(endMoment)){
          //   console.log('addFreeze month: ', endMoment.tz('Asia/Kuala_Lumpur').toDate());
          //   endMoment.add(moment.duration({months:1}));
          // }
          // if (payment.source === 'freeze' && freezeFor && freezeEnd){
          //   const dayDiff = Math.max(moment(freezeEnd).diff(freezeFor, 'days'));
          //   // console.log('dayDiff: ', dayDiff);
          //   endMoment.add(moment.duration({days:dayDiff}));
          //   // console.log('addFreeze month: ', endMoment.tz('Asia/Kuala_Lumpur').toDate());
          // }
          if(payment.source === 'freeze' && freezeFor){
            // console.log('addFreeze month: ', endMoment.tz('Asia/Kuala_Lumpur').toDate());
            endMoment.add(moment.duration({months:quantity}));
          }
        });

        const autoMembershipEnds = endMoment.tz('Asia/Kuala_Lumpur').toDate();
        // console.log('autoMembershipEnds: ', endMoment.tz('Asia/Kuala_Lumpur').format('DD MM YYYY'))
        const packageData = packageId && packageMap[packageId];
        const packageName = packageData && packageData.name;

        if(moment(getTheDate(membershipStarts)).isSame(moment(autoMembershipEnds), 'day')){
          updates.autoMembershipEnds = null;
        }
        else if (packageName && packageName.toLowerCase().includes('complimentary') && membershipEndField){
          updates.autoMembershipEnds = membershipEndField;
        }
        // else if ((packageId === 'L6sJtsKG68LpEUH3QeD4' || packageId === 'yKLfNYOPzXHoAiknAT24') && membershipEndField) {
        //   updates.autoMembershipEnds = membershipEndField;
        // }
        else{
          updates.autoMembershipEnds = autoMembershipEnds;
        }
      }
      // no membership start, add membershipstart 28/7/2020
      // else{
      //   var paymentsForUser2 = [];
      //   paymentsResults.forEach(doc=>{
      //     // console.log('paymentsResultsData: ', doc.data());
      //     const inValidPayment = doc.data().status && (doc.data().status !== 'CLOSED' && doc.data().status !== 'ONACCOUNT' && doc.data().status !== 'LAYBY_CLOSED');
      //     const inValidAdyenPayment = doc.data().source? doc.data().source === 'adyen'? (doc.data().totalPrice === '0' || doc.data().totalPrice === 0)? true:false:false:false;
      //     if(inValidPayment || inValidAdyenPayment){
      //       return;
      //     }
      //     paymentsForUser2.push(doc.data());
      //   });
      //   // if valid payment found, add membership start
      //   if (paymentsForUser2.length>0){
      //     updates.autoMembershipStarts = data.joinDate? data.joinDate: timestamp;
      //   }
      // }

      // const is3MthPkg = get3Mpkgs(packageId);
      // console.log('endMomentFaizul: ', endMoment);
      // console.log('theENdMOment: ', endMoment.isBefore(moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(0,'days')));

      if(packageId && (packageId !== 'yKLfNYOPzXHoAiknAT24')) {
        console.log("updating user", change.after.id, updates);
        return change.after.ref.update(updates);
      }
      else if (packageId === 'yKLfNYOPzXHoAiknAT24'){
        console.log("updating complimentary user", change.after.id, updates);
        return change.after.ref.update(updates);
      }
      // else if (packageId !== 'L6sJtsKG68LpEUH3QeD4'){
      //   return change.after.ref.update(updates);
      // }
      // else if (is3MthPkg && endMoment.isBefore(moment().tz('Asia/Kuala_Lumpur').startOf('day').subtract(0,'days'))){
      //   console.log('convert to monthly pkg');
      //   updates.packageId = 'vf2jCUOEeDDiIQ0S42BJ'; // convert to monthly package
      //   return change.after.ref.update(updates);
      // }
      else{
        console.log("no updates", change.after.id, updates);
        return Promise.resolve();
      }
    });
  }
);

// // // // // function get3Mpkgs(pkgId){
// // // // //   const ThreeStepPkgIdAllClub = 'LNGWNSdm6kf4rz1ihj0i';
// // // // //   const ThreeStepPkgIdSingle = 'k7As68CqGsFbKZh1Imo4';
// // // // //   const threeMonthTermPkg = 'w12J3n9Qs6LTViI6HaEY';
// // // // //   const threeTermMembershipPkg = 'aTHIgscCxbwjDD8flTi3';
// // // // //   const threeMTermMembership = 'yQFACCzpS4DKcDyYftBx';
// // // // //   if (pkgId === ThreeStepPkgIdAllClub || pkgId === ThreeStepPkgIdSingle || pkgId === threeMonthTermPkg ||
// // // // //     pkgId === threeTermMembershipPkg || pkgId === threeMTermMembership){
// // // // //       return true;
// // // // //   }
// // // // //   else{
// // // // //     return false;
// // // // //   }
// // // // // }

// // // // // function isPromoPackage(pkgId){
// // // // //   const threeMJan2020PromoAllClubs = 'LNGWNSdm6kf4rz1ihj0i'; //3M Jan2020 Promo (All Clubs)
// // // // //   const threeMAug2020PromoSingle = 'AHgEEavKwpJoGTMOzUdX'; // 3M August 2020 (single access)
// // // // //   const threeMAug2020PromoAllCLubs = 'YsOxVJGLRXrHDgNTBach'; // 3M August 2020 (all access)
// // // // //   const threeMJan2020PromoSingle = 'k7As68CqGsFbKZh1Imo4'; // 3M Jan2020 Promo (Single Club)
// // // // //   const threeMjan2020PromoSingle2 = 'w12J3n9Qs6LTViI6HaEY'; // 3M Jan2020 Promo (Single Club).
// // // // //   const threeMMidSepPromoSingle = 'hUZjGJR77bP30I3fjvwD' // 3M Mid September 2020 (single access)
// // // // //   const threeMMidSepPromoAllAccess = 'kh513XOaG7eLX4z9G0Ft' // 3M Mid September 2020 (all access)
// // // // //   const threeMSepPromoUNO = 'uQO2UsaRiqXtzPKjTSIS' // Babel UNO! 4M September Promo

// // // // //   if (pkgId === threeMJan2020PromoAllClubs || pkgId === threeMAug2020PromoSingle || pkgId === threeMAug2020PromoAllCLubs ||
// // // // //     pkgId === threeMJan2020PromoSingle || pkgId === threeMjan2020PromoSingle2 ||
// // // // //     pkgId === threeMMidSepPromoSingle || pkgId === threeMMidSepPromoAllAccess ||
// // // // //     pkgId === threeMSepPromoUNO
// // // // //     ){
// // // // //       return true;
// // // // //   }
// // // // //   else{
// // // // //     return false;
// // // // //   }
// // // // // }

// // // // // // function get3MSInglepkgs(pkgId){
// // // // // //   const ThreeStepPkgIdSingle = 'k7As68CqGsFbKZh1Imo4';
// // // // // //   const threeMonthTermPkg = 'w12J3n9Qs6LTViI6HaEY';
// // // // // //   const threeTermMembershipPkg = 'aTHIgscCxbwjDD8flTi3';
// // // // // //   const threeMTermMembership = 'yQFACCzpS4DKcDyYftBx';
// // // // // //   if (pkgId === ThreeStepPkgIdSingle || pkgId === threeMonthTermPkg ||
// // // // // //     pkgId === threeTermMembershipPkg || pkgId === threeMTermMembership){
// // // // // //       return true;
// // // // // //   }
// // // // // //   else{
// // // // // //     return false;
// // // // // //   }
// // // // // // }

// // // exports.modifyVendCustomer = functions.firestore
// // //   .document('vendCustomers/{vendCustomerId}')
// // //   .onWrite((change, context) => {
// // //     // Get an object with the current document value.
// // //     // If the document does not exist, it has been deleted.
// // //     const document = (change.after && change.after.exists) ? change.after.data() : null;

// // //     // Get an object with the previous document value (for update or delete)
// // //     // const oldDocument = event.data.previous.data();

// // //     if (document && document.deleted_at && document.id){
// // //       return admin.firestore().collection('users').where('vendCustomerId', '==', document.id).delete().then(function() {
// // //         console.log("Document successfully deleted!");
// // //       }).catch(function(error) {
// // //           console.error("Error removing document: ", error);
// // //       });
// // //     }
// // //     // perform desired operations ...
// // //     else if (document) {
// // //       let {
// // //         id,
// // //         email,
// // //         first_name,
// // //         last_name,
// // //         name,
// // //         date_of_birth,
// // //         created_at,
// // //         gender,
// // //         mobile,
// // //         custom_field_1,
// // //         customer_group_id,
// // //       } = document;
// // //       console.log(email, first_name, last_name, name, date_of_birth, created_at, gender, mobile, custom_field_1);
// // //       if (email && typeof email === 'string' && email.trim().length > 0 && (name || first_name || last_name)) {
// // //         // console.log('has email', email);
// // //         const vendCustomerData = {
// // //           vendCustomerId: id,
// // //           vendCustomerGroupId: customer_group_id,
// // //           email: email.trim().toLowerCase(),
// // //           firstName: first_name ? first_name : null,
// // //           lastName: last_name ? last_name : null,
// // //           name: name ? name : (first_name ? first_name : '') + ' ' + (last_name ? last_name : ''),
// // //           dateOfBirth: (date_of_birth && date_of_birth.length > 0) ? new Date(date_of_birth) : null,
// // //           joinDate: (created_at && created_at.length > 0) ? new Date(created_at) : timestamp,
// // //           gender: gender === 'M' ? 'male' : (gender === 'F' ? 'female' : null),
// // //           phone: typeof mobile === 'string' && mobile.replace(/-/g, '').trim().length > 0 ? mobile.replace(/-/g, '').trim() : null,
// // //           // ic number checking?
// // //           nric: typeof custom_field_1 === 'string' && custom_field_1.replace(/-/g, '').trim().length > 0 && /^\d+$/.test(custom_field_1.replace(/-/g, '').trim()) ? custom_field_1.replace(/-/g, '').trim() : null,
// // //           passport: typeof custom_field_1 === 'string' && custom_field_1.replace(/-/g, '').trim().length > 0 && /^\d+$/.test(custom_field_1.replace(/-/g, '').trim()) === false ? custom_field_1.replace(/-/g, '').trim() : null
// // //         }
// // //         // if (customer_group_id === '023c72a6-e9a0-11eb-e2fd-6e9d93f83662'){
// // //         //   vendCustomerData.vendCustomerGroupId = customer_group_id;
// // //         // }
// // //         // else {
// // //         //   vendCustomerData.vendCustomerGroupId = null;
// // //         // }
// // //         // console.log(vendCustomerData);

// // //         var userUpdates = {};
// // //         return admin.firestore().collection('users').where('email', '==', vendCustomerData.email).get().then((querySnapshot) => {
// // //           console.log('found users');
// // //           const batch = admin.firestore().batch();
// // //           var updateCount = 0;
// // //           querySnapshot.forEach(doc => {
// // //             updateCount += 1;
// // //             const userData = doc.data();
// // //             // const email = userData && userData.email;
// // //             // const firstName = userData && userData.firstName;
// // //             // const lastName = userData && userData.lastName;
// // //             // const name = userData && userData.name;
// // //             // const dateOfBirth = userData && userData.dateOfBirth;
// // //             // const gender = userData && userData.gender;
// // //             // userUpdates.email = email;
// // //             // userUpdates.name = name;
// // //             // userUpdates.gender = gender;
// // //             // userUpdates.phone = mobile;
// // //             // var userUpdates = {};
// // //             Object.keys(vendCustomerData).map(key => {
// // //               const value = vendCustomerData[key];
// // //               // console.log('key: ', key);
// // //               if (key !== 'email') {
// // //                 if (value) {
// // //                   userUpdates[key] = value;
// // //                 }
// // //               }
// // //             // console.log('userUpdates: ', userUpdates);
// // //             //   return null;
// // //             });

          
// // //             if (Object.keys(userUpdates).length > 0) {
// // //               batch.update(doc.ref, userUpdates);
// // //             }

// // //           });

// // //           console.log('update count: ', updateCount);
// // //           if (updateCount === 0) {
// // //             batch.set(admin.firestore().collection('users').doc(), vendCustomerData);
// // //           }
// // //           console.log("User updates:", userUpdates, updateCount);
// // //           return batch.commit();
// // //         });
// // //       }
// // //     }
// // //     return Promise.resolve();
// // // });

// // // exports.modifyVendSaleV3 = functions.firestore
// // //   .document('vendSalesV3/{vendSaleId}')
// // //   .onWrite((change, context) => {
// // //     // Get an object with the current document value.
// // //     // If the document does not exist, it has been deleted.
// // //     const newValue = (change.after && change.after.exists) ? change.after.data() : null;
// // //     const prevValue = (change.before && change.before.data())? change.before.data():null;

// // //     // console.log('changeBefore: ', change.before.data());
// // //     // console.log('changeAfter: ', change.after.data());
// // //     // console.log('thecontext: ', context);

// // //     // Get an object with the previous document value (for update or delete)
// // //     // const oldDocument = event.data.previous.data();

// // //     // perform desired operations ...
// // //     if (newValue) {
// // //       let {
// // //         customer_id,
// // //         customer, // ?
// // //         totals,
// // //         total_price,
// // //         created_at,
// // //         line_items,
// // //         register_sale_products,
// // //         register_sale_payments,
// // //         id,
// // //         status,
// // //         user,
// // //         return_for,
// // //         invoice_number,
// // //         note,
// // //         voidedEmailSent,
// // //         outlet_id
// // //       } = newValue;

// // //       // console.log('document: ', document);

// // //       if (return_for){
// // //         status = return_for;
// // //       }
// // //       // disable temporarily 15/2/2021
// // //       if (status && (status === 'VOIDED' || status === 'ONACCOUNT' || status === 'LAYBY_CLOSED' || status === return_for) && !voidedEmailSent){
// // //         const croEmail = user && user.email;
// // //         const customerEmail = customer && customer.email;
// // //         const customerName = customer && customer.first_name;

// // //         // todo: send email to faizul, boon, billy, jeshua
// // //         sendVoidedMailToAdmin(id, customer_id, created_at, status, croEmail, customerEmail, customerName, invoice_number, note).then(()=>{
// // //           return change.after.ref.update({voidedEmailSent:true});
// // //         })
// // //       }
// // //       // console.log(email, first_name, last_name, name, date_of_birth, created_at, gender, mobile, custom_field_1);
// // //       if (customer_id && typeof customer_id === 'string' && customer_id.trim().length > 0
// // //       ) {
// // //         // console.log('has customer_id', customer_id);

// // //         const items = line_items ? line_items : (register_sale_products ? register_sale_products : null);
// // //         const vendSaleId = id;

// // //         const packagesQuery = admin.firestore().collection('packages').get();
// // //         const paymentsQuery = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId).get();
// // //         const usersQuery = admin.firestore().collection('users').where('vendCustomerId', '==', customer_id).get();

// // //         return Promise.all([packagesQuery, paymentsQuery, usersQuery]).then(results => {
// // //           console.log('found users');
// // //           const batch = admin.firestore().batch();
// // //           // var updateCount = 0;

// // //           const usersResults = results[2];
// // //           var userId = null;
// // //           usersResults.forEach(doc => {
// // //             // updateCount += 1;
// // //             userId = doc.id;
// // //             var userData = doc.data();
// // //             var totalPayments = userData && userData.totalPayments ? parseFloat(userData.totalPayments) : 0.0;
// // //             const totalPrice = totals && totals.total_payment ? totals.total_payment : (total_price ? total_price : '0.0');
// // //             const remarks = userData? userData.remarks? userData.remarks: " " : " ";
// // //             totalPayments += parseFloat(totalPrice);
// // //             const vendCustomerGroupId = userData && userData.vendCustomerGroupId;
// // //             const isWelcomeBackGroup = vendCustomerGroupId && vendCustomerGroupId === '023c72a6-e9a0-11eb-e2fd-6e9d93f83662';
// // //             const isWelcomeBackcustomer = customer && customer.customer_group_id && customer.customer_group_id === '023c72a6-e9a0-11eb-e2fd-6e9d93f83662';

// // //             // items.forEach(item=>{
// // //             //   // console.log('modifyVendSale Item: ', item);
// // //             //   const vendProductId = item.product_id;
// // //             //   if (vendProductId === 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7' && (totalPayments<=0 || !totalPayments)){
// // //             //     batch.update(doc.ref, {complimentaryPromo:remarks});
// // //             //   }

// // //             // });

// // //             // change back the group to bfitness 0af7b240-aba0-11e7-eddc-d511a1c39612
// // //             // if (isWelcomeBackGroup && isWelcomeBackcustomer){
// // //             //   batch.update(doc.ref, {vendCustomerGroupId:'0af7b240-aba0-11e7-eddc-d511a1c39612'});
// // //             //   const welcomeBackGroupId = '023c72a6-e9a0-11eb-e2fd-6e9d93f83662'; // hardcode

// // //             //   var rp2 = require('request-promise');
// // //             //   const reqOption = 'DELETE';
// // //             //   var optionsEdit = vendAddOrRemoveCustomersToGroup(welcomeBackGroupId, {"customer_ids":[customer_id]}, reqOption);

// // //             //   return rp2(optionsEdit).then(function (result){
// // //             //     console.log('isWelcomeBackGroup: ', result);
// // //             //     //return res.status(200).send({success:true, result}); 
// // //             //   }).catch(error => {
// // //             //     console.log('isWelcomeBackGroupError: ', error);
// // //             //     // return res.status(200).send({success:false, error}); 
// // //             //   });
// // //             // }
            
// // //             console.log("User total spent:", doc.id, totalPayments);
// // //             batch.update(doc.ref, {totalPayments:totalPayments});
// // //           });

// // //           const packagesResults = results[0];
// // //           var packageMap = {};
// // //           var productIdPackageMap = {};
// // //           packagesResults && packagesResults.forEach(doc=>{
// // //             const data = doc.data();
// // //             packageMap[doc.id] = data;
// // //             const vendProductIds = data && data.vendProductIds;
// // //             // console.log('vendProductId: ', data);
// // //             vendProductIds && vendProductIds.forEach(vendProductId=>{
// // //               productIdPackageMap[vendProductId] = doc.id;
// // //             })
// // //           });

// // //           // console.log('productIdPackageMap: ', productIdPackageMap);

// // //           const paymentsResults = results[1];
// // //           var existingPayments = [];
// // //           paymentsResults.forEach(doc=>{
// // //             existingPayments.push(doc);
// // //           });

// // //           var updateCount = 0;
// // //           var newPaymentCount = 0;

// // //           const payment_type = register_sale_payments && (register_sale_payments.length>0) && register_sale_payments[0].payment_type && register_sale_payments[0].payment_type.name;
// // //           const paymentType = payment_type;

// // //           //if (!return_for){
// // //             items.forEach(item=>{
// // //               // console.log('modifyVendSale Item: ', item);
// // //               const vendProductId = item.product_id;
// // //               const totalPrice = (item.price&& item.tax)? (parseFloat(item.price) + parseFloat(item.tax)).toFixed(2) : item.total_price? item.total_price : null;
// // //               const packageId = productIdPackageMap[vendProductId];
// // //               // console.log('modifyVendPackageId: ', packageId);
// // //               const packageData = packageMap[packageId];

// // //               const quantity = item.quantity;
// // //               const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// // //               // console.log('renewalTerm: ', renewalTerm);
// // //               // console.log('renewalTermPkg: ', packageData && packageData.renewalTerm);
  
// // //               // to create payment where type = membership
// // //               if(packageId){
// // //                 var paymentRefs = [];
// // //                 existingPayments.forEach(existingPayment=>{
  
// // //                   // console.log('existingPayments: ', existingPayment);
  
// // //                   // const existingVendSaleId = existingPayment.vendSaleId;
// // //                   const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
// // //                   // console.log('existingVendSaleId: ', existingVendSaleId);
  
// // //                   if(existingVendSaleId === vendSaleId){
// // //                     paymentRefs.push(existingPayment);
// // //                   }
// // //                 });
  
// // //                 if(paymentRefs.length < quantity){
// // //                   for(var i=0; i < quantity; i++){
// // //                     const paymentRef = admin.firestore().collection('payments').doc();
// // //                     paymentRefs.push(paymentRef);
// // //                   }
// // //                 }
  
// // //                 paymentRefs.forEach(paymentRef=>{
// // //                   var data = paymentRef.exists && paymentRef.data();
// // //                   if(!data){
// // //                     newPaymentCount += 1;
// // //                     data = {
// // //                       createdAt : moment(getTheDate(created_at)).toDate(),
// // //                       totalPrice : totalPrice ? totalPrice : 0,
// // //                       type : 'membership',
// // //                       userId : userId,
// // //                       packageId : packageId,
// // //                       source : 'vend',
// // //                       vendProductId : vendProductId,
// // //                       vendSaleId : vendSaleId,
// // //                       renewalTerm : renewalTerm,
// // //                       status : status,
// // //                       outlet: getOutletById(outlet_id),
// // //                       invoiceNumber:invoice_number,
// // //                       note:note,
// // //                       paymentType:paymentType?paymentType:'FREE'
// // //                     }
// // //                     // console.log('Creating payment', paymentRef.id, vendSaleId, userId);
// // //                     // data.status = status;
// // //                     batch.set(paymentRef, data);
// // //                   }else{
                    
// // //                     // disable it temporarily
                    
// // //                   // console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
// // //                     updateCount += 1;
// // //                     const updatedData = {
// // //                       createdAt : moment(getTheDate(created_at)).toDate(),
// // //                       totalPrice : totalPrice ? totalPrice : 0,
// // //                       type : 'membership',
// // //                       userId : userId,
// // //                       packageId : packageId,
// // //                       source : 'vend',
// // //                       vendProductId : vendProductId,
// // //                       vendSaleId : vendSaleId,
// // //                       renewalTerm : renewalTerm,
// // //                       status : status,
// // //                       outlet: getOutletById(outlet_id),
// // //                       invoiceNumber:invoice_number,
// // //                       note:note,
// // //                       paymentType:paymentType?paymentType:"FREE"
// // //                     };
// // //                     batch.update(admin.firestore().collection('payments').doc(paymentRef.id), updatedData);
// // //                   }


// // //                 });
  
// // //                 // for (var i = 0; i < quantity; i++) {
// // //                 //   var paymentData;
// // //                 //
// // //                 //
// // //                 //
// // //                 //   if(existingPayments.length < i){
// // //                 //     const existingPayment = existingPayments[i];
// // //                 //     paymentRef = existingPayment.ref;
// // //                 //     paymentData = existingPayment.data();
// // //                 //     paymentData.status = status;
// // //                 //     console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
// // //                 //   }else{
// // //                 //     paymentRef = admin.firestore().collection('payments').doc();
// // //                 //     paymentData = {
// // //                 //       createdAt : moment(created_at).toDate(),
// // //                 //       totalPrice : totalPrice ? totalPrice : 0,
// // //                 //       type : 'membership',
// // //                 //       userId : userId,
// // //                 //       packageId : packageId,
// // //                 //       source : 'vend',
// // //                 //       vendProductId : vendProductId,
// // //                 //       vendSaleId : vendSaleId,
// // //                 //       renewalTerm : renewalTerm,
// // //                 //       status : status
// // //                 //     }
// // //                 //     console.log('Creating payment', paymentRef.id, vendSaleId, userId);
// // //                 //   }
// // //                 //   batch.set(paymentRef, paymentData);
// // //                 // }
// // //               }
// // //               // for freeze
// // //               else if (vendProductId === 'a3be38de-934f-aa1c-7f69-89f8fcc16f4a'){
// // //                 var paymentRefs = [];
// // //                 existingPayments.forEach(existingPayment=>{
// // //                   const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
// // //                   // console.log('existingVendSaleId: ', existingVendSaleId);
  
// // //                   if(existingVendSaleId === vendSaleId){
// // //                     paymentRefs.push(existingPayment);
// // //                   }
// // //                 });
  
// // //                 if(paymentRefs.length < quantity){
// // //                   for(var i=0; i < quantity; i++){
// // //                     const paymentRef = admin.firestore().collection('payments').doc();
// // //                     paymentRefs.push(paymentRef);
// // //                   }
// // //                 }
  
// // //                 paymentRefs.forEach(paymentRef=>{
// // //                   var data = paymentRef.exists && paymentRef.data();
// // //                   if(!data){
// // //                     newPaymentCount += 1;
// // //                     data = {
// // //                       createdAt : moment(getTheDate(created_at)).toDate(),
// // //                       totalPrice : totalPrice ? totalPrice : 0,
// // //                       type : 'membership',
// // //                       userId : userId,
// // //                       // packageId : packageId,
// // //                       freezeFor:moment(getTheDate(created_at)).toDate(),
// // //                       source : 'freeze',
// // //                       freezeSource: 'vend',
// // //                       vendProductId : vendProductId,
// // //                       vendSaleId : vendSaleId,
// // //                       renewalTerm : renewalTerm,
// // //                       status : status
// // //                     }
// // //                     // console.log('Creating payment', paymentRef.id, vendSaleId, userId);
// // //                     // data.status = status;
// // //                     batch.set(paymentRef, data);
// // //                   }
// // //                 });
// // //               }
// // //               // for Retail
// // //               // else if (){

// // //               // }
// // //             });
// // //           //}
// // //           // remove the return_for
// // //           // else{
// // //           //   console.log('removing the existing payment');
           
// // //           //     batch.delete(admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId));
          
// // //           //   // paymentRef = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId);
// // //           // }

// // //           if (updateCount>0 || newPaymentCount>0){
// // //             return batch.commit();
// // //           }
// // //           else{
// // //             return null;
// // //           }
// // //         });
// // //       }
// // //     }
// // //     return Promise.resolve();
// // // });

exports.modifyVendSale = functions.firestore
  .document('vendSales/{vendSaleId}')
  .onWrite((change, context) => {
    // Get an object with the current document value.
    // If the document does not exist, it has been deleted.
    const newValue = (change.after && change.after.exists) ? change.after.data() : null;
    const prevValue = (change.before && change.before.data())? change.before.data():null;

    // console.log('changeBefore: ', change.before.data());
    // console.log('changeAfter: ', change.after.data());
    // console.log('thecontext: ', context);

    // Get an object with the previous document value (for update or delete)
    // const oldDocument = event.data.previous.data();

    // perform desired operations ...
    if (newValue) {
      let {
        customer_id,
        customer, // ?
        totals,
        total_price,
        created_at,
        line_items,
        register_sale_products,
        register_sale_payments,
        id,
        status,
        user,
        return_for,
        invoice_number,
        note,
        voidedEmailSent,
        outlet_id
      } = newValue;

      // console.log('document: ', document);

      if (return_for){
        status = return_for;
      }
      // disable temporarily 15/2/2021
      if (status && (status === 'VOIDED' || status === 'ONACCOUNT' || status === 'LAYBY_CLOSED' || status === return_for) && !voidedEmailSent){
        const croEmail = user && user.email;
        const customerEmail = customer && customer.email;
        const customerName = customer && customer.first_name;

        // todo: send email to faizul, boon, billy, jeshua
        sendVoidedMailToAdmin(id, customer_id, created_at, status, croEmail, customerEmail, customerName, invoice_number, note).then(()=>{
          return change.after.ref.update({voidedEmailSent:true});
        })
      }
      // console.log(email, first_name, last_name, name, date_of_birth, created_at, gender, mobile, custom_field_1);
      if (customer_id && typeof customer_id === 'string' && customer_id.trim().length > 0
      ) {
        // console.log('has customer_id', customer_id);

        const items = line_items ? line_items : (register_sale_products ? register_sale_products : null);
        const vendSaleId = id;

        const packagesQuery = admin.firestore().collection('packages').get();
        const paymentsQuery = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId).get();
        const usersQuery = admin.firestore().collection('users').where('vendCustomerId', '==', customer_id).get();

        return Promise.all([packagesQuery, paymentsQuery, usersQuery]).then(results => {
          // console.log('found users');
          const batch = admin.firestore().batch();
          // var updateCount = 0;

          const usersResults = results[2];
          var userId = null;
          usersResults.forEach(doc => {
            // updateCount += 1;
            userId = doc.id;
            var userData = doc.data();
            var totalPayments = userData && userData.totalPayments ? parseFloat(userData.totalPayments) : 0.0;
            const totalPrice = totals && totals.total_payment ? totals.total_payment : (total_price ? total_price : '0.0');
            const remarks = userData? userData.remarks? userData.remarks: " " : " ";
            totalPayments += parseFloat(totalPrice);
            const vendCustomerGroupId = userData && userData.vendCustomerGroupId;
            const isWelcomeBackGroup = vendCustomerGroupId && vendCustomerGroupId === '023c72a6-e9a0-11eb-e2fd-6e9d93f83662';
            const isWelcomeBackcustomer = customer && customer.customer_group_id && customer.customer_group_id === '023c72a6-e9a0-11eb-e2fd-6e9d93f83662';

            items.forEach(item=>{
              // console.log('modifyVendSale Item: ', item);
              const vendProductId = item.product_id;
              if (vendProductId === 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7' && (totalPayments<=0 || !totalPayments)){
                batch.update(doc.ref, {complimentaryPromo:remarks});
              }

            });

            // change back the group to bfitness 0af7b240-aba0-11e7-eddc-d511a1c39612
            if (isWelcomeBackGroup && isWelcomeBackcustomer){
              batch.update(doc.ref, {vendCustomerGroupId:'0af7b240-aba0-11e7-eddc-d511a1c39612'});
              const welcomeBackGroupId = '023c72a6-e9a0-11eb-e2fd-6e9d93f83662'; // hardcode

              var rp2 = require('request-promise');
              const reqOption = 'DELETE';
              var optionsEdit = vendAddOrRemoveCustomersToGroup(welcomeBackGroupId, {"customer_ids":[customer_id]}, reqOption);

              return rp2(optionsEdit).then(function (result){
                console.log('isWelcomeBackGroup: ', result);
                //return res.status(200).send({success:true, result}); 
              }).catch(error => {
                console.log('isWelcomeBackGroupError: ', error);
                // return res.status(200).send({success:false, error}); 
              });
            }
            
            console.log("User total spent:", doc.id, totalPayments);
            batch.update(doc.ref, {totalPayments:totalPayments});
          });

          const packagesResults = results[0];
          var packageMap = {};
          var productIdPackageMap = {};
          packagesResults && packagesResults.forEach(doc=>{
            const data = doc.data();
            packageMap[doc.id] = data;
            const vendProductIds = data && data.vendProductIds;
            // console.log('vendProductId: ', data);
            vendProductIds && vendProductIds.forEach(vendProductId=>{
              productIdPackageMap[vendProductId] = doc.id;
            })
          });

          // console.log('productIdPackageMap: ', productIdPackageMap);

          const paymentsResults = results[1];
          var existingPayments = [];
          paymentsResults.forEach(doc=>{existingPayments.push(doc)});

          var updateCount = 0;
          var newPaymentCount = 0;

          const payment_type = register_sale_payments && (register_sale_payments.length>0) && register_sale_payments[0].payment_type && register_sale_payments[0].payment_type.name;
          const paymentType = payment_type;

          //if (!return_for){
            items.forEach(item=>{
              // console.log('modifyVendSale Item: ', item);
              const vendProductId = item.product_id;
              // const totalPrice = (item.price && item.tax)? (parseFloat(item.price) + parseFloat(item.tax)).toFixed(2) : item.total_price? item.total_price : null;
              const totalPrice = item.price? (parseFloat(item.price) + parseFloat(item.tax)).toFixed(2) : item.total_price? item.total_price : null;
              const tax = item.tax;
              const packageId = productIdPackageMap[vendProductId];
              console.log('modifyVendPackageId: ', packageId);
              const packageData = packageMap[packageId];

              const quantity = item.quantity;
              const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
              // console.log('renewalTermModifyVendSale: ', renewalTerm);
              // console.log('renewalTermPkg: ', packageData && packageData.renewalTerm);
  
              if(packageId){
  
                var paymentRefs = [];
                existingPayments.forEach(existingPayment=>{
  
                  // console.log('existingPayments: ', existingPayment);
  
                  // const existingVendSaleId = existingPayment.vendSaleId;
                  const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
                  // console.log('existingVendSaleId: ', existingVendSaleId);
  
                  if(existingVendSaleId === vendSaleId){
                    paymentRefs.push(existingPayment);
                  }
                });
  
                if(paymentRefs.length < quantity){
                  for(var i=0; i < quantity; i++){
                    const paymentRef = admin.firestore().collection('payments').doc();
                    paymentRefs.push(paymentRef);
                  }
                }
  
                paymentRefs.forEach(paymentRef=>{
                  var data = paymentRef.exists && paymentRef.data();
                  if(!data){
                    newPaymentCount += 1;
                    data = {
                      createdAt : moment(getTheDate(created_at)).toDate(),
                      totalPrice : totalPrice ? totalPrice : 0,
                      tax:tax, 
                      type : 'membership',
                      userId : userId,
                      packageId : packageId,
                      source : 'vend',
                      vendProductId : vendProductId,
                      vendSaleId : vendSaleId,
                      renewalTerm : renewalTerm,
                      status : status,
                      outlet: getOutletById(outlet_id),
                      invoiceNumber:invoice_number,
                      note:note,
                      paymentType:paymentType?paymentType:'FREE'
                    }
                    // console.log('Creating payment', paymentRef.id, vendSaleId, userId);
                    // data.status = status;
                    batch.set(paymentRef, data);
                  }else{
                    
                    // disable it temporarily
                    
                  // console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
                    updateCount += 1;
                    const updatedData = {
                      createdAt : moment(getTheDate(created_at)).toDate(),
                      totalPrice : totalPrice ? totalPrice : 0,
                      type : 'membership',
                      userId : userId,
                      packageId : packageId,
                      source : 'vend',
                      vendProductId : vendProductId,
                      vendSaleId : vendSaleId,
                      renewalTerm : renewalTerm,
                      status : status,
                      outlet: getOutletById(outlet_id),
                      invoiceNumber:invoice_number,
                      note:note,
                      paymentType:paymentType?paymentType:"FREE"
                    };
                    batch.update(admin.firestore().collection('payments').doc(paymentRef.id), updatedData);
                  }


                });
  
                // for (var i = 0; i < quantity; i++) {
                //   var paymentData;
                //
                //
                //
                //   if(existingPayments.length < i){
                //     const existingPayment = existingPayments[i];
                //     paymentRef = existingPayment.ref;
                //     paymentData = existingPayment.data();
                //     paymentData.status = status;
                //     console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
                //   }else{
                //     paymentRef = admin.firestore().collection('payments').doc();
                //     paymentData = {
                //       createdAt : moment(created_at).toDate(),
                //       totalPrice : totalPrice ? totalPrice : 0,
                //       type : 'membership',
                //       userId : userId,
                //       packageId : packageId,
                //       source : 'vend',
                //       vendProductId : vendProductId,
                //       vendSaleId : vendSaleId,
                //       renewalTerm : renewalTerm,
                //       status : status
                //     }
                //     console.log('Creating payment', paymentRef.id, vendSaleId, userId);
                //   }
                //   batch.set(paymentRef, paymentData);
                // }
              }
              // for freeze
              else if (vendProductId === 'a3be38de-934f-aa1c-7f69-89f8fcc16f4a'){
                var paymentRefs = [];
                existingPayments.forEach(existingPayment=>{
                  const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
                  // console.log('existingVendSaleId: ', existingVendSaleId);
  
                  if(existingVendSaleId === vendSaleId){
                    paymentRefs.push(existingPayment);
                  }
                });
  
                if(paymentRefs.length < quantity){
                  for(var i=0; i < quantity; i++){
                    const paymentRef = admin.firestore().collection('payments').doc();
                    paymentRefs.push(paymentRef);
                  }
                }
  
                paymentRefs.forEach(paymentRef=>{
                  var data = paymentRef.exists && paymentRef.data();
                  if(!data){
                    newPaymentCount += 1;
                    data = {
                      createdAt : moment(getTheDate(created_at)).toDate(),
                      totalPrice : totalPrice ? totalPrice : 0,
                      type : 'membership',
                      userId : userId,
                      // packageId : packageId,
                      freezeFor:moment(getTheDate(created_at)).toDate(),
                      source : 'freeze',
                      freezeSource: 'vend',
                      vendProductId : vendProductId,
                      vendSaleId : vendSaleId,
                      renewalTerm : renewalTerm,
                      status : status
                    }
                    // console.log('Creating payment', paymentRef.id, vendSaleId, userId);
                    // data.status = status;
                    batch.set(paymentRef, data);
                  }
                });
              }
            });
          //}
          // remove the return_for
          // else{
          //   console.log('removing the existing payment');
           
          //     batch.delete(admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId));
          
          //   // paymentRef = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId);
          // }

          if (updateCount>0 || newPaymentCount>0){
            return batch.commit();
          }
          else{
            return null;
          }
        });
      }
    }
    return Promise.resolve();
});

// // // // // vendSaleV2
// // // // exports.modifyVendSaleV2 = functions.firestore
// // // //   .document('vendSalesV2/{vendSaleId}')
// // // //   .onWrite((change, context) => {
// // // //     // Get an object with the current document value.
// // // //     // If the document does not exist, it has been deleted.
// // // //     const document = (change.after && change.after.exists) ? change.after.data() : null;

// // // //     // Get an object with the previous document value (for update or delete)
// // // //     // const oldDocument = event.data.previous.data();

// // // //     // perform desired operations ...
// // // //     if (document) {
// // // //       let {
// // // //         customer_id,
// // // //         //totals,
// // // //         total_price,
// // // //         total_price_incl,
// // // //         total_tax,
// // // //         created_at,
// // // //         line_items,
// // // //         register_sale_products,
// // // //         register_id,
// // // //         invoice_number,
// // // //         id,
// // // //         status
// // // //       } = document;

// // // //       // console.log('document: ', document);

// // // //       // console.log(customer_id, total_price, total_price_incl, total_tax, created_at, line_items, register_id, invoice_number, id, status);
// // // //       if (customer_id && typeof customer_id === 'string' && customer_id.trim().length > 0) {
// // // //         // console.log('has customer_id', customer_id);

// // // //         const items = line_items ? line_items : (register_sale_products ? register_sale_products : null);
// // // //         const vendSaleId = id;

// // // //         const packagesQuery = admin.firestore().collection('packages').get();
// // // //         const paymentsQuery = admin.firestore().collection('payments').where('vendSaleId', '==', vendSaleId).get();
// // // //         const usersQuery = admin.firestore().collection('users').where('vendCustomerId', '==', customer_id).get();

// // // //         return Promise.all([packagesQuery, paymentsQuery, usersQuery]).then(results => {
// // // //           // console.log('found users');
// // // //           const batch = admin.firestore().batch();
// // // //           // var updateCount = 0;

// // // //           const usersResults = results[2];
// // // //           var userId = null;
// // // //           usersResults.forEach(doc => {
// // // //             // updateCount += 1;
// // // //             userId = doc.id;
// // // //             var userData = doc.data();
// // // //             var totalPayments = userData && userData.totalPayments ? parseFloat(userData.totalPayments) : 0.0;
// // // //             const totalPrice = total_price_incl? total_price_incl : '0.0';
// // // //             const remarks = userData? userData.remarks? userData.remarks: " " : " ";
// // // //             totalPayments += parseFloat(totalPrice);

// // // //             items.forEach(item=>{
// // // //               // console.log('modifyVendSale Item: ', item);
// // // //               const vendProductId = item.product_id;
// // // //               if (vendProductId === 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7' && (totalPayments<=0 || !totalPayments)){
// // // //                 batch.update(doc.ref, {complimentaryPromo:remarks});
// // // //               }
// // // //             });

// // // //             console.log("User total spent:", doc.id, totalPayments);
// // // //             batch.update(doc.ref, {totalPayments:totalPayments});
// // // //           });

// // // //           const packagesResults = results[0];
// // // //           var packageMap = {};
// // // //           var productIdPackageMap = {};
// // // //           packagesResults && packagesResults.forEach(doc=>{
// // // //             const data = doc.data();
// // // //             packageMap[doc.id] = data;
// // // //             const vendProductIds = data && data.vendProductIds;
// // // //             console.log('vendProductId: ', data);
// // // //             vendProductIds && vendProductIds.forEach(vendProductId=>{
// // // //               productIdPackageMap[vendProductId] = doc.id;
// // // //             })
// // // //           });

// // // //           const paymentsResults = results[1];
// // // //           var existingPayments = [];
// // // //           paymentsResults.forEach(doc=>{
// // // //             existingPayments.push(doc);
// // // //           });

// // // //           var updateCount = 0;
// // // //           var newPaymentCount = 0;

// // // //           items.forEach(item=>{
// // // //             // console.log('modifyVendSale Item: ', item);
// // // //             const vendProductId = item.product_id;
// // // //             // const totalPrice = (item.price&& item.tax)? (parseFloat(item.price) + parseFloat(item.tax)).toFixed(2) : item.total_price? item.total_price : null;
// // // //             const packageId = productIdPackageMap[vendProductId];
// // // //             // console.log('modifyVendPackageId: ', packageId);
// // // //             const packageData = packageMap[packageId];
// // // //             const quantity = item.quantity;
// // // //             const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';

// // // //             if(packageId){

// // // //               var paymentRefs = [];
// // // //               existingPayments.forEach(existingPayment=>{

// // // //                 console.log('existingPayments: ', existingPayment);

// // // //                 // const existingVendSaleId = existingPayment.vendSaleId;
// // // //                 const existingVendSaleId = existingPayment.get('vendSaleId')? existingPayment.get('vendSaleId'):existingPayment.vendSaleId?existingPayment.vendSaleId:null;
// // // //                 console.log('existingVendSaleId: ', existingVendSaleId);

// // // //                 if(existingVendSaleId === vendSaleId){
// // // //                   paymentRefs.push(existingPayment);
// // // //                 }
// // // //               });

// // // //               if(paymentRefs.length < quantity){
// // // //                 for(var i=0; i < quantity; i++){
// // // //                   const paymentRef = admin.firestore().collection('payments').doc();
// // // //                   paymentRefs.push(paymentRef);
// // // //                 }
// // // //               }

// // // //               paymentRefs.forEach(paymentRef=>{
// // // //                 var data = paymentRef.exists && paymentRef.data();
// // // //                 if(!data){
// // // //                   newPaymentCount += 1;
// // // //                   data = {
// // // //                     createdAt : moment(getTheDate(created_at)).toDate(),
// // // //                     totalPrice : total_price_incl ? total_price_incl : 0,
// // // //                     tax: total_tax,
// // // //                     type : 'membership',
// // // //                     userId : userId,
// // // //                     packageId : packageId,
// // // //                     source : 'vend',
// // // //                     vendProductId : vendProductId,
// // // //                     vendSaleId : vendSaleId,
// // // //                     renewalTerm : renewalTerm,
// // // //                     status : status
// // // //                   }
// // // //                   console.log('Creating payment', paymentRef.id, vendSaleId, userId);
// // // //                   // data.status = status;
// // // //                   batch.set(paymentRef, data);
// // // //                 }
// // // //                 else{
                  
// // // //                   // console.log('Updating existing payment', paymentRef.id, vendSaleId, userId);
// // // //                   // updateCount += 1;
// // // //                   // const updatedData = {
// // // //                   //   createdAt : moment(getTheDate(created_at)).toDate(),
// // // //                   //   totalPrice : total_price_incl ? total_price_incl : 0,
// // // //                   //   tax: total_tax,
// // // //                   //   type : 'membership',
// // // //                   //   userId : userId,
// // // //                   //   packageId : packageId,
// // // //                   //   source : 'vend',
// // // //                   //   vendProductId : vendProductId,
// // // //                   //   vendSaleId : vendSaleId,
// // // //                   //   renewalTerm : renewalTerm,
// // // //                   //   status : status
// // // //                   // };
// // // //                   // batch.update(admin.firestore().collection('payments').doc(paymentRef.id), updatedData);
// // // //                 }
// // // //               });
// // // //             }
// // // //           });

// // // //           if (updateCount>0 || newPaymentCount>0){
// // // //             return batch.commit();
// // // //           }
// // // //           else{
// // // //             return null;
// // // //           }
// // // //         });
// // // //       }
// // // //     }

// // // //     return Promise.resolve();
// // // // });

function objCompare(a, b) {
  return JSON.stringify(a) === JSON.stringify(b);
}

exports.modifyClassBooking = functions.firestore
  .document('bookings/{bookingId}')
  .onWrite((change, context) => {
    const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
    if(!document){
      //deleted
      console.log('removing booking: ', document);
      return null;
    }
    // Get an object with the previous document value (for update or delete)
    // const oldDocument = event.data.previous.data();

    // perform desired operations ...
    const userId = document && document.userId;
    const hostId = document && document.hostId;
    const type = document && document.type;
    const trainerId = document && document.trainerId;
    const status = document && document.status;
    const classId = document.classId;
    const roomId = document.roomId;
    const bookingId = change.after.id;
    const changedBefore = change.before && change.before.data();
    const statusBefore = changedBefore && changedBefore.status;
    const userMap = (document && document.userMap) || {};
    const beforeUserMap = (changedBefore && changedBefore.userMap) || {};
    console.log('theUserMapLength: ', Object.keys(userMap).length);
    console.log('beforeUserMapLength: ', Object.keys(beforeUserMap).length);
    const location = document && document.location;
    const startAt = document && document.startAt;
    // const whLink = `https://api.whatsapp.com/send?text=https://app.babel.fit/babelexclusive/${bookingId}`;
    const whLink = `https://api.whatsapp.com/send?text=https%3A%2F%2Fapp.babel.fit%2Fbabelexclusive/${bookingId}`

    // no changes in userMap;
    if (userId && (type === 'babelExclusive') && Object.keys(userMap).length === Object.keys(beforeUserMap).length) {
      console.log("booking changed by: ", trainerId);
      console.log('booking status: ', status);
      const timestamp = admin.firestore.FieldValue.serverTimestamp();
      let updatedPayment = {paymentsUpdatedAt:timestamp};
      
      const userQuery = userId && admin.firestore().collection('users').doc(userId).get();
      const trainerQuery = trainerId && admin.firestore().collection('users').doc(trainerId).get();
      const classQuery = classId && admin.firestore().collection('classes').doc(classId).get();
      const roomQuery = roomId && admin.firestore().collection('rooms').doc(roomId).get();

      return Promise.all([userQuery, trainerQuery, classQuery, roomQuery]).then(results=>{
        const hostRes = results[0];
        const trainerRes = results[1];
        const classRes = results[2];
        const roomRes = results[3];

        var hostData = hostRes && hostRes.data();
        var trainerData = trainerRes && trainerRes.data();
        var classData = classRes && classRes.data();
        var roomData = roomRes && roomRes.data();
        var trainerPhone = trainerData && trainerData.phone;
        const phoneString = trainerPhone && getPhoneNumberFormat(trainerPhone);
        // const phoneString = trainerPhone && (trainerPhone.charAt(0)!='6' && trainerPhone.charAt(1)!='0')? `60${trainerPhone}`:
        //   (trainerPhone.charAt(0)!='6' && trainerPhone.charAt(1)==='0')?  `6${trainerPhone}`:trainerPhone;
        const hostPhone = hostData && hostData.phone;
        const userPhoneString = hostPhone && getPhoneNumberFormat(hostPhone);
        
        const PrivateClassCredit = hostData && hostData.PrivateClassCredit;

        if (status && status === 'CONFIRM' && statusBefore!=status && PrivateClassCredit && PrivateClassCredit >= 0){
          // return sendConfirmationClassEmailToUser(trainerData, hostData, document, classData, roomData, bookingId).then(()=>{
          return sendConfirmationClassEmailToUser(hostData.email, hostData.name, trainerData.name, classData.name, location, moment(getTheDate(startAt)).tz('Asia/Kuala_Lumpur').format('DD-MM-YYYY, h:mm a'), whLink).then(()=>{   
            if (userPhoneString){
               // send whatsapp notification
                var optionEdit = { method: 'POST',
                // url: `https://us-central1-babelasia-37615.cloudfunctions.net/messageBird-appTrainers/test`,
                url:`https://flows.messagebird.com/flows/0c31914f-301b-4c78-90ad-cc7136b6d538/invoke`,
                body:{
                  // phone : userPhoneString,
                  // text : `Hi ${hostData.name}, this is ${trainerData.name} from BABEL ${document.location}. I'm happy to inform that your entourage's exclusive ${classData.name} class has been confirmed for ${moment(getTheDate(document.startAt)).format('DD/MM/YYYY')} & ${moment(getTheDate(document.startAt)).format('HH:MM')}! ${classData.name} at ${roomData.name} & ${document.location} with ${trainerData.name}. Share this link with your entourage guestlist, so we know when to receive you and yours. https://app.babel.fit/babelexclusive/${bookingId}`,
                  phoneNumber: userPhoneString,
                  guestName: hostData.name,
                  trainerName: trainerData.name,
                  outlet: `${document.location}`,
                  className: classData.name,
                  classTime: `${moment(getTheDate(document.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY, h:mm a')}`,
                  // link: `https://app.babel.fit/babelexclusive/${bookingId}`
                  link:whLink
                },
                json:true 
              };

              let rp2 = require('request-promise');
              return rp2(optionEdit).then(function (res){
                // write to firestore?
                return admin.firestore().collection('bookings').doc(bookingId).update({
                  confirmEmailSend:true,
                  confirmEmailSendAt:timestamp,
                  confirmWhatsappSend:true,
                  confirmWhatsappSendAt:timestamp
                })
              
              }).catch(error=>{
                console.log('error:  ', error);
              })
            }
          });
        }

        else if (status && status === 'CANCEL' && statusBefore!=status){
          const dateTime = moment(getTheDate(document.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY, h:mm a');
          // return sendCancelClassEmailToUser(trainerData, hostData, document, classData, roomData, bookingId).then(()=>{
          return sendCancelClassEmailToUser(hostData.email, hostData.name, trainerData.name, classData.name, location, dateTime).then(()=>{
            // send whatsapp notification
             var optionEdit = { 
              method: 'POST',
              // url: `https://us-central1-babelasia-37615.cloudfunctions.net/messageBird-appTrainers/test`,
              url:`https://flows.messagebird.com/flows/cf6e2c52-cf27-4144-9fe7-b0eb2827aacb/invoke`,
              body:{
                phoneNumber : userPhoneString,
                hostName: hostData.name,
                className: classData.name,
                roomName: roomData.name,
                location,
                classDate: `${moment(getTheDate(document.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY')}`,
                classTime: `${moment(getTheDate(document.startAt)).tz('Asia/Kuala_Lumpur').format('h:mm a')}`,
                trainerName: trainerData.name
              },
              json:true
            };

            let rp2 = require('request-promise');
            return rp2(optionEdit).then(function (res){
              // write to firestore?
              // console.log('trainer result: ', res);
              return admin.firestore().collection('bookings').doc(bookingId).update({
                cancelEmailSend:true,
                cancelEmailSendAt:timestamp,
                cancelWhatsappSend:true,
                cancelWhatsappSendAt:timestamp
              })
              
            }).catch(error=>{
              console.log('error:  ', error);
            })
          });
        }
        
      // return admin.firestore().collection('users').doc(userId).update(updatedPayment);
      })
    }

    else if (Object.keys(userMap).length > Object.keys(beforeUserMap).length && status && status === 'CONFIRM'){
      console.log('new member added...');
      var sendWhatsappToGuest = false;
      var newUserObj = {};
      var newUserData;
      // new guest or member just join in
      Object.entries(userMap).forEach(([key, value]) => {
        Object.entries(beforeUserMap).forEach(([key1, value1])=>{
          if (key !== key1){
            sendWhatsappToGuest = true;
            newUserObj[key]=value;
            newUserData=value;
            newUserData.userId=key;
          }
        });
      });

      console.log('newUserData: ', newUserData);

      if (newUserData){
        const userPhoneString = newUserData && newUserData.phoneNumber;
        const userName = newUserData && newUserData.name;
        const userQuery = userId && admin.firestore().collection('users').doc(userId).get();
        const trainerQuery = trainerId && admin.firestore().collection('users').doc(trainerId).get();
        const classQuery = classId && admin.firestore().collection('classes').doc(classId).get();
        const roomQuery = roomId && admin.firestore().collection('rooms').doc(roomId).get();

        return Promise.all([userQuery, trainerQuery, classQuery, roomQuery]).then(results=>{
          const hostRes = results[0];
          const trainerRes = results[1];
          const classRes = results[2];
          const roomRes = results[3];
  
          var hostData = hostRes && hostRes.data();
          var trainerData = trainerRes && trainerRes.data();
          var classData = classRes && classRes.data();
          var roomData = roomRes && roomRes.data();
          var trainerPhone = trainerData && trainerData.phone;
          const phoneString = trainerPhone && getPhoneNumberFormat(trainerPhone);
          
        // return sendConfirmationClassEmailToUser(trainerData, newUserData, document, classData, roomData, bookingId).then(()=>{
        return sendConfirmationClassEmailToUser(hostData.email, hostData.name, trainerData.name, classData.name, location, moment(getTheDate(startAt)).tz('Asia/Kuala_Lumpur').format('DD-MM-YYYY, h:mm a'), whLink).then(()=>{ 
          if (userPhoneString){
             // send whatsapp notification
              var optionEdit = { method: 'POST',
              // url: `https://us-central1-babelasia-37615.cloudfunctions.net/messageBird-appTrainers/test`,
              url:`https://flows.messagebird.com/flows/1d4d79f6-7ec7-4b53-ad1a-c463aadb3285/invoke`,
              body:{
                phoneNumber: userPhoneString && getPhoneNumberFormat(userPhoneString), // guest phone number
                guestName: userName,
                className: classData && classData.name,
                location,
                hostName: hostData.name,
                dateTime: `${moment(getTheDate(document.startAt)).format('DD/MM/YYYY, h:mm a')}!`
                // phone : userPhoneString,
                // text : `Hi ${userName}, this is ${trainerData.name} from ${document.location}. I'm happy to inform that your entourage's exclusive ${classData.name} class has been confirmed for ${moment(getTheDate(document.startAt)).format('DD/MM/YYYY')} & ${moment(getTheDate(document.startAt)).format('HH:MM')}! ${classData.name} at ${roomData.name} & ${document.location} with ${trainerData.name}. Share this link with your entourage guestlist, so we know when to receive you and yours. https://app.babel.fit/babelexclusive/${bookingId}`,
              },
              json:true 
            };

            let rp2 = require('request-promise');
            return rp2(optionEdit).then(function (res){
              // write to firestore?
              return admin.firestore().collection('bookings').doc(bookingId).update({
                confirmEmailSend:true,
                confirmEmailSendAt:timestamp,
                confirmWhatsappSend:true,
                confirmWhatsappSendAt:timestamp
              })
            
            }).catch(error=>{
              console.log('error:  ', error);
            })
          }
        });
      });
      // const userQuery = userId && admin.firestore().collection('users').get();
      // userMap && Object.

    }
    // else if (type === 'personalTraining'){
    //   console.log('personal training type: ', type);
    //   const paymentRef = admin.firestore().collection('payments').where('userId', '==', userId).where('type', '==', 'personalTraining').get();

    //   return Promise.all([paymentRef]).then(result=>{
    //     const paymentResult = result[0];
    //     var totalAcuityCredit = 0;

    //     paymentResult && paymentResult.forEach(doc=>{
    //       const paymentData = doc.data();
    //       const credit = paymentData.credit;
    //       const status = paymentData.status;
    //       const userId = paymentData.userId;
    //       if (credit && (status==='CLOSED') && userId){
    //         totalAcuityCredit = totalAcuityCredit + credit;
    //       }
    //     });

    //     // console.log('totalAcuityCredit: ', totalAcuityCredit);

    //     const updatedPayment = {
    //       paymentsUpdatedAt:timestamp,
    //       totalAcuityCredit:totalAcuityCredit
    //     }

    //     return admin.firestore().collection('users').doc(userId).update(updatedPayment);
    //   });    
    // }
    else{
      return Promise.reject(new Error("error", document));
    }
  }
});

exports.onCreateClassBooking = functions.firestore.document('bookings/{bookingId}')
  .onCreate((snap, context)=>{
    const document = snap.data();
    // const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
    if(!document){
      //deleted
      return null;
    }
    const type = document && document.type;
    const trainerId = document.trainerId;
    const hostId = document.hostId;

    if (type && type === 'babelExclusive' && trainerId && hostId){
      const userId = document.userId;
      const status = document.status;
      const location = document.location;
      const startAt = document.startAt;
      const classId = document.classId;
      const roomId = document.roomId;

      const userQuery = userId && admin.firestore().collection('users').doc(userId).get();
      const trainerQuery = trainerId && admin.firestore().collection('users').doc(trainerId).get();
      const classQuery = classId && admin.firestore().collection('classes').doc(classId).get();
      const roomQuery = roomId && admin.firestore().collection('rooms').doc(roomId).get();

      return Promise.all([userQuery, trainerQuery, classQuery, roomQuery]).then(results=>{
        const hostRes = results[0];
        const trainerRes = results[1];
        const classRes = results[2];
        const roomRes = results[3];

        var hostData = hostRes && hostRes.data();
        var trainerData = trainerRes && trainerRes.data();
        var classData = classRes && classRes.data();
        var roomData = roomRes && roomRes.data();
        var trainerPhone = trainerData && trainerData.phone;
        const phoneString = getPhoneNumberFormat(trainerPhone);
        const userPhone = hostData && hostData.phone;
        const userPhoneString = getPhoneNumberFormat(userPhone);
        
        const PrivateClassCredit = hostData && hostData.PrivateClassCredit;

        // todo: update the booking status in firestore
        return sendClassEmailToTrainer(trainerData, hostData, document, classData, roomData, snap).then(()=>{
          return admin.firestore().collection('users').doc(userId).update({
            PrivateClassCredit:PrivateClassCredit-1
          }).then(()=>{
            // send notification to whatsapp too?

          var optionEdit = { method: 'POST',
            // url: `https://us-central1-babelasia-37615.cloudfunctions.net/messageBird-appTrainers/test`,
            url:`https://flows.messagebird.com/flows/ad36a33d-5a41-4dd6-86ca-07b5f3a27825/invoke`,
            body:{
              phoneNumber: phoneString || '',
              trainerName: (trainerData && trainerData.name) || '',
              hostName: (hostData && hostData.name) || '',
              className: (classData && classData.name) || '',
              roomName: (roomData && roomData.name) || '',
              location: location || '',
              classDate: startAt && moment(getTheDate(startAt)).tz('Asia/Kuala_Lumpur').format('DD-MM-YYYY'),
              classTime: startAt && moment(getTheDate(startAt)).tz('Asia/Kuala_Lumpur').format('hh:mm a'),
              hostPhoneNumber: hostData.phone,
              bookingLink: `https://app.babel.fit/babelexclusive/${snap.id}/trainer`
              // text : `Hi ${trainerData.name}, you have just received a booking request from ${hostData.name} for ${classData.name} at ${roomData.name} & ${document.location} If the date and time are agreeable, please tap this link to confirm the booking with ${hostData.name}. https://app.babel.fit/babelexclusive/${snap.id} . However, if you aren't able to accommodate the requested time and date, please tap the link to reschedule with ${hostData.name}, phone number: ${userPhoneString}`,
            },
            json:true
          };

            console.log('trainerPhone: ', phoneString);

            let rp2 = require('request-promise');
            return rp2(optionEdit).then(function (res){
              // write to firestore?
              // console.log('trainer result: ', res);
             
            }).catch(error=>{
              console.log('error:  ', error);
            })
          });
        })
      });
     

    }
    else{
      return Promise.resolve(); 
    }
    
});

// when booking is created, send this email to trainer
function sendClassEmailToTrainer(trainerData, hostData, bookingData, classData, roomData, snap){
  // console.log("sending class email to trainer", trainerData, bookingData);
  const trainerName = (trainerData && trainerData.name) || '';
  const hostName = (hostData && hostData.name) || '';
  var data = {
    from: `Babel <hello@babel.fit>`,
    subject: `[Babel] - Booking request`,
    html: `<p>Dear ${trainerName},</p>
          <p>Hey ${trainerName}, you have just received a booking request from ${hostName} for ${classData.name} at ${roomData.name} & ${bookingData.location} on ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY')} & ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('HH:MM')}.</p>
          <p>If the date and time are agreeable, please tap this link to confirm the booking with ${hostName}</p>
          <p>https://app.babel.fit/babelexclusive/${snap.id}</p>
          <p>However, if you aren't able to accommodate the requested time and date, please tap the link to reschedule with ${hostName}, phone number ${hostData.phone}</p>
          <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
          <p>-Babel Team</p>`,
    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    // to: `${email}`,
    to:`${trainerData.email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `ops@babel.fit`
  }
  return sendEmail(data);
}

function sendWelcomeNewVisitorEmail (email, name, goal){
  var data = {
    // from: 'billing@babel.fit',
    sender: 'Babel',
    from: 'Babel <hello@babel.fit>',
    subject: `Welcome to Babel, ${name}!`,
    html: 
    `<!doctype html>
    <html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
        <head>
            <!-- NAME: ANNOUNCE -->
            <!--[if gte mso 15]>
            <xml>
                <o:OfficeDocumentSettings>
                <o:AllowPNG/>
                <o:PixelsPerInch>96</o:PixelsPerInch>
                </o:OfficeDocumentSettings>
            </xml>
            <![endif]-->
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>*|MC:SUBJECT|*</title>
            
        <style type="text/css">
        p{
          margin:10px 0;
          padding:0;
        }
        table{
          border-collapse:collapse;
        }
        h1,h2,h3,h4,h5,h6{
          display:block;
          margin:0;
          padding:0;
        }
        img,a img{
          border:0;
          height:auto;
          outline:none;
          text-decoration:none;
        }
        body,#bodyTable,#bodyCell{
          height:100%;
          margin:0;
          padding:0;
          width:100%;
        }
        .mcnPreviewText{
          display:none !important;
        }
        #outlook a{
          padding:0;
        }
        img{
          -ms-interpolation-mode:bicubic;
        }
        table{
          mso-table-lspace:0pt;
          mso-table-rspace:0pt;
        }
        .ReadMsgBody{
          width:100%;
        }
        .ExternalClass{
          width:100%;
        }
        p,a,li,td,blockquote{
          mso-line-height-rule:exactly;
        }
        a[href^=tel],a[href^=sms]{
          color:inherit;
          cursor:default;
          text-decoration:none;
        }
        p,a,li,td,body,table,blockquote{
          -ms-text-size-adjust:100%;
          -webkit-text-size-adjust:100%;
        }
        .ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
          line-height:100%;
        }
        a[x-apple-data-detectors]{
          color:inherit !important;
          text-decoration:none !important;
          font-size:inherit !important;
          font-family:inherit !important;
          font-weight:inherit !important;
          line-height:inherit !important;
        }
        .templateContainer{
          max-width:600px !important;
        }
        a.mcnButton{
          display:block;
        }
        .mcnImage,.mcnRetinaImage{
          vertical-align:bottom;
        }
        .mcnTextContent{
          word-break:break-word;
        }
        .mcnTextContent img{
          height:auto !important;
        }
        .mcnDividerBlock{
          table-layout:fixed !important;
        }
      /*
      @tab Page
      @section Heading 1
      @style heading 1
      */
        h1{
          /*@editable*/color:#222222;
          /*@editable*/font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
          /*@editable*/font-size:40px;
          /*@editable*/font-style:normal;
          /*@editable*/font-weight:bold;
          /*@editable*/line-height:150%;
          /*@editable*/letter-spacing:normal;
          /*@editable*/text-align:justify;
        }
      /*
      @tab Page
      @section Heading 2
      @style heading 2
      */
        h2{
          /*@editable*/color:#222222;
          /*@editable*/font-family:Helvetica;
          /*@editable*/font-size:34px;
          /*@editable*/font-style:normal;
          /*@editable*/font-weight:bold;
          /*@editable*/line-height:150%;
          /*@editable*/letter-spacing:normal;
          /*@editable*/text-align:left;
        }
      /*
      @tab Page
      @section Heading 3
      @style heading 3
      */
        h3{
          /*@editable*/color:#444444;
          /*@editable*/font-family:Helvetica;
          /*@editable*/font-size:22px;
          /*@editable*/font-style:normal;
          /*@editable*/font-weight:bold;
          /*@editable*/line-height:150%;
          /*@editable*/letter-spacing:normal;
          /*@editable*/text-align:left;
        }
      /*
      @tab Page
      @section Heading 4
      @style heading 4
      */
        h4{
          /*@editable*/color:#aaaaaa;
          /*@editable*/font-family:Georgia;
          /*@editable*/font-size:20px;
          /*@editable*/font-style:italic;
          /*@editable*/font-weight:normal;
          /*@editable*/line-height:125%;
          /*@editable*/letter-spacing:normal;
          /*@editable*/text-align:center;
        }
      /*
      @tab Header
      @section Header Container Style
      */
        #templateHeader{
          /*@editable*/background-color:#111430;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:center;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:40px;
          /*@editable*/padding-bottom:0px;
        }
      /*
      @tab Header
      @section Header Interior Style
      */
        .headerContainer{
          /*@editable*/background-color:#transparent;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:center;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:0px;
          /*@editable*/padding-bottom:0px;
        }
      /*
      @tab Header
      @section Header Text
      */
        .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
          /*@editable*/color:#757575;
          /*@editable*/font-family:Helvetica;
          /*@editable*/font-size:16px;
          /*@editable*/line-height:150%;
          /*@editable*/text-align:left;
        }
      /*
      @tab Header
      @section Header Link
      */
        .headerContainer .mcnTextContent a,.headerContainer .mcnTextContent p a{
          /*@editable*/color:#007C89;
          /*@editable*/font-weight:normal;
          /*@editable*/text-decoration:underline;
        }
      /*
      @tab Body
      @section Body Container Style
      */
        #templateBody{
          /*@editable*/background-color:#c2b190;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:50% 50%;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:0px;
          /*@editable*/padding-bottom:0px;
        }
      /*
      @tab Body
      @section Body Interior Style
      */
        .bodyContainer{
          /*@editable*/background-color:#transparent;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:center;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:0px;
          /*@editable*/padding-bottom:0px;
        }
      /*
      @tab Body
      @section Body Text
      */
        .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
          /*@editable*/color:#757575;
          /*@editable*/font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
          /*@editable*/font-size:16px;
          /*@editable*/line-height:150%;
          /*@editable*/text-align:left;
        }
      /*
      @tab Body
      @section Body Link
      */
        .bodyContainer .mcnTextContent a,.bodyContainer .mcnTextContent p a{
          /*@editable*/color:#007C89;
          /*@editable*/font-weight:normal;
          /*@editable*/text-decoration:underline;
        }
      /*
      @tab Footer
      @section Footer Style
      */
        #templateFooter{
          /*@editable*/background-color:#222222;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:center;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:30px;
          /*@editable*/padding-bottom:50px;
        }
      /*
      @tab Footer
      @section Footer Interior Style
      */
        .footerContainer{
          /*@editable*/background-color:#transparent;
          /*@editable*/background-image:none;
          /*@editable*/background-repeat:no-repeat;
          /*@editable*/background-position:center;
          /*@editable*/background-size:cover;
          /*@editable*/border-top:0;
          /*@editable*/border-bottom:0;
          /*@editable*/padding-top:0;
          /*@editable*/padding-bottom:0;
        }
      /*
      @tab Footer
      @section Footer Text
      */
        .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
          /*@editable*/color:#FFFFFF;
          /*@editable*/font-family:Helvetica;
          /*@editable*/font-size:12px;
          /*@editable*/line-height:150%;
          /*@editable*/text-align:center;
        }
      /*
      @tab Footer
      @section Footer Link
      */
        .footerContainer .mcnTextContent a,.footerContainer .mcnTextContent p a{
          /*@editable*/color:#FFFFFF;
          /*@editable*/font-weight:normal;
          /*@editable*/text-decoration:underline;
        }
      @media only screen and (min-width:768px){
        .templateContainer{
          width:600px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        body,table,td,p,a,li,blockquote{
          -webkit-text-size-adjust:none !important;
        }
    
    }	@media only screen and (max-width: 480px){
        body{
          width:100% !important;
          min-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnRetinaImage{
          max-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImage{
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
          max-width:100% !important;
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnBoxedTextContentContainer{
          min-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupContent{
          padding:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
          padding-top:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
          padding-top:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardBottomImageContent{
          padding-bottom:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupBlockInner{
          padding-top:0 !important;
          padding-bottom:0 !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupBlockOuter{
          padding-top:9px !important;
          padding-bottom:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnTextContent,.mcnBoxedTextContentColumn{
          padding-right:18px !important;
          padding-left:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
          padding-right:18px !important;
          padding-bottom:0 !important;
          padding-left:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcpreview-image-uploader{
          display:none !important;
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Heading 1
      @tip Make the first-level headings larger in size for better readability on small screens.
      */
        h1{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Heading 2
      @tip Make the second-level headings larger in size for better readability on small screens.
      */
        h2{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Heading 3
      @tip Make the third-level headings larger in size for better readability on small screens.
      */
        h3{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Heading 4
      @tip Make the fourth-level headings larger in size for better readability on small screens.
      */
        h4{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Boxed Text
      @tip Make the boxed text larger in size for better readability on small screens. We recommend a font size of at least 16px.
      */
        .mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Header Text
      @tip Make the header text larger in size for better readability on small screens.
      */
        .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Body Text
      @tip Make the body text larger in size for better readability on small screens. We recommend a font size of at least 16px.
      */
        .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
      /*
      @tab Mobile Styles
      @section Footer Text
      @tip Make the footer content text larger in size for better readability on small screens.
      */
        .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
          /*@editable*/font-size:12px !important;
          /*@editable*/line-height:150% !important;
        }
    
    }</style></head>
        <body>
            <!--*|IF:Your Fitness Sanctuary|*-->
            <!--[if !gte mso 9]><!----><span class="mcnPreviewText" style="display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;">Your Fitness Sanctuary</span><!--<![endif]-->
            <!--*|END:IF|*-->
            <center>
                <table align="center" border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable">
                    <tr>
                        <td align="center" valign="top" id="bodyCell">
                            <!-- BEGIN TEMPLATE // -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                <tr>
                                    <td align="center" valign="top" id="templateHeader" data-template-container>
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer">
                                            <tr>
                                                <td valign="top" class="headerContainer"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:0px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 0px; padding-left: 0px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/e5fd007d-5f9b-6bbd-fb59-f9a04aaed64e.png" width="20.900000000000002" style="max-width:418px; padding-bottom: 0; display: inline !important; vertical-align: bottom;" class="mcnRetinaImage">
                                        
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width:100%;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%; padding: 10px 18px;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #111430;">
                        <tbody><tr>
                            <td>
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        <a href="https://www.babel.fit/" title="" class="" target="_blank">
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/08b5f3b7-297c-6c1e-4747-8aeb589fd494.png" width="564" style="max-width: 1080px; padding-bottom: 0px; vertical-align: bottom; display: inline !important; border-radius: 0%;" class="mcnImage">
                                        </a>
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%; min-width:100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #E8C888;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;">
                            
                                <p style="text-align: left;color: #E8C888;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;">Hey&nbsp;${name},<br>
    <br>
    Welcome to Babel and Thank You for Visiting.<br>
    <br>
    Babel was founded in 2017, when we introduced our first club in Menara Ken, TTDI.<br>
    <br>
    Since then, we now have clubs around Kuala Lumpur and have supported thousands of members in achieving their goals through experience-driven Group Classes and&nbsp;expert Personal Training, both paired with our&nbsp;world class gym equipment.<br>
    <br>
    We are on a mission to provide our members with the best possible&nbsp;training in the most comfortable of spaces, that is the Babel way.<br>
    <br>
    Now that you have seen Babel first hand ${name}, we look forward to supporting you on your own journey to ${goal} and being part of our fitness sanctuary.<br>
    <br>
    Best Regards,<br>
    <br>
    <em>The Babel Team</em>&nbsp;</p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        <a href="https://www.babel.fit/all-classes" title="" class="" target="_blank">
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/3afe29dd-34bc-1c54-a8dc-2f394e2667dc.png" width="564" style="max-width:1072px; padding-bottom: 0; display: inline !important; vertical-align: bottom;" class="mcnImage">
                                        </a>
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        <a href="https://www.babel.fit/personal-training" title="" class="" target="_blank">
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/987b4ea5-aaf8-6478-7eab-b26497037730.png" width="564" style="max-width:1080px; padding-bottom: 0; display: inline !important; vertical-align: bottom;" class="mcnImage">
                                        </a>
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageGroupBlock">
        <tbody class="mcnImageGroupBlockOuter">
            
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageGroupBlockInner">
                        
                        <table align="left" width="273" border="0" cellpadding="0" cellspacing="0" class="mcnImageGroupContentContainer">
                                <tbody><tr>
                                    <td class="mcnImageGroupContent" valign="top" style="padding-left: 9px; padding-top: 0; padding-bottom: 0;">
                                    
                                        <a href="https://www.instagram.com/tv/CUMKCQhpdKI/?igshid=YmMyMTA2M2Y=" title="" class="" target="_blank">
                                            <img alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/8724e2a1-2ef2-b414-a6de-4e7e51fe004a.png" width="264" style="max-width: 1080px; padding-bottom: 0px; border-radius: 0%;" class="mcnImage">
                                        </a>
                                    
                                    </td>
                                </tr>
                            </tbody></table>
                        
                        <table align="right" width="273" border="0" cellpadding="0" cellspacing="0" class="mcnImageGroupContentContainer">
                                <tbody><tr>
                                    <td class="mcnImageGroupContent" valign="top" style="padding-right: 9px; padding-top: 0; padding-bottom: 0;">
                                    
                                        <a href="https://www.instagram.com/tv/CUEm-T-Jtcm/?igshid=YmMyMTA2M2Y=" title="" class="" target="_blank">
                                            <img alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/6d9cced3-1c7d-37bc-685e-3382a7ecafca.png" width="264" style="max-width: 1068px; padding-bottom: 0px; border-radius: 0%;" class="mcnImage">
                                        </a>
                                    
                                    </td>
                                </tr>
                            </tbody></table>
                        
                    </td>
                </tr>
            
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        <a href="https://www.babel.fit/perks" title="" class="" target="_blank">
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/3ba3a48d-80cb-b49b-1856-5d048f09887e.png" width="564" style="max-width:1080px; padding-bottom: 0; display: inline !important; vertical-align: bottom;" class="mcnImage">
                                        </a>
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width:100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width:100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0; text-align:center;">
                                    
                                        
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/9ae49e41-5de8-a3c1-2082-76f09d10bac4.png" width="564" style="max-width:1080px; padding-bottom: 0; display: inline !important; vertical-align: bottom;" class="mcnImage">
                                        
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageGroupBlock">
        <tbody class="mcnImageGroupBlockOuter">
            
                <tr>
                    <td valign="top" style="padding:9px" class="mcnImageGroupBlockInner">
                        
                        <table align="left" width="273" border="0" cellpadding="0" cellspacing="0" class="mcnImageGroupContentContainer">
                                <tbody><tr>
                                    <td class="mcnImageGroupContent" valign="top" style="padding-left: 9px; padding-top: 0; padding-bottom: 0;">
                                    
                                        <a href="https://api.whatsapp.com/send?phone=60163193520&text=Hi%2C%20Babel.%20I%20want%20to%20join%20the%20TTDI%20club.%20Please%20help%20me%20out%2C%20Thanks%21" title="" class="" target="_blank">
                                            <img alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/20200cad-37d5-50c9-a205-939efe7a3f36.png" width="264" style="max-width: 2084px; padding-bottom: 0px; border-radius: 0%;" class="mcnImage">
                                        </a>
                                    
                                    </td>
                                </tr>
                            </tbody></table>
                        
                        <table align="right" width="273" border="0" cellpadding="0" cellspacing="0" class="mcnImageGroupContentContainer">
                                <tbody><tr>
                                    <td class="mcnImageGroupContent" valign="top" style="padding-right: 9px; padding-top: 0; padding-bottom: 0;">
                                    
                                        <a href="https://api.whatsapp.com/send?phone=60163723520&text=Hi%2C%20Babel.%20I%20want%20to%20join%20the%20KLCC%20club.%20Please%20help%20me%20out%2C%20Thanks%21" title="" class="" target="_blank">
                                            <img alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/03e5cd67-042a-ffbf-7871-a35ae70885a0.png" width="264" style="max-width: 2084px; padding-bottom: 0px; border-radius: 0%;" class="mcnImage">
                                        </a>
                                    
                                    </td>
                                </tr>
                            </tbody></table>
                        
                    </td>
                </tr>
            
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowBlock" style="min-width:100%;">
        <tbody class="mcnFollowBlockOuter">
            <tr>
                <td align="center" valign="top" style="padding:9px" class="mcnFollowBlockInner">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowContentContainer" style="min-width:100%;">
        <tbody><tr>
            <td align="center" style="padding-left:9px;padding-right:9px;">
                <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;" class="mcnFollowContent">
                    <tbody><tr>
                        <td align="center" valign="top" style="padding-top:9px; padding-right:9px; padding-left:9px;">
                            <table align="center" border="0" cellpadding="0" cellspacing="0">
                                <tbody><tr>
                                    <td align="center" valign="top">
                                        <!--[if mso]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0">
                                        <tr>
                                        <![endif]-->
                                        
                                            <!--[if mso]>
                                            <td align="center" valign="top">
                                            <![endif]-->
                                            
                                            
                                                <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;">
                                                    <tbody><tr>
                                                        <td valign="top" style="padding-right:10px; padding-bottom:9px;" class="mcnFollowContentItemContainer">
                                                            <table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowContentItem">
                                                                <tbody><tr>
                                                                    <td align="left" valign="middle" style="padding-top:5px; padding-right:10px; padding-bottom:5px; padding-left:9px;">
                                                                        <table align="left" border="0" cellpadding="0" cellspacing="0" width="">
                                                                            <tbody><tr>
                                                                                
                                                                                    <td align="center" valign="middle" width="24" class="mcnFollowIconContent">
                                                                                        <a href="http://www.babel.fit" target="_blank"><img src="https://cdn-images.mailchimp.com/icons/social-block-v2/color-link-48.png" alt="Website" style="display:block;" height="24" width="24" class=""></a>
                                                                                    </td>
                                                                                
                                                                                
                                                                            </tr>
                                                                        </tbody></table>
                                                                    </td>
                                                                </tr>
                                                            </tbody></table>
                                                        </td>
                                                    </tr>
                                                </tbody></table>
                                            
                                            <!--[if mso]>
                                            </td>
                                            <![endif]-->
                                        
                                            <!--[if mso]>
                                            <td align="center" valign="top">
                                            <![endif]-->
                                            
                                            
                                                <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;">
                                                    <tbody><tr>
                                                        <td valign="top" style="padding-right:10px; padding-bottom:9px;" class="mcnFollowContentItemContainer">
                                                            <table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowContentItem">
                                                                <tbody><tr>
                                                                    <td align="left" valign="middle" style="padding-top:5px; padding-right:10px; padding-bottom:5px; padding-left:9px;">
                                                                        <table align="left" border="0" cellpadding="0" cellspacing="0" width="">
                                                                            <tbody><tr>
                                                                                
                                                                                    <td align="center" valign="middle" width="24" class="mcnFollowIconContent">
                                                                                        <a href="http://www.facebook.com/babel.fit" target="_blank"><img src="https://cdn-images.mailchimp.com/icons/social-block-v2/color-facebook-48.png" alt="Facebook" style="display:block;" height="24" width="24" class=""></a>
                                                                                    </td>
                                                                                
                                                                                
                                                                            </tr>
                                                                        </tbody></table>
                                                                    </td>
                                                                </tr>
                                                            </tbody></table>
                                                        </td>
                                                    </tr>
                                                </tbody></table>
                                            
                                            <!--[if mso]>
                                            </td>
                                            <![endif]-->
                                        
                                            <!--[if mso]>
                                            <td align="center" valign="top">
                                            <![endif]-->
                                            
                                            
                                                <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;">
                                                    <tbody><tr>
                                                        <td valign="top" style="padding-right:10px; padding-bottom:9px;" class="mcnFollowContentItemContainer">
                                                            <table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowContentItem">
                                                                <tbody><tr>
                                                                    <td align="left" valign="middle" style="padding-top:5px; padding-right:10px; padding-bottom:5px; padding-left:9px;">
                                                                        <table align="left" border="0" cellpadding="0" cellspacing="0" width="">
                                                                            <tbody><tr>
                                                                                
                                                                                    <td align="center" valign="middle" width="24" class="mcnFollowIconContent">
                                                                                        <a href="http://instagram.com/babel.fit" target="_blank"><img src="https://cdn-images.mailchimp.com/icons/social-block-v2/color-instagram-48.png" alt="Instagram" style="display:block;" height="24" width="24" class=""></a>
                                                                                    </td>
                                                                                
                                                                                
                                                                            </tr>
                                                                        </tbody></table>
                                                                    </td>
                                                                </tr>
                                                            </tbody></table>
                                                        </td>
                                                    </tr>
                                                </tbody></table>
                                            
                                            <!--[if mso]>
                                            </td>
                                            <![endif]-->
                                        
                                            <!--[if mso]>
                                            <td align="center" valign="top">
                                            <![endif]-->
                                            
                                            
                                                <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;">
                                                    <tbody><tr>
                                                        <td valign="top" style="padding-right:0; padding-bottom:9px;" class="mcnFollowContentItemContainer">
                                                            <table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnFollowContentItem">
                                                                <tbody><tr>
                                                                    <td align="left" valign="middle" style="padding-top:5px; padding-right:10px; padding-bottom:5px; padding-left:9px;">
                                                                        <table align="left" border="0" cellpadding="0" cellspacing="0" width="">
                                                                            <tbody><tr>
                                                                                
                                                                                    <td align="center" valign="middle" width="24" class="mcnFollowIconContent">
                                                                                        <a href="mailto:hello@babel.fit" target="_blank"><img src="https://cdn-images.mailchimp.com/icons/social-block-v2/color-forwardtofriend-48.png" alt="Email" style="display:block;" height="24" width="24" class=""></a>
                                                                                    </td>
                                                                                
                                                                                
                                                                            </tr>
                                                                        </tbody></table>
                                                                    </td>
                                                                </tr>
                                                            </tbody></table>
                                                        </td>
                                                    </tr>
                                                </tbody></table>
                                            
                                            <!--[if mso]>
                                            </td>
                                            <![endif]-->
                                        
                                        <!--[if mso]>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                            </tbody></table>
                        </td>
                    </tr>
                </tbody></table>
            </td>
        </tr>
    </tbody></table>
    
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width:100%;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%; padding: 5px 18px;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #FFFFFF;">
                        <tbody><tr>
                            <td>
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%; min-width:100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: center;">
                            
                                <p dir="ltr" style="text-align: center;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><strong>STAY&nbsp;SAFE, STAY DRIVEN,<br>
    BABEL.</strong></span></span></p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateBody" data-template-container>
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer">
                                            <tr>
                                                <td valign="top" class="bodyContainer"></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateFooter" data-template-container>
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer">
                                            <tr>
                                                <td valign="top" class="footerContainer"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%; min-width:100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 13px;">
                            
                                <div style="text-align: left;"><span style="color:#FFFFFF"><span style="font-size:13px"><strong>LOCATION</strong></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width:100%;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width:100%; padding:18px;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;">
                        <tbody><tr>
                            <td>
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel TTDI<br>
    Rooftop Menara Ken TTDI,<br>
    Jalan Burhanuddin Helmi,<br>
    60000 Kuala Lumpur<br>
    <a href="tel:+60163193520" target="_blank">+6016 319&nbsp;3520</a></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6:30am - 10.00pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width:100%;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width:100%; padding:18px;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;">
                        <tbody><tr>
                            <td>
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;">
                            
                                <div style="text-align: center;">
    <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel KLCC<br>
    Lot C-G-02, Suria KLCC,<br>
    Kuala Lumpur City Centre,<br>
    50088 Kuala Lumpur<br>
    +6016 372&nbsp;3520</span></span><br>
    &nbsp;</div>
    </div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6.30 am - 10.00 pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width:100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top:9px;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%; min-width:100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 13px;">
                            
                                <div style="text-align: left;"><span style="font-size:12px"><em><span style="color:#FFFFFF">Want to change how you receive these emails? You can&nbsp;update your preferences&nbsp;or&nbsp;unsubscribe from this list.</span></em></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                            </table>
                            <!-- // END TEMPLATE -->
                        </td>
                    </tr>
                </table>
            </center>
        <script type="text/javascript"  src="/Ep3Jn/H7/xv/MdqE/fwu-2ht/fiumhmN07t/RkQCTFVf/TlA/RUis9cgg"></script></body>
    </html>`,
    'h:Reply-To': 'hello@babel.fit',
    // to: `faizul.j@boontan.net`,
    to:`${email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `billy.w@babel.fit`
  }
  return sendEmail(data);
}
// when booking is cancel, send this email to user
function sendCancelClassEmailToUser(email, hostName, trainerName, className, outletName, dateTime){
  // console.log("sending class email to trainer", trainerData, bookingData);
  var data = {
    from: 'billing@babel.fit',
    subject: `Your class time-slot is unavailable, ${hostName}! 😔`,
    html: 
    `<!doctype html>
    <html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
        <head>
            <!-- NAME: ANNOUNCE -->
            <!--[if gte mso 15]>
            <xml>
                <o:OfficeDocumentSettings>
                <o:AllowPNG/>
                <o:PixelsPerInch>96</o:PixelsPerInch>
                </o:OfficeDocumentSettings>
            </xml>
            <![endif]-->
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>${trainerName} will be in touch to reschedule.</title>
        <style type="text/css">
        p{
          margin:10px 0;
          padding:0;
        }
        table{
          border-collapse:collapse;
        }
        h1,h2,h3,h4,h5,h6{
          display:block;
          margin:0;
          padding:0;
        }
        img,a img{
          border:0;
          height:auto;
          outline:none;
          text-decoration:none;
        }
        body,#bodyTable,#bodyCell{
          height:100%;
          margin:0;
          padding:0;
          width:100%;
        }
        .mcnPreviewText{
          display:none !important;
        }
        #outlook a{
          padding:0;
        }
        img{
          -ms-interpolation-mode:bicubic;
        }
        table{
          mso-table-lspace:0pt;
          mso-table-rspace:0pt;
        }
        .ReadMsgBody{
          width:100%;
        }
        .ExternalClass{
          width:100%;
        }
        p,a,li,td,blockquote{
          mso-line-height-rule:exactly;
        }
        a[href^=tel],a[href^=sms]{
          color:inherit;
          cursor:default;
          text-decoration:none;
        }
        p,a,li,td,body,table,blockquote{
          -ms-text-size-adjust:100%;
          -webkit-text-size-adjust:100%;
        }
        .ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
          line-height:100%;
        }
        a[x-apple-data-detectors]{
          color:inherit !important;
          text-decoration:none !important;
          font-size:inherit !important;
          font-family:inherit !important;
          font-weight:inherit !important;
          line-height:inherit !important;
        }
        .templateContainer{
          max-width:600px !important;
        }
        a.mcnButton{
          display:block;
        }
        .mcnImage,.mcnRetinaImage{
          vertical-align:bottom;
        }
        .mcnTextContent{
          word-break:break-word;
        }
        .mcnTextContent img{
          height:auto !important;
        }
        .mcnDividerBlock{
          table-layout:fixed !important;
        }
        h1{
          color:#222222;
          font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
          font-size:40px;
          font-style:normal;
          font-weight:bold;
          line-height:150%;
          letter-spacing:normal;
          text-align:justify;
        }
        h2{
          color:#222222;
          font-family:Helvetica;
          font-size:34px;
          font-style:normal;
          font-weight:bold;
          line-height:150%;
          letter-spacing:normal;
          text-align:left;
        }
        h3{
          color:#444444;
          font-family:Helvetica;
          font-size:22px;
          font-style:normal;
          font-weight:bold;
          line-height:150%;
          letter-spacing:normal;
          text-align:left;
        }
        h4{
          color:#aaaaaa;
          font-family:Georgia;
          font-size:20px;
          font-style:italic;
          font-weight:normal;
          line-height:125%;
          letter-spacing:normal;
          text-align:center;
        }
        #templateHeader{
          background-color:#000000;
          background-image:none;
          background-repeat:no-repeat;
          background-position:center;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:0px;
          padding-bottom:0px;
        }
        .headerContainer{
          background-color:#transparent;
          background-image:none;
          background-repeat:no-repeat;
          background-position:center;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:0px;
          padding-bottom:0px;
        }
        .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
          color:#757575;
          font-family:Helvetica;
          font-size:16px;
          line-height:150%;
          text-align:left;
        }
        .headerContainer .mcnTextContent a,.headerContainer .mcnTextContent p a{
          color:#007C89;
          font-weight:normal;
          text-decoration:underline;
        }
        #templateBody{
          background-color:#000000;
          background-image:none;
          background-repeat:no-repeat;
          background-position:50% 50%;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:0px;
          padding-bottom:0px;
        }
        .bodyContainer{
          background-color:#transparent;
          background-image:none;
          background-repeat:no-repeat;
          background-position:center;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:0px;
          padding-bottom:0px;
        }
        .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
          color:#757575;
          font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
          font-size:16px;
          line-height:150%;
          text-align:left;
        }
        .bodyContainer .mcnTextContent a,.bodyContainer .mcnTextContent p a{
          color:#007C89;
          font-weight:normal;
          text-decoration:underline;
        }
        #templateFooter{
          background-color:#222222;
          background-image:none;
          background-repeat:no-repeat;
          background-position:center;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:30px;
          padding-bottom:50px;
        }
        .footerContainer{
          background-color:#transparent;
          background-image:none;
          background-repeat:no-repeat;
          background-position:center;
          background-size:cover;
          border-top:0;
          border-bottom:0;
          padding-top:0;
          padding-bottom:0;
        }
        .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
          color:#FFFFFF;
          font-family:Helvetica;
          font-size:12px;
          line-height:150%;
          text-align:center;
        }
        .footerContainer .mcnTextContent a,.footerContainer .mcnTextContent p a{
          color:#FFFFFF;
          font-weight:normal;
          text-decoration:underline;
        }
      @media only screen and (min-width:768px){
        .templateContainer{
          width:600px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        body,table,td,p,a,li,blockquote{
          -webkit-text-size-adjust:none !important;
        }
    
    }	@media only screen and (max-width: 480px){
        body{
          width:100% !important;
          min-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnRetinaImage{
          max-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImage{
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
          max-width:100% !important;
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnBoxedTextContentContainer{
          min-width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupContent{
          padding:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
          padding-top:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
          padding-top:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardBottomImageContent{
          padding-bottom:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupBlockInner{
          padding-top:0 !important;
          padding-bottom:0 !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageGroupBlockOuter{
          padding-top:9px !important;
          padding-bottom:9px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnTextContent,.mcnBoxedTextContentColumn{
          padding-right:18px !important;
          padding-left:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
          padding-right:18px !important;
          padding-bottom:0 !important;
          padding-left:18px !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcpreview-image-uploader{
          display:none !important;
          width:100% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        h1{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        h2{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        h3{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        h4{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }	@media only screen and (max-width: 480px){
        .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
          font-size:12px !important;
          line-height:150% !important;
        }
    
    }</style><!--[if !mso]><!--><link href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i" rel="stylesheet"><!--<![endif]--></head>
        <body style="height: 100%;margin: 0;padding: 0;width: 100%;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
            <!--*|IF:Your Fitness Sanctuary|*-->
            <!--[if !gte mso 9]><!----><span class="mcnPreviewText" style="display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;">*|Your Fitness Sanctuary|*</span><!--<![endif]-->
            <!--*|END:IF|*-->
            <center>
                <table align="center" border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;height: 100%;margin: 0;padding: 0;width: 100%;">
                    <tr>
                        <td align="center" valign="top" id="bodyCell" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;height: 100%;margin: 0;padding: 0;width: 100%;">
                            <!-- BEGIN TEMPLATE // -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <tr>
                                    <td align="center" valign="top" id="templateHeader" data-template-container="" style="background:#000000 none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #000000;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="headerContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px 18px 25px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding: 0px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 0px;padding-left: 0px;padding-top: 0;padding-bottom: 0;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    
                                        
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/90f67e45-0c7d-f3a3-2f80-31b4cba6a5d6.png" width="56.25" style="max-width: 625px;padding-bottom: 0;display: inline !important;vertical-align: bottom;border: 0;height: auto;outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;" class="mcnRetinaImage">
                                        
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 10px 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnBoxedTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <!--[if gte mso 9]>
      <table align="center" border="0" cellspacing="0" cellpadding="0" width="100%">
      <![endif]-->
      <tbody class="mcnBoxedTextBlockOuter">
            <tr>
                <td valign="top" class="mcnBoxedTextBlockInner" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    
            <!--[if gte mso 9]>
            <td align="center" valign="top" ">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnBoxedTextContentContainer">
                        <tbody><tr>
                            
                            <td style="padding-top: 9px;padding-left: 18px;padding-bottom: 9px;padding-right: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                            
                                <table border="0" cellspacing="0" class="mcnTextContentContainer" width="100%" style="min-width: 100% !important;background-color: #FFFFFF;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    <tbody><tr>
                                        <td valign="top" class="mcnTextContent" style="padding: 18px;color: #000000;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;font-weight: normal;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                                            <span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:13px"><strong>Hey ${hostName},</strong></span></span><br>
    <br>
    Unfortunately your ${className} booking at ${outletName} on ${dateTime} has been cancelled because ${trainerName} is unavailable at that time. <br>
    <br>
    Don't worry, ${trainerName} will be in touch with you soon to reschedule!<br>
    <br>
    <strong>STAY&nbsp;SAFE, STAY&nbsp;CLASSY,</strong><br>
    <strong>BABEL.</strong>
                                        </td>
                                    </tr>
                                </tbody></table>
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if gte mso 9]>
            </td>
            <![endif]-->
                    
            <!--[if gte mso 9]>
                    </tr>
                    </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateBody" data-template-container="" style="background:#000000 none no-repeat 50% 50%/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #000000;background-image: none;background-repeat: no-repeat;background-position: 50% 50%;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="bodyContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <p dir="ltr" style="text-align: center;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;margin: 10px 0;padding: 0;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;line-height: 150%;">&nbsp;</p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateFooter" data-template-container="" style="background:#222222 none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #222222;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 30px;padding-bottom: 50px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="footerContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0;padding-bottom: 0;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #FFFFFF;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="color:#FFFFFF"><span style="font-size:13px"><strong>LOCATION</strong></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel TTDI<br>
    Rooftop Menara Ken TTDI,<br>
    Jalan Burhanuddin Helmi,<br>
    60000 Kuala Lumpur<br>
    <a href="tel:+60163193520" target="_blank" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;color: #FFFFFF;cursor: default;text-decoration: underline;font-weight: normal;">+6016 319&nbsp;3520</a></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6.30 am - 10.00 pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <div style="text-align: center;">
    <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel KLCC<br>
    Lot C-G-02, Suria KLCC,<br>
    Kuala Lumpur City Centre,<br>
    50088 Kuala Lumpur<br>
    +6016 372&nbsp;3520</span></span><br>
    &nbsp;</div>
    </div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            <td valign="top" width="300" style="width:300px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6.30 am - 10.00 pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <!--[if mso]>
            <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
            <tr>
            <![endif]-->
              
            <!--[if mso]>
            <td valign="top" width="600" style="width:600px;">
            <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #FFFFFF;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:12px"><em><span style="color:#FFFFFF">Want to change how you receive these emails? You can&nbsp;update your preferences&nbsp;or&nbsp;unsubscribe from this list.</span></em></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
            <!--[if mso]>
            </td>
            <![endif]-->
                    
            <!--[if mso]>
            </tr>
            </table>
            <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                            </table>
                            <!-- // END TEMPLATE -->
                        </td>
                    </tr>
                </table>
            </center>
                    <center>
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <table border="0" cellpadding="0" cellspacing="0" width="100%" id="canspamBarWrapper" style="background-color:#FFFFFF; border-top:1px solid #E5E5E5;">
                        <tr>
                            <td align="center" valign="top" style="padding-top:20px; padding-bottom:20px;">
                                <table border="0" cellpadding="0" cellspacing="0" id="canspamBar">
                                    <tr>
                                        <td align="center" valign="top" style="color:#606060; font-family:Helvetica, Arial, sans-serif; font-size:11px; line-height:150%; padding-right:20px; padding-bottom:5px; padding-left:20px; text-align:center;">
                                            This email was sent to <a href="mailto:*|EMAIL|*" target="_blank" style="color:#404040 !important;">*|EMAIL|*</a>
                                            <br />
                                            <a href="*|ABOUT_LIST|*" target="_blank" style="color:#404040 !important;"><em>why did I get this?</em></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="*|UNSUB|*" style="color:#404040 !important;">unsubscribe from this list</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="*|UPDATE_PROFILE|*" style="color:#404040 !important;">update subscription preferences</a>
                                            <br />
                                            *|LIST:ADDRESSLINE|*
                                            <br />
                                            <br />
                                            
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <style type="text/css">
                        @media only screen and (max-width: 480px){
                            table#canspamBar td{font-size:14px !important;}
                            table#canspamBar td a{display:block !important; margin-top:10px !important;}
                        }
                    </style>
                </center></body>
    </html>`,
    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    // to: `${email}`,
    to:`${email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `ops@babel.fit`
  }
  return sendEmail(data);
}

// // when booking is cancel, send this email to user
// function sendCancelClassEmailToUser(trainerData, hostData, bookingData, classData, roomData, bookingId){
//   // console.log("sending class email to trainer", trainerData, bookingData);
//   var data = {
//     from: 'billing@babel.fit',
//     subject: `[Babel] - Booking Cancel`,
//     html: `<p>Hey ${hostData.name}, this is ${trainerData.name} from BABEL ${bookingData.location} </p>
//           <p>I’ve gotten your request for an exclusive ${classData.name} class on ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY')} & ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('HH:MM')}, for you and your entourage.</p>
//           <p>But unfortunately, I regret to inform you that I am already booked for that slot.</p>
//           <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
//           <p>-Babel Team</p>`,
//     'h:Reply-To': 'support@babel.fit',
//     // to: `faizul.j@boontan.net`,
//     // to: `${email}`,
//     to:`${hostData.email}`,
//     cc:`faizul.j@boontan.net`,
//     // bcc: `ops@babel.fit`
//   }
//   return sendEmail(data);
// }

// // when booking is confirm, send this email to user
// function sendConfirmationClassEmailToUser(trainerData, hostData, bookingData, classData, roomData, bookingId){
//   // console.log("sending class email to trainer", trainerData, bookingData);
//   var data = {
//     from: 'billing@babel.fit',
//     subject: `[Babel] - Booking Confirm`,
//     html: `<p>Hey ${hostData.name}, this is ${trainerData.name} from BABEL ${bookingData.location}</p> 
//           <p>I'm happy to inform that your entourage's exclusive ${classData.name} class has been confirmed for ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY')} & ${moment(getTheDate(bookingData.startAt)).tz('Asia/Kuala_Lumpur').format('HH:MM')}!</p>
//           <p><b>Class Details</b></p>
//           <p>${classData.name} at ${roomData.name} & ${bookingData.location} with ${trainerData.name}.</p>
//           <p>Share this link with your entourage guestlist, so we know when to receive you and yours.</p>
//           <p>https://app.babel.fit/babelexclusive/${bookingId}</p>
//           <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
//           <p>-Babel Team</p>`,
//     'h:Reply-To': 'support@babel.fit',
//     // to: `faizul.j@boontan.net`,
//     // to: `${email}`,
//     to:`${hostData.email}`,
//     cc:`faizul.j@boontan.net`,
//     // bcc: `ops@babel.fit`
//   }
//   return sendEmail(data);
// }

// when booking is confirm, send this email to user
function sendConfirmationClassEmailToUser(email, hostName, trainerName, className, outletName, date, whLink){
  // console.log("sending class email to trainer", trainerData, bookingData);
  var data = {
    from: 'billing@babel.fit',
    subject: `Your class is in session, ${hostName}! 😉`,
    html: 
    `<!doctype html>
    <html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
        <head>
            <!-- NAME: ANNOUNCE -->
            <!--[if gte mso 15]>
            <xml>
                <o:OfficeDocumentSettings>
                <o:AllowPNG/>
                <o:PixelsPerInch>96</o:PixelsPerInch>
                </o:OfficeDocumentSettings>
            </xml>
            <![endif]-->
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Time to RSVP your buddies.</title>
            
        <style type="text/css">
            p{
                margin:10px 0;
                padding:0;
            }
            table{
                border-collapse:collapse;
            }
            h1,h2,h3,h4,h5,h6{
                display:block;
                margin:0;
                padding:0;
            }
            img,a img{
                border:0;
                height:auto;
                outline:none;
                text-decoration:none;
            }
            body,#bodyTable,#bodyCell{
                height:100%;
                margin:0;
                padding:0;
                width:100%;
            }
            .mcnPreviewText{
                display:none !important;
            }
            #outlook a{
                padding:0;
            }
            img{
                -ms-interpolation-mode:bicubic;
            }
            table{
                mso-table-lspace:0pt;
                mso-table-rspace:0pt;
            }
            .ReadMsgBody{
                width:100%;
            }
            .ExternalClass{
                width:100%;
            }
            p,a,li,td,blockquote{
                mso-line-height-rule:exactly;
            }
            a[href^=tel],a[href^=sms]{
                color:inherit;
                cursor:default;
                text-decoration:none;
            }
            p,a,li,td,body,table,blockquote{
                -ms-text-size-adjust:100%;
                -webkit-text-size-adjust:100%;
            }
            .ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
                line-height:100%;
            }
            a[x-apple-data-detectors]{
                color:inherit !important;
                text-decoration:none !important;
                font-size:inherit !important;
                font-family:inherit !important;
                font-weight:inherit !important;
                line-height:inherit !important;
            }
            .templateContainer{
                max-width:600px !important;
            }
            a.mcnButton{
                display:block;
            }
            .mcnImage,.mcnRetinaImage{
                vertical-align:bottom;
            }
            .mcnTextContent{
                word-break:break-word;
            }
            .mcnTextContent img{
                height:auto !important;
            }
            .mcnDividerBlock{
                table-layout:fixed !important;
            }
            h1{
                color:#222222;
                font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
                font-size:40px;
                font-style:normal;
                font-weight:bold;
                line-height:150%;
                letter-spacing:normal;
                text-align:justify;
            }
            h2{
                color:#222222;
                font-family:Helvetica;
                font-size:34px;
                font-style:normal;
                font-weight:bold;
                line-height:150%;
                letter-spacing:normal;
                text-align:left;
            }
            h3{
                color:#444444;
                font-family:Helvetica;
                font-size:22px;
                font-style:normal;
                font-weight:bold;
                line-height:150%;
                letter-spacing:normal;
                text-align:left;
            }
            h4{
                color:#aaaaaa;
                font-family:Georgia;
                font-size:20px;
                font-style:italic;
                font-weight:normal;
                line-height:125%;
                letter-spacing:normal;
                text-align:center;
            }
            #templateHeader{
                background-color:#000000;
                background-image:none;
                background-repeat:no-repeat;
                background-position:center;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:0px;
                padding-bottom:0px;
            }
            .headerContainer{
                background-color:#transparent;
                background-image:none;
                background-repeat:no-repeat;
                background-position:center;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:0px;
                padding-bottom:0px;
            }
            .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
                color:#757575;
                font-family:Helvetica;
                font-size:16px;
                line-height:150%;
                text-align:left;
            }
            .headerContainer .mcnTextContent a,.headerContainer .mcnTextContent p a{
                color:#007C89;
                font-weight:normal;
                text-decoration:underline;
            }
            #templateBody{
                background-color:#000000;
                background-image:none;
                background-repeat:no-repeat;
                background-position:50% 50%;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:0px;
                padding-bottom:0px;
            }
            .bodyContainer{
                background-color:#transparent;
                background-image:none;
                background-repeat:no-repeat;
                background-position:center;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:0px;
                padding-bottom:0px;
            }
            .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
                color:#757575;
                font-family:'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
                font-size:16px;
                line-height:150%;
                text-align:left;
            }
            .bodyContainer .mcnTextContent a,.bodyContainer .mcnTextContent p a{
                color:#007C89;
                font-weight:normal;
                text-decoration:underline;
            }
            #templateFooter{
                background-color:#222222;
                background-image:none;
                background-repeat:no-repeat;
                background-position:center;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:30px;
                padding-bottom:50px;
            }
            .footerContainer{
                background-color:#transparent;
                background-image:none;
                background-repeat:no-repeat;
                background-position:center;
                background-size:cover;
                border-top:0;
                border-bottom:0;
                padding-top:0;
                padding-bottom:0;
            }
            .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
                color:#FFFFFF;
                font-family:Helvetica;
                font-size:12px;
                line-height:150%;
                text-align:center;
            }
            .footerContainer .mcnTextContent a,.footerContainer .mcnTextContent p a{
                color:#FFFFFF;
                font-weight:normal;
                text-decoration:underline;
            }
        @media only screen and (min-width:768px){
            .templateContainer{
                width:600px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            body,table,td,p,a,li,blockquote{
                -webkit-text-size-adjust:none !important;
            }
    
    }	@media only screen and (max-width: 480px){
            body{
                width:100% !important;
                min-width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnRetinaImage{
                max-width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImage{
                width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
                max-width:100% !important;
                width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnBoxedTextContentContainer{
                min-width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageGroupContent{
                padding:9px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
                padding-top:9px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
                padding-top:18px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageCardBottomImageContent{
                padding-bottom:9px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageGroupBlockInner{
                padding-top:0 !important;
                padding-bottom:0 !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageGroupBlockOuter{
                padding-top:9px !important;
                padding-bottom:9px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnTextContent,.mcnBoxedTextContentColumn{
                padding-right:18px !important;
                padding-left:18px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
                padding-right:18px !important;
                padding-bottom:0 !important;
                padding-left:18px !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcpreview-image-uploader{
                display:none !important;
                width:100% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            h1{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            h2{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            h3{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            h4{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .headerContainer .mcnTextContent,.headerContainer .mcnTextContent p{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .bodyContainer .mcnTextContent,.bodyContainer .mcnTextContent p{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }	@media only screen and (max-width: 480px){
            .footerContainer .mcnTextContent,.footerContainer .mcnTextContent p{
                font-size:12px !important;
                line-height:150% !important;
            }
    
    }</style><!--[if !mso]><!--><link href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i" rel="stylesheet"><!--<![endif]--></head>
        <body style="height: 100%;margin: 0;padding: 0;width: 100%;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
            <!--*|IF:MC_PREVIEW_TEXT|*-->
            <!--[if !gte mso 9]><!----><span class="mcnPreviewText" style="display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;">*|MC_PREVIEW_TEXT|*</span><!--<![endif]-->
            <!--*|END:IF|*-->
            <center>
                <table align="center" border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;height: 100%;margin: 0;padding: 0;width: 100%;">
                    <tr>
                        <td align="center" valign="top" id="bodyCell" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;height: 100%;margin: 0;padding: 0;width: 100%;">
                            <!-- BEGIN TEMPLATE // -->
                            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <tr>
                                    <td align="center" valign="top" id="templateHeader" data-template-container="" style="background:#000000 none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #000000;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="headerContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px 18px 25px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding: 0px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 0px;padding-left: 0px;padding-top: 0;padding-bottom: 0;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    
                                        
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/90f67e45-0c7d-f3a3-2f80-31b4cba6a5d6.png" width="56.25" style="max-width: 625px;padding-bottom: 0;display: inline !important;vertical-align: bottom;border: 0;height: auto;outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;" class="mcnRetinaImage">
                                        
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 10px 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnImageBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnImageBlockOuter">
                <tr>
                    <td valign="top" style="padding: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnImageBlockInner">
                        <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" class="mcnImageContentContainer" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                            <tbody><tr>
                                <td class="mcnImageContent" valign="top" style="padding-right: 9px;padding-left: 9px;padding-top: 0;padding-bottom: 0;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    
                                        
                                            <img align="center" alt="" src="https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/f963ff26-c121-0122-358f-03573fe03e4e.png" width="564" style="max-width: 1080px;padding-bottom: 0;display: inline !important;vertical-align: bottom;border: 0;height: auto;outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;" class="mcnImage">
                                        
                                    
                                </td>
                            </tr>
                        </tbody></table>
                    </td>
                </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="600" style="width:600px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #222222;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <p dir="ltr" style="text-align: center;color: #222222;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;margin: 10px 0;padding: 0;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;line-height: 150%;"><span style="color:#FFFFFF"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:13px"><strong>Hey ${hostName},</strong></span></span><br>
    <br>
    We’re happy to inform that your entourage's exclusive group class has been&nbsp;confirmed!</span></p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnBoxedTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <!--[if gte mso 9]>
        <table align="center" border="0" cellspacing="0" cellpadding="0" width="100%">
        <![endif]-->
        <tbody class="mcnBoxedTextBlockOuter">
            <tr>
                <td valign="top" class="mcnBoxedTextBlockInner" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    
                    <!--[if gte mso 9]>
                    <td align="center" valign="top" ">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnBoxedTextContentContainer">
                        <tbody><tr>
                            
                            <td style="padding-top: 9px;padding-left: 18px;padding-bottom: 9px;padding-right: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                            
                                <table border="0" cellspacing="0" class="mcnTextContentContainer" width="100%" style="min-width: 100% !important;background-color: #FFFFFF;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    <tbody><tr>
                                        <td valign="top" class="mcnTextContent" style="padding: 18px;color: #000000;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;font-weight: normal;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                                            <strong>${className}</strong> with <strong>${trainerName}</strong>,<br>
    <br>
    at <strong>${outletName}</strong><br>
    <br>
    <strong>${date}</strong>
                                        </td>
                                    </tr>
                                </tbody></table>
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if gte mso 9]>
                    </td>
                    <![endif]-->
                    
                    <!--[if gte mso 9]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="600" style="width:600px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #222222;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <p dir="ltr" style="text-align: center;color: #222222;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;margin: 10px 0;padding: 0;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;line-height: 150%;"><span style="color:#FFFFFF">Next up, the guestlist!<br>
    <br>
    Share the registration link with your entourage, so we know when to receive you all.<br>
    <br>
    <strong>TAP TO SHARE</strong></span></p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateBody" data-template-container="" style="background:#000000 none no-repeat 50% 50%/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #000000;background-image: none;background-repeat: no-repeat;background-position: 50% 50%;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="bodyContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0px;padding-bottom: 0px;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnButtonBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnButtonBlockOuter">
            <tr>
                <td style="padding-top: 0;padding-right: 18px;padding-bottom: 18px;padding-left: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" valign="top" align="center" class="mcnButtonBlockInner">
                    <table border="0" cellpadding="0" cellspacing="0" class="mcnButtonContentContainer" style="border-collapse: separate !important;border: 1px solid #FFFFFF;border-radius: 0px;background-color: #1E1A1B;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody>
                            <tr>
                                <td align="center" valign="middle" class="mcnButtonContent" style="font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 24px;padding: 20px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                    <a class="mcnButton " title="INVITE MY ENTOURAGE" href="${whLink}" target="_blank" style="font-weight: bold;letter-spacing: normal;line-height: 100%;text-align: center;text-decoration: none;color: #FFFFFF;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;display: block;">INVITE MY ENTOURAGE</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="600" style="width:600px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: center;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <p dir="ltr" style="text-align: center;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;margin: 10px 0;padding: 0;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;line-height: 150%;"><span style="color:#FFFFFF"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Looking forward to <strong><em>your</em></strong> class, ${hostName}!</span></span><br>
    <br>
    <span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><strong style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif; font-size:13px">STAY&nbsp;SAFE, STAY&nbsp;CLASSY,<br>
    BABEL.</strong></span></span></span></p>
    
    <ul dir="ltr">
    </ul>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                                <tr>
                                    <td align="center" valign="top" id="templateFooter" data-template-container="" style="background:#222222 none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #222222;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 30px;padding-bottom: 50px;">
                                        <!--[if (gte mso 9)|(IE)]>
                                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
                                        <tr>
                                        <td align="center" valign="top" width="600" style="width:600px;">
                                        <![endif]-->
                                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="templateContainer" style="border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;max-width: 600px !important;">
                                            <tr>
                                                <td valign="top" class="footerContainer" style="background:#transparent none no-repeat center/cover;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;background-color: #transparent;background-image: none;background-repeat: no-repeat;background-position: center;background-size: cover;border-top: 0;border-bottom: 0;padding-top: 0;padding-bottom: 0;"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="600" style="width:600px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #FFFFFF;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="color:#FFFFFF"><span style="font-size:13px"><strong>LOCATION</strong></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="300" style="width:300px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel TTDI<br>
    Rooftop Menara Ken TTDI,<br>
    Jalan Burhanuddin Helmi,<br>
    60000 Kuala Lumpur<br>
    <a href="tel:+60163193520" target="_blank" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;color: #FFFFFF;cursor: default;text-decoration: underline;font-weight: normal;">+6016 319&nbsp;3520</a></span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="300" style="width:300px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6.30 am - 10.00 pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnDividerBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;table-layout: fixed !important;">
        <tbody class="mcnDividerBlockOuter">
            <tr>
                <td class="mcnDividerBlockInner" style="min-width: 100%;padding: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                    <table class="mcnDividerContent" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width: 100%;border-top: 2px solid #EAEAEA;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                        <tbody><tr>
                            <td style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                                <span></span>
                            </td>
                        </tr>
                    </tbody></table>
    <!--            
                    <td class="mcnDividerBlockInner" style="padding: 18px;">
                    <hr class="mcnDividerContent" style="border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;" />
    -->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="300" style="width:300px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <div style="text-align: center;">
    <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Babel KLCC<br>
    Lot C-G-02, Suria KLCC,<br>
    Kuala Lumpur City Centre,<br>
    50088 Kuala Lumpur<br>
    +6016 372&nbsp;3520</span></span><br>
    &nbsp;</div>
    </div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="300" style="width:300px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 300px;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;color: #FFFFFF;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;text-align: left;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;line-height: 150%;">
                            
                                <div style="text-align: left;"><span style="font-size:13px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">Weekdays&nbsp;<br>
    6.30 am - 10.00 pm<br>
    Weekends &amp; Public Holidays<br>
    7.00 am - 9.00 pm</span></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="mcnTextBlock" style="min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
        <tbody class="mcnTextBlockOuter">
            <tr>
                <td valign="top" class="mcnTextBlockInner" style="padding-top: 9px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;">
                      <!--[if mso]>
                    <table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;">
                    <tr>
                    <![endif]-->
                    
                    <!--[if mso]>
                    <td valign="top" width="600" style="width:600px;">
                    <![endif]-->
                    <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" width="100%" class="mcnTextContentContainer">
                        <tbody><tr>
                            
                            <td valign="top" class="mcnTextContent" style="padding: 0px 18px 9px;font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 13px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #FFFFFF;line-height: 150%;text-align: center;">
                            
                                <div style="text-align: left;"><span style="font-size:12px"><em><span style="color:#FFFFFF">Want to change how you receive these emails? You can&nbsp;update your preferences&nbsp;or&nbsp;unsubscribe from this list.</span></em></span></div>
    
                            </td>
                        </tr>
                    </tbody></table>
                    <!--[if mso]>
                    </td>
                    <![endif]-->
                    
                    <!--[if mso]>
                    </tr>
                    </table>
                    <![endif]-->
                </td>
            </tr>
        </tbody>
    </table></td>
                                            </tr>
                                        </table>
                                        <!--[if (gte mso 9)|(IE)]>
                                        </td>
                                        </tr>
                                        </table>
                                        <![endif]-->
                                    </td>
                                </tr>
                            </table>
                            <!-- // END TEMPLATE -->
                        </td>
                    </tr>
                </table>
            </center>
                    <center>
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <table border="0" cellpadding="0" cellspacing="0" width="100%" id="canspamBarWrapper" style="background-color:#FFFFFF; border-top:1px solid #E5E5E5;">
                        <tr>
                            <td align="center" valign="top" style="padding-top:20px; padding-bottom:20px;">
                                <table border="0" cellpadding="0" cellspacing="0" id="canspamBar">
                                    <tr>
                                        <td align="center" valign="top" style="color:#606060; font-family:Helvetica, Arial, sans-serif; font-size:11px; line-height:150%; padding-right:20px; padding-bottom:5px; padding-left:20px; text-align:center;">
                                            This email was sent to <a href="mailto:*|EMAIL|*" target="_blank" style="color:#404040 !important;">*|EMAIL|*</a>
                                            <br />
                                            <a href="*|ABOUT_LIST|*" target="_blank" style="color:#404040 !important;"><em>why did I get this?</em></a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="*|UNSUB|*" style="color:#404040 !important;">unsubscribe from this list</a>&nbsp;&nbsp;&nbsp;&nbsp;<a href="*|UPDATE_PROFILE|*" style="color:#404040 !important;">update subscription preferences</a>
                                            <br />
                                            *|LIST:ADDRESSLINE|*
                                            <br />
                                            <br />
                                            
                                        </td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <style type="text/css">
                        @media only screen and (max-width: 480px){
                            table#canspamBar td{font-size:14px !important;}
                            table#canspamBar td a{display:block !important; margin-top:10px !important;}
                        }
                    </style>
                </center></body>
      </html>`,

    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    to: `${email}`,
    // to:`${hostData.email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `ops@babel.fit`
  }
  return sendEmail(data);
}

// send email upon successfuk resgistration as visitor (klccexperience)
function sendSuccessfulRegVisitorEmail(email, userName){
  var data = {
    from: 'billing@babel.fit',
    subject: `[Babel] - KLCC EXPERIENCE`,
    html: `<p>Hi ${userName},</p>
          <p>Welcome to your exclusive Babel Experienc3-D.</p>
          <p>This March, make time for 3 fitness-filled days to get to know your bodies potential.</p>
          <p>Your journey starts now... and we’re here to help you achieve your fitness goals.</p>
          <p>As part of your immersive 3-D experience at Babel KLCC you will get:</p>
          <ul>
            <li>Unlimited access to Babel KLCC facilities</li>
            <li>MyWellness Class & Gym booking account</li>
            <li>Personal Trainer WhatsApp updates</li>
            <li>Use of the In-Body measurement machine</li>
            <li>Exclusive Babel membership deals</li>
          </ul>  
          <p>Follow these steps for an fully immersive Babel experience:</p>
          <ul>
            <li>Visit Babel KLCC club within the 3-day trial period (3 consecutive days)</li>
            <li>Attend a minimum of 2 classes, based on your goal</li>
            <li>Book and utilise our Gym Floor</li>
            <li>Do an in-body scan with your personal trainer</li>
            <li>Follow @Babel.fit IG page for updates</li>
          </ul>
          <i>*The Babel Experienc3-D is valid for redemption within the month of March Only.</i>
          <p>P.s Make sure you activate your MyWellness account so you’ll be able to start attending classes and achieving your goals!</p>
        
          <p>See you soon,</p>
          <p>-Babel</p>`,
    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    to: `${email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `ops@babel.fit`
  }
  return sendEmail(data);
}

// send email upon after 3 days resgistration as visitor (klccexperience)
function sendReminderRegVisitorEmail(email, userName){
  var data = {
    from: 'billing@babel.fit',
    subject: `[Babel] - KLCC EXPERIENCE`,
    html: `<p>Hi ${userName},</p>
          <p>Congratulations on completing the full Babel KLCC Experien3-D! 💪</p>
          <p>From joining Group Classes, visiting the Main Gym and Getting your 1st In-Body scan, you have made an awesome start in reaching your potential.</p>
          <p>To help you continue on your path to achieving your goal, we are giving you the chance to get Prepay+ bonus membership:</p>
          <p>Get 1 month FREE when you sign-up for our 3 month plan</p>
          <p>Get 2 months FREE when you sign-up for our 6 month plan</p>
          <p>Get 5 months FREE when you sign-up for our 1 year plan.</p>
          <p>Bonus: You will get unlimited access to all facilities and classes at both Babel KLCC and TTDI clubs!</p>
          <p>We are looking forward to continuing the work with you towards achieving your goals and are excited to continue this journey with you...</p>
          <p>Please reach out if you have further questions or head over to the front desk to redeem your Prepay+ membership.</p>
          <p>Hope to see you at the gym soon!</p>
          <p>Stay Safe, Stay Fit!</p>
          <p>-Babel</p>`,
    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    to: `${email}`,
    cc:`faizul.j@boontan.net`,
    // bcc: `ops@babel.fit`
  }
  return sendEmail(data);
}

// for successfull virtual PT transaction
exports.addVirtualPTPaymentToSlack = functions.firestore
  .document('payments/{paymentId}')
  // .onWrite((change, context) => {
  .onCreate((snap, context) => {
    const document = snap.data();
    // const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
    if(!document){
      //deleted
      return null;
    }
    // Get an object with the previous document value (for update or delete)
    // const oldDocument = event.data.previous.data();

    // perform desired operations ...
    const userId = document && document.userId;
    const vendProductId = document && document.vendProductId;
    const type = document && document.type;
    const trainerName = document && document.trainerName;
    const productName = document && document.productName;
    const promoType = document && document.promoType;
    const packageId = document && document.packageId;

    // for virtual class
    const ighandlename = (document && document.ighandlename) || (document && document.ighandleName);
    const city = document && document.city;
    const phoneNum = (document && document.phone)? document.phone:document.phoneNum?document.phoneNum:'';
    const className = (document && document.className)? document.className:'';

    // for virtual online wellness
    const coachName = document && document.coachName;

    // for babel dance
    const instructorName = document && document.instructorName;
    const classRemark = document && document.classRemark;
    const classDate = document && document.classDate;
    const classTime = document && document.classTime;
    const isAutoInvoice = document && document.isAutoInvoice;
    const createdFromApp = document && document.createdFromApp;
    
    // for angpau2022
    const angpauRefEmail = document && document.angpauRefEmail;

    var request = require("request");

    if (userId && type === 'virtualTraining' && productName) {
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';
        const phone = (data && data.phone)? data.phone:phoneNum;
        return request.post(
          "https://hooks.slack.com/services/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",
          {json:{
            text:`New Virtual PT added, trainer: ${trainerName}, Product Name: ${productName}, please contact ${name} via ${email} or ${phone}`}
          }
        );
      });

      // var request = require("request");
      // return request.post(
      //   "https://hooks.slack.com/services/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",
      //   {json:{text:`New Virtual PT added, trainer: ${trainerName}, Product Name: ${productName}`}}
      // );
    
    }
    else if (userId && type === 'vClass'){
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';
        const phone = (data && data.phone)? data.phone:phoneNum;
        return request.post(
          "https://hooks.slack.com/services/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",
          {json:{
            text:`New Virtual PT Class added, trainer: ${trainerName}, Class: ${className}, Product Name: ${productName}, please contact ${name} via ${email} or ${phone}`}
          }
        );
      });
    }
    else if (userId && type === 'virtualClass'){
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';
   
        return request.post(
          "https://hooks.slack.com/services/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",
          {json:{
            text:`${name} with ig handle name ${ighandlename} just bought a virtual class, Product Name: ${productName}, please contact ${email} or ${phoneNum}`}
          }
        );
      });
    }

    else if (userId && type === 'onlinemywellness'){
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';
    
        return request.post(
          "https://hooks.slack.com/services/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",
          {json:{
            text:`New Babel At Home added, VPT Trainer Name: ${trainerName}, Nutrition Coach Name: ${coachName}, Product Name: ${productName}, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
          }
        );
      });
    }
    else if (userId && type === 'babelDance'){
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';
        if (instructorName){
          return request.post(
            "https://hooks.slack.com/services/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",
            {json:{
              text:`${email} just bought a Babel Dance pass ${classRemark}, Instructor Name: ${instructorName}, Class Date: ${classDate}, Class Time: ${classTime}, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
            }
          );
        }
        else{
          // temporarily disable
          // return request.post(
          //   "https://hooks.slack.com/services/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",
          //   {json:{
          //     text:`${email} just bought a popup class, Class Date: 19/09/2020, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
          //   }
          // );
          if (vendProductId === '491c8f9f-1e00-a9c4-a82c-8fdba5de6329'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${email} just bought a single virtual class, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
              }
            );
          }
          else if (vendProductId === '06e22a00-c8e9-e3fb-ed46-46324ad1b0b9'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${email} just bought a Choreography Video Project class, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
              }
            );
          }
          else if (vendProductId === '7a154af8-b067-b337-aa1c-06ab6d1df79a'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${email} just bought a Double Class Virtual Dance Pass, please contact ${name} via ${email} or ${phoneNum} or  IG ${ighandlename}`}
              }
            );
          }
        }
      });
    }
    else if (userId && (vendProductId === unlimitedOutdoorClassVendProductId)){
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';

        return request.post(
          " https://hooks.slack.com/services/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",
          {json:{
            text:`${name} (${email}) just bought ${productName}.`}
          }
        );
      });
    }
    else if (userId && promoType && !isAutoInvoice){
     
      return admin.firestore().collection('users').doc(userId).get().then(doc=>{
        const data = doc.data();
        const email = data && data.email;
        const name = (data && data.name) || 'Customer';

        if (promoType && promoType.includes('flx') && createdFromApp){
          // for single
          if (packageId && packageId === 'nVBuI66WGttWrwL4mDuy'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${name} (${email}) has successfully bought flxsingleaccess 2022 promo.`}
              }
            );
          }
          else if (packageId && packageId === 'UQHWN9nsDAZiuiBlcsP7'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${name} (${email}) has successfully bought flxallaccess 2022 promo.`}
              }
            );
          }
        }
        else if (promoType && promoType === 'angpau2022' && angpauRefEmail){
          if (packageId && packageId === 'hhForDFr6YIbSQNgkUcF'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${name} referred by ${angpauRefEmail} has purchased the all access angpau membership`}
              }
            );
          }
          else if (packageId && packageId === 'GjzBC8zwfUTDuefjMDQi'){
            return request.post(
              "https://hooks.slack.com/services/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",
              {json:{
                text:`${name} referred by ${angpauRefEmail} has purchased the single access angpau membership`}
              }
            );
          }
        }
      });
    }
    else{return Promise.resolve()}
  }
);

exports.modifyPayment = functions.firestore
  .document('payments/{paymentId}')
  .onWrite((change, context) => {

    const document = (change.after && change.after.exists) ? change.after.data() : ((change.before && change.before.exists) ? change.before.data() : null);
    if(!document){
      //deleted
      console.log('removing payment: ', document);
      return null;
    }
    // Get an object with the previous document value (for update or delete)
    // const oldDocument = event.data.previous.data();

    // perform desired operations ...
    const userId = document && document.userId;
    const vendProductId = document && document.vendProductId;
    const type = document && document.type;

    if (userId && (type !== 'personalTraining')) {
      console.log("Payment updated - touching userId", userId);
      const timestamp = admin.firestore.FieldValue.serverTimestamp();
      let updatedPayment = {paymentsUpdatedAt:timestamp};
      // if payment were made, which is not complimentary month and membership type, change complimentary promo to false
      if (vendProductId !== 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7' && type === 'membership'){
        updatedPayment = {
          paymentsUpdatedAt:timestamp,
          complimentaryPromo:admin.firestore.FieldValue.delete(), 
        }
      }
      return admin.firestore().collection('users').doc(userId).update(updatedPayment);
    }

    else if (type === 'personalTraining'){
      console.log('personal training type: ', type);
      const paymentRef = admin.firestore().collection('payments').where('userId', '==', userId).where('type', '==', 'personalTraining').get();

      return Promise.all([paymentRef]).then(result=>{
        const paymentResult = result[0];
        var totalAcuityCredit = 0;

        paymentResult && paymentResult.forEach(doc=>{
          const paymentData = doc.data();
          const credit = paymentData.credit;
          const status = paymentData.status;
          const userId = paymentData.userId;
          if (credit && (status==='CLOSED') && userId){
            totalAcuityCredit = totalAcuityCredit + credit;
          }
        });

        // console.log('totalAcuityCredit: ', totalAcuityCredit);

        const updatedPayment = {
          paymentsUpdatedAt:timestamp,
          totalAcuityCredit:totalAcuityCredit
        }

        return admin.firestore().collection('users').doc(userId).update(updatedPayment);
      });    
    }
    else{
      //get vendSale
      const vendSaleId = document.vendSaleId;
      var vendCustomerId = null;
      if(vendSaleId){
        return admin.firestore().collection('vendSales').doc(vendSaleId).get().then(doc=>{
          const data = doc.data();
          vendCustomerId = data && data.customer_id;
          if(vendCustomerId){
            return admin.firestore().collection('vendCustomers').doc(vendCustomerId).get();
          }
          return null;
        }).then(doc=>{
          if(doc){
            const data = doc.data();
            const email = data && data.email;
            const processedEmail = email && email.trim().toLowerCase();
            if(processedEmail && processedEmail.length > 0){
              return admin.firestore().collection('users').where('email', '==', processedEmail).get()
            }
          }
          return null
        }).then(docs=>{
          if(docs){
            var updateCount = 0;
            const batch = admin.firestore().batch();
            docs.forEach(doc => {
              updateCount += 1;
              batch.update(doc.ref, {vendCustomerId:vendCustomerId});
            });
            if(updateCount > 0){
              return batch.commit();
            }
          }
          return null
        });
      }

      return Promise.reject(new Error("No userId for payment", document.id));
    }
  }
);


// for unlimited outdoor class product
// const unlimitedOutdoorClassVendProductId = '347cf233-d5d7-f452-dd2b-f533f7271a04';
const unlimitedOutdoorClassVendProductId = '629f766f-578d-f239-293b-fb8a016147b8';
const virtualDancePassVendProductId = '948feb3c-0447-0723-6817-5e4ab7daa399';

// Once the generateInvoices function is called, any changes in invoices db will update the user db
// and sendreceipt email to the user if it is paid.
exports.modifyInvoice = functions.firestore
  .document('invoices/{invoiceId}')
  .onWrite((change, context) => {

  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  const beforeRef = change.before;
  const afterRef = change.after;
  const beforeData = beforeRef.data();
  const afterData = afterRef.data();
  const userId = afterData && afterData.userId;
  const totalPrice = afterData && afterData.totalPrice;
  const packageId = afterData && afterData.packageId;
  const quantity = (afterData && afterData.quantity)? afterData.quantity:1;
  // const is3MthPkg = get3Mpkgs(packageId);
  const is3MKLCCPkg = packageId && is3MonthKLCCPackage(packageId);
  const is3MTTDIPkg = packageId && is3MonthTTDIPackage(packageId);
  const allAccessMonthlyDefaultPkg = 'TJ7Fiqgrt6EHUhR5Sb2q'; //330
  const singleAccessMonthlyDefaultPkg = 'vf2jCUOEeDDiIQ0S42BJ'; //250
  // const covertedPkgId = (packageId && is3MKLCCPkg)? allAccessMonthlyDefaultPkg : singleAccessMonthlyDefaultPkg;
  // for jan2020 and aug2020 promo, convert it to either single or all access
  const covertedPkgId = convertToSingleOrAllAccessPkg(packageId);  
  
  const type = afterData && afterData.type;
  const selectedAMPM = afterData && afterData.selectedAMPM;
  const selectedDay = afterData && afterData.selectedDay;
  const trainerName = afterData && afterData.trainerName;
  const vendProductId = afterData && afterData.vendProductId;
  // for virtual class
  const city = afterData && afterData.city;
  const ighandlename = afterData && (afterData.ighandlename || afterData.ighandleName);
  const phoneNum = (afterData && afterData.phone)? afterData.phone: (afterData && afterData.phoneNum)? afterData.phoneNum:'';
  const selectedMemberOption = afterData && afterData.selectedMemberOption;
  // for online mywellness
  const coachName = afterData && afterData.coachName;
  // for babel dance
  const classDate = afterData && afterData.classDate;
  const classTime = afterData && afterData.classTime;
  const instructorName = afterData && afterData.instructorName;
  const classRemark = afterData && afterData.classRemark;
  const vendProductName = afterData && afterData.vendProductName;
  // for angpau2022
  const promoType = afterData && afterData.promoType;
  const angpauRefEmail = afterData && afterData.angpauRefEmail;
  const angpauRefUserId = afterData && afterData.angpauRefUserId;
  const angpauRefName = afterData && afterData.angpauRefName;

  // console.log('instructorName: ', instructorName);
  // console.log('classRemark: ', classRemark);

  if(!beforeRef.exists){
    //new
    console.log('no before ref data, no action');
    return Promise.resolve();
  }

  if(!afterRef.exists){
    //deleted
    console.log('no after ref data, no action');
    return Promise.resolve();
  }

  if(!beforeData.paid && afterData.paid && !afterData.receiptMailed && (type==='virtualTraining' || type==='onlinemywellness' || type==='virtualClass' || type==='babelDance' || type === 'vClass')){
    return admin.firestore().collection('users').doc(userId).get().then(doc=>{
      const data = doc.data();
      const email = data && data.email;
      const name = (data && data.name) || 'Customer';
      const date = afterData.createdAt && moment(getTheDate(afterData.createdAt)).format('MMM YYYY');
      const dayDate = afterData.createdAt && moment(getTheDate(afterData.createdAt)).format('DD MMM YYYY');
      const phone = (data && data.phone)? data.phone:phoneNum;
    
      var isklccProduct = vendProductId && (vendProductId === '2b3680b6-0c48-3e9f-fb88-e5b7827d046f' || 
      vendProductId === '2bbc5ceb-d5fb-ae53-4805-06025dbef4bd' || vendProductId === '6567972e-d12e-b51a-76cf-9972d47d54d2' || vendProductId === 'b361d927-c3a9-919c-f714-dea36c7f5583');

      if (type==='virtualTraining' || type === 'vClass'){
        return sendVirtualTrainerEmail(email, name, totalPrice, afterRef.id, date, selectedAMPM, selectedDay, trainerName, phone, isklccProduct);
      }
      else if (type==='onlinemywellness'){
        return sendVirtualWelnessEmail(email, name, totalPrice, afterRef.id, date, selectedAMPM, selectedDay, trainerName, coachName, phone, ighandlename);
      }
      else if (type==='virtualClass'){
        return sendReceiptEmailForVirtualClass(email, name, totalPrice, afterRef.id, date, city, ighandlename, phoneNum, selectedMemberOption);
      }
      else if(type==='babelDance' && classRemark){
        return sendDanceReceiptEmail(email, name, totalPrice, afterRef.id, date, ighandlename, city, classDate, classTime, instructorName, classRemark, phoneNum);
      }
      else if(type==='babelDance' && vendProductId && (vendProductId === '06e22a00-c8e9-e3fb-ed46-46324ad1b0b9' || vendProductId === '491c8f9f-1e00-a9c4-a82c-8fdba5de6329' || vendProductId === '7a154af8-b067-b337-aa1c-06ab6d1df79a')){
        return sendDanceReceiptEmailv2(email, name, totalPrice, afterRef.id, dayDate, ighandlename, vendProductName, phoneNum);
      }
      else{
        return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
      }
    }).then(()=>{
      return afterRef.ref.update({receiptMailed:true, receiptMailedAt:timestamp});
    }).then((doc)=>{
      // console.log('thedoc: ', doc);
      return null;
    });
  }

  // for product && memberships
  else if(!beforeData.paid && afterData.paid && !afterData.receiptMailed){
    //invoice marked as paid so send receipt if not yet mailed then update receiptMailed
    //retrieve user
    return admin.firestore().collection('users').doc(userId).get().then(doc=>{
      const data = doc.data();
      const email = data && data.email;
      const name = (data && data.name) || 'Customer';
      const date = afterData.createdAt && moment(getTheDate(afterData.createdAt)).add(3, 'days').format('MMM YYYY');
      const promoJan2020 = data && data.promoJan2020;
      const promoAug2020 = data && data.promoAug2020;
      const promoMidSep2020 = data && data.promoMidSep2020;
      // var promoJanValue = 1;
      
      if (promoJan2020 === 4){
        if(is3MTTDIPkg){
          return admin.firestore().collection('users').doc(userId).update({
            promoJan2020:promoJan2020+quantity,
            packageId:'vf2jCUOEeDDiIQ0S42BJ'
          })
          .then(()=>{return sendReceiptEmail(email, name, totalPrice, afterRef.id, date)})
        }
      }
      if ((promoJan2020 <= 4) && (is3MKLCCPkg || is3MTTDIPkg)){
        // console.log('promoJan: ', promoJan2020);
        // convert to monthly package
        if (promoJan2020 === 4){
          return admin.firestore().collection('users').doc(userId).update({
            // promoJan2020:admin.firestore.FieldValue.delete(),
            promoJan2020:promoJan2020+quantity,
            packageId:covertedPkgId
          })
          .then(()=>{return sendReceiptEmail(email, name, totalPrice, afterRef.id, date)})
        }
        else if (promoJan2020 <= 3){
          return admin.firestore().collection('users').doc(userId).update({promoJan2020:promoJan2020+quantity})
          .then(()=>{
            return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
          });
        }
        else{
          // app should not go here
          return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
        }
      }
      // for august promo
      else if ((promoAug2020 <= 3) && (packageId==='YsOxVJGLRXrHDgNTBach' || packageId==='AHgEEavKwpJoGTMOzUdX')){
        if (promoAug2020 === 3){
          return admin.firestore().collection('users').doc(userId).update({
            promoAug2020:promoAug2020+quantity,
            packageId:covertedPkgId
          })
          .then(()=>{return sendReceiptEmail(email, name, totalPrice, afterRef.id, date)})
        }
        else if (promoAug2020 <= 2){
          return admin.firestore().collection('users').doc(userId).update({promoAug2020:promoAug2020+quantity})
          .then(()=>{
            return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
          })
        }
        else{
          // app should not go here
          return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
        }
      }
      // for mid september promo
      else if ((promoMidSep2020 <= 3) && (packageId==='hUZjGJR77bP30I3fjvwD' || packageId==='kh513XOaG7eLX4z9G0Ft')){
        if (promoMidSep2020 === 3){
          return admin.firestore().collection('users').doc(userId).update({
            promoMidSep2020:promoMidSep2020+quantity,
            packageId:covertedPkgId
          })
          .then(()=>{return sendReceiptEmail(email, name, totalPrice, afterRef.id, date)})
        }
        else if (promoMidSep2020 <= 2){
          return admin.firestore().collection('users').doc(userId).update({promoMidSep2020:promoMidSep2020+quantity})
          .then(()=>{
            return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
          })
        }
        else{
          // app should not go here
          return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
        }
      }
      else if (promoType && promoType === 'angpau2022' && angpauRefEmail && angpauRefName){
        return sendReceiptEmail(email, name, totalPrice, afterRef.id, date).then(()=>{
          return sendAngpauReceivedEmail(angpauRefEmail, angpauRefName, name);
        })
      }
      // for unlimited outdoor class
      else if (vendProductId === virtualDancePassVendProductId){
        // send this email to Billy, Tony, Kish, Lychee and Davids
        return sendDanceReceiptEmail(email, name, totalPrice, afterRef.id, date);
      }
       // for dance class
       else if (vendProductId === unlimitedOutdoorClassVendProductId || vendProductId === '491c8f9f-1e00-a9c4-a82c-8fdba5de6329' || vendProductId === '06e22a00-c8e9-e3fb-ed46-46324ad1b0b9'){
        // send this email to Billy, Tony, Kish, Lychee and Davids
        return sendCutomReceiptEmail(email, name, totalPrice, afterRef.id, date);
      }
      else{
        // console.log('modifyInvoiceDate: ', date);
        return sendReceiptEmail(email, name, totalPrice, afterRef.id, date);
      }
    }).then(()=>{
      return afterRef.ref.update({receiptMailed:true, receiptMailedAt:timestamp});
    });

  }else{
    //do nothing
    return Promise.resolve();
  }
});


// // // // // cron job to convert from firestore to google drive
// // // // exports.uploadToDrive = functions.https.onRequest((req, res) => {
// // // //   const usersQuery = admin.firestore().collection('users').get();

// // // //   return Promise.all([usersQuery]).then(result=>{
// // // //     // var users = {};
// // // //     var users = [];
// // // //     const usersResults = result[0];
// // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // // //     usersResults.forEach(user=>{
// // // //       if (user && user.data()){
// // // //         const data = user.data();
// // // //         const cancelledMember = data.cancellationDate? true:false;
// // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// // // //         if (!cancelledMember && isExpiredMember){
// // // //           // users[user.id] = user.data();
// // // //           users.push(user.id, user.data());
// // // //         }
// // // //       }
// // // //     });
// // // //     console.log('theusers: ', users);

// // // //     const user_csvFormat = convertToCSV(users);
// // // //     console.log('user_csvFormat: ', user_csvFormat);
// // // //     var blob = new Blob([user_csvFormat], {type: "text/plain;charset=utf-8"});
// // // //     FileSaver.saveAs(blob, "userWithoutFreeze.csv");
// // // //     return res.status(200).send({
// // // //       success:true,
// // // //       data: 'data',
// // // //       user_csvFormat
// // // //     });
// // // //   });
// // // // });

// // // // // JSON to CSV Converter
// // // // function convertToCSV(objArray){
// // // //   var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
// // // //   var str = '';

// // // //   console.log('objArray: ', objArray);
// // // //   console.log('theArray: ', array);

// // // //   for (var i = 0; i < array.length; i++) {
// // // //       var line = '';
// // // //       for (var index in array[i]) {
// // // //           if (line !== '') line += ','
// // // //           line += array[i][index];
// // // //       }
// // // //       str += line + '\r\n';
// // // //   }
// // // //   return str;
// // // //   // return array;
// // // // }

// cron job to terminate the user
exports.terminateUser = functions.https.onRequest((req, res) => {

  const itemData = req.body;
  const emailInput = itemData && itemData.email;

  const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).get():admin.firestore().collection('users').get();
  const gantnerQuery = admin.firestore().collection('gantners').where('authorized', '==', true).where('registered', '==', true).get();
  // const usersQuery = admin.firestore().collection('users').
  //   where('email', '==', 'kelvinltk93@gmail.com').get();
  // const invoiceQuery = admin.firestore().collection('invoices').
  // where('paid', '==', false).where('type', '==', 'membership').
  // get();
  
  var emailTerminationPromises = [];
  return Promise.all([usersQuery, gantnerQuery]).then(result=>{
    var batch = admin.firestore().batch();
    const usersResults = result[0];
    const gantnerResults = result[1];
    // const invoiceResults = result[1];
    const timestamp = admin.firestore.FieldValue.serverTimestamp();
    var emailPromise = null;

    const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
    var inActiveCount = 0;

    var gantnerMap = {};
    gantnerResults && gantnerResults.forEach(doc=>{
      const data = doc.data();
      const createdAt = data.createdAt;
      const userId = data.userId;
      if (userId && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().subtract(4, 'months'))){
        gantnerMap[userId] = data;
      }
    });

    var users = {};
    usersResults.forEach(user=>{
      if (user && user.data()){
        const data = user.data();
        const cancelledMember = data.cancellationDate? true:false;
        const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
        const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
        const email = data && data.email;
        const name = data && data.name;
        const gantnerData = gantnerMap[user.id];
        // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
        // console.log('membershipEndsMoment123: ', membershipEndsMoment);
        const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(4, 'months')); 
        const packageId = user.packageId;
        const isComplimentaryPackage = packageId && (packageId==='L6sJtsKG68LpEUH3QeD4'||packageId==='jnB6jQf8aD8DVUVmrZII'||packageId==='yKLfNYOPzXHoAiknAT24');
        if (!cancelledMember && !gantnerData && isExpiredMember && membershipEnds && inActiveCount<=450 && !isComplimentaryPackage){
          users[user.id] = user.data();

           // for sending receiptMail
          // emailPromise = sendTerminationEmail(email, name, moment(timestamp).format('D MMM YYYY')).then(results=>{
          //   return admin.firestore().collection('users').doc(user.id).update({autoTerminate:true, cancellationDate:timestamp, cancellationReason:'autoTerminated'});
          // });
          // if(emailPromise){
          //   emailTerminationPromises.push(emailPromise);
          //   inActiveCount+=1;
          // }

          admin.firestore().collection('users').doc(user.id).update({autoTerminate:true, cancellationDate:timestamp, cancellationReason:'autoTerminated3'});
          inActiveCount+=1;
        }
      }
    });

    // return Promise.all(emailTerminationPromises).then(results=>{
      return res.status(200).send({
        success:true,
        message: 'OK',
        inActiveCount,
        users
      });
    // });
  });
});

// cron job to send email to klccmember
exports.sendReminderRegVisitorKLCC = functions.https.onRequest((req, res) => {

  const itemData = req.body;
  const emailInput = itemData && itemData.email;

  const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).where('createdFrom', '==', 'klccExperience').get()
    :admin.firestore().collection('users').where('createdFrom', '==', 'klccExperience').get();
  
  return Promise.all([usersQuery]).then(result=>{
    var batch = admin.firestore().batch();
    const usersResults = result[0];
    // const invoiceResults = result[1];
    const timestamp = admin.firestore.FieldValue.serverTimestamp();
    var emailPromise = null;
    var emailPromises = [];

    const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
    var userCount = 0;

    var users = {};
    usersResults.forEach(user=>{
      if (user && user.data()){
        const data = user.data();
        const createdAt = data.createdAt;
        const email = data && data.email;
        const name = data && data.name;
        const klccExpReminderEmail = data && data.klccExpReminderEmail;
        if (createdAt && moment().isSameOrAfter(moment(getTheDate(createdAt)).add(3, 'days')) && !klccExpReminderEmail){
          userCount+=1;
          emailPromise = sendReminderRegVisitorEmail(email, name).then(result=>{
            return admin.firestore().collection('users').doc(user.id).update({klccExpReminderEmail:true, klccExpReminderEmailAt:timestamp});
          });
          emailPromises.push(emailPromise);
        }
      }
    });

    return Promise.all(emailPromises).then(results=>{
      return res.status(200).send({
        success:true,
        message: 'OK',
        userCount
      });
    });
  });
});

// // // // // generate invoice ver 2
// // // // // exports.generateInvoicesv2 = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'viknesh_loginathan@mckinsey.com').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   const invoicesQuery = admin.firestore().collection('invoices').where('paid', '==', false).where('type', '==', 'membership').get();
// // // // //   // const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   const allAccessMonthlyDefaultPkg = 'TJ7Fiqgrt6EHUhR5Sb2q'; //330
// // // // //   const singleAccessMonthlyDefaultPkg = 'vf2jCUOEeDDiIQ0S42BJ'; //250

// // // // //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// // // // //     // Get a new write batch
// // // // //     var batch = admin.firestore().batch();

// // // // //     const usersResults = results[0];
// // // // //     const packagesResults = results[1];
// // // // //     const invoicesResults = results[2];
// // // // //     // const freezesResults = results[3];

// // // // //     var packageMap = {};
// // // // //     packagesResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       if (((data.renewalTerm === 'month')||(data.renewalTerm === 'monthly')) &&
// // // // //         !is3MonthKLCCPackage(doc.id) && !is3MonthTTDIPackage(doc.id)
// // // // //       ) {
// // // // //         // console.log('packageData: ', data);
// // // // //         packageMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     // console.log('packageMap: ', packageMap);

// // // // //     // var freezeMap = {};
// // // // //     // var userIdFreezeMap = {};
// // // // //     // freezesResults.forEach(doc=>{
// // // // //     //   const data = doc.data();
// // // // //     //   const freezeFor = data && data.freezeFor? moment(data.freezeFor).isValid()? data.freezeFor:null : null;
// // // // //     //   // const freezeFor = data && data.freezeFor;
// // // // //     //   const createdAt = data && data.createdAt? moment(data.createdAt).isValid()? data.createdAt:null:null;
// // // // //     //   // const createdAt = data && data.createdAt;
// // // // //     //   const userId = data && data.userId;
// // // // //     //   if(userId && (freezeFor!=='undefined') && (createdAt!=='undefined')){
// // // // //     //     freezeMap[doc.id] = data;
// // // // //     //     var userFreezes = userIdFreezeMap[userId];
// // // // //     //     if(!userFreezes){
// // // // //     //       userFreezes = [];
// // // // //     //     }
// // // // //     //     userFreezes.push(data);
// // // // //     //     userIdFreezeMap[userId] = userFreezes;
// // // // //     //   }
// // // // //     // });

// // // // //     // console.log('userIdFreezeMap: ', userIdFreezeMap);

// // // // //     var invoiceMap = {};
// // // // //     var invoiceIdForUserIdMap = {};
// // // // //     invoicesResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const userId = data && data.userId;
// // // // //       const packageId = data && data.packageId;
// // // // //       const paid = data && data.paid ? data.paid : false;
      
// // // // //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// // // // //         invoiceIdForUserIdMap[userId] = doc.id;
// // // // //         invoiceMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // // // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// // // // //     var needsUpdatedInvoiceCount = 0;
// // // // //     var newInvoiceCount = 0;
// // // // //     var needsDeleteCount = 0;
// // // // //     var invoiceList = [];
// // // // //     var existingInvoiceList = [];
// // // // //     var newInvoiceList = [];
// // // // //     var userSwitchToDefaultPkgCount = 0;
    
// // // // //     usersResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const packageId = data && data.packageId;
// // // // //       const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// // // // //       const packageData = packageId && packageMap[packageId];
// // // // //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// // // // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // // //       const membershipEnds = data && data.autoMembershipEnds;
// // // // //       const promoJan2020 = data && data.promoJan2020;
// // // // //       const cancellationDate = data && data.cancellationDate;
    
// // // // //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// // // // //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(0, 'days')) && !cancellationDate;
    
// // // // //       var membershipCancelled = false;
// // // // //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// // // // //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// // // // //         membershipCancelled = true;
// // // // //       }
      
// // // // //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// // // // //       const needsUpdate = (needsPayment === true || invoiceId) && !promoJan2020; // skip generate the promoJan2020 invoices

// // // // //       if(data.locked){
// // // // //         console.log("Locked invoice", invoiceId);
// // // // //         return;
// // // // //       }

// // // // //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// // // // //       // if((!needsPayment || membershipCancelled) && invoiceId){
// // // // //       if(membershipCancelled){
// // // // //         if (!needsUpdate && invoiceId){
// // // // //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             needsUpdatedInvoiceCount = 0;
// // // // //             newInvoiceCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// // // // //           needsDeleteCount += 1;
// // // // //         }
// // // // //         else{
// // // // //           // console.log('membershipcancelled, no invoice generated, do nothing.');
// // // // //         }
// // // // //       }
      
// // // // //       // generate invoice for monthly package
// // // // //       else if(packageData && needsUpdate && membershipCancelled === false && (renewalTerm === 'month')||(renewalTerm === 'monthly')){
// // // // //         // var applicableFreezeMonths = 0;
// // // // //         // const userFreezes = userIdFreezeMap[doc.id];
// // // // //         // if (userFreezes){
// // // // //         //   console.log('userFreeze123: ', userFreezes);
// // // // //         //   for (var freezeIndex = 0; userFreezes && freezeIndex < userFreezes.length; freezeIndex++) {
// // // // //         //     const userFreeze = userFreezes[freezeIndex];
// // // // //         //     const freezeFor = userFreeze.freezeFor;
// // // // //         //     const freezeForMoment = freezeFor && moment(getTheDate(freezeFor));

// // // // //         //     // if(freezeForMoment && freezeForMoment.isBetween(membershipEndsMoment, startOfTodayMoment, 'day', '[]')){
// // // // //         //       applicableFreezeMonths += 1;
// // // // //         //     // }
// // // // //         //   }
// // // // //         // }
        
// // // // //         // console.log('applicableFreezeMonths: ', applicableFreezeMonths)
// // // // //         var amount;
// // // // //         var invoiceData;
// // // // //         // if the invoice is already created
// // // // //         if(invoiceId){
// // // // //           const unitPrice = parseInt(packageData.monthlyFee);
// // // // //           console.log('membershipEndsMomentInvoiceId: ', membershipEndsMoment.format('DDMMYYYY'));
// // // // //           // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// // // // //           const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
// // // // //           console.log('totalQuantity: ', quantity);
// // // // //           // to avoid creating the 0 or negative invoices
// // // // //           // 0 is occured when the user is currently freezing
// // // // //           if (quantity<=0){
// // // // //             console.log('qty is equal to 0');
// // // // //             return;
// // // // //           }
// // // // //           const totalPrice = unitPrice*quantity;
// // // // //           if (totalPrice<=0){
// // // // //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //           }
// // // // //           amount = get12StringAmount(totalPrice);
// // // // //           const existingInvoiceData = invoiceMap[invoiceId];
// // // // //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// // // // //           const existingAmount = existingInvoiceData.amount;
// // // // //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;

// // // // //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// // // // //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// // // // //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// // // // //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// // // // //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// // // // //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// // // // //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// // // // //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// // // // //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// // // // //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;

// // // // //           invoiceData = {
// // // // //             createdAt : createdAt,
// // // // //             packageId : packageId,
// // // // //             paid : !needsPayment,
// // // // //             paymentFailed : false,
// // // // //             paymentId : null,
// // // // //             userId : doc.id,
// // // // //             unitPrice : `${unitPrice}`,
// // // // //             totalPrice : `${totalPrice}`,
// // // // //             amount : amount,
// // // // //             quantity : quantity,
// // // // //             invoiceMailed : invoiceMailed,
// // // // //             invoiceMailedAt : invoiceMailedAt,
// // // // //             dueMailed : dueMailed,
// // // // //             dueMailedAt : dueMailedAt,
// // // // //             overdueMailed : overdueMailed,
// // // // //             overdueMailedAt : overdueMailedAt,
// // // // //             receiptMailed : receiptMailed,
// // // // //             type : 'membership',
// // // // //             hasSST : moment(createdAt).isSameOrAfter(moment('2018-09-01'), 'day') ? true : false,
// // // // //             billingDate: membershipEnds?membershipEnds:null,
// // // // //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// // // // //             isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
// // // // //           }

// // // // //           existingInvoiceList.push(invoiceData);
// // // // //           console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// // // // //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// // // // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             needsUpdatedInvoiceCount = 0;
// // // // //             newInvoiceCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           needsUpdatedInvoiceCount += 1;
// // // // //         }
// // // // //         // create a new invoice
// // // // //         else if(membershipCancelled === false){
// // // // //           //TODO add invoice id
// // // // //           invoiceId = admin.firestore().collection('invoices').doc().id;
          
// // // // //           const unitPrice = parseInt(packageData.monthlyFee);
// // // // //           // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// // // // //           const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
// // // // //           // 0 is occured when the user is currently freezing
// // // // //           if (quantity <= 0){
// // // // //             console.log('qty is equal to 0');
// // // // //             return;
// // // // //           }
// // // // //           const totalPrice = unitPrice*quantity;
// // // // //           if (totalPrice<=0){
// // // // //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //           }
// // // // //           amount = get12StringAmount(totalPrice);
// // // // //           invoiceData = {
// // // // //             createdAt : startOfTodayMoment.toDate(),
// // // // //             packageId : packageId,
// // // // //             paid : !needsPayment,
// // // // //             paymentFailed : false,
// // // // //             paymentId : null,
// // // // //             userId : doc.id,
// // // // //             unitPrice : `${unitPrice}`,
// // // // //             totalPrice : `${totalPrice}`,
// // // // //             amount : amount,
// // // // //             quantity : quantity,
// // // // //             invoiceMailed : false,
// // // // //             dueMailed : false,
// // // // //             overdueMailed : false,
// // // // //             receiptMailed : false,
// // // // //             type : 'membership',
// // // // //             hasSST : true,
// // // // //             billingDate: membershipEnds?membershipEnds:null,
// // // // //             isAfterPKPCharge: startOfTodayMoment.isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
// // // // //           }
// // // // //           // console.log("Adding invoice", amount, invoiceId, invoiceData, applicableFreezeMonths);
// // // // //           // console.log('invoiceData: ', invoiceData);
          
// // // // //           newInvoiceList.push(invoiceData);
// // // // //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);
// // // // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             needsUpdatedInvoiceCount = 0;
// // // // //             newInvoiceCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           newInvoiceCount += 1;
// // // // //         }
// // // // //       }
// // // // //       // if the membership is expired and the current package is other than monthly package, 
// // // // //       // convert the package to monthly package first.
// // // // //       // the second time API call will generate monthly invoices
// // // // //       // else if (packageData && needsUpdate && membershipCancelled === false){
// // // // //       //   // check the package, convert it to monthly package, all access or single access
// // // // //       //   const updatedPkgId = isKLCCPkg? allAccessMonthlyDefaultPkg:singleAccessMonthlyDefaultPkg;
// // // // //       //   batch.update(admin.firestore().collection('users').doc(doc.id), {packageId:updatedPkgId});
// // // // //       //   if(userSwitchToDefaultPkgCount >= 499){
// // // // //       //     batch.commit();
// // // // //       //     userSwitchToDefaultPkgCount = 0;
// // // // //       //     batch = admin.firestore().batch();
// // // // //       //   }
// // // // //       //   userSwitchToDefaultPkgCount += 1;
// // // // //       // }
// // // // //     });

// // // // //     console.log('newInvoiceCount: ', newInvoiceCount);
// // // // //     var theObject = {
// // // // //       success:true,
// // // // //       message: 'no invoice updated',
// // // // //       createdAt: timestamp
// // // // //     }

// // // // //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// // // // //       // return 
// // // // //       return batch.commit().then(()=>{
// // // // //         console.log("Updated invoice", needsUpdatedInvoiceCount);
// // // // //         console.log('New invoices', newInvoiceCount);
// // // // //         console.log('Deleted invoices', needsDeleteCount);
// // // // //         theObject = {
// // // // //           success:true,
// // // // //           message: 'OK',
// // // // //           needsUpdatedInvoiceCount,
// // // // //           newInvoiceCount,
// // // // //           needsDeleteCount,
// // // // //           existingInvoiceList,
// // // // //           newInvoiceList,
// // // // //           userSwitchToDefaultPkgCount,
// // // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //         };
// // // // //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// // // // //         return res.status(200).send(theObject);
// // // // //       }).catch((error)=>{
// // // // //         console.log('error batch: ', error);
// // // // //       });
// // // // //       // return res.status(200).send(theObject);
// // // // //     }else{
// // // // //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// // // // //       return res.status(200).send(theObject);
// // // // //     }
// // // // //   });
// // // // // });

// // // generate invoice ver 4 (with SST) monthly all package only
// // exports.generateInvoicesv4 = functions.https.onRequest((req, res) => {
// //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'seanlim88@gmail.com').get();
// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const itemData = req.body;
// //   // console.log('itemData: ', itemData);
// //   const emailInput = itemData && itemData.email;

// //   const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).get():
// //     admin.firestore().collection('users').where('packageId', '==', 'TJ7Fiqgrt6EHUhR5Sb2q').get();

// //   const packagesQuery = admin.firestore().collection('packages')
// //   .where('renewalTerm', '==', 'month')
// //   .get();
// //   const invoicesQuery = admin.firestore().collection('invoices')
// //     .where('paid', '==', false)
// //     .where('type', '==', 'membership')
// //     .where('packageId', '==', 'TJ7Fiqgrt6EHUhR5Sb2q')
// //     // .where('createdAt', '>=', moment('20200626').startOf('day').toDate())
// //     .get();
// //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// //   const isJuly2020 = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');

// //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// //     // Get a new write batch
// //     var batch = admin.firestore().batch();

// //     const usersResults = results[0];
// //     const packagesResults = results[1];
// //     const invoicesResults = results[2];

// //     var packageMap = {};
// //     packagesResults.forEach(doc=>{
// //       const data = doc.data();
// //       if (
// //           // doc.id === 'vf2jCUOEeDDiIQ0S42BJ' 
// //           doc.id === 'TJ7Fiqgrt6EHUhR5Sb2q'
        
// //       ){
// //         // console.log('packageData: ', data);
// //         packageMap[doc.id] = data;
// //       }
// //     });

// //     var invoiceMap = {};
// //     var invoiceIdForUserIdMap = {};
// //     invoicesResults.forEach(doc=>{
// //       const data = doc.data();
// //       const userId = data && data.userId;
// //       const packageId = data && data.packageId;
// //       const paid = data && data.paid ? data.paid : false;
// //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// //         invoiceIdForUserIdMap[userId] = doc.id;
// //         invoiceMap[doc.id] = data;
// //       }
// //     });

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// //     var needsUpdatedInvoiceCount = 0;
// //     var newInvoiceCount = 0;
// //     var needsDeleteCount = 0;
// //     var invoiceList = [];
// //     var existingInvoiceList = [];
// //     var newInvoiceList = [];
// //     var userSwitchToDefaultPkgCount = 0;

// //     var amount;
// //     var invoiceData;
    
// //     usersResults.forEach(doc=>{
// //       const data = doc.data();
// //       const packageId = data && data.packageId;
// //       const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// //       const packageData = packageId && packageMap[packageId];
// //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
// //       //const promoJan2020 = data && data.promoJan2020;
// //       const cancellationDate = data && data.cancellationDate;
// //       const monthlyFees = packageData && packageData.monthlyFees? packageData.monthlyFees:null;
// //       var paymentItems = [];
    
// //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')) && !cancellationDate;
// //       // console.log('needsPayment: ', needsPayment);
    
// //       var membershipCancelled = false;
// //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// //         membershipCancelled = true;
// //       }
      
// //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// //       const needsUpdate = (needsPayment === true || invoiceId); 

// //       if(data.locked){
// //         console.log("Locked invoice", invoiceId);
// //         return;
// //       }

// //       // console.log('membershipendMoment: ', membershipEndsMoment && membershipEndsMoment.format('DD/MM/YYYY'));
// //       // console.log('membershipendMomentIsSameOrAfter: ', membershipEndsMoment && membershipEndsMoment.isSameOrAfter(isJuly2020));
// //       // console.log('packageId: ', packageId);
// //       // console.log('packageData: ', packageData);
// //       // console.log('needsUpdate: ', needsUpdate);
// //       // console.log('membershipCancel: ', membershipCancelled);
// //       // console.log('renewalTerm: ', renewalTerm);
// //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// //       // if((!needsPayment || membershipCancelled) && invoiceId){
      
// //       if(membershipCancelled){
// //         if (!needsUpdate && invoiceId){
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //           needsDeleteCount += 1;
// //         }
// //         else{
// //           if (invoiceId){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //             if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //               batch.commit();
// //               needsUpdatedInvoiceCount = 0;
// //               newInvoiceCount = 0;
// //               needsDeleteCount = 0;
// //               batch = admin.firestore().batch();
// //             }
// //             console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //             needsDeleteCount += 1;
// //           }
// //           else{
// //             // console.log('no invoice, do nothing.');
// //           }
// //         }
// //       }

// //       // console.log('needsUpdate: ', needsUpdate);
// //       // generate new invoice for monthly package if it is on 1/7/2020;
// //       if(packageData && needsUpdate
// //         // && membershipEndsMoment.isSameOrAfter(moment('isJuly2020') && monthlyFees)
// //         // test for single monthly package only
// //         && monthlyFees && membershipEndsMoment && membershipEndsMoment.isValid()
// //       ){
        
// //         // console.log('create invoice')
// //         // price after july 2020
// //         const unitPriceAfterJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitPriceWithTaxAfterJuly2020 = parseFloat(packageData.monthlyFees[1]).toFixed(2);
// //         const unitTaxAfterJuly2020 = unitPriceWithTaxAfterJuly2020 - unitPriceAfterJuly2020;

// //         const unitPriceBeforeJuly2020 = parseFloat(parseFloat(packageData.monthlyFees[0])/1.06).toFixed(2);
// //         const unitPriceWithTaxBeforeJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitTaxBeforeJuly2020 = (unitPriceWithTaxBeforeJuly2020 - unitPriceBeforeJuly2020).toFixed(2);

// //         // console.log('unitPriceWithTaxBeforeJuly2020: ', unitPriceWithTaxBeforeJuly2020);
// //         // default unitPrice
// //         const unitPrice = parseFloat(packageData.monthlyFee).toFixed(2);

// //         // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
       
// //         const quantityBeforeJuly2020 = membershipEndsMoment.add(1, 'days').isBefore(isJuly2020)? ((isJuly2020.diff(membershipEndsMoment, 'months') + 1)): 0;
// //         // const quantityAfterJuly2020 = membershipEndsMoment.isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;
       
// //         // const quantityBeforeJuly2020 = membershipEndsMoment.isBefore(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) - (startOfTodayMoment.diff(isJuly2020, 'months') + 1):0;
// //         const quantityAfterJuly2020 = membershipEndsMoment.add(1, 'days').isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;

// //         // console.log('membershipEndsMoment.isSameOrAfter(isJuly2020): ', membershipEndsMoment.isSameOrAfter(isJuly2020));
// //         // console.log('quantityBeforeJuly: ', quantityBeforeJuly2020);
// //         // console.log('quantityAfterJuly: ', quantityAfterJuly2020);

// //         // to avoid creating the 0 or negative invoices
// //         // 0 is occured when the user is currently freezing
// //         if (quantity <= 0){
// //           console.log('qty is equal to 0');
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //         }
// //         // console.log('quantity: ', quantity);

// //         const totalPrice = unitPriceWithTaxBeforeJuly2020*quantityBeforeJuly2020 + unitPriceWithTaxAfterJuly2020*quantityAfterJuly2020;
// //         const totalTax = unitTaxBeforeJuly2020*quantityBeforeJuly2020 + unitTaxAfterJuly2020*quantityAfterJuly2020;

// //         if (quantityBeforeJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceBeforeJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxBeforeJuly2020,
// //             tax:unitTaxBeforeJuly2020,
// //             quantity: quantityBeforeJuly2020,
// //             isAfterJuly2020:false
// //           });
// //         }
// //         if (quantityAfterJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceAfterJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxAfterJuly2020,
// //             tax:unitTaxAfterJuly2020,
// //             quantity: quantityAfterJuly2020,
// //             isAfterJuly2020:true
// //           });
// //         }
         
// //         // console.log('paymentItem: ', paymentItems);
// //         // console.log('totalPrice: ', totalPrice);
// //         // console.log('totalTax: ', totalTax);
// //         amount = totalPrice && get12StringAmount(totalPrice);
// //         // console.log('theamount: ', amount);

// //         // if the invoice is already created
// //         if(invoiceId){
          
// //           if (totalPrice<=0){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           }
        
// //           const existingInvoiceData = invoiceMap[invoiceId];
// //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// //           const existingAmount = existingInvoiceData.amount;
// //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;
// //           const updatedAt = moment().tz('Asia/Kuala_Lumpur');

// //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;
        
// //           invoiceData = {
// //             createdAt : createdAt,
// //             updatedAt,
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : invoiceMailed,
// //             invoiceMailedAt : invoiceMailedAt,
// //             dueMailed : dueMailed,
// //             dueMailedAt : dueMailedAt,
// //             overdueMailed : overdueMailed,
// //             overdueMailedAt : overdueMailedAt,
// //             receiptMailed : receiptMailed,
// //             tax: `${totalTax.toFixed(2)}`,
// //             type: 'membership',
// //             hasSST :true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems,
// //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// //             // isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
// //           }

// //           existingInvoiceList.push(invoiceData);
// //           // console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           needsUpdatedInvoiceCount += 1;
// //         }
// //         // create a new invoice
// //         else if(!invoiceId){
// //           //TODO add invoice id
// //           invoiceId = admin.firestore().collection('invoices').doc().id;

// //           invoiceData = {
// //             createdAt : startOfTodayMoment.toDate(),
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             tax: `${totalTax}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : false,
// //             dueMailed : false,
// //             overdueMailed : false,
// //             receiptMailed : false,
// //             type : 'membership',
// //             hasSST : true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems : paymentItems
// //           }
// //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// //           // console.log('invoiceData: ', invoiceData);
          
// //           newInvoiceList.push(invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           newInvoiceCount += 1;
// //         }
// //       }

// //     });

// //     // console.log('newInvoiceCount: ', newInvoiceCount);
// //     var theObject = {
// //       success:true,
// //       message: 'no invoice updated',
// //       createdAt: timestamp
// //     }

// //     // const unpaidInvoiceSheetURL = 'https://us-central1-babelasia-37615.cloudfunctions.net/addUnpaidInvoiceToSheets';

// //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// //       // return 
// //       return batch.commit().then(()=>{
// //         // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //         // console.log('New invoices', newInvoiceCount);
// //         // console.log('Deleted invoices', needsDeleteCount);
// //         theObject = {
// //           success:true,
// //           message: 'OK',
// //           needsUpdatedInvoiceCount,
// //           newInvoiceCount,
// //           needsDeleteCount,
// //           existingInvoiceList,
// //           newInvoiceList,
// //           userSwitchToDefaultPkgCount,
// //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// //         };
// //         admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //         // var request = require("request");
// //         // return request.get(unpaidInvoiceSheetURL)
        
// //         return res.status(200).send(theObject);
// //       }).catch((error)=>{
// //         console.log('error batch: ', error);
// //       });
// //       // return res.status(200).send(theObject);
// //     }else{
// //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //       return res.status(200).send(theObject);
// //     }
// //   });
// // });

// // exports.generateInvoicesFLX = functions.https.onRequest((req, res) => {
// //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'seanlim88@gmail.com').get();
// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const itemData = req.body;
// //   // console.log('itemData: ', itemData);
// //   const emailInput = itemData && itemData.email;

// //   const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).get():
// //     admin.firestore().collection('users').get();

// //   const packagesQuery = admin.firestore().collection('packages')
// //   .where('promoName', '==', 'flx')
// //   .get();
// //   const invoicesQuery = admin.firestore().collection('invoices')
// //     .where('paid', '==', false)
// //     .where('type', '==', 'membership')
// //     // .where('createdAt', '>=', moment('20200626').startOf('day').toDate())
// //     .get();
// //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// //   const isJuly2020 = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');

// //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// //     // Get a new write batch
// //     var batch = admin.firestore().batch();

// //     const usersResults = results[0];
// //     const packagesResults = results[1];
// //     const invoicesResults = results[2];

// //     var packageMap = {};
// //     packagesResults.forEach(doc=>{
// //       const data = doc.data();
// //         // console.log('packageData: ', data);
// //       packageMap[doc.id] = data;
// //     });

// //     var invoiceMap = {};
// //     var invoiceIdForUserIdMap = {};
// //     invoicesResults.forEach(doc=>{
// //       const data = doc.data();
// //       const userId = data && data.userId;
// //       const packageId = data && data.packageId;
// //       const paid = data && data.paid ? data.paid : false;
// //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// //         invoiceIdForUserIdMap[userId] = doc.id;
// //         invoiceMap[doc.id] = data;
// //       }
// //     });

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// //     var needsUpdatedInvoiceCount = 0;
// //     var newInvoiceCount = 0;
// //     var needsDeleteCount = 0;
// //     var invoiceList = [];
// //     var existingInvoiceList = [];
// //     var newInvoiceList = [];
// //     var userSwitchToDefaultPkgCount = 0;

// //     var amount;
// //     var invoiceData;
    
// //     usersResults.forEach(doc=>{
// //       const data = doc.data();
// //       const packageId = data && data.packageId;
// //       const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// //       const packageData = packageId && packageMap[packageId];
// //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
// //       //const promoJan2020 = data && data.promoJan2020;
// //       const cancellationDate = data && data.cancellationDate;
// //       const monthlyFees = packageData && packageData.monthlyFees? packageData.monthlyFees:null;
// //       var paymentItems = [];
    
// //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')) && !cancellationDate;
// //       // console.log('needsPayment: ', needsPayment);
    
// //       var membershipCancelled = false;
// //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// //         membershipCancelled = true;
// //       }
      
// //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// //       const needsUpdate = (needsPayment === true || invoiceId); 

// //       if(data.locked){
// //         console.log("Locked invoice", invoiceId);
// //         return;
// //       }

// //       // console.log('membershipendMoment: ', membershipEndsMoment && membershipEndsMoment.format('DD/MM/YYYY'));
// //       // console.log('membershipendMomentIsSameOrAfter: ', membershipEndsMoment && membershipEndsMoment.isSameOrAfter(isJuly2020));
// //       // console.log('packageId: ', packageId);
// //       // console.log('packageData: ', packageData);
// //       // console.log('needsUpdate: ', needsUpdate);
// //       // console.log('membershipCancel: ', membershipCancelled);
// //       // console.log('renewalTerm: ', renewalTerm);
// //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// //       // if((!needsPayment || membershipCancelled) && invoiceId){
      
// //       if(membershipCancelled){
// //         if (!needsUpdate && invoiceId){
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //           needsDeleteCount += 1;
// //         }
// //         else{
// //           if (invoiceId){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //             if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //               batch.commit();
// //               needsUpdatedInvoiceCount = 0;
// //               newInvoiceCount = 0;
// //               needsDeleteCount = 0;
// //               batch = admin.firestore().batch();
// //             }
// //             console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //             needsDeleteCount += 1;
// //           }
// //           else{
// //             // console.log('no invoice, do nothing.');
// //           }
// //         }
// //       }

// //       // console.log('needsUpdate: ', needsUpdate);
// //       // generate new invoice for monthly package if it is on 1/7/2020;
// //       if(packageData && needsUpdate
// //         // && membershipEndsMoment.isSameOrAfter(moment('isJuly2020') && monthlyFees)
// //         // test for single monthly package only
// //         && monthlyFees && membershipEndsMoment && membershipEndsMoment.isValid()
// //       ){
        
// //         // console.log('create invoice')
// //         // price after july 2020
// //         const unitPriceAfterJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitPriceWithTaxAfterJuly2020 = parseFloat(packageData.monthlyFees[1]).toFixed(2);
// //         const unitTaxAfterJuly2020 = (unitPriceWithTaxAfterJuly2020 - unitPriceAfterJuly2020).toFixed(2);

// //         const unitPriceBeforeJuly2020 = parseFloat(parseFloat(packageData.monthlyFees[0])/1.06).toFixed(2);
// //         const unitPriceWithTaxBeforeJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitTaxBeforeJuly2020 = (unitPriceWithTaxBeforeJuly2020 - unitPriceBeforeJuly2020).toFixed(2);

// //         // console.log('unitPriceWithTaxBeforeJuly2020: ', unitPriceWithTaxBeforeJuly2020);
// //         // default unitPrice
// //         const unitPrice = parseFloat(packageData.monthlyFee).toFixed(2);

// //         // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
       
// //         const quantityBeforeJuly2020 = membershipEndsMoment.add(1, 'days').isBefore(isJuly2020)? ((isJuly2020.diff(membershipEndsMoment, 'months') + 1)): 0;
// //         // const quantityAfterJuly2020 = membershipEndsMoment.isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;
       
// //         // const quantityBeforeJuly2020 = membershipEndsMoment.isBefore(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) - (startOfTodayMoment.diff(isJuly2020, 'months') + 1):0;
// //         const quantityAfterJuly2020 = membershipEndsMoment.add(1, 'days').isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;

// //         // console.log('membershipEndsMoment.isSameOrAfter(isJuly2020): ', membershipEndsMoment.isSameOrAfter(isJuly2020));
// //         // console.log('quantityBeforeJuly: ', quantityBeforeJuly2020);
// //         // console.log('quantityAfterJuly: ', quantityAfterJuly2020);

// //         // to avoid creating the 0 or negative invoices
// //         // 0 is occured when the user is currently freezing
// //         if (quantity <= 0){
// //           console.log('qty is equal to 0');
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //         }
// //         // console.log('quantity: ', quantity);

// //         const totalPrice = unitPriceWithTaxBeforeJuly2020*quantityBeforeJuly2020 + unitPriceWithTaxAfterJuly2020*quantityAfterJuly2020;
// //         const totalTax = unitTaxBeforeJuly2020*quantityBeforeJuly2020 + unitTaxAfterJuly2020*quantityAfterJuly2020;

// //         if (quantityBeforeJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceBeforeJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxBeforeJuly2020,
// //             tax:unitTaxBeforeJuly2020,
// //             quantity: quantityBeforeJuly2020,
// //             isAfterJuly2020:false
// //           });
// //         }
// //         if (quantityAfterJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceAfterJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxAfterJuly2020,
// //             tax:unitTaxAfterJuly2020,
// //             quantity: quantityAfterJuly2020,
// //             isAfterJuly2020:true
// //           });
// //         }
         
// //         // console.log('paymentItem: ', paymentItems);
// //         // console.log('totalPrice: ', totalPrice);
// //         // console.log('totalTax: ', totalTax);
// //         amount = totalPrice && get12StringAmount(totalPrice);
// //         // console.log('theamount: ', amount);

// //         // if the invoice is already created
// //         if(invoiceId){
          
// //           if (totalPrice<=0){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           }
        
// //           const existingInvoiceData = invoiceMap[invoiceId];
// //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// //           const existingAmount = existingInvoiceData.amount;
// //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;
// //           const updatedAt = moment().tz('Asia/Kuala_Lumpur');

// //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;
        
// //           invoiceData = {
// //             createdAt : createdAt,
// //             updatedAt,
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : invoiceMailed,
// //             invoiceMailedAt : invoiceMailedAt,
// //             dueMailed : dueMailed,
// //             dueMailedAt : dueMailedAt,
// //             overdueMailed : overdueMailed,
// //             overdueMailedAt : overdueMailedAt,
// //             receiptMailed : receiptMailed,
// //             tax: `${totalTax.toFixed(2)}`,
// //             type: 'membership',
// //             hasSST :true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems,
// //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// //             // isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
// //           }

// //           existingInvoiceList.push(invoiceData);
// //           // console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           needsUpdatedInvoiceCount += 1;
// //         }
// //         // create a new invoice
// //         else if(!invoiceId){
// //           //TODO add invoice id
// //           invoiceId = admin.firestore().collection('invoices').doc().id;

// //           invoiceData = {
// //             createdAt : startOfTodayMoment.toDate(),
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             tax: `${totalTax}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : false,
// //             dueMailed : false,
// //             overdueMailed : false,
// //             receiptMailed : false,
// //             type : 'membership',
// //             hasSST : true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems : paymentItems
// //           }
// //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// //           // console.log('invoiceData: ', invoiceData);
          
// //           newInvoiceList.push(invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           newInvoiceCount += 1;
// //         }
// //       }

// //     });

// //     // console.log('newInvoiceCount: ', newInvoiceCount);
// //     var theObject = {
// //       success:true,
// //       message: 'no invoice updated',
// //       createdAt: timestamp
// //     }

// //     // const unpaidInvoiceSheetURL = 'https://us-central1-babelasia-37615.cloudfunctions.net/addUnpaidInvoiceToSheets';

// //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// //       // return 
// //       return batch.commit().then(()=>{
// //         // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //         // console.log('New invoices', newInvoiceCount);
// //         // console.log('Deleted invoices', needsDeleteCount);
// //         theObject = {
// //           success:true,
// //           message: 'OK',
// //           needsUpdatedInvoiceCount,
// //           newInvoiceCount,
// //           needsDeleteCount,
// //           existingInvoiceList,
// //           newInvoiceList,
// //           userSwitchToDefaultPkgCount,
// //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// //         };
// //         admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //         // var request = require("request");
// //         // return request.get(unpaidInvoiceSheetURL)
        
// //         return res.status(200).send(theObject);
// //       }).catch((error)=>{
// //         console.log('error batch: ', error);
// //       });
// //       // return res.status(200).send(theObject);
// //     }else{
// //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //       return res.status(200).send(theObject);
// //     }
// //   });
// // });

// // // generate invoice ver 4 (with SST) monthly TTDI only
// // exports.generateInvoicesTTDIMonthly = functions.https.onRequest((req, res) => {
// //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'dhanyaparameswaran95@gmail.com').get();
// //   // const usersQuery = admin.firestore().collection('users').get();
// //   const usersQuery = admin.firestore().collection('users').where('packageId', '==', 'vf2jCUOEeDDiIQ0S42BJ').get();
// //   const packagesQuery = admin.firestore().collection('packages')
// //   .where('renewalTerm', '==', 'month')
// //   .get();
// //   const invoicesQuery = admin.firestore().collection('invoices')
// //     .where('paid', '==', false)
// //     .where('type', '==', 'membership')
// //     .where('packageId', '==', 'vf2jCUOEeDDiIQ0S42BJ')
// //     // .where('createdAt', '>=', moment('20200626').startOf('day').toDate())
// //     .get();
// //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// //   const isJuly2020 = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');

// //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// //     // Get a new write batch
// //     var batch = admin.firestore().batch();

// //     const usersResults = results[0];
// //     const packagesResults = results[1];
// //     const invoicesResults = results[2];

// //     var packageMap = {};
// //     packagesResults.forEach(doc=>{
// //       const data = doc.data();
// //       if (
// //           doc.id === 'vf2jCUOEeDDiIQ0S42BJ' 
// //           // doc.id === 'TJ7Fiqgrt6EHUhR5Sb2q'
// //       ){
// //         // console.log('packageData: ', data);
// //         packageMap[doc.id] = data;
// //       }
// //     });

// //     var invoiceMap = {};
// //     var invoiceIdForUserIdMap = {};
// //     invoicesResults.forEach(doc=>{
// //       const data = doc.data();
// //       const userId = data && data.userId;
// //       const packageId = data && data.packageId;
// //       const paid = data && data.paid ? data.paid : false;
// //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// //         invoiceIdForUserIdMap[userId] = doc.id;
// //         invoiceMap[doc.id] = data;
// //       }
// //     });

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// //     var needsUpdatedInvoiceCount = 0;
// //     var newInvoiceCount = 0;
// //     var needsDeleteCount = 0;
// //     var invoiceList = [];
// //     var existingInvoiceList = [];
// //     var newInvoiceList = [];
// //     var userSwitchToDefaultPkgCount = 0;

// //     var amount;
// //     var invoiceData;
    
// //     usersResults.forEach(doc=>{
// //       const data = doc.data();
// //       const packageId = data && data.packageId;
// //       // const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// //       const packageData = packageId && packageMap[packageId];
// //       const isKLCCPkg = (packageData && packageData.base && packageData.base === 'KLCC');
// //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
// //       //const promoJan2020 = data && data.promoJan2020;
// //       const cancellationDate = data && data.cancellationDate;
// //       const monthlyFees = packageData && packageData.monthlyFees? packageData.monthlyFees:null;
// //       var paymentItems = [];
    
// //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')) && !cancellationDate;
    
// //       var membershipCancelled = false;
// //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// //         membershipCancelled = true;
// //       }
      
// //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// //       const needsUpdate = (needsPayment === true || invoiceId); 

// //       // temporary only
// //       if (data && data.email === 'nadineann85@gmail.com'){
// //         console.log('skip creating invoice for nadineann85@gmail.com');
// //         return;
// //       }
// //       if(data.locked){
// //         console.log("Locked invoice", invoiceId);
// //         return;
// //       }

// //       // console.log('membershipendMoment: ', membershipEndsMoment && membershipEndsMoment.format('DD/MM/YYYY'));
// //       // console.log('membershipendMomentIsSameOrAfter: ', membershipEndsMoment && membershipEndsMoment.isSameOrAfter(isJuly2020));
// //       // console.log('packageId: ', packageId);
// //       // console.log('packageData: ', packageData);
// //       // console.log('needsUpdate: ', needsUpdate);
// //       // console.log('membershipCancel: ', membershipCancelled);
// //       // console.log('renewalTerm: ', renewalTerm);
// //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// //       // if((!needsPayment || membershipCancelled) && invoiceId){
      
// //       if(membershipCancelled){
// //         if (!needsUpdate && invoiceId){
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //           needsDeleteCount += 1;
// //         }
// //         else{
// //           if (invoiceId){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //             if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //               batch.commit();
// //               needsUpdatedInvoiceCount = 0;
// //               newInvoiceCount = 0;
// //               needsDeleteCount = 0;
// //               batch = admin.firestore().batch();
// //             }
// //             console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //             needsDeleteCount += 1;
// //           }
// //           else{
// //             // console.log('no invoice, do nothing.');
// //           }
// //         }
// //       }

// //       // generate new invoice for monthly package if it is on 1/7/2020;
// //       if(packageData && needsUpdate
// //         // && membershipEndsMoment.isSameOrAfter(moment('isJuly2020') && monthlyFees)
// //         // test for single monthly package only
// //         && monthlyFees && membershipEndsMoment && membershipEndsMoment.isValid()
// //       ){
        
// //         console.log('create or update invoice')
// //         // price after july 2020
// //         const unitPriceAfterJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitPriceWithTaxAfterJuly2020 = parseFloat(packageData.monthlyFees[1]).toFixed(2);
// //         const unitTaxAfterJuly2020 = unitPriceWithTaxAfterJuly2020 - unitPriceAfterJuly2020;

// //         const unitPriceBeforeJuly2020 = parseFloat(parseFloat(packageData.monthlyFees[0])/1.06).toFixed(2);
// //         const unitPriceWithTaxBeforeJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitTaxBeforeJuly2020 = (unitPriceWithTaxBeforeJuly2020 - unitPriceBeforeJuly2020).toFixed(2);

// //         // console.log('unitPriceWithTaxBeforeJuly2020: ', unitPriceWithTaxBeforeJuly2020);
// //         // default unitPrice
// //         const unitPrice = parseFloat(packageData.monthlyFee).toFixed(2);

// //         // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
       
// //         const quantityBeforeJuly2020 = membershipEndsMoment.add(1, 'days').isBefore(isJuly2020)? ((isJuly2020.diff(membershipEndsMoment, 'months') + 1)): 0;
// //         // const quantityAfterJuly2020 = membershipEndsMoment.isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;
       
// //         // const quantityBeforeJuly2020 = membershipEndsMoment.isBefore(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) - (startOfTodayMoment.diff(isJuly2020, 'months') + 1):0;
// //         const quantityAfterJuly2020 = membershipEndsMoment.add(1, 'days').isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;

// //         // console.log('membershipEndsMoment.isSameOrAfter(isJuly2020): ', membershipEndsMoment.isSameOrAfter(isJuly2020));
// //         // console.log('quantityBeforeJuly: ', quantityBeforeJuly2020);
// //         // console.log('quantityAfterJuly: ', quantityAfterJuly2020);

// //         // to avoid creating the 0 or negative invoices
// //         // 0 is occured when the user is currently freezing
// //         if (quantity <= 0){
// //           console.log('qty is equal to 0');
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //         }
// //         // console.log('quantity: ', quantity);

// //         const totalPrice = unitPriceWithTaxBeforeJuly2020*quantityBeforeJuly2020 + unitPriceWithTaxAfterJuly2020*quantityAfterJuly2020;
// //         const totalTax = unitTaxBeforeJuly2020*quantityBeforeJuly2020 + unitTaxAfterJuly2020*quantityAfterJuly2020;

// //         if (quantityBeforeJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceBeforeJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxBeforeJuly2020,
// //             tax:unitTaxBeforeJuly2020,
// //             quantity: quantityBeforeJuly2020,
// //             isAfterJuly2020:false
// //           });
// //         }
// //         if (quantityAfterJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceAfterJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxAfterJuly2020,
// //             tax:unitTaxAfterJuly2020,
// //             quantity: quantityAfterJuly2020,
// //             isAfterJuly2020:true
// //           });
// //         }
         
// //         // console.log('paymentItem: ', paymentItems);
// //         // console.log('totalPrice: ', totalPrice);
// //         // console.log('totalTax: ', totalTax);
// //         amount = totalPrice && get12StringAmount(totalPrice);
// //         // console.log('theamount: ', amount);

// //         // if the invoice is already created
// //         if(invoiceId){
          
// //           if (totalPrice<=0){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           }
        
// //           const existingInvoiceData = invoiceMap[invoiceId];
// //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// //           const existingAmount = existingInvoiceData.amount;
// //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;
// //           const updatedAt = moment().tz('Asia/Kuala_Lumpur');

// //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;
        
// //           invoiceData = {
// //             createdAt : createdAt,
// //             updatedAt,
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : invoiceMailed,
// //             invoiceMailedAt : invoiceMailedAt,
// //             dueMailed : dueMailed,
// //             dueMailedAt : dueMailedAt,
// //             overdueMailed : overdueMailed,
// //             overdueMailedAt : overdueMailedAt,
// //             receiptMailed : receiptMailed,
// //             tax: `${totalTax.toFixed(2)}`,
// //             type: 'membership',
// //             hasSST :true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems,
// //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// //             // isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
            
// //           }

// //           existingInvoiceList.push(invoiceData);
// //           // console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           needsUpdatedInvoiceCount += 1;
// //         }
// //         // create a new invoice
// //         else if(!invoiceId){
// //           //TODO add invoice id
// //           invoiceId = admin.firestore().collection('invoices').doc().id;

// //           invoiceData = {
// //             createdAt : startOfTodayMoment.toDate(),
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             tax: `${totalTax}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : false,
// //             dueMailed : false,
// //             overdueMailed : false,
// //             receiptMailed : false,
// //             type : 'membership',
// //             hasSST : true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems : paymentItems
// //           }
// //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// //           // console.log('invoiceData: ', invoiceData);
          
// //           newInvoiceList.push(invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           newInvoiceCount += 1;
// //         }
// //       }

// //     });

// //     // console.log('newInvoiceCount: ', newInvoiceCount);
// //     var theObject = {
// //       success:true,
// //       message: 'no invoice updated',
// //       createdAt: timestamp
// //     }

// //     // const unpaidInvoiceSheetURL = 'https://us-central1-babelasia-37615.cloudfunctions.net/addUnpaidInvoiceToSheets';

// //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// //       // return 
// //       return batch.commit().then(()=>{
// //         // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //         // console.log('New invoices', newInvoiceCount);
// //         // console.log('Deleted invoices', needsDeleteCount);
// //         theObject = {
// //           success:true,
// //           message: 'OK',
// //           needsUpdatedInvoiceCount,
// //           newInvoiceCount,
// //           needsDeleteCount,
// //           existingInvoiceList,
// //           newInvoiceList,
// //           userSwitchToDefaultPkgCount,
// //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// //         };
// //         admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //         // var request = require("request");
// //         // return request.get(unpaidInvoiceSheetURL)
        
// //         return res.status(200).send(theObject);
// //       }).catch((error)=>{
// //         console.log('error batch: ', error);
// //       });
// //       // return res.status(200).send(theObject);
// //     }else{
// //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //       return res.status(200).send(theObject);
// //     }
// //   });
// // });

// // // generate invoice ver 4 (with SST) corporate package only
// // exports.generateInvoicesCorp = functions.https.onRequest((req, res) => {
// //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'harvin@fi.life').get();
// //   const usersQuery = admin.firestore().collection('users').get();
// //   const packagesQuery = admin.firestore().collection('packages')
// //   .where('renewalTerm', '==', 'month')
// //   .where('type', '==', 'corp')
// //   .get();
// //   const invoicesQuery = admin.firestore().collection('invoices')
// //     .where('paid', '==', false)
// //     .where('type', '==', 'membership')
// //     // .where('createdAt', '>=', moment('20200626').startOf('day').toDate())
// //     .get();
// //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// //   const isJuly2020 = moment('20200701').tz('Asia/Kuala_Lumpur').startOf('day');

// //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// //     // Get a new write batch
// //     var batch = admin.firestore().batch();

// //     const usersResults = results[0];
// //     const packagesResults = results[1];
// //     const invoicesResults = results[2];

// //     var packageMap = {};
// //     packagesResults.forEach(doc=>{
// //       const data = doc.data();
// //       if ((data.renewalTerm === 'month')
// //         && (data && data.type === 'corp')
// //         // && (doc.id === 'BKcaoWGrWKYihS40MpGd' 
// //         // || doc.id === 'ZEDcEHZp3fKeQOkDxCH8' 
// //         // || doc.id === 'dz8SAwq99GWdEvHCKST2'
// //         // || doc.id === 'eRMTW6cQen6mcTJgKEvy'
// //         // || doc.id === 'wpUO5vxWmme7KITqSITo'
// //         // )
// //       ) {
// //         // console.log('packageData: ', data);
// //         packageMap[doc.id] = data;
// //       }
// //     });

// //     var invoiceMap = {};
// //     var invoiceIdForUserIdMap = {};
// //     invoicesResults.forEach(doc=>{
// //       const data = doc.data();
// //       const userId = data && data.userId;
// //       const packageId = data && data.packageId;
// //       const paid = data && data.paid ? data.paid : false;
// //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// //         invoiceIdForUserIdMap[userId] = doc.id;
// //         invoiceMap[doc.id] = data;
// //       }
// //     });

// //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// //     var needsUpdatedInvoiceCount = 0;
// //     var newInvoiceCount = 0;
// //     var needsDeleteCount = 0;
// //     var invoiceList = [];
// //     var existingInvoiceList = [];
// //     var newInvoiceList = [];
// //     var userSwitchToDefaultPkgCount = 0;

// //     var amount;
// //     var invoiceData;
    
// //     usersResults.forEach(doc=>{
// //       const data = doc.data();
// //       const packageId = data && data.packageId;
// //       // const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// //       const packageData = packageId && packageMap[packageId];
// //       const isKLCCPkg = (packageData && packageData.base && packageData.base === 'KLCC');
// //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
// //       const promoJan2020 = data && data.promoJan2020;
// //       const cancellationDate = data && data.cancellationDate;
// //       const monthlyFees = packageData && packageData.monthlyFees? packageData.monthlyFees:null;
// //       var paymentItems = [];
    
// //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(6, 'days')) && !cancellationDate;
    
// //       var membershipCancelled = false;
// //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// //         membershipCancelled = true;
// //       }
      
// //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// //       const needsUpdate = (needsPayment === true || invoiceId) && !promoJan2020; // skip generate the promoJan2020 invoices

// //       if(data.locked){
// //         console.log("Locked invoice", invoiceId);
// //         return;
// //       }

// //       // console.log('membershipendMoment: ', membershipEndsMoment && membershipEndsMoment.format('DD/MM/YYYY'));
// //       // console.log('membershipendMomentIsSameOrAfter: ', membershipEndsMoment && membershipEndsMoment.isSameOrAfter(isJuly2020));
// //       // console.log('packageId: ', packageId);
// //       // console.log('packageData: ', packageData);
// //       // console.log('needsUpdate: ', needsUpdate);
// //       // console.log('membershipCancel: ', membershipCancelled);
// //       // console.log('renewalTerm: ', renewalTerm);
// //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// //       // if((!needsPayment || membershipCancelled) && invoiceId){
// //       if(membershipCancelled){
// //         if (!needsUpdate && invoiceId){
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //           needsDeleteCount += 1;
// //         }
// //         else{
// //           if (invoiceId){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //             if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //               batch.commit();
// //               needsUpdatedInvoiceCount = 0;
// //               newInvoiceCount = 0;
// //               needsDeleteCount = 0;
// //               batch = admin.firestore().batch();
// //             }
// //             console.log("Deleting unpaid invoice (terminated)", invoiceId);
// //             needsDeleteCount += 1;
// //           }
// //           else{
// //             // console.log('no invoice, do nothing.');
// //           }
// //         }
// //       }

// //       // generate new invoice for monthly package if it is on 1/7/2020;
// //       else if(packageData && needsUpdate && !membershipCancelled && ((renewalTerm === 'month')||(renewalTerm === 'monthly'))
// //         // && membershipEndsMoment.isSameOrAfter(moment('isJuly2020') && monthlyFees)
// //         // test for single monthly package only
// //         && monthlyFees && membershipEndsMoment && membershipEndsMoment.isValid()
// //       ){
        
// //         // price after july 2020
// //         const unitPriceAfterJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitPriceWithTaxAfterJuly2020 = parseFloat(packageData.monthlyFees[1]).toFixed(2);
// //         const unitTaxAfterJuly2020 = unitPriceWithTaxAfterJuly2020 - unitPriceAfterJuly2020;

// //         const unitPriceBeforeJuly2020 = parseFloat(parseFloat(packageData.monthlyFees[0])/1.06).toFixed(2);
// //         const unitPriceWithTaxBeforeJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// //         const unitTaxBeforeJuly2020 = (unitPriceWithTaxBeforeJuly2020 - unitPriceBeforeJuly2020).toFixed(2);

// //         // console.log('unitPriceWithTaxBeforeJuly2020: ', unitPriceWithTaxBeforeJuly2020);
// //         // default unitPrice
// //         const unitPrice = parseFloat(packageData.monthlyFee).toFixed(2);

// //         // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
       
// //         const quantityBeforeJuly2020 = membershipEndsMoment.add(1, 'days').isBefore(isJuly2020)? ((isJuly2020.diff(membershipEndsMoment, 'months') + 1)): 0;
// //         // const quantityAfterJuly2020 = membershipEndsMoment.isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;
       
// //         // const quantityBeforeJuly2020 = membershipEndsMoment.isBefore(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) - (startOfTodayMoment.diff(isJuly2020, 'months') + 1):0;
// //         const quantityAfterJuly2020 = membershipEndsMoment.add(1, 'days').isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;

// //         // console.log('membershipEndsMoment.isSameOrAfter(isJuly2020): ', membershipEndsMoment.isSameOrAfter(isJuly2020));
// //         // console.log('quantityBeforeJuly: ', quantityBeforeJuly2020);
// //         // console.log('quantityAfterJuly: ', quantityAfterJuly2020);

// //         // to avoid creating the 0 or negative invoices
// //         // 0 is occured when the user is currently freezing
// //         if (quantity <= 0){
// //           console.log('qty is equal to 0');
// //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //         }
// //         // console.log('quantity: ', quantity);

// //         const totalPrice = unitPriceWithTaxBeforeJuly2020*quantityBeforeJuly2020 + unitPriceWithTaxAfterJuly2020*quantityAfterJuly2020;
// //         const totalTax = unitTaxBeforeJuly2020*quantityBeforeJuly2020 + unitTaxAfterJuly2020*quantityAfterJuly2020;

// //         if (quantityBeforeJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceBeforeJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxBeforeJuly2020,
// //             tax:unitTaxBeforeJuly2020,
// //             quantity: quantityBeforeJuly2020,
// //             isAfterJuly2020:false
// //           });
// //         }
// //         if (quantityAfterJuly2020>=1){
// //           paymentItems.push({
// //             createdAt:startOfTodayMoment.toDate(),
// //             unitPrice:unitPriceAfterJuly2020,
// //             unitPriceWithTax: unitPriceWithTaxAfterJuly2020,
// //             tax:unitTaxAfterJuly2020,
// //             quantity: quantityAfterJuly2020,
// //             isAfterJuly2020:true
// //           });
// //         }
         
// //         // console.log('paymentItem: ', paymentItems);
// //         // console.log('totalPrice: ', totalPrice);
// //         // console.log('totalTax: ', totalTax);
// //         amount = totalPrice && get12StringAmount(totalPrice);

// //         // if the invoice is already created
// //         if(invoiceId){
          
// //           if (totalPrice<=0){
// //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// //           }
        
// //           const existingInvoiceData = invoiceMap[invoiceId];
// //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// //           const existingAmount = existingInvoiceData.amount;
// //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;
// //           const updatedAt = moment().tz('Asia/Kuala_Lumpur');

// //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;
        
// //           invoiceData = {
// //             createdAt : createdAt,
// //             updatedAt,
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : invoiceMailed,
// //             invoiceMailedAt : invoiceMailedAt,
// //             dueMailed : dueMailed,
// //             dueMailedAt : dueMailedAt,
// //             overdueMailed : overdueMailed,
// //             overdueMailedAt : overdueMailedAt,
// //             receiptMailed : receiptMailed,
// //             tax: `${totalTax.toFixed(2)}`,
// //             type: 'membership',
// //             hasSST :true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems,
// //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// //             // isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
            
// //           }

// //           existingInvoiceList.push(invoiceData);
// //           console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           needsUpdatedInvoiceCount += 1;
// //         }
// //         // create a new invoice
// //         else if(!invoiceId){
// //           //TODO add invoice id
// //           invoiceId = admin.firestore().collection('invoices').doc().id;

// //           invoiceData = {
// //             createdAt : startOfTodayMoment.toDate(),
// //             packageId : packageId,
// //             paid : !needsPayment,
// //             paymentFailed : false,
// //             paymentId : null,
// //             userId : doc.id,
// //             unitPrice : `${unitPrice}`,
// //             tax: `${totalTax}`,
// //             totalPrice : `${totalPrice}`,
// //             amount : amount,
// //             quantity : quantity,
// //             invoiceMailed : false,
// //             dueMailed : false,
// //             overdueMailed : false,
// //             receiptMailed : false,
// //             type : 'membership',
// //             hasSST : true,
// //             billingDate: membershipEnds?membershipEnds:null,
// //             paymentItems : paymentItems
// //           }
// //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// //           // console.log('invoiceData: ', invoiceData);
          
// //           newInvoiceList.push(invoiceData);
// //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);
// //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// //             batch.commit();
// //             needsUpdatedInvoiceCount = 0;
// //             newInvoiceCount = 0;
// //             needsDeleteCount = 0;
// //             batch = admin.firestore().batch();
// //           }
// //           newInvoiceCount += 1;
// //         }
// //       }

// //     });

// //     console.log('newInvoiceCount: ', newInvoiceCount);
// //     var theObject = {
// //       success:true,
// //       message: 'no invoice updated',
// //       createdAt: timestamp
// //     }

// //     // const unpaidInvoiceSheetURL = 'https://us-central1-babelasia-37615.cloudfunctions.net/addUnpaidInvoiceToSheets';

// //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// //       // return 
// //       return batch.commit().then(()=>{
// //         // console.log("Updated invoice", needsUpdatedInvoiceCount);
// //         // console.log('New invoices', newInvoiceCount);
// //         // console.log('Deleted invoices', needsDeleteCount);
// //         theObject = {
// //           success:true,
// //           message: 'OK',
// //           needsUpdatedInvoiceCount,
// //           newInvoiceCount,
// //           needsDeleteCount,
// //           existingInvoiceList,
// //           newInvoiceList,
// //           userSwitchToDefaultPkgCount,
// //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// //         };
// //         admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //         // var request = require("request");
// //         // return request.get(unpaidInvoiceSheetURL)
        
// //         return res.status(200).send(theObject);
// //       }).catch((error)=>{
// //         console.log('error batch: ', error);
// //       });
// //       // return res.status(200).send(theObject);
// //     }else{
// //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// //       return res.status(200).send(theObject);
// //     }
// //   });
// // });

// // // generate invoice sheet for reporting (without creating invoice)
// // // exports.generateInvoicesForSheet = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const invoicesQuery = admin.firestore().collection('invoices')
// // //     .where('paid', '==', false)
// // //     .where('type', '==', 'membership')
// // //     // .where('createdAt', '>=', moment('20200626').startOf('day').toDate())
// // //     .get();
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// // //     // Get a new write batch
// // //     var batch = admin.firestore().batch();

// // //     const usersResults = results[0];
// // //     const packagesResults = results[1];
// // //     const invoicesResults = results[2];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (((data.renewalTerm === 'month')||(data.renewalTerm === 'monthly')) &&
// // //         !is3MonthKLCCPackage(doc.id) && !is3MonthTTDIPackage(doc.id)
// // //       ) {
// // //         // console.log('packageData: ', data);
// // //         packageMap[doc.id] = data;
// // //       }
// // //     });

// // //     var invoiceMap = {};
// // //     var invoiceIdForUserIdMap = {};
// // //     invoicesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const userId = data && data.userId;
// // //       const packageId = data && data.packageId;
// // //       const paid = data && data.paid ? data.paid : false;
// // //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// // //         invoiceIdForUserIdMap[userId] = doc.id;
// // //         invoiceMap[doc.id] = data;
// // //       }
// // //     });

// // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// // //     var needsUpdatedInvoiceCount = 0;
// // //     var newInvoiceCount = 0;
// // //     var needsDeleteCount = 0;
// // //     var invoiceList = [];
// // //     var existingInvoiceList = [];
// // //     var newInvoiceList = [];
// // //     var userSwitchToDefaultPkgCount = 0;

// // //     var amount;
// // //     var invoiceData;
    
// // //     usersResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const packageId = data && data.packageId;
// // //       const isKLCCPkg = packageId && isKLCCPackage(packageId); // full access
// // //       const packageData = packageId && packageMap[packageId];
// // //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data && data.autoMembershipEnds;
// // //       const promoJan2020 = data && data.promoJan2020;
// // //       const cancellationDate = data && data.cancellationDate;
// // //       const monthlyFees = packageData && packageData.monthlyFees? packageData.monthlyFees:null;
// // //       var paymentItems = [];
    
// // //       const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      
// // //       const needsPayment = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(30, 'days')) && !cancellationDate;
    
// // //       var membershipCancelled = false;
// // //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// // //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// // //         membershipCancelled = true;
// // //       }
      
// // //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// // //       const needsUpdate = (needsPayment === true || invoiceId) && !promoJan2020; // skip generate the promoJan2020 invoices

// // //       if(data.locked){
// // //         console.log("Locked invoice", invoiceId);
// // //         return;
// // //       }

// // //       console.log('membershipendMoment: ', membershipEndsMoment.format('DD/MM/YYYY'));
// // //       // console.log('membershipendMomentIsSameOrAfter: ', membershipEndsMoment.isSameOrAfter(moment(isJuly2020)));
// // //       console.log('packageData: ', packageData);
// // //       console.log('needsUpdate: ', needsUpdate);
// // //       console.log('membershipCancel: ', membershipCancelled);
// // //       console.log('renewalTerm: ', renewalTerm);
// // //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// // //       // if((!needsPayment || membershipCancelled) && invoiceId){
// // //       if(membershipCancelled){
// // //         if (!needsUpdate && invoiceId){
// // //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // //             batch.commit();
// // //             needsUpdatedInvoiceCount = 0;
// // //             newInvoiceCount = 0;
// // //             needsDeleteCount = 0;
// // //             batch = admin.firestore().batch();
// // //           }
// // //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// // //           needsDeleteCount += 1;
// // //         }
// // //         else{
// // //           // console.log('membershipcancelled, no invoice generated, do nothing.');
// // //         }
// // //       }
// // //       // generate new invoice for monthly package if it is on 1/7/2020;
// // //       else if(packageData && needsUpdate && !membershipCancelled && (renewalTerm === 'month')||(renewalTerm === 'monthly')
// // //         // && membershipEndsMoment.isSameOrAfter(moment(isJuly2020) && monthlyFees)
// // //       ){
        
// // //         // price after july 2020
// // //         const unitPriceAfterJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// // //         const unitPriceWithTaxAfterJuly2020 = parseFloat(packageData.monthlyFees[1]).toFixed(2);
// // //         const unitTaxAfterJuly2020 = unitPriceWithTaxAfterJuly2020 - unitPriceAfterJuly2020;

// // //         const unitPriceBeforeJuly2020 = parseFloat(parseFloat(packageData.monthlyFees[0])/1.06).toFixed(2);
// // //         const unitPriceWithTaxBeforeJuly2020 = parseFloat(packageData.monthlyFees[0]).toFixed(2);
// // //         const unitTaxBeforeJuly2020 = (unitPriceWithTaxBeforeJuly2020 - unitPriceBeforeJuly2020).toFixed(2);

// // //         // default unitPrice
// // //         const unitPrice = parseFloat(packageData.monthlyFee).toFixed(2);

// // //         // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths;
// // //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
       
// // //         const quantityBeforeJuly2020 = membershipEndsMoment.isBefore(isJuly2020)? ((moment(isJuly2020).diff(membershipEndsMoment, 'months') + 1) + (startOfTodayMoment.diff(moment(isJuly2020), 'months'))): 0;
// // //         const quantityAfterJuly2020 = membershipEndsMoment.isSameOrAfter(isJuly2020)? (startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1) : quantity - quantityBeforeJuly2020;
// // //         console.log('quantityBeforeJuly: ', quantityBeforeJuly2020);
// // //         console.log('quantityAfterJuly: ', quantityAfterJuly2020);

// // //         // to avoid creating the 0 or negative invoices
// // //         // 0 is occured when the user is currently freezing
// // //         if (quantity <= 0){
// // //           console.log('qty is equal to 0');
// // //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // //         }
// // //         console.log('quantity: ', quantity);

// // //         const totalPrice = unitPriceWithTaxBeforeJuly2020*quantityBeforeJuly2020 + unitPriceWithTaxAfterJuly2020*quantityAfterJuly2020;
// // //         const totalTax = unitTaxBeforeJuly2020*quantityBeforeJuly2020 + unitTaxAfterJuly2020*quantityAfterJuly2020;

// // //         if (quantityBeforeJuly2020>=1){
// // //           paymentItems.push({
// // //             createdAt:startOfTodayMoment.toDate(),
// // //             unitPrice:unitPriceBeforeJuly2020,
// // //             unitPriceWithTax: unitPriceWithTaxBeforeJuly2020,
// // //             tax:unitTaxBeforeJuly2020,
// // //             quantity: quantityBeforeJuly2020,
// // //             isAfterJuly2020:true
// // //           });
// // //         }
// // //         if (quantityAfterJuly2020>=1){
// // //           paymentItems.push({
// // //             createdAt:startOfTodayMoment.toDate(),
// // //             unitPrice:unitPriceAfterJuly2020,
// // //             unitPriceWithTax: unitPriceWithTaxAfterJuly2020,
// // //             tax:unitTaxAfterJuly2020,
// // //             quantity: quantityAfterJuly2020,
// // //             isAfterJuly2020:false
// // //           });
// // //         }
         
// // //         console.log('paymentItem: ', paymentItems);
// // //         console.log('totalPrice: ', totalPrice);
// // //         console.log('totalTax: ', totalTax);
// // //         amount = get12StringAmount(`${totalPrice}`);

// // //         // if the invoice is already created
// // //         if(invoiceId){
          
// // //           if (totalPrice<=0){
// // //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // //           }
        
// // //           const existingInvoiceData = invoiceMap[invoiceId];
// // //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// // //           const existingAmount = existingInvoiceData.amount;
// // //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;

// // //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// // //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// // //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// // //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// // //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// // //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// // //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// // //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// // //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// // //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;
        
// // //           invoiceData = {
// // //             createdAt : createdAt,
// // //             packageId : packageId,
// // //             paid : !needsPayment,
// // //             paymentFailed : false,
// // //             paymentId : null,
// // //             userId : doc.id,
// // //             unitPrice : `${unitPrice}`,
// // //             totalPrice : `${totalPrice}`,
// // //             amount : amount,
// // //             quantity : quantity,
// // //             invoiceMailed : invoiceMailed,
// // //             invoiceMailedAt : invoiceMailedAt,
// // //             dueMailed : dueMailed,
// // //             dueMailedAt : dueMailedAt,
// // //             overdueMailed : overdueMailed,
// // //             overdueMailedAt : overdueMailedAt,
// // //             receiptMailed : receiptMailed,
// // //             tax: `${totalTax}`,
// // //             type: 'membership',
// // //             hasSST :true,
// // //             billingDate: membershipEnds?membershipEnds:null,
// // //             paymentItems,
// // //             // auto billing is stop before PKP, this field is added after PKP 16/5/2020
// // //             // isAfterPKPCharge: moment(createdAt).isSameOrAfter(moment('2020-06-15'), 'day') ? true : false,
            
// // //           }

// // //           existingInvoiceList.push(invoiceData);
// // //           console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// // //           //batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // //             // batch.commit();
// // //             needsUpdatedInvoiceCount = 0;
// // //             newInvoiceCount = 0;
// // //             needsDeleteCount = 0;
// // //             // batch = admin.firestore().batch();
// // //           }
// // //           needsUpdatedInvoiceCount += 1;
// // //         }
// // //         // create a new invoice
// // //         else if(membershipCancelled === false){
// // //           //TODO add invoice id
// // //           invoiceId = admin.firestore().collection('invoices').doc().id;

// // //           invoiceData = {
// // //             createdAt : startOfTodayMoment.toDate(),
// // //             packageId : packageId,
// // //             paid : !needsPayment,
// // //             paymentFailed : false,
// // //             paymentId : null,
// // //             userId : doc.id,
// // //             unitPrice : `${unitPrice}`,
// // //             tax: `${totalTax}`,
// // //             totalPrice : `${totalPrice}`,
// // //             amount : amount,
// // //             quantity : quantity,
// // //             invoiceMailed : false,
// // //             dueMailed : false,
// // //             overdueMailed : false,
// // //             receiptMailed : false,
// // //             type : 'membership',
// // //             hasSST : true,
// // //             billingDate: membershipEnds?membershipEnds:null,
// // //             paymentItems : paymentItems
// // //           }
// // //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// // //           console.log('invoiceData: ', invoiceData);
          
// // //           newInvoiceList.push(invoiceData);
// // //           // batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);
// // //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // //             // batch.commit();
// // //             needsUpdatedInvoiceCount = 0;
// // //             newInvoiceCount = 0;
// // //             needsDeleteCount = 0;
// // //             // batch = admin.firestore().batch();
// // //           }
// // //           newInvoiceCount += 1;
// // //         }
// // //       }

// // //     });

// // //     console.log('newInvoiceCount: ', newInvoiceCount);
// // //     var theObject = {
// // //       success:true,
// // //       message: 'no invoice updated',
// // //       createdAt: timestamp
// // //     }

// // //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
      
// // //       return res.status(200).send(theObject);
// // //     }else{
// // //       // admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// // //       return res.status(200).send(theObject);
// // //     }
// // //   });
// // // });

function get12StringAmount(amount){
  //const theAmount = amount.includes('.')? `${amount.split('.').join("")}`:`${amount}`;
  // const startAmount = amount.includes('.')? `${amount}`:`${amount}00`;
  const startAmount = (parseFloat(amount)).toFixed(2).toString();
  const amountArray = startAmount.split('.');
  var combinedAmount = `${amountArray[0]}${amountArray[1]}`;
  var finalAmount;
  const concatLength = 12-combinedAmount.length; 
  // console.log('combinedAmount: ', combinedAmount);
  // console.log('concatLength: ', concatLength);

  // if (amount.includes('.')){
  //   console.log('theAmount: ', amount);
  //   var theAmounts = amount.split('.');
  //   // if 2 decimal points
  //   if (theAmounts.length === 2){
  //     amountString = theAmounts[0]+theAmounts[1];
  //   }
  //   else if (theAmounts.length === 1){
  //     amountString = theAmounts[0] + theAmounts[1] +'0';
  //   }
  //   console.log('amountString: ', amountString);
  //   for(var j = 0; j<concatLength; j++){
  //     finalAmount = '0'.concat(amountString);
  //   }
  // }
  // else{
    for (var i = 0; i < concatLength; i++) {
      combinedAmount = '0'.concat(combinedAmount);
    }
  // }
  return combinedAmount;
}

// // // // // this function will add autoStartDate for all members
// // // // exports.addmemberStartDate = functions.https.onRequest((req,res) => {
// // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
// // // //   const usersQuery = admin.firestore().collection('users').get();
// // // //   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
// // // //     .where('freezeFor', '>=', moment('20200101').startOf('day').toDate())
// // // //     .get();
  
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   return Promise.all([usersQuery, freezesQuery]).then(results=>{
// // // //     // Get a new write batch
// // // //     var batch = admin.firestore().batch();

// // // //     const usersResults = results[0];
// // // //     const freezesResults = results[1];
// // // //     var freezeCV19Count = 0;
// // // //     // var memberDataList = [];

// // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);

// // // //     var freezeMap = {};
// // // //     var userIdFreezeMap = {};
// // // //     freezesResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       const freezeFor = data && data.freezeFor? moment(data.freezeFor).isValid()? data.freezeFor:null : null;
// // // //       // const freezeFor = data && data.freezeFor;
// // // //       const createdAt = data && data.createdAt? moment(data.createdAt).isValid()? data.createdAt:null:null;
// // // //       const freezeType = data && data.freezeType; 
// // // //       // const createdAt = data && data.createdAt;
// // // //       const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200218'), moment('20200413')) 
// // // //         || (freezeType === 'specialFreeze');

// // // //       const userId = data && data.userId;
// // // //       if(userId && (freezeFor!=='undefined') && (createdAt!=='undefined') && existingCV19Freeze){
// // // //         freezeMap[doc.id] = data;
// // // //         var userFreezes = userIdFreezeMap[userId];
// // // //         if(!userFreezes){
// // // //           userFreezes = [];
// // // //         }
// // // //         userFreezes.push(data);
// // // //         userIdFreezeMap[userId] = userFreezes;
// // // //       }
// // // //     });

// // // //     // console.log('userIdFreezeMap: ', userIdFreezeMap);

// // // //     usersResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       const memberId = doc.id;
// // // //       const packageId = data && data.packageId;
// // // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;

// // // //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // // //       // console.log('membershipEndMoment: ', membershipEndsMoment);
// // // //       // console.log('todayMoment: ', startOfTodayMoment);
// // // //       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
// // // //       const memberIsCancel = data && data.cancellationDate;
// // // //       const userFreezes = userIdFreezeMap[doc.id];
// // // //       // console.log('userFreezes: ', userFreezes);

// // // //       if (!memberIsCancel && membershipStarts && membershipEnds && packageId && !userFreezes){
// // // //         // memberDataList.push(data);
// // // //         // console.log("Updating member data: ", memberId, data);
// // // //         // batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
// // // //         const freezeData = {
// // // //           createdAt:timestamp,
// // // //           freezeFor:moment('20200317').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
// // // //           freezeEnd:moment('20200615').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
// // // //           source:'freeze',
// // // //           type:'membership',
// // // //           totalPrice:0,
// // // //           userId:memberId,
// // // //           freezeType:'specialFreeze'
// // // //         };

// // // //         admin.firestore().collection('payments').add(freezeData);
// // // //         if(freezeCV19Count >= 499){
// // // //           batch.commit();
// // // //           freezeCV19Count = 0;
// // // //           batch = admin.firestore().batch();
// // // //         }
// // // //         freezeCV19Count += 1;
// // // //       }
// // // //     });

// // // //     var CV19FreezeLogs = {
// // // //       success:true,
// // // //       message: 'no freeze added',
// // // //       createdAt: timestamp
// // // //     }

// // // //     // 
// // // //     if(freezeCV19Count > 0){
// // // //       // return 
// // // //       return batch.commit().then(()=>{
// // // //         CV19FreezeLogs = {
// // // //           success:true,
// // // //           message: 'OK',
// // // //           freezeCV19Count,
// // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // //         };
// // // //         admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //         return res.status(200).send(CV19FreezeLogs);
// // // //       }).catch((error)=>{
// // // //         console.log('error batch: ', error);
// // // //       });
      
// // // //     }else{
// // // //       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //       return res.status(200).send(CV19FreezeLogs);
// // // //     }
// // // //   });
// // // // });

// // // // to change cancellation date if the cancellation date is before the membership end
// // // exports.changeCancellationByMembershipEnd = functions.https.onRequest((req,res) => {
// // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'wei.yeoh@gmail.com').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
  
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //   return Promise.all([usersQuery]).then(results=>{
// // //     // Get a new write batch
// // //     var batch = admin.firestore().batch();

// // //     const usersResults = results[0];
   
// // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // //     var cancelCountChange = 0;
   
// // //     usersResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const memberId = doc.id;
// // //       const packageId = data && data.packageId;
// // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // //       const cancellationDate = data && data.cancellationDate;
     
// // //       const memberIsCancelBeforeMembershipEnd = cancellationDate && moment(getTheDate(cancellationDate)).isBefore(moment(getTheDate(membershipEnds)));
     
// // //       if (memberIsCancelBeforeMembershipEnd){

// // //         admin.firestore().collection('users').doc(doc.id).update({
// // //           cancellationDate:moment(getTheDate(membershipEnds)).subtract(1, 'day'), cancellationDateChangeAt:timestamp
// // //         })

// // //         if(cancelCountChange >= 499){
// // //           batch.commit();
// // //           cancelCountChange = 0;
// // //           batch = admin.firestore().batch();
// // //         }
// // //         cancelCountChange += 1;
// // //       }
// // //     });
    
// // //     if(cancelCountChange > 0){
// // //       // return 
// // //       return batch.commit().then(()=>{
// // //         return res.status(200).send({success:true, cancelCountChange});
// // //       }).catch((error)=>{
// // //         console.log('error batch: ', error);
// // //       });
// // //     }else{
// // //       return res.status(200).send({success:true, message:'all cancellation date is valid'});
// // //     }
// // //   });
// // // });

// // // // this function will add free special freeze for 3 month for all members during the
// // // // covid19 Perintah Kawalan Pergerakan (PKP) - from 18/3/2020 - 17/6/2020 
// // // // add a new field called specialFreeze=true (to skip the 4th month freeze payment)
// // // exports.addPKPFreeze2 = functions.https.onRequest((req,res) => {
// // //   const usersQuery = admin.firestore().collection('users').where('email', '==', 'rsg2323@yahoo.com').get();
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
// // //     // .where('freezeFor', '>=', moment('20201011').startOf('day').toDate())
// // //     .get();
  
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //   return Promise.all([usersQuery, freezesQuery]).then(results=>{
// // //     // Get a new write batch
// // //     var batch = admin.firestore().batch();

// // //     const usersResults = results[0];
// // //     const freezesResults = results[1];
// // //     var freezeCV19Count = 0;
// // //     // var memberDataList = [];

// // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);

// // //     var freezeMap = {};
// // //     var userIdFreezeMap = {};
// // //     freezesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const freezeFor = data && data.freezeFor? data.freezeFor:null;
// // //       // const freezeFor = data && data.freezeFor;
// // //       const createdAt = data && data.createdAt? data.createdAt:null;
// // //       const freezeType = data && data.freezeType; 
// // //       const notes = data && data.notes;
// // //       // const createdAt = data && data.createdAt;
// // //       // const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200517'), moment('20200616')) 
// // //       // && (freezeType === 'specialFreeze');
// // //       const existingFreeze = 
// // //         (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20201001')) && moment(getTheDate(freezeFor)).isSameOrBefore(moment('20201031'))) 
// // //         && (freezeType === 'specialFreeze' || freezeType === 'specialFreezeM2' ||
// // //         freezeType === 'specialFreezeM1' || freezeType === 'specialFreezeM3') 
// // //         && (notes && notes === 'cycle4');

// // //       const userId = data && data.userId;
// // //       if(userId && existingFreeze
// // //         // (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20210113'))) 
// // //         // && userId === 'qs8S6Rj86bRrafAf9fLgGzQrt9c2'
// // //         // || (notes && notes === 'cycle4')
// // //         ){
// // //         freezeMap[doc.id] = data;
// // //         var userFreezes = userIdFreezeMap[userId];
// // //         if(!userFreezes){
// // //           userFreezes = [];
// // //         }
// // //         userFreezes.push(data);
// // //         userIdFreezeMap[userId] = userFreezes;
// // //       }
// // //     });

// // //     // console.log('userIdFreezeMap: ', userIdFreezeMap);

// // //     usersResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const memberId = doc.id;
// // //       const packageId = data && data.packageId;
// // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;

// // //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // //       // console.log('membershipEndMoment: ', membershipEndsMoment);
// // //       // console.log('todayMoment: ', startOfTodayMoment);
// // //       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
// // //       const memberIsCancel = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isBefore(moment());
// // //       const isStaff = data && data.isStaff;
// // //       const userFreezeMap = userIdFreezeMap[doc.id];
// // //       // console.log('userFreezeMap: ', userFreezeMap);

// // //       if (!memberIsCancel 
// // //         && (membershipStarts && moment(getTheDate(membershipStarts)).isSameOrAfter(moment('20201101')))
// // //         //&& membershipEnds 
// // //         //&& packageId 
// // //         && !userFreezeMap 
// // //         && !isStaff
// // //         ){
// // //         // memberDataList.push(data);
// // //         // console.log("Updating member data: ", memberId, data);
// // //         // batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
// // //         const freezeData = {
// // //           createdAt:timestamp,
// // //           freezeFor:moment('20210113').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
// // //           // freezeEnd:moment('20200414').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
// // //           source:'freeze',
// // //           type:'membership',
// // //           totalPrice:0,
// // //           userId:memberId,
// // //           freezeType:'specialFreeze',
// // //           notes:'cycle4'
// // //           // freezeEnd:moment('20200614').tz('Asia/Kuala_Lumpur').startOf('day').toDate()
// // //         };

// // //         admin.firestore().collection('payments').add(freezeData);
// // //         if(freezeCV19Count >= 499){
// // //           batch.commit();
// // //           freezeCV19Count = 0;
// // //           batch = admin.firestore().batch();
// // //         }
// // //         freezeCV19Count += 1;
// // //       }
// // //     });

// // //     var CV19FreezeLogs = {
// // //       success:true,
// // //       message: 'no freeze added',
// // //       createdAt: timestamp
// // //     }

// // //     // 
// // //     if(freezeCV19Count > 0){
// // //       // return 
// // //       return batch.commit().then(()=>{
// // //         CV19FreezeLogs = {
// // //           success:true,
// // //           message: 'OK',
// // //           freezeCV19Count,
// // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // //         };
// // //         admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // //         return res.status(200).send(CV19FreezeLogs);
// // //       }).catch((error)=>{
// // //         console.log('error batch: ', error);
// // //       });
      
// // //     }else{
// // //       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // //       return res.status(200).send(CV19FreezeLogs);
// // //     }
// // //   });
// // // });

// // // //because sometime its call the previous build, create a new function for this
// exports.addPKPFreeze3 = functions.https.onRequest((req,res) => {
//   const usersQuery = admin.firestore().collection('users')
//     // .where('email', '==', 'lambofgod93@hotmail.my')
//     .get();
//   // const usersQuery = admin.firestore().collection('users').get();
//   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
//     // .where('freezeFor', '>=', moment('20201011').startOf('day').toDate())
//     .get();
  
//   const timestamp = admin.firestore.FieldValue.serverTimestamp();

//   return Promise.all([usersQuery, freezesQuery]).then(results=>{
//     // Get a new write batch
//     var batch = admin.firestore().batch();

//     const usersResults = results[0];
//     const freezesResults = results[1];
//     var freezeCV19Count = 0;
//     // var memberDataList = [];

//     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
//     // console.log('startOfTodayMoment: ', startOfTodayMoment);

//     var freezeMap = {};
//     var userIdFreezeMap = {};
//     freezesResults.forEach(doc=>{
//       const data = doc.data();
//       const freezeFor = data && data.freezeFor? data.freezeFor:null;
//       // const freezeFor = data && data.freezeFor;
//       const createdAt = data && data.createdAt? data.createdAt:null;
//       const freezeType = data && data.freezeType; 
//       const notes = data && data.notes;
//       // const createdAt = data && data.createdAt;
//       // const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200517'), moment('20200616')) 
//       // && (freezeType === 'specialFreeze');
//       const existingFreeze = 
//         (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20201001')) && moment(getTheDate(freezeFor)).isSameOrBefore(moment('20201030'))) 
//         && (freezeType === 'specialFreeze' || freezeType === 'specialFreezeM2' ||
//         freezeType === 'specialFreezeM1' || freezeType === 'specialFreezeM3') 
//         // && (notes && notes === 'cycle4');

//       const userId = data && data.userId;
//       if(userId && existingFreeze
//         // (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20210113'))) 
//         // && userId === 'qs8S6Rj86bRrafAf9fLgGzQrt9c2'
//         // || (notes && notes === 'cycle4')
//         ){
//         // console.log('contain existing freeze');
//         freezeMap[doc.id] = data;
//         var userFreezes = userIdFreezeMap[userId];
//         if(!userFreezes){
//           userFreezes = [];
//         }
//         userFreezes.push(data);
//         userIdFreezeMap[userId] = userFreezes;
//       }
//       else{ 
//         // console.log('no existing freeze');
//       }
//     });

//     console.log('userIdFreezeMap: ', userIdFreezeMap);
//     var userCount = 0;
//     usersResults.forEach(doc=>{
//       const data = doc.data();
//       const memberId = doc.id;
//       const packageId = data && data.packageId;
//       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
//       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;

//       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
//       // console.log('membershipEndMoment: ', membershipEndsMoment);
//       // console.log('todayMoment: ', startOfTodayMoment);
//       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
//       const memberIsCancel = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isBefore(moment());
//       const isStaff = data && data.isStaff;
//       const userFreezeMap = userIdFreezeMap[doc.id];
//       // console.log('userFreezeMap: ', userFreezeMap);

//       // if (userFreezeMap){
//       //   console.log('contain freezemap');

//       // }

//       if (!memberIsCancel 
//         && (membershipStarts && moment(getTheDate(membershipStarts)).isSameOrBefore(moment('20201001')))
//         && membershipEnds 
//         && packageId 
//         && !userFreezeMap 
//         && !isStaff
//         && userCount<490
//         ){
//         // memberDataList.push(data);
//         console.log("Updating member data: ", memberId, data);
//         // batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
//         const freezeData = {
//           createdAt:timestamp,
//           freezeFor:moment('20201003').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
//           // freezeEnd:moment('20200414').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
//           source:'freeze',
//           type:'membership',
//           totalPrice:0,
//           userId:memberId,
//           freezeType:'specialFreeze',
//           notes:'cycle4'
//           // freezeEnd:moment('20200614').tz('Asia/Kuala_Lumpur').startOf('day').toDate()
//         };
//         userCount+=1;
//         admin.firestore().collection('payments').add(freezeData);
//         if(freezeCV19Count >= 499){
//           batch.commit();
//           freezeCV19Count = 0;
//           batch = admin.firestore().batch();
//         }
//         freezeCV19Count += 1;
//       }
//       else{
//         // console.log('no freeze found');
//       }
//     });

//     var CV19FreezeLogs = {
//       success:true,
//       message: 'no freeze added',
//       createdAt: timestamp,
//       userCount
//     }

//     // 
//     if(freezeCV19Count > 0){
//       // return 
//       return batch.commit().then(()=>{
//         CV19FreezeLogs = {
//           success:true,
//           message: 'OK',
//           freezeCV19Count,
//           createdAtDate: moment(timestamp).format('DDMMYYYY'),
//           createdAtTime: moment(timestamp).format('hh:mm:ss')
//         };
//         admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//         return res.status(200).send(CV19FreezeLogs);
//       }).catch((error)=>{
//         console.log('error batch: ', error);
//       });
      
//     }else{
//       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//       return res.status(200).send(CV19FreezeLogs);
//     }
//   });
// });

// // // //because sometime its call the previous build, create a new function for this
// exports.addPKPFreeze4 = functions.https.onRequest((req,res) => {
//   const itemData = req.body;
//   const email = itemData && itemData.email;
//   // const freezeStartDateString = '20210425';
//   // const freezeEndDateString = '20210524';
//   const freezeStartDateString = itemData && itemData.startDate;
//   const freezeEndDateString = itemData && itemData.endDate;
//   const freezeName = itemData && itemData.freezeName;

//   const usersQuery = email? admin.firestore().collection('users').where('email', '==', email).get() : admin.firestore().collection('users').get();
//     // .where('email', '==', 'lambofgod93@hotmail.my')
    
//   // const usersQuery = admin.firestore().collection('users').get();
//   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
//     // .where('freezeFor', '>=', moment('20201011').startOf('day').toDate())
//     .get();
  
//   const timestamp = admin.firestore.FieldValue.serverTimestamp();

//   return Promise.all([usersQuery, freezesQuery]).then(results=>{
//     // Get a new write batch
//     var batch = admin.firestore().batch();

//     const usersResults = results[0];
//     const freezesResults = results[1];
//     var freezeCV19Count = 0;
//     // var memberDataList = [];

//     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
//     // console.log('startOfTodayMoment: ', startOfTodayMoment);

//     var freezeMap = {};
//     var userIdFreezeMap = {};
//     freezesResults.forEach(doc=>{
//       const data = doc.data();
//       const freezeFor = data && data.freezeFor? data.freezeFor:null;
//       // const freezeFor = data && data.freezeFor;
//       const createdAt = data && data.createdAt? data.createdAt:null;
//       const freezeType = data && data.freezeType; 
//       const notes = data && data.notes;
//       // const createdAt = data && data.createdAt;
//       // const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200517'), moment('20200616')) 
//       // && (freezeType === 'specialFreeze');
//       const existingFreeze = freezeFor && freezeType === freezeName;
//         // (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment(freezeStartDateString)) && moment(getTheDate(freezeFor)).isSameOrBefore(moment(freezeEndDateString))) 
//         // && (freezeType === 'specialFreeze' || freezeType === 'specialFreezeQ1' ||
//         // freezeType === 'specialFreezeQ2' || freezeType === 'specialFreezeQ3' || freezeType === 'specialFreezeQ4') 
//         // && (notes && notes === 'cycle4');

//       const userId = data && data.userId;
//       if(userId && existingFreeze
//         // (freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20210113'))) 
//         // && userId === 'qs8S6Rj86bRrafAf9fLgGzQrt9c2'
//         // || (notes && notes === 'cycle4')
//         ){
//         // console.log('contain existing freeze');
//         freezeMap[doc.id] = data;
//         var userFreezes = userIdFreezeMap[userId];
//         if(!userFreezes){
//           userFreezes = [];
//         }
//         userFreezes.push(data);
//         userIdFreezeMap[userId] = userFreezes;
//       }
//       else{ 
//         console.log('no existing freeze');
//       }
//     });

//     console.log('userIdFreezeMap: ', userIdFreezeMap);
//     var userCount = 0;
//     usersResults.forEach(doc=>{
//       const data = doc.data();
//       const memberId = doc.id;
//       const packageId = data && data.packageId;
//       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
//       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;

//       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
//       // console.log('membershipEndMoment: ', membershipEndsMoment);
//       // console.log('todayMoment: ', startOfTodayMoment);
//       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
//       const memberIsCancel = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isBefore(moment());
//       const isStaff = data && data.isStaff;
//       const userFreezeMap = userIdFreezeMap[doc.id];
//       // console.log('userFreezeMap: ', userFreezeMap);

//       // if (userFreezeMap){
//       //   console.log('contain freezemap');

//       // }

//       if (!memberIsCancel 
//         && (membershipStarts && moment(getTheDate(membershipStarts)).isSameOrBefore(moment('20210425')))
//         && membershipEnds 
//         && packageId 
//         && !userFreezeMap 
//         && !isStaff
//         // && userCount<490
//         ){
//         // memberDataList.push(data);
//         // console.log("Updating member data: ", memberId, data);
//         // batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
//         const freezeData = {
//           createdAt:timestamp,
//           freezeFor:moment(freezeStartDateString).tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
//           // freezeEnd:moment('20200414').tz('Asia/Kuala_Lumpur').startOf('day').toDate(),
//           source:'freeze',
//           type:'membership',
//           totalPrice:0,
//           userId:memberId,
//           freezeType:freezeName
//           // freezeEnd:moment('20200614').tz('Asia/Kuala_Lumpur').startOf('day').toDate()
//         };
//         userCount+=1;
//         admin.firestore().collection('payments').add(freezeData);
//         if(freezeCV19Count >= 499){
//           batch.commit();
//           freezeCV19Count = 0;
//           userCount = 0;
//           batch = admin.firestore().batch();
//         }
//         freezeCV19Count += 1;
//       }
//       else{
//         // console.log('no freeze found');
//       }
//     });

//     var CV19FreezeLogs = {
//       success:true,
//       message: 'no freeze added',
//       createdAt: timestamp,
//       userCount
//     }

//     // 
//     if(freezeCV19Count > 0){
//       // return 
//       return batch.commit().then(()=>{
//         CV19FreezeLogs = {
//           success:true,
//           message: 'OK',
//           freezeCV19Count,
//           createdAtDate: moment(timestamp).format('DDMMYYYY'),
//           createdAtTime: moment(timestamp).format('hh:mm:ss')
//         };
//         admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//         return res.status(200).send(CV19FreezeLogs);
//       }).catch((error)=>{
//         console.log('error batch: ', error);
//       });
      
//     }else{
//       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//       return res.status(200).send(CV19FreezeLogs);
//     }
//   });
// });

// // // // get unfrozen list of PKP after 3/10/2020
// // // exports.getUnFrozenMember = functions.https.onRequest((req,res) => {
// // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'victor@thestraits.com.my').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
// // //     // .where('freezeFor', '>=', moment('20201011').startOf('day').toDate())
// // //     .get();
  
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //   return Promise.all([usersQuery, freezesQuery]).then(results=>{
// // //     // Get a new write batch
// // //     var batch = admin.firestore().batch();

// // //     const usersResults = results[0];
// // //     const freezesResults = results[1];
// // //     var freezeCV19Count = 0;
// // //     // var memberDataList = [];

// // //     var userData = {};
// // //     var userDataArray = [];

// // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);

// // //     var freezeMap = {};
// // //     var userIdFreezeMap = {};
// // //     freezesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const freezeFor = data && data.freezeFor? data.freezeFor:null;
// // //       // const freezeFor = data && data.freezeFor;
// // //       const createdAt = data && data.createdAt? data.createdAt:null;
// // //       const freezeType = data && data.freezeType; 
// // //       // const createdAt = data && data.createdAt;
// // //       // const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200517'), moment('20200616')) 
// // //       // && (freezeType === 'specialFreeze');
// // //       const notes = data && data.notes;
// // //       const existingFreeze = 
// // //         (freezeFor && moment(getTheDate(freezeFor)).isAfter(moment('20201003'))) 
// // //         && (freezeType === 'specialFreeze' || freezeType === 'specialFreezeM2' ||
// // //         freezeType === 'specialFreezeM1' || freezeType === 'specialFreezeM3') 
// // //         // && notes;

// // //       const userId = data && data.userId;
// // //       if(userId && (freezeFor && moment(getTheDate(freezeFor)).isBetween(moment('20200902'), moment('20201003'))) 
// // //         // && userId === 'qs8S6Rj86bRrafAf9fLgGzQrt9c2'
// // //         // || notes
// // //         && !notes
// // //         ){
// // //         freezeMap[doc.id] = data;
// // //         var userFreezes = userIdFreezeMap[userId];
// // //         if(!userFreezes){
// // //           userFreezes = [];
// // //         }
// // //         userFreezes.push(data);
// // //         userIdFreezeMap[userId] = userFreezes;
// // //       }
// // //     });

// // //     // console.log('userIdFreezeMap: ', userIdFreezeMap);

// // //     usersResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const memberId = doc.id;
// // //       const packageId = data && data.packageId;
// // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // //       const email = data && data.email;
// // //       const name = data && data.name;
// // //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // //       // console.log('membershipEndMoment: ', membershipEndsMoment);
// // //       // console.log('todayMoment: ', startOfTodayMoment);
// // //       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
// // //       const memberIsCancel = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isBefore(moment());
// // //       const isStaff = data && data.isStaff;
// // //       const userFreezeMap = userIdFreezeMap[doc.id];
// // //       const remark = data && data.remark;
// // //       // console.log('userFreezeMap: ', userFreezeMap);

// // //       if (!memberIsCancel 
// // //         && (membershipStarts || (data && data.membershipStarts))
// // //         //&& membershipEnds 
// // //         //&& packageId 
// // //         && userFreezeMap 
// // //         && !isStaff
// // //         ){
// // //         freezeCV19Count += 1;
// // //         userData[memberId]=data;
// // //         userDataArray.push(
// // //           [
// // //             memberId, email, name,
// // //             membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY/MM/DD'):"",
// // //             membershipEnds? moment(getTheDate(membershipEnds)).format('YYYY/MM/DD'):"",
// // //             remark
// // //           ]
// // //         )
// // //       }
// // //     });

// // //     var CV19FreezeLogs = {
// // //       success:true,
// // //       createdAt: timestamp
// // //     }

// // //     // 
// // //     if(freezeCV19Count > 0){
   
// // //       CV19FreezeLogs = {
// // //         success:true,
// // //         message: 'OK',
// // //         freezeCV19Count,
// // //         userData,
// // //         createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // //         createdAtTime: moment(timestamp).format('hh:mm:ss')
// // //       };

// // //       const updateSheetPromise = updateGoogleSheet({
// // //         spreadsheetId: CONFIG_SHEET_ID,
// // //         resource: {
// // //           // How the input data should be interpreted.
// // //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //           // The new values to apply to the spreadsheet.
// // //           data: [
// // //             {
// // //               range: `UNFROZEN CYCLE4_2!A2:Z`,
// // //               majorDimension: "ROWS",
// // //               values: userDataArray
// // //             }
// // //           ],  // TODO: Update placeholder value.
    
// // //           // TODO: Add desired properties to the request body.
// // //         },
// // //       });
  
// // //       return updateSheetPromise.then((result)=>{
// // //         // console.log('theresult: ', result);
// // //         return res.status(200).send({
// // //           success:true,
// // //           // data: 'data',
// // //           userDataArray: userDataArray,
// // //         });
// // //       });
    
// // //       // return res.status(200).send(CV19FreezeLogs);
      
// // //     }else{
// // //       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // //       return res.status(200).send(CV19FreezeLogs);
// // //     }
// // //   });
// // // });

// // // // get list of user with and without special freeze
// // // exports.getAllUserWithSpecialFreezeStatus = functions.https.onRequest((req,res) => {
// // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'victor@thestraits.com.my').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze')
// // //     // .where('freezeFor', '>=', moment('20201011').startOf('day').toDate())
// // //     .get();
  
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //   return Promise.all([usersQuery, freezesQuery]).then(results=>{
// // //     // Get a new write batch
// // //     var batch = admin.firestore().batch();

// // //     const usersResults = results[0];
// // //     const freezesResults = results[1];
// // //     var freezeCV19Count = 0;
// // //     // var memberDataList = [];

// // //     var userData = {};
// // //     var userDataArray = [];

// // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);

// // //     var freezeMap = {};
// // //     var userIdFreezeMap = {};
// // //     freezesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const freezeFor = data && data.freezeFor? data.freezeFor:null;
// // //       // const freezeFor = data && data.freezeFor;
// // //       const createdAt = data && data.createdAt? data.createdAt:null;
// // //       const freezeType = data && data.freezeType; 
// // //       // const createdAt = data && data.createdAt;
// // //       // const existingCV19Freeze = moment(getTheDate(freezeFor)).isBetween(moment('20200517'), moment('20200616')) 
// // //       // && (freezeType === 'specialFreeze');
// // //       const notes = data && data.notes;
// // //       const existingFreeze = 
// // //         (freezeFor && moment(getTheDate(freezeFor)).isAfter(moment('20200901'))) 
// // //         && (freezeType === 'specialFreeze' || freezeType === 'specialFreezeM2' ||
// // //         freezeType === 'specialFreezeM1' || freezeType === 'specialFreezeM3') 
// // //         // && notes;

// // //       const userId = data && data.userId;
// // //       if(userId && existingFreeze) 
// // //         // && userId === 'qs8S6Rj86bRrafAf9fLgGzQrt9c2'
// // //         // || notes
// // //         // && !notes
// // //         {
// // //         freezeMap[doc.id] = data;
// // //         var userFreezes = userIdFreezeMap[userId];
// // //         if(!userFreezes){
// // //           userFreezes = [];
// // //         }
// // //         userFreezes.push(data);
// // //         userIdFreezeMap[userId] = userFreezes;
// // //       }
// // //     });

// // //     // console.log('userIdFreezeMap: ', userIdFreezeMap);

// // //     usersResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const memberId = doc.id;
// // //       const packageId = data && data.packageId;
// // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // //       const email = data && data.email;
// // //       const name = data && data.name;
// // //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // //       // console.log('membershipEndMoment: ', membershipEndsMoment);
// // //       // console.log('todayMoment: ', startOfTodayMoment);
// // //       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);
// // //       const memberIsCancel = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isBefore(moment());
// // //       const isStaff = data && data.isStaff;
// // //       const userFreezeMap = userIdFreezeMap[doc.id];
// // //       const remark = data && data.remark;
// // //       // console.log('userFreezeMap: ', userFreezeMap);
// // //       var userFreezeArray = [];

// // //       // userFreezeMap && userFreezeMap.forEach((freeze)=>{
// // //       //   userFreezeArray.push(freeze);
// // //       // });

// // //       if (!memberIsCancel 
// // //         && (membershipStarts || (data && data.membershipStarts))
// // //         //&& membershipEnds 
// // //         //&& packageId 
// // //         // && userFreezeMap 
// // //         && !isStaff
// // //         ){
// // //         freezeCV19Count += 1;
// // //         userData[memberId]=data;
// // //         userDataArray.push(
// // //           [
// // //             memberId, email, name,
// // //             membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY/MM/DD'):"",
// // //             membershipEnds? moment(getTheDate(membershipEnds)).format('YYYY/MM/DD'):"",
// // //             userFreezeMap? "yes":"no",
// // //             remark
// // //           ]
// // //         )
// // //       }
// // //     });

// // //     var CV19FreezeLogs = {
// // //       success:true,
// // //       createdAt: timestamp
// // //     }

// // //     // 
// // //     if(freezeCV19Count > 0){
   
// // //       CV19FreezeLogs = {
// // //         success:true,
// // //         message: 'OK',
// // //         freezeCV19Count,
// // //         userData,
// // //         createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // //         createdAtTime: moment(timestamp).format('hh:mm:ss')
// // //       };

// // //       const updateSheetPromise = updateGoogleSheet({
// // //         spreadsheetId: CONFIG_SHEET_ID,
// // //         resource: {
// // //           // How the input data should be interpreted.
// // //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //           // The new values to apply to the spreadsheet.
// // //           data: [
// // //             {
// // //               range: `ALL USER WITH SPECIAL FREEZE!A2:Z`,
// // //               majorDimension: "ROWS",
// // //               values: userDataArray
// // //             }
// // //           ],  // TODO: Update placeholder value.
    
// // //           // TODO: Add desired properties to the request body.
// // //         },
// // //       });
  
// // //       return updateSheetPromise.then((result)=>{
// // //         // console.log('theresult: ', result);
// // //         return res.status(200).send({
// // //           success:true,
// // //           // data: 'data',
// // //           userDataArray: userDataArray,
// // //         });
// // //       });
    
// // //       // return res.status(200).send(CV19FreezeLogs);
      
// // //     }else{
// // //       admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // //       return res.status(200).send(CV19FreezeLogs);
// // //     }
// // //   });
// // // });

// // // // for add freeze from msgbird
// // // exports.addFreeFreeze = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   // console.log('itemData: ', itemData);
// // //   const userId = itemData && itemData.userId;
// // //   const freezeForDate = itemData && itemData.freezeForDate;
// // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // //   // console.log('freezeForDate: ', freezeForDate);
// // //   const freezeForDateType = typeof freezeForDate;
// // //   // const convertedFreezeDate = freezeForDate && new Date("dd/MM/yyyy").parse(freezeForDate);

// // //   if (freezeForDate && userId){
// // //     const freezeObj = {
// // //       createdAt:timestamp,
// // //       freezeFor:moment(freezeForDate).toDate(),
// // //       // freezeFor:convertedFreezeDate,
// // //       freezeForType: typeof freezeForDate,
// // //       // freezeForDate,
// // //       //freezeFor:(typeof freezeForDate === 'string')? moment(freezeForDate).toDate():new Date(freezeForDate),
// // //       // freezeFor:moment(getTheDate(freezeForDate)).toDate(),
// // //       userId,
// // //       source:'freeze',
// // //       type:'membership',
// // //       totalPrice:0,
// // //       notes:'frommsgbird'
// // //     }
// // //     return admin.firestore().collection('payments').add(freezeObj).then((docRef)=>{
// // //       return res.status(200).send({ ...freezeObj, freezeAdded:'yes'});
// // //     }).catch((error)=>{
// // //       console.error("Error adding document: ", error);
// // //       return res.status(200).send({error, freezeAdded:'no'});
// // //     })
// // //   }
// // //   else{
// // //     return res.status(200).send({freezeError:'error', freezeAdded:'no'});
// // //   }
  
// // // });

// // // // for msgbird get freeze balance
// // // exports.getUserFreezeBalance = functions.https.onRequest((req,res) => {
// // //   const itemData = req.body;
// // //   // console.log('itemData: ', itemData);
// // //   const userId = itemData && itemData.userId;

// // //   const userQuery = admin.firestore().collection('users').doc(userId).get();
// // //   const paymentQuery = admin.firestore().collection('payments').where('userId', '==', userId).where('type', '==', 'membership').get();
// // //   var currentFreezeCount = 0;
// // //   const maxFreezePerYear = 3;
// // //   var freezeBalance = 3;
// // //   var freezeBalanceText = '3';

// // //   return Promise.all([userQuery, paymentQuery]).then(results=>{
// // //     const userRes = results[0];
// // //     const paymentRes = results[1];
// // //     // console.log('userRes: ', userRes);
   
// // //     if (userRes.exists){
// // //       const data = userRes.data();
// // //       const email = data && data.email;

// // //       paymentRes && paymentRes.forEach(doc=>{
// // //         const data = doc.data();
// // //         const freezeFor = data.freezeFor;
// // //         const freezeType = data.freezeType;
// // //         if (freezeFor && moment(getTheDate(freezeFor)).isBefore(moment('20220101')) && moment(getTheDate(freezeFor)).isAfter(moment('20201231')) && !freezeType){
// // //           currentFreezeCount+=1;
// // //           freezeBalance-=1;
// // //         }
// // //       })
// // //       freezeBalanceText = (freezeBalance>=1)? freezeBalance:'not available';
// // //       return res.status(200).send({
// // //         success:true,
// // //         data:data,
// // //         freezeBalanceText,
// // //       });
// // //     }
// // //     // user not exist
// // //     else{
// // //       return res.status(200).send({
// // //         success:false,
// // //         data:null,
// // //         freezeBalanceText
// // //       });
// // //     }
   
// // //   });
// // // });

// // // // for msgbird
// // // exports.getUserDataByPhoneNumber = functions.https.onRequest((req,res) => {
// // //   const itemData = req.body;
// // //   // console.log('itemData: ', itemData);
// // //   const phoneNum = (itemData && itemData.phone)? itemData.phone:'01156866885';
// // //   const phoneString = phoneNum && ((phoneNum.charAt(0)==='6')? phoneNum.substring(1):phoneNum);

// // //   const userQuery = admin.firestore().collection('users').where('phone', '==', phoneString).limit(1).get();

// // //   return Promise.all([userQuery]).then(results=>{
// // //     const userRes = results[0];
// // //     // console.log('userRes: ', userRes);
// // //     if (userRes && userRes.size === 0){
// // //       // console.log('no data found ', userRes.size);
// // //       return res.status(200).send({
// // //         success:false,
// // //         message1:' phone is not exist or not yet register in our system',
// // //         isActiveMember:'no',
// // //         isExpiredMember:false,
// // //         isCancelledMember:false,
// // //         isStaff:'visitor',
// // //         userEmail:'not found',
// // //         userName: 'not found',
// // //         memberStartDate:'no start date',
// // //         memberEndDate:'no billing date found',
// // //         userId:'not found'
// // //       });
// // //     }
// // //     else{
// // //       // console.log('data size ', userRes.size);
// // //       userRes && userRes.forEach((doc, id)=>{
// // //         const data = doc.data();
// // //         // if phone is not exist in user collection
// // //         if (!data){
// // //           return res.status(200).send({
// // //             success:false,
// // //             message1:' phone is not exist or not yet register in our system',
// // //             isActiveMember:'no',
// // //             isExpiredMember:false,
// // //             isCancelledMember:false,
// // //             isStaff:'visitor',
// // //             userEmail:'not found',
// // //             userName: 'not found',
// // //             memberStartDate:'no start date',
// // //             memberEndDate:'no billing date found',
// // //             userId:'not found'
// // //           });
// // //         }
// // //         else{
// // //           const userId = doc.id;
// // //           const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // //           const cancellationDate = data && data.cancellationDate;
// // //           const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //           const isActiveMember = membershipEnds && membershipStarts && !cancellationDate;
// // //           const isExpiredMember = membershipEnds && moment(getTheDate(membershipEnds)).isBefore(moment());
// // //           const isStaff = (data && data.isStaff)? true:false;
// // //           const isMemberText = isStaff? 'staff':isActiveMember?'active member':isExpiredMember?'expired member':cancellationDate?'terminated member':'visitor';
// // //           const email = data && data.email;
// // //           const userName = (data && data.name)? data.name:'no registered name found';
// // //           const membershipStartText = membershipStarts? moment(getTheDate(membershipStarts)).format('DD-MM-YYYY'):'no start date';
// // //           const membershipEndText = membershipEnds? moment(getTheDate(membershipEnds)).format('DD-MM-YYYY'):'no billing date found';

// // //           return res.status(200).send({
// // //             success:true,
// // //             user:data,
// // //             isActiveMember:isActiveMember? 'yes':'no', // messageBird flow builder only recognise string?
// // //             isExpiredMember,
// // //             isCancelledMember:cancellationDate,
// // //             isStaff:isStaff?'STAFF':'MEMBER',
// // //             message1:` you are a ${isMemberText}`,
// // //             userEmail:email,
// // //             userName,
// // //             memberStartDate:membershipStartText,
// // //             memberEndDate:membershipEndText,
// // //             userId
// // //             // memberStatus: 
// // //           });
// // //         }
// // //       });
    
// // //     }

// // //   });
// // // });

// // remove PKPFreeze
// exports.removePKPFreeze = functions.https.onRequest((req,res) => {
//   //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
//   // const usersQuery = admin.firestore().collection('users').get();
//   const itemData = req.body;
//   const freezeName = itemData && itemData.freezeName;

//   const freezesQuery = freezeName? admin.firestore().collection('payments').where('freezeType', '==', freezeName).get() : admin.firestore().collection('payments')
//     .where('freezeType', '==', 'specialFreezeQ1')
//     // .where('source', '==', 'freeze')
//     // .where('freezeType', '==', 'specialFreeze')
//     // .where('freezeFor', '>=', moment('20200315').startOf('day').toDate())
//     .get();
  
//   const timestamp = admin.firestore.FieldValue.serverTimestamp();

//   return Promise.all([freezesQuery]).then(results=>{
//     // Get a new write batch
//     var batch = admin.firestore().batch();

//     const freezesResults = results[0];
//     console.log('freezesResults: ', freezesResults);
//     var freezeCV19Count = 0;

//     // return Promise.resolve();
//     // const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

//     freezesResults && freezesResults.forEach((doc, id)=>{
//       //batch.delete(admin.firestore().collection('payments').doc(doc.id));
//       const data = doc.data();
//       const freezeFor = data && data.freezeFor;
//       const specialFreeze = data && data.specialFreeze;
//       const notes = data && data.notes;
//       // const isFrozenByCRO = moment(getTheDate(freezeFor)).isBetween(moment('20200517').startOf('day').toDate(), moment('20200614').startOf('day').toDate())
     
//       console.log('freezeFor: ', moment(getTheDate(freezeFor)).format('MMDDYYYY'))
//       admin.firestore().collection('payments').doc(doc.id).delete();
//       if(freezeCV19Count >= 499){
//         batch.commit();
//         freezeCV19Count = 0;
//         batch = admin.firestore().batch();
//       }
//       freezeCV19Count += 1;
//     });
//     var CV19FreezeLogs = {
//       success:true,
//       message: 'no freeze added',
//       createdAt: timestamp
//     }

//     // 
//     if(freezeCV19Count > 0){
//       // return 
//       return batch.commit().then(()=>{
//         CV19FreezeLogs = {
//           success:true,
//           message: 'OK',
//           freezeCV19Count,
//           createdAtDate: moment(timestamp).format('DDMMYYYY'),
//           createdAtTime: moment(timestamp).format('hh:mm:ss')
//         };
//         // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//         return res.status(200).send(CV19FreezeLogs);
//       }).catch((error)=>{
//         console.log('error batch: ', error);
//       });
      
//     }else{
//       // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
//       return res.status(200).send(CV19FreezeLogs);
//     }
//   });
// });

// remove unpaid invoices
exports.removeUnpaidInvoice = functions.https.onRequest((req,res) => {
  //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
  // const usersQuery = admin.firestore().collection('users').get();
  const itemData = req.body;
  const userId = itemData && itemData.userId;

  const invoicesQuery = userId? admin.firestore().collection('invoices').where('userId', '==', userId).where('paid', '==', false).get() : admin.firestore().collection('invoices').where('paid', '==', false).get();
  
  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  return Promise.all([invoicesQuery]).then(results=>{
    // Get a new write batch
    var batch = admin.firestore().batch();

    const invoiceResults = results[0];
    var invoiceCount = 0;

    invoiceResults && invoiceResults.forEach((doc, id)=>{
      //batch.delete(admin.firestore().collection('payments').doc(doc.id));
      const data = doc.data();
      const type = data && data.type;
      const invoiceMailed = data && data.invoiceMailed;
      const receiptMailed = data && data.receiptMailed;

      if (!invoiceMailed && !receiptMailed){
        admin.firestore().collection('invoices').doc(doc.id).delete();
        if(invoiceCount >= 499){
          batch.commit();
          invoiceCount = 0;
          batch = admin.firestore().batch();
        }
        invoiceCount += 1;
      }
    });

    var deletedInvoices = {};

    // 
    if(invoiceCount > 0){
      // return 
      return batch.commit().then(()=>{
        deletedInvoices = {
          success:true,
          message: 'OK',
          invoiceCount,
          createdAtDate: moment(timestamp).format('DDMMYYYY'),
          createdAtTime: moment(timestamp).format('hh:mm:ss')
        };
        return res.status(200).send(deletedInvoices);
      }).catch((error)=>{
        console.log('error batch: ', error);
      });
      
    }else{
      return res.status(200).send(deletedInvoices);
    }
  });
});

// remove unpaid freeze invoices
exports.removeUnpaidFreezeInvoice = functions.https.onRequest((req,res) => {
  //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
  // const usersQuery = admin.firestore().collection('users').get();
  const itemData = req.body;
  const userId = itemData && itemData.userId;

  const invoicesQuery = userId? admin.firestore().collection('invoices').where('userId', '==', userId).where('paid', '==', false).get() : admin.firestore().collection('invoices').where('paid', '==', false).where('vendProductId', '==', 'a3be38de-934f-aa1c-7f69-89f8fcc16f4a').get();
  
  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  return Promise.all([invoicesQuery]).then(results=>{
    // Get a new write batch
    var batch = admin.firestore().batch();

    const invoiceResults = results[0];
    var invoiceCount = 0;

    invoiceResults && invoiceResults.forEach((doc, id)=>{
      //batch.delete(admin.firestore().collection('payments').doc(doc.id));
      const data = doc.data();
      const type = data && data.type;
      admin.firestore().collection('invoices').doc(doc.id).delete();
      if(invoiceCount >= 499){
        batch.commit();
        invoiceCount = 0;
        batch = admin.firestore().batch();
      }
      invoiceCount += 1;
    });

    var deletedInvoices = {};

    // 
    if(invoiceCount > 0){
      // return 
      return batch.commit().then(()=>{
        deletedInvoices = {
          success:true,
          message: 'OK',
          invoiceCount,
          createdAtDate: moment(timestamp).format('DDMMYYYY'),
          createdAtTime: moment(timestamp).format('hh:mm:ss')
        };
        return res.status(200).send(deletedInvoices);
      }).catch((error)=>{
        console.log('error batch: ', error);
      });
      
    }else{
      return res.status(200).send(deletedInvoices);
    }
  });
});


// remove users WARNING! . use wisely
exports.removeUsers = functions.https.onRequest((req,res) => {
  //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
  // const usersQuery = admin.firestore().collection('users').get();
  const itemData = req.body;
  const email = itemData && itemData.email;

  const usersQuery = email? admin.firestore().collection('users').where('email', '==', email).get():admin.firestore().collection('users').where('createdFrom', '==', 'klccExperience').get();
  
  const timestamp = admin.firestore.FieldValue.serverTimestamp();

  return Promise.all([usersQuery]).then(results=>{
    // Get a new write batch
    var batch = admin.firestore().batch();

    const userRes = results[0];
    var userCount = 0;

    userRes && userRes.forEach((doc, id)=>{
      //batch.delete(admin.firestore().collection('payments').doc(doc.id));
      const data = doc.data();
        admin.firestore().collection('users').doc(doc.id).delete();
        if(userCount >= 499){
          batch.commit();
          userCount = 0;
          batch = admin.firestore().batch();
        }
        userCount += 1;
    });

    if(userCount > 0){
      // return 
      return batch.commit().then(()=>{
        return res.status(200).send({
          success:true,
          message: 'OK',
          userCount,
          createdAtDate: moment(timestamp).format('DDMMYYYY'),
          createdAtTime: moment(timestamp).format('hh:mm:ss')
        });
      }).catch((error)=>{
        console.log('error batch: ', error);
      });
      
    }else{
      return res.status(200).send({success:false, userCount});
    }
  });
});

// // // // // remove all payments
// // // // exports.removeAllPayments = functions.https.onRequest((req,res) => {
// // // //   //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
// // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // //   const paymentQuery = admin.firestore().collection('payments')
// // // //     // .where('freezeType', '==', 'specialFreezePKP2')
// // // //     .where('source', '==', 'vend')
// // // //     .where('type', '==', 'membership')
// // // //     // .where('freezeType', '==', 'specialFreezePKP2')
// // // //     // .where('freezeFor', '>=', moment('20200315').startOf('day').toDate())
// // // //     .get();
  
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   return Promise.all([paymentQuery]).then(results=>{
// // // //     // Get a new write batch
// // // //     var batch = admin.firestore().batch();

// // // //     const paymentResult = results[0];
// // // //     // console.log('paymentResult: ', paymentResult);
// // // //     var paymentCount = 0;

// // // //     // return Promise.resolve();
// // // //     // const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // //     paymentResult && paymentResult.forEach((doc, id)=>{
// // // //       //batch.delete(admin.firestore().collection('payments').doc(doc.id));
// // // //       const data = doc.data();
// // // //       const createdAt = data && data.createdAt;
// // // //       const source = data && data.source;
// // // //       const freezeFor = data && data.freezeFor;
      
// // // //       if (!freezeFor && moment(getTheDate(createdAt)).isBefore(moment('2018-01-01'))){
// // // //       // const freezeFor = data && data.freezeFor;
// // // //       // const specialFreeze = data && data.specialFreeze;
// // // //       // const isFrozenByCRO = moment(getTheDate(freezeFor)).isBetween(moment('20200517').startOf('day').toDate(), moment('20200614').startOf('day').toDate())
// // // //       // if (isFrozenByCRO){
// // // //         // console.log('freezeFor: ', moment(getTheDate(freezeFor)).format('MMDDYYYY'))
// // // //         admin.firestore().collection('payments').doc(doc.id).delete();
// // // //         if(paymentCount >= 499){
// // // //           batch.commit();
// // // //           paymentCount = 0;
// // // //           batch = admin.firestore().batch();
// // // //         }
// // // //         paymentCount += 1;
// // // //       // }
// // // //       }
     
// // // //       // if ()
// // // //       // console.log('freezeData: ', data);
// // // //       // const createdAt = data && data.createdAt;
// // // //       // const isToday = moment(createdAt).isSameOrAfter(moment('2020-06-13'), 'day') ? true : false;
// // // //       // console.log('isToday: ', isToday);
      
    
     
// // // //     });
// // // //     var paymentLogs = {
// // // //       success:true,
// // // //       message: 'no payment removed',
// // // //       createdAt: timestamp
// // // //     }

// // // //     // 
// // // //     if(paymentCount > 0){
// // // //       // return 
// // // //       return batch.commit().then(()=>{
// // // //         paymentLogs = {
// // // //           success:true,
// // // //           message: 'OK',
// // // //           paymentCount,
// // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // //         };
// // // //         // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //         return res.status(200).send(paymentLogs);
// // // //       }).catch((error)=>{
// // // //         console.log('error batch: ', error);
// // // //       });
      
// // // //     }else{
// // // //       // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //       return res.status(200).send(paymentLogs);
// // // //     }
// // // //   });
// // // // });

// // // // // // remove hasrecurring
// // // // // exports.removeHasRecurring = functions.https.onRequest((req,res) => {
// // // // //   //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const userQuery = admin.firestore().collection('users')
// // // // //     // .where('freezeType', '==', 'specialFreezePKP2')
// // // // //     .where('hasRecurring', '==', true)
// // // // //     // .where('freezeFor', '>=', moment('20200315').startOf('day').toDate())
// // // // //     .get();
// // // // //   const paymentQuery = admin.firestore().collection('payments')
// // // // //     .where('type', '==', 'membership')
// // // // //     .get();
  
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //   return Promise.all([userQuery, paymentQuery]).then(results=>{
// // // // //     // Get a new write batch
// // // // //     var batch = admin.firestore().batch();

// // // // //     const userResults = results[0];
// // // // //     const paymentResults = results[1];

// // // // //     // console.log('userResults: ', userResults);
// // // // //     // console.log('paymentResults: ', paymentResults);

// // // // //     var hasRecurringCount = 0;

// // // // //     var paymentMap = {};
// // // // //     paymentResults && paymentResults.forEach((doc)=>{
// // // // //       const data = doc.data();
// // // // //       const source = data && data.source;
// // // // //       const type = data && data.type;
// // // // //       const userId = data && data.userId;
// // // // //       const createdAt = data && data.createdAt;

// // // // //       // 1st logic
// // // // //       // if((source === 'vend') && type === 'membership' && userId && 
// // // // //       //   createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment('20200101'))
// // // // //       //   ){
// // // // //       //   if(!paymentMap[userId] && data && userId){
// // // // //       //     paymentMap[userId] = {};
// // // // //       //   }
// // // // //       //   else if (userId){
// // // // //       //     paymentMap[userId][doc.id] = data;
// // // // //       //   }
// // // // //       // }

// // // // //       // 2nd logic
// // // // //       // if(source !== 'adyen' && type === 'membership'){
// // // // //       //   if(!paymentMap[userId] && data && userId){
// // // // //       //     paymentMap[userId] = {};
// // // // //       //   }
// // // // //       //   else if (userId){
// // // // //       //     paymentMap[userId][doc.id] = data;
// // // // //       //   }
// // // // //       // }

// // // // //       // 3rd logic
// // // // //       if (source === 'adyen' && type === 'membership' && userId){
// // // // //         if(!paymentMap[userId] && data && userId){
// // // // //           paymentMap[userId] = {};
// // // // //         }
// // // // //         else if (userId){
// // // // //           paymentMap[userId][doc.id] = data;
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     console.log('paymentMap: ', paymentMap);

// // // // //     userResults && userResults.forEach((doc, id)=>{
// // // // //       //batch.delete(admin.firestore().collection('payments').doc(doc.id));
// // // // //       const data = doc.data();
// // // // //       const hasRecurring = data && data.hasRecurring;
// // // // //       const cancellationDate = data && data.cancellationDate;
// // // // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;

// // // // //       // const paymentViaAdyen
// // // // //       const paymentData = paymentMap? paymentMap[doc.id]:null;
// // // // //       // const monthDiff = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
      
// // // // //       // console.log('paymentData: ', paymentData);

// // // // //       var paymentArray = [];
      
// // // // //       var adyenCount = 0;
// // // // //       var vendCount = 0;
// // // // //       if (hasRecurring && !paymentData){
// // // // //         console.log('userData: ', data);

// // // // //         // console.log('paymentData: ', paymentData);
// // // // //         // Object.entries(paymentData).forEach(([key, value]) => {
// // // // //         //   // console.log(`${key} ${value}`); // "a 5", "b 7", "c 9"
// // // // //         //   const paymentId = key;
// // // // //         //   const paymentSource = value && value.source;
// // // // //         //   const userId = value && value.userId;

          
// // // // //         //   // if (paymentSource !== 'adyen')
// // // // //         //   console.log('paymentSource: ', paymentSource);
// // // // //         //   if (paymentSource === 'adyen'){
// // // // //         //     adyenCount += 1;
// // // // //         //   }
// // // // //         //   // else if (paymentSource === 'vend'){
// // // // //         //   //   vendCount += 1;
// // // // //         //   // }
// // // // //         // });

// // // // //         // console.log('adyenCount: ', adyenCount);
// // // // //         // console.log('vendCount: ', vendCount);

// // // // //         // paymentData && paymentData.forEach(payment=>{
// // // // //         //   const source = payment && payment.source;
// // // // //         //   console.log('paymentSource: ', source);
// // // // //         //   // return true;
// // // // //         // });
// // // // //         // const userPaymentSource = paymentData.
// // // // //         admin.firestore().collection('users').doc(doc.id).update({hasRecurring:false});
// // // // //         if(hasRecurringCount >= 499){
// // // // //           batch.commit();
// // // // //           hasRecurringCount = 0;
// // // // //           batch = admin.firestore().batch();
// // // // //         }
// // // // //         hasRecurringCount += 1;
// // // // //       }
     
// // // // //     });
// // // // //     var recurringLogs = {
// // // // //       success:true,
// // // // //       message: 'no hasrecurring removed',
// // // // //       createdAt: timestamp
// // // // //     }

// // // // //     // 
// // // // //     if(hasRecurringCount > 0){
// // // // //       // return 
// // // // //       return batch.commit().then(()=>{
// // // // //         recurringLogs = {
// // // // //           success:true,
// // // // //           message: 'OK',
// // // // //           hasRecurringCount,
// // // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //         };
// // // // //         // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // // //         return res.status(200).send(recurringLogs);
// // // // //       }).catch((error)=>{
// // // // //         console.log('error batch: ', error);
// // // // //       });
      
// // // // //     }else{
// // // // //       // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // // //       return res.status(200).send(recurringLogs);
// // // // //     }
// // // // //   });
// // // // // });

// // // // // function to terminate all complimentaryPromo members
// // // // exports.terminateComplimentaryPromo = functions.https.onRequest((req,res) => {
// // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'shuyiwong91@gmail.com').get();
// // // //   const usersQuery = admin.firestore().collection('users').get();
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // //   return Promise.all([usersQuery]).then(results=>{
// // // //     // Get a new write batch
// // // //     var batch = admin.firestore().batch();

// // // //     const userResults = results[0];
// // // //     // console.log('userResults: ', userResults);
// // // //     var complimentaryPromoCount = 0;

// // // //     // return Promise.resolve();
// // // //     // const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // //     userResults && userResults.forEach((doc, id)=>{
// // // //       //batch.delete(admin.firestore().collection('payments').doc(doc.id));
// // // //       const data = doc.data();
// // // //       const email = data && data.email;
// // // //       const name = data && data.name;
// // // //       const complimentaryPromo = data && data.complimentaryPromo;
// // // //       const packageId = data && data.packageId;
// // // //       const isComplimentaryPkg = (packageId === 'L6sJtsKG68LpEUH3QeD4')?true:false;

// // // //       if (complimentaryPromo || isComplimentaryPkg){
// // // //         console.log('complimentaryPromoEmail: ', email);

// // // //         admin.firestore().collection('users').doc(doc.id).update({
// // // //           cancellationDate:timestamp, cancellationReason:'auto terminates'
// // // //         })
// // // //         // admin.firestore().collection('payments').doc(doc.id).delete();
// // // //         if(complimentaryPromoCount >= 499){
// // // //           batch.commit();
// // // //           complimentaryPromoCount = 0;
// // // //           batch = admin.firestore().batch();
// // // //         }
// // // //         complimentaryPromoCount += 1;
// // // //       }
     
// // // //     });
// // // //     var complimentaryLogs = {
// // // //       success:true,
// // // //       message: 'no complimentary removed',
// // // //       createdAt: timestamp
// // // //     }

// // // //     // 
// // // //     if(complimentaryPromoCount > 0){
// // // //       // return 
// // // //       return batch.commit().then(()=>{
// // // //         complimentaryLogs = {
// // // //           success:true,
// // // //           message: 'OK',
// // // //           complimentaryPromoCount,
// // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // //         };
// // // //         // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //         return res.status(200).send(complimentaryLogs);
// // // //       }).catch((error)=>{
// // // //         console.log('error batch: ', error);
// // // //       });
      
// // // //     }else{
// // // //       // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // //       return res.status(200).send(complimentaryLogs);
// // // //     }
// // // //   });
// // // // });

// // // // // // this function will valide user end date, 
// // // // // // automatically convert current non-monthly package to monthly pkg 
// // // // // exports.memberConversion = functions.https.onRequest((req,res) => {

// // // // //   // const MonthlyPkgAllClub = 'TJ7Fiqgrt6EHUhR5Sb2q';
// // // // //   // const MonthlyPkgSingle = 'vf2jCUOEeDDiIQ0S42BJ';

// // // // //   const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulseptemberpromo@gmail.com').get();
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   // during the conversion, make sure to delete all of the unpaid invoices
// // // // //   const invoicesQuery = admin.firestore().collection('invoices')
// // // // //     .where('type', '==', 'membership')
// // // // //     .where('paid', '==', false).get();
// // // // //   // query to check if the september promo member is eligible for the free months
// // // // //   // const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();

// // // // //   // const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //   return Promise.all([usersQuery, packagesQuery, invoicesQuery]).then(results=>{
// // // // //     // Get a new write batch
// // // // //     var batch = admin.firestore().batch();

// // // // //     const usersResults = results[0];
// // // // //     const packageResults = results[1];
// // // // //     const invoiceResults = results[2];
// // // // //     // const freezeResults = results[3];

// // // // //     var userSwitchToDefaultPkgCount = 0;
// // // // //     var needsDeleteCount = 0;
// // // // //     var memberDataList = [];

// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // // // //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// // // // //     var packageMap = {};
// // // // //     packageResults && packageResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       packageMap[doc.id] = data;
// // // // //       // if (((data.renewalTerm === 'month')||(data.renewalTerm === 'monthly')) &&
// // // // //       // !is3MonthKLCCPackage(doc.id) && !is3MonthTTDIPackage(doc.id)
// // // // //       // ) {
// // // // //       // // console.log('packageData: ', data);
// // // // //       //   packageMap[doc.id] = data;
// // // // //       // }
// // // // //     });

// // // // //     // var freezeMap = {};
// // // // //     // freezeResults && freezeResults.forEach((doc)=>{
// // // // //     //   const data = doc.data();
// // // // //     //   const source = data && data.source;
// // // // //     //   const userId = data && data.userId;
// // // // //     //   const freezeFor = data && data.freezeFor;
// // // // //     //   if(freezeFor && moment(getTheDate(freezeFor)).isAfter(moment('2020')))
// // // // //     // })
// // // // //     var invoiceMap = {};
// // // // //     var invoiceIdForUserIdMap = {};
// // // // //     invoiceResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const userId = data && data.userId;
// // // // //       const packageId = data && data.packageId;
// // // // //       const paid = data && data.paid ? data.paid : false;
// // // // //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// // // // //         invoiceIdForUserIdMap[userId] = doc.id;
// // // // //         invoiceMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     usersResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const memberId = doc.id;
// // // // //       const email = data && data.email;
// // // // //       const name = data && data.name;
// // // // //       const packageId = data && data.packageId;
// // // // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // // // //       const promoJan2020 = data && data.promoJan2020;
// // // // //       const promoAug2020 = data && data.promoAug2020;
// // // // //       const promoMidSep2020 = data && data.promoMidSep2020;
// // // // //       const promoSep2020 = data && data.promoSep2020;

// // // // //       console.log('theuserdata: ', data);
// // // // //       // var unitPrice = 0; //default
// // // // //       // const isPromoPackageId = get3Mpkgs(packageId);
// // // // //       const isPromoPackageId = isPromoPackage(packageId);
// // // // //       const cancellationDate = data && data.cancellationDate;

// // // // //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // // // //       // console.log('membershipEndMoment: ', membershipEndsMoment);
// // // // //       // console.log('todayMoment: ', startOfTodayMoment);
// // // // //       // const isMembershipStartPromo = membershipStarts && moment(getTheDate(membershipStarts)).isSameOrAfter(moment('20200101').tz('Asia/Kuala_Lumpur').startOf('day'));
// // // // //       // console.log('isMembershipStartPromo: ', isMembershipStartPromo);
// // // // //       const memberIsExpired = membershipEndsMoment.isBefore(startOfTodayMoment);

// // // // //       const packageData = packageId && packageMap[packageId];
// // // // //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : null;
// // // // //       const currentPackageName = packageData && packageData.name;
// // // // //       const isNonMonthlyPackageId = (renewalTerm === '4monthly' || renewalTerm === 'quarterly' || renewalTerm === 'biyearly' || renewalTerm === 'year' || renewalTerm === 'yearly')

// // // // //       // console.log('memberIsExpired: ', memberIsExpired);
// // // // //       // console.log('renewalTerm: ', renewalTerm);
// // // // //       // const updatedPkgId = (packageId === 'L6sJtsKG68LpEUH3QeD4')? 'TJ7Fiqgrt6EHUhR5Sb2q':'TJ7Fiqgrt6EHUhR5Sb2q';

// // // // //       const updatedPkgId = convertToSingleOrAllAccessPkg(packageId); 
// // // // //       const updatedPackageData = packageId && packageMap[updatedPkgId];
// // // // //       const updatedPackageName = updatedPackageData && updatedPackageData.name;

// // // // //       // map the invoice for the user
// // // // //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// // // // //       const existingInvoiceData = invoiceMap[invoiceId];
// // // // //       const pkgIdFromInvoice = existingInvoiceData && existingInvoiceData.packageId;
// // // // //       const isStaff = data && data.isStaff;
      
// // // // //       // if (invoiceId && (pkgIdFromInvoice === 'AHgEEavKwpJoGTMOzUdX' || pkgIdFromInvoice === 'YsOxVJGLRXrHDgNTBach' || pkgIdFromInvoice === 'uQO2UsaRiqXtzPKjTSIS')){
// // // // //       //   console.log('remove all unpaid invoice');
// // // // //       //   batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //       //     if(userSwitchToDefaultPkgCount + needsDeleteCount >= 499){
// // // // //       //       batch.commit();
// // // // //       //       userSwitchToDefaultPkgCount = 0;
// // // // //       //       needsDeleteCount = 0;
// // // // //       //       batch = admin.firestore().batch();
// // // // //       //     }
// // // // //       //     console.log("Deleting unpaid invoice (change package)", invoiceId);
// // // // //       //     needsDeleteCount += 1;
// // // // //       // }
// // // // //       // remove if current user package is not the same as package from invoice
// // // // //       if (packageId && pkgIdFromInvoice && (packageId!==pkgIdFromInvoice) && invoiceId){
// // // // //         console.log('remove all unpaid invoice');
// // // // //         batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //           if(userSwitchToDefaultPkgCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             userSwitchToDefaultPkgCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           console.log("Deleting unpaid invoice (change package)", invoiceId);
// // // // //           needsDeleteCount += 1;
// // // // //       }
// // // // //       // if cancel, remove all unpaid invoice
// // // // //       else if ((cancellationDate && invoiceId)){
// // // // //         console.log('remove all unpaid invoice');
// // // // //         batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //           if(userSwitchToDefaultPkgCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             userSwitchToDefaultPkgCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// // // // //           needsDeleteCount += 1;
// // // // //       }
// // // // //       else if (memberIsExpired && isNonMonthlyPackageId && !cancellationDate){
// // // // //         // convert to default package, send email? 
// // // // //       }
// // // // //       // checking condition to change the member package
// // // // //       else if (!cancellationDate && isPromoPackageId && memberIsExpired
// // // // //         && ((promoJan2020 >= 4) || ((promoJan2020 >= 3) && (packageId === 'LNGWNSdm6kf4rz1ihj0i')) 
// // // // //         || promoAug2020 >= 3 || promoMidSep2020 >= 3 || promoSep2020 >= 3) 
// // // // //         ){
        
// // // // //         console.log('need to switch package: ', data);

// // // // //         if (invoiceId){
// // // // //           // remove the invoice if it is existed
// // // // //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
         
// // // // //           if(userSwitchToDefaultPkgCount + needsDeleteCount >= 499){
// // // // //             batch.commit();
// // // // //             // userSwitchToDefaultPkgCount = 0;
// // // // //             needsDeleteCount = 0;
// // // // //             batch = admin.firestore().batch();
// // // // //           }
// // // // //           console.log("Deleting unpaid invoice", invoiceId);
// // // // //           needsDeleteCount += 1;
// // // // //         }
        
// // // // //          // update the users
// // // // //         batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId})
// // // // //           // .then(()=>{
// // // // //           //   return sendUpdatedPackageEmail(email, name, currentPackageName, updatedPackageName, moment().format('DD-MM-YYYY'))
// // // // //           // })
// // // // //         // sendUpdatedPackageEmail(email, name, currentPackageName, updatedPackageName, moment().format('DD-MM-YYYY'));

// // // // //         if(userSwitchToDefaultPkgCount + needsDeleteCount >= 499){
// // // // //           batch.commit();
// // // // //           userSwitchToDefaultPkgCount = 0;
// // // // //           batch = admin.firestore().batch();
// // // // //         }
// // // // //         userSwitchToDefaultPkgCount += 1;
// // // // //       }
// // // // //     });

// // // // //     var memberValidationLogs = {
// // // // //       success:true,
// // // // //       message: 'no member updated',
// // // // //       createdAt: timestamp
// // // // //     }

// // // // //     // 
// // // // //     if(userSwitchToDefaultPkgCount + needsDeleteCount > 0){
// // // // //       // return 
// // // // //       return batch.commit().then(()=>{
// // // // //         memberValidationLogs = {
// // // // //           success:true,
// // // // //           message: 'OK',
// // // // //           userSwitchToDefaultPkgCount,
// // // // //           needsDeleteCount,
// // // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //         };
// // // // //         admin.firestore().collection('memberValidationLogs').add(memberValidationLogs);
// // // // //         return res.status(200).send(memberValidationLogs);
// // // // //       }).catch((error)=>{
// // // // //         console.log('error batch: ', error);
// // // // //       });
      
// // // // //     }else{
// // // // //       admin.firestore().collection('memberValidationLogs').add(memberValidationLogs);
// // // // //       return res.status(200).send(memberValidationLogs);
// // // // //     }
// // // // //   });
// // // // // });

// // // // // // this function will add createdAt to user if it is not exist, 
// // // // // // automatically convert current non-monthly package to monthly pkg 
// // // // // exports.addCreatedAtToUsers = functions.https.onRequest((req,res) => {

// // // // //   const usersQuery = admin.firestore().collection('users').get();

// // // // //   return Promise.all([usersQuery]).then(results=>{
// // // // //     // Get a new write batch
// // // // //     var batch = admin.firestore().batch();

// // // // //     const usersResults = results[0];

// // // // //     var memberDataList = [];
// // // // //     var userCount = 0;
// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     usersResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const memberId = doc.id;
// // // // //       const createdAt = data && data.createdAt;
// // // // //       const joinDate = data && data.joinDate;

// // // // //       if (joinDate && !createdAt){
  
// // // // //         console.log("Updating member data: ", memberId, data);
// // // // //         batch.update(admin.firestore().collection('users').doc(memberId), {createdAt:joinDate});

// // // // //         if(userCount >= 499){
// // // // //           batch.commit();
// // // // //           userCount = 0;
// // // // //           batch = admin.firestore().batch();
// // // // //         }
// // // // //         userCount += 1;
// // // // //       }
      
// // // // //     });

// // // // //     var memberValidationLogs = {
// // // // //       success:true,
// // // // //       message: 'no member updated',
// // // // //       createdAt: timestamp
// // // // //     }

// // // // //     // 
// // // // //     if(userCount > 0){
// // // // //       // return 
// // // // //       return batch.commit().then(()=>{
// // // // //         memberValidationLogs = {
// // // // //           success:true,
// // // // //           message: 'OK',
// // // // //           userCount,
// // // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //         };
// // // // //         admin.firestore().collection('memberValidationLogs').add(memberValidationLogs);
// // // // //         return res.status(200).send(memberValidationLogs);
// // // // //       }).catch((error)=>{
// // // // //         console.log('error batch: ', error);
// // // // //       });
      
// // // // //     }else{
// // // // //       admin.firestore().collection('memberValidationLogs').add(memberValidationLogs);
// // // // //       return res.status(200).send(memberValidationLogs);
// // // // //     }
// // // // //   });
// // // // // });

// // // // // remove packageId if autoBilling date is not found
// // // // // exports.removePackage = functions.https.onRequest((req,res) => {
// // // // //   //const usersQuery = admin.firestore().collection('users').where('email', '==', 'faizulklcc@babel.fit').get();
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const userQuery = admin.firestore().collection('users')
// // // // //     // .where('freezeType', '==', 'specialFreezePKP2')
// // // // //     // .where('hasRecurring', '==', true)
// // // // //     // .where('freezeFor', '>=', moment('20200315').startOf('day').toDate())
// // // // //     .get();
// // // // //   const paymentQuery = admin.firestore().collection('payments')
// // // // //     .where('type', '==', 'membership')
// // // // //     .get();

// // // // //   return Promise.all([userQuery, paymentQuery]).then(results=>{
// // // // //     // Get a new write batch
// // // // //     var batch = admin.firestore().batch();

// // // // //     const userResults = results[0];
// // // // //     const paymentResults = results[1];

// // // // //     // console.log('userResults: ', userResults);
// // // // //     // console.log('paymentResults: ', paymentResults);

// // // // //     var hasRecurringCount = 0;

// // // // //     var paymentMap = {};
// // // // //     paymentResults && paymentResults.forEach((doc)=>{
// // // // //       const data = doc.data();
// // // // //       const source = data && data.source;
// // // // //       const type = data && data.type;
// // // // //       const userId = data && data.userId;
// // // // //       const createdAt = data && data.createdAt;
// // // // //       const status = data && data.status;

// // // // //       // 3rd logic
// // // // //       if (type === 'membership' && userId && status === 'CLOSED'){
// // // // //         if(!paymentMap[userId] && data && userId){
// // // // //           paymentMap[userId] = {};
// // // // //         }
// // // // //         else if (userId){
// // // // //           paymentMap[userId][doc.id] = data;
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     // console.log('paymentMap: ', paymentMap);

// // // // //     var count = 0;
// // // // //     userResults && userResults.forEach((doc, id)=>{
// // // // //       //batch.delete(admin.firestore().collection('payments').doc(doc.id));
// // // // //       const data = doc.data();
// // // // //       const packageId = data && data.packageId;
// // // // //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // // //       const membershipEnds = data && data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
// // // // //       const cancellationDate = data && data.cancellationDate;
// // // // //       // const paymentViaAdyen
// // // // //       const paymentData = paymentMap? paymentMap[doc.id]:null;
// // // // //       // const monthDiff = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
      
// // // // //       // console.log('paymentData: ', paymentData);

// // // // //       var paymentArray = [];

// // // // //       if (membershipStarts && !packageId && !cancellationDate){
// // // // //         console.log('userData: ', data);
// // // // //         // count += 1;
      
// // // // //         admin.firestore().collection('users').doc(doc.id).update({autoMembershipStarts:null, membershipStarts:null});
// // // // //         if(count >= 499){
// // // // //           batch.commit();
// // // // //           count = 0;
// // // // //           batch = admin.firestore().batch();
// // // // //         }
// // // // //         count += 1;
// // // // //       }
     
// // // // //     });
// // // // //     var countLogs = {
// // // // //       success:true,
// // // // //       message: 'no membershipstart removed',
// // // // //       createdAt: timestamp
// // // // //     }

// // // // //     // 
// // // // //     if(count > 0){
// // // // //       // return 
// // // // //       return batch.commit().then(()=>{
// // // // //         countLogs = {
// // // // //           success:true,
// // // // //           message: 'OK',
// // // // //           count,
// // // // //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //         };
// // // // //         // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // // //         return res.status(200).send(countLogs);
// // // // //       }).catch((error)=>{
// // // // //         console.log('error batch: ', error);
// // // // //       });
      
// // // // //     }else{
// // // // //       // admin.firestore().collection('CV19FreezeLogs').add(CV19FreezeLogs);
// // // // //       return res.status(200).send(countLogs);
// // // // //     }
// // // // //   });
// // // // // });


// // // // //   // for Jan2020 promo
// // // // //   // Jan2020 is already paid during registration, this logic is to create an invoice for 
// // // // //   // 3 step promo 110, 220 and 330. January fee: RM110, Feb fee: RM 220, March fee: RM 330
// // // // //   // 
// // // // //   // exports.generateInvoice3Step = functions.https.onRequest((req,res) => {
// // // // //   //   const ThreeStepPkgIdAllClub = 'LNGWNSdm6kf4rz1ihj0i';
// // // // //   //   const ThreeStepPkgIdSingle = 'k7As68CqGsFbKZh1Imo4';
// // // // //   //   const threeMonthTermPkg = 'w12J3n9Qs6LTViI6HaEY';
// // // // //   //   const threeTermMembershipPkg = 'aTHIgscCxbwjDD8flTi3';
// // // // //   //   const threeMTermMembership = 'yQFACCzpS4DKcDyYftBx';

// // // // //   //   const MonthlyPkgAllClub = 'TJ7Fiqgrt6EHUhR5Sb2q';
// // // // //   //   const MonthlyPkgSingle = 'vf2jCUOEeDDiIQ0S42BJ';

// // // // //   //   const usersQuery = admin.firestore().collection('users').where('email', '==', 'ibrahimdiyana@gmail.com').get();
// // // // //   //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   //   const invoicesQuery = admin.firestore().collection('invoices').where('paid', '==', false).where('type', '==', 'membership').get();
// // // // //   //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   //   const priceSequence = [110, 220, 330];
// // // // //   //   // const priceSequence = [1, 2, 3]; // testing
// // // // //   //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   //   const freezesQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
// // // // //   //   const referQuery = admin.firestore().collection('payments').where('source', '==', 'refer').get();

// // // // //   //   return Promise.all([usersQuery, packagesQuery, invoicesQuery, freezesQuery, referQuery]).then(results=>{
// // // // //   //     // Get a new write batch
// // // // //   //     var batch = admin.firestore().batch();

// // // // //   //     const usersResults = results[0];
// // // // //   //     const packagesResults = results[1];
// // // // //   //     const invoicesResults = results[2];
// // // // //   //     const freezeResults = results[3];
// // // // //   //     const referResults = results[4];

// // // // //   //     var packageMap = {};
// // // // //   //     packagesResults.forEach(doc=>{
// // // // //   //       const data = doc.data();
// // // // //   //       if ((doc.id===ThreeStepPkgIdAllClub) || (doc.id===ThreeStepPkgIdSingle) || (doc.id===threeMonthTermPkg) || (doc.id===threeTermMembershipPkg) || (doc.id)===threeMTermMembership) {
// // // // //   //         // console.log('packageData: ', data);
// // // // //   //         packageMap[doc.id] = data;
// // // // //   //       }
// // // // //   //     });

// // // // //   //     // console.log('userIdFreezeMap: ', userIdFreezeMap);
// // // // //   //     var invoiceMap = {};
// // // // //   //     var invoiceIdForUserIdMap = {};
// // // // //   //     invoicesResults.forEach(doc=>{
// // // // //   //       const data = doc.data();
// // // // //   //       const userId = data && data.userId;
// // // // //   //       const packageId = data && data.packageId;
// // // // //   //       const paid = data && data.paid ? data.paid : false;
        
// // // // //   //       if(userId && userId.length > 0 && packageId && packageId.length > 0 && !paid){
// // // // //   //         invoiceIdForUserIdMap[userId] = doc.id;
// // // // //   //         invoiceMap[doc.id] = data;
// // // // //   //       }
// // // // //   //     });

// // // // //   //     var freezeMap = {};
// // // // //   //     var userIdFreezeMap = {};
// // // // //   //     freezeResults.forEach(doc=>{
// // // // //   //       const data = doc.data();
// // // // //   //       const freezeFor = data && data.freezeFor? moment(data.freezeFor).isValid()? data.freezeFor:null : null;
// // // // //   //       // const freezeFor = data && data.freezeFor;
// // // // //   //       const createdAt = data && data.createdAt? moment(data.createdAt).isValid()? data.createdAt:null:null;
// // // // //   //       // const createdAt = data && data.createdAt;
// // // // //   //       const userId = data && data.userId;
// // // // //   //       if(userId && (freezeFor!=='undefined') && (createdAt!=='undefined')){
// // // // //   //         freezeMap[doc.id] = data;
// // // // //   //         var userFreezes = userIdFreezeMap[userId];
// // // // //   //         if(!userFreezes){
// // // // //   //           userFreezes = [];
// // // // //   //         }
// // // // //   //         userFreezes.push(data);
// // // // //   //         userIdFreezeMap[userId] = userFreezes;
// // // // //   //       }
// // // // //   //     });

// // // // //   //     var referMap = {};
// // // // //   //     var userIdFreeMap = {};
// // // // //   //     referResults.forEach(doc=>{
// // // // //   //       const data = doc.data();
// // // // //   //       const createdAt = data && data.createdAt? moment(data.createdAt).isValid()? data.createdAt:null:null;
// // // // //   //       // const createdAt = data && data.createdAt;
// // // // //   //       const userId = data && data.userId;
// // // // //   //       if(userId && (createdAt!=='undefined')){
// // // // //   //         referMap[doc.id] = data;
// // // // //   //         var userRefers = userIdFreeMap[userId];
// // // // //   //         if(!userRefers){
// // // // //   //           userRefers = [];
// // // // //   //         }
// // // // //   //         userRefers.push(data);
// // // // //   //         userIdFreeMap[userId] = userRefers;
// // // // //   //       }
// // // // //   //     });

// // // // //   //     console.log('userRefers: ', userRefers);

// // // // //   //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');
// // // // //   //     // console.log('startOfTodayMoment: ', startOfTodayMoment);
// // // // //   //     var needsUpdatedInvoiceCount = 0;
// // // // //   //     var newInvoiceCount = 0;
// // // // //   //     var needsDeleteCount = 0;
// // // // //   //     var userSwitchToDefaultPkgCount = 0;
// // // // //   //     var invoiceList = [];
// // // // //   //     var existingInvoiceList = [];
// // // // //   //     var newInvoiceList = [];
// // // // //   //     const currentMonth = moment().startOf('today').subtract(2, 'days').get('month'); // 0 to 11
     
// // // // //   //     // hardcode first
// // // // //   //     // const currentMonth = 1; //february;
// // // // //   //     console.log('currentMonth: ', currentMonth);
     
// // // // //   //     // for 3 step promo, membership start is on 1/1/2020
// // // // //   //     usersResults.forEach(doc=>{
// // // // //   //       const data = doc.data();
// // // // //   //       const memberId = doc.id;
// // // // //   //       const packageId = data && data.packageId;
// // // // //   //       const packageData = packageId && packageMap[packageId];
// // // // //   //       const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
// // // // //   //       const membershipStarts = data && data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // // // //   //       const membershipEnds = data && data.autoMembershipEnds;
// // // // //   //       const promoJan2020 = data && data.promoJan2020;
// // // // //   //       var unitPrice = 0; //default
// // // // //   //       const promoPackageId = (packageId===ThreeStepPkgIdAllClub) || (packageId===ThreeStepPkgIdSingle) || (packageId===threeMonthTermPkg) || (packageId===threeTermMembershipPkg) || (packageId===threeMTermMembership) 

     
// // // // //   //       console.log('packageData: ', packageData);

// // // // //   //       const membershipEndsMoment = moment(getTheDate(membershipEnds)).clone();
// // // // //   //       console.log('membershipEndMoment: ', membershipEndsMoment);
// // // // //   //       console.log('todayMoment: ', startOfTodayMoment);
// // // // //   //       const isMembershipStartPromo = membershipStarts && moment(getTheDate(membershipStarts)).isSameOrAfter(moment('20200101').tz('Asia/Kuala_Lumpur').startOf('day'));
// // // // //   //       console.log('isMembershipStartPromo: ', isMembershipStartPromo);
        
// // // // //   //       const needsPayment = promoPackageId && promoJan2020 && isMembershipStartPromo && membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'));
// // // // //   //       console.log('needsPayment: ', needsPayment);
      
// // // // //   //       var membershipCancelled = false;
// // // // //   //       if (data && (data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'))) || 
// // // // //   //         (data.tempCancellationDate && moment(getTheDate(data.tempCancellationDate)).isSameOrBefore(startOfTodayMoment.clone().add(3, 'days')))){
// // // // //   //         membershipCancelled = true;
// // // // //   //       }
       
// // // // //   //       var invoiceId = invoiceIdForUserIdMap[doc.id];
// // // // //   //       console.log('invoiceId: ', invoiceId);
// // // // //   //       const needsUpdate = (needsPayment === true || invoiceId);
// // // // //   //       console.log('needsupdate: ', needsUpdate);

// // // // //   //       if(data.locked){
// // // // //   //         console.log("Locked invoice", invoiceId);
// // // // //   //         return;
// // // // //   //       }

// // // // //   //       const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;

// // // // //   //       // if the invoice is already existed, but if its not supposed to be charged, del the invoice
// // // // //   //       // if((!needsPayment || membershipCancelled) && invoiceId){
// // // // //   //       if(membershipCancelled){
// // // // //   //         if (!needsUpdate && invoiceId){
// // // // //   //           batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //   //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //   //             batch.commit();
// // // // //   //             needsUpdatedInvoiceCount = 0;
// // // // //   //             newInvoiceCount = 0;
// // // // //   //             needsDeleteCount = 0;
// // // // //   //             batch = admin.firestore().batch();
// // // // //   //           }
// // // // //   //           console.log("Deleting unpaid invoice (terminated)", invoiceId);
// // // // //   //           needsDeleteCount += 1;
// // // // //   //         }
// // // // //   //         else{
// // // // //   //           console.log('membershipcancelled, no invoice generated, do nothing.');
// // // // //   //         }
// // // // //   //       }
// // // // //   //       // generate 220 invoice
// // // // //   //       else if (promoJan2020 === 1 && packageData && needsUpdate && membershipCancelled === false){
          
// // // // //   //         if(invoiceId){
// // // // //   //           unitPrice = priceSequence[1]; // charge 220;

// // // // //   //         }
// // // // //   //       }
// // // // //   //       // convert the package to monthly package
// // // // //   //       else if (currentMonth>=3){
// // // // //   //         console.log('convert the package to monthly package');
// // // // //   //         console.log('memberId: ', memberId);
// // // // //   //         const updatedPkgId = (packageId === ThreeStepPkgIdSingle)? MonthlyPkgSingle:MonthlyPkgAllClub;
// // // // //   //         batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
// // // // //   //         if(userSwitchToDefaultPkgCount >= 499){
// // // // //   //           batch.commit();
// // // // //   //           userSwitchToDefaultPkgCount = 0;
// // // // //   //           batch = admin.firestore().batch();
// // // // //   //         }
// // // // //   //         userSwitchToDefaultPkgCount+=1;
// // // // //   //       }
// // // // //   //       // updating the existing invoice
// // // // //   //       else if(packageData && needsUpdate && membershipCancelled === false && (renewalTerm === 'month')||(renewalTerm === 'monthly')){
          
// // // // //   //         var applicableFreezeMonths = 0;
// // // // //   //         const userFreezes = userIdFreezeMap[doc.id];
// // // // //   //         if (userFreezes){
// // // // //   //           // console.log('userFreeze123: ', userFreezes);
// // // // //   //           for (var freezeIndex = 0; userFreezes && freezeIndex < userFreezes.length; freezeIndex++) {
// // // // //   //             const userFreeze = userFreezes[freezeIndex];
// // // // //   //             const freezeFor = userFreeze.freezeFor;
// // // // //   //             const freezeForMoment = freezeFor && moment(getTheDate(freezeFor));
  
// // // // //   //             if(freezeForMoment && freezeForMoment.isBetween(membershipEndsMoment, startOfTodayMoment, 'day', '[]')){
// // // // //   //               applicableFreezeMonths += 1;
// // // // //   //             }
// // // // //   //           }
// // // // //   //         }

// // // // //   //         var applicableFreeMonths = 0;
// // // // //   //         const userFreeMth = userIdFreeMap[doc.id];
// // // // //   //         if (userFreeMth){
// // // // //   //           // console.log('userFreeze123: ', userFreezes);
// // // // //   //           for (var freeIndex = 0; userFreeMth && freeIndex < userFreeMth.length; freeIndex++) {
// // // // //   //             const userFree = userFreeMth[freeIndex];
// // // // //   //             const createdAt = userFree.createdAt;
// // // // //   //             const createdAtMoment = createdAt && moment(getTheDate(createdAt));
  
// // // // //   //             if(createdAtMoment && createdAtMoment.isBetween(membershipEndsMoment, startOfTodayMoment, 'day', '[]')){
// // // // //   //               applicableFreeMonths += 1;
// // // // //   //             }
// // // // //   //           }
// // // // //   //         }

// // // // //   //         console.log('applicableFreeMonth: ', applicableFreeMonths);

// // // // //   //         var amount;
// // // // //   //         var invoiceData;
// // // // //   //         const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1 - applicableFreezeMonths - applicableFreeMonths;
// // // // //   //         const activeMonthQty = startOfTodayMoment.diff(moment(getTheDate(membershipStarts)), 'months') + 1 - applicableFreezeMonths;
// // // // //   //         // const activeMonthQty = 4;
// // // // //   //         console.log('quantity: ', quantity);
// // // // //   //         console.log('activeMonthQty: ', activeMonthQty);
          
// // // // //   //         if (activeMonthQty === 2 || activeMonthQty === 3){
// // // // //   //           unitPrice = priceSequence[activeMonthQty-1];
// // // // //   //         }
// // // // //   //         else if (activeMonthQty>3){
// // // // //   //           console.log('convert the package to monthly package');
// // // // //   //           //   console.log('memberId: ', memberId);
// // // // //   //           // const updatedPkgId = (packageId === ThreeStepPkgIdSingle)? MonthlyPkgSingle:MonthlyPkgAllClub;
// // // // //   //           var updatedPkgId = MonthlyPkgAllClub;
// // // // //   //           if (packageId === ThreeStepPkgIdSingle || packageId === ThreeStepPkgIdSingle)
// // // // //   //           batch.update(admin.firestore().collection('users').doc(memberId), {packageId:updatedPkgId});
// // // // //   //           if(userSwitchToDefaultPkgCount >= 499){
// // // // //   //             batch.commit();
// // // // //   //             userSwitchToDefaultPkgCount = 0;
// // // // //   //             batch = admin.firestore().batch();
// // // // //   //           }
// // // // //   //           userSwitchToDefaultPkgCount+=1;
// // // // //   //           return;
// // // // //   //         }
// // // // //   //         else{
// // // // //   //           return;
// // // // //   //         }
// // // // //   //         console.log('unitPrice: ', unitPrice);
// // // // //   //         // if the invoice is already created
// // // // //   //         if(invoiceId){

// // // // //   //           // if (quantity===1){
// // // // //   //           //   if (currentMonth===1 || currentMonth===2){
// // // // //   //           //     console.log('if qty is 1 and month is february');
// // // // //   //           //     unitPrice = priceSequence[currentMonth]; // for february or march, 220, 330
// // // // //   //           //   }
             
// // // // //   //           // }
// // // // //   //           // else if ((quantity===2) && (currentMonth===2)){ // for march
// // // // //   //           //   // unitPrice = priceSequence[currentMonth]+priceSequence[currentMonth-1];
// // // // //   //           //   unitPrice = 550; // hardcode
// // // // //   //           // }
// // // // //   //           // else{
// // // // //   //           //   return;
// // // // //   //           // }

// // // // //   //           console.log('theUnitPrice existing invoice: ', unitPrice);
        
// // // // //   //           const totalPrice = unitPrice;
// // // // //   //           if (totalPrice<=0 || quantity===0){
// // // // //   //             console.log('delete the invoice')
// // // // //   //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //   //           }
// // // // //   //           amount = `${totalPrice}00`;
// // // // //   //           const concatLength = 12-amount.length;
// // // // //   //           for (var i = 0; i < concatLength; i++) {
// // // // //   //             amount = '0'.concat(amount);
// // // // //   //           }
// // // // //   //           const existingInvoiceData = invoiceMap[invoiceId];
// // // // //   //           const existingCreatedAt = existingInvoiceData.createdAt || null;
// // // // //   //           const existingAmount = existingInvoiceData.amount;
// // // // //   //           const createdAt = existingAmount !== amount ? startOfTodayMoment.toDate() : existingCreatedAt;

// // // // //   //           const invoiceMailed = !needsPayment ? true : existingInvoiceData.invoiceMailed;
// // // // //   //           const existingInvoiceMailedAt = existingInvoiceData.invoiceMailedAt || null;
// // // // //   //           const invoiceMailedAt = (needsPayment && existingAmount !== amount) ? null : existingInvoiceMailedAt;

// // // // //   //           const dueMailed = !needsPayment ? true : existingInvoiceData.dueMailed;
// // // // //   //           const existingDueMailedAt = existingInvoiceData.dueMailedAt || null;
// // // // //   //           const dueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingDueMailedAt;

// // // // //   //           const overdueMailed = !needsPayment ? true : existingInvoiceData.overdueMailed;
// // // // //   //           const existingOverdueMailedAt = existingInvoiceData.overdueMailedAt || null;
// // // // //   //           const overdueMailedAt = (needsPayment && existingAmount !== amount) ? null : existingOverdueMailedAt;

// // // // //   //           const receiptMailed = !needsPayment ? true : existingInvoiceData.receiptMailed;

// // // // //   //           invoiceData = {
// // // // //   //             createdAt : createdAt,
// // // // //   //             packageId : packageId,
// // // // //   //             paid : !needsPayment,
// // // // //   //             paymentFailed : false,
// // // // //   //             paymentId : null,
// // // // //   //             userId : doc.id,
// // // // //   //             unitPrice : `${unitPrice}`,
// // // // //   //             totalPrice : `${totalPrice}`,
// // // // //   //             amount : amount,
// // // // //   //             quantity : quantity,
// // // // //   //             invoiceMailed : invoiceMailed,
// // // // //   //             invoiceMailedAt : invoiceMailedAt,
// // // // //   //             dueMailed : dueMailed,
// // // // //   //             dueMailedAt : dueMailedAt,
// // // // //   //             overdueMailed : overdueMailed,
// // // // //   //             overdueMailedAt : overdueMailedAt,
// // // // //   //             receiptMailed : receiptMailed,
// // // // //   //             type : 'membership',
// // // // //   //             hasSST : moment(createdAt).isSameOrAfter(moment('2018-09-01'), 'day') ? true : false,
// // // // //   //             billingDate: membershipEnds?membershipEnds:null
// // // // //   //           }

// // // // //   //           existingInvoiceList.push(invoiceData);
// // // // //   //           console.log("Updating unpaid invoice", amount, invoiceId, invoiceData);
// // // // //   //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);

// // // // //   //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //   //             batch.commit();
// // // // //   //             needsUpdatedInvoiceCount = 0;
// // // // //   //             newInvoiceCount = 0;
// // // // //   //             needsDeleteCount = 0;
// // // // //   //             batch = admin.firestore().batch();
// // // // //   //           }
// // // // //   //           needsUpdatedInvoiceCount += 1;
// // // // //   //         }
// // // // //   //         // create a new invoice
// // // // //   //         else if(membershipCancelled === false){
// // // // //   //           //TODO add invoice id
// // // // //   //           invoiceId = admin.firestore().collection('invoices').doc().id;
// // // // //   //           // to avoid creating the 0 or negative invoices

// // // // //   //           // // const quantity = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
// // // // //   //           // if (quantity===1){
// // // // //   //           //   unitPrice = priceSequence[currentMonth];
// // // // //   //           // }
// // // // //   //           // else if (quantity===2){
// // // // //   //           //   // unitPrice = priceSequence[currentMonth]+priceSequence[currentMonth-1];
// // // // //   //           //   unitPrice = 550; //hardcode
// // // // //   //           // }
// // // // //   //           // else{
// // // // //   //           //   unitPrice = priceSequence[currentMonth];
// // // // //   //           //   return;
// // // // //   //           // }
// // // // //   //           // console.log('theUnitPrice new invoice: ', unitPrice);
        
// // // // //   //           const totalPrice = unitPrice;
// // // // //   //           if (totalPrice<=0){
// // // // //   //             batch.delete(admin.firestore().collection('invoices').doc(invoiceId));
// // // // //   //           }
// // // // //   //           amount = `${totalPrice}00`;
// // // // //   //           console.log('theAmount: ', amount);
// // // // //   //           const concatLength = 12-amount.length;
// // // // //   //           for (var x = 0; x < concatLength; x++) {
// // // // //   //             amount = '0'.concat(amount);
// // // // //   //           }
// // // // //   //           invoiceData = {
// // // // //   //             createdAt : startOfTodayMoment.toDate(),
// // // // //   //             packageId : packageId,
// // // // //   //             paid : !needsPayment,
// // // // //   //             paymentFailed : false,
// // // // //   //             paymentId : null,
// // // // //   //             userId : doc.id,
// // // // //   //             unitPrice : `${unitPrice}`,
// // // // //   //             totalPrice : `${totalPrice}`,
// // // // //   //             amount : amount,
// // // // //   //             quantity : quantity,
// // // // //   //             invoiceMailed : false,
// // // // //   //             dueMailed : false,
// // // // //   //             overdueMailed : false,
// // // // //   //             receiptMailed : false,
// // // // //   //             type : 'membership',
// // // // //   //             hasSST : true,
// // // // //   //             billingDate: membershipEnds?membershipEnds:null
// // // // //   //           }
// // // // //   //           console.log("Adding invoice", amount, invoiceId, invoiceData);
// // // // //   //           console.log('invoiceData: ', invoiceData);
            
// // // // //   //           newInvoiceList.push(invoiceData);
// // // // //   //           batch.set(admin.firestore().collection('invoices').doc(invoiceId), invoiceData);
// // // // //   //           if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount >= 499){
// // // // //   //             batch.commit();
// // // // //   //             needsUpdatedInvoiceCount = 0;
// // // // //   //             newInvoiceCount = 0;
// // // // //   //             needsDeleteCount = 0;
// // // // //   //             batch = admin.firestore().batch();
// // // // //   //           }
// // // // //   //           newInvoiceCount += 1;
// // // // //   //         }
// // // // //   //       }
// // // // //   //     });

// // // // //   //     var theObject = {
// // // // //   //       success:true,
// // // // //   //       message: 'no invoice updated',
// // // // //   //       createdAt: timestamp
// // // // //   //     }

// // // // //   //     if(needsUpdatedInvoiceCount + newInvoiceCount + needsDeleteCount + userSwitchToDefaultPkgCount > 0){
// // // // //   //       // return 
// // // // //   //       return batch.commit().then(()=>{
// // // // //   //         console.log("Updated invoice", needsUpdatedInvoiceCount);
// // // // //   //         console.log('New invoices', newInvoiceCount);
// // // // //   //         console.log('Deleted invoices', needsDeleteCount);
// // // // //   //         theObject = {
// // // // //   //           success:true,
// // // // //   //           message: 'OK',
// // // // //   //           needsUpdatedInvoiceCount,
// // // // //   //           newInvoiceCount,
// // // // //   //           needsDeleteCount,
// // // // //   //           existingInvoiceList,
// // // // //   //           newInvoiceList,
// // // // //   //           userSwitchToDefaultPkgCount,
// // // // //   //           createdAtDate: moment(timestamp).format('DDMMYYYY'),
// // // // //   //           createdAtTime: moment(timestamp).format('hh:mm:ss')
// // // // //   //         };
// // // // //   //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// // // // //   //         return res.status(200).send(theObject);
// // // // //   //       }).catch((error)=>{
// // // // //   //         console.log('error batch: ', error);
// // // // //   //       });
// // // // //   //       // return res.status(200).send(theObject);
// // // // //   //     }else{
// // // // //   //       admin.firestore().collection('chargeInvoiceLogs').add(theObject);
// // // // //   //       return res.status(200).send(theObject);
// // // // //   //     }
// // // // //   //   });
// // // // //   // });
// // // // //   //Charge or Send Invoice Email
// // // // //   // This function will verify all the existing invoices db from firebase,
// // // // //   // then charge the user if it is on due & update the invoices
// // // // //   // if hasRecurring is true, auto charge will be called 
// // // // //   exports.chargeOrSendInvoiceEmail = functions.https.onRequest((req, res) => {

// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //     // if (req){
// // // // //     //   console.log('thereq: ', req);
// // // // //     //   if (req.params.email){
// // // // //     //     console.log('email: ', req.params.email);
// // // // //     //   }
// // // // //     // }
    
// // // // //     const usersQuery = admin.firestore().collection('users').get();
    
// // // // //     // const usersQuery = admin.firestore().collection('users').where('email', '==', 'alfi_alizar@yahoo.com').get();
// // // // //     const invoicesQuery = admin.firestore().collection('invoices').
// // // // //     where('type', '==', 'membership').
// // // // //     where('paid', '==', false).
// // // // //     // where('quantity', '==', 1).
// // // // //     get();

// // // // //     return Promise.all([usersQuery, invoicesQuery]).then(results=>{
// // // // //       const usersResults = results[0];
// // // // //       const invoicesResults = results[1];

// // // // //       var users = {};
// // // // //       usersResults.forEach(user=>{
// // // // //         const data = user.data();
// // // // //         const cancelledMember = data.cancellationDate? moment(getTheDate(data.cancellationDate)).isSameOrBefore(moment().tz('Asia/Kuala_Lumpur').startOf('day'))? true:false:false;
// // // // //         if (!cancelledMember){
// // // // //           users[user.id] = user.data();
// // // // //         }
// // // // //       });

// // // // //       var emailInvoicePromises = [];
// // // // //       var sendMail = 0;
// // // // //       var sendDueMail = 0;
// // // // //       var sendOverdueMail = 0;
// // // // //       var recurringCount = 0;
// // // // //       var chargeCount = 0;
// // // // //       var chargeErrorCount = 0;
// // // // //       var emailList = [];
// // // // //       invoicesResults.forEach(invoice=>{
// // // // //         // if(invoiceIdsToSend.includes(invoice.id)){
// // // // //           const invoiceData = invoice.data();
// // // // //           const userId = invoiceData && invoiceData.userId;
// // // // //           const userData = users[userId];
// // // // //           const amount = invoiceData && invoiceData.amount && parseInt(invoiceData.amount);
// // // // //           // const isValidEmail = userData && userData.email && validateEmail(userData.email);
// // // // //           var chargeAttempts = invoiceData.chargeAttempts || 0;
// // // // //           const email = userData && userData.email;

// // // // //           // if (isValidEmail){
// // // // //             if(userData && email && invoiceData && !invoiceData.paid && invoiceData.createdAt){
// // // // //               const hasRecurring = userData.hasRecurring;
// // // // //               const name = userData.name;
// // // // //               const date = moment(invoiceData.createdAt).format('MMM YYYY');
// // // // //               var emailPromise = null;
// // // // //               //if charge failed more than 5 times, send email.
// // // // //               if(hasRecurring && !(chargeAttempts > 5)){
                
// // // // //                 recurringCount += 1;
// // // // //                 const billingDate = getTheDate(userData.autoMembershipEnds);
// // // // //                 // console.log('billingDate: ', billingDate && moment(billingDate).format('DD MM YYYY'));
// // // // //                 // console.log('billingDateToDate: ', moment(getTheDate(billingDate)).format('DD MM YYYY'));
// // // // //                 // console.log('moment(billingDate):', moment(billingDate).tz('Asia/Kuala_Lumpur').startOf('day'));
// // // // //                 // console.log('moment().tz', moment().tz('Asia/Kuala_Lumpur')); 
// // // // //                 if(billingDate && moment(billingDate).tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(moment().tz('Asia/Kuala_Lumpur'), 'day')){
// // // // //                   emailPromise = charge(invoice.id, userId, amount, email).then(results=>{//charge method  
// // // // //                     chargeCount += 1;
// // // // //                     console.log('Succesfully requested charge', invoice.id, userId, amount, email);
// // // // //                     emailList.push({charge:true, email});
// // // // //                     return admin.firestore().collection('invoices').doc(invoice.id).update({chargeAttempts:chargeAttempts+1, lastChargeAttempt:timestamp});
// // // // //                   }).catch((error)=>{
// // // // //                     chargeErrorCount += 1;
// // // // //                     console.log("Error charging", error, invoice.id, userId, amount, email);
// // // // //                     emailList.push({charge:false, email});
// // // // //                     return admin.firestore().collection('invoices').doc(invoice.id).update({chargeAttempts:chargeAttempts+1, lastChargeAttempt:timestamp});
// // // // //                   });
// // // // //                 }else{ 
// // // // //                   console.log("Error with billing date", billingDate, invoice.id, userId, amount, email);
// // // // //                   emailList.push({charge:false, errorBillingDate:true, email});
// // // // //                 }
// // // // //               }
// // // // //               else{
// // // // //                 //deciding which email to send. 
// // // // //                 if(!invoiceData.invoiceMailed || !invoiceData.invoiceMailedAt){
// // // // //                   sendMail+= 1;
// // // // //                   emailPromise = sendInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // // // //                     console.log('sendInvoiceEmailResult: ', results);
// // // // //                     emailList.push({sendInvoiceMail:true, email});
// // // // //                     return admin.firestore().collection('invoices').doc(invoice.id).update({invoiceMailed:true, invoiceMailedAt:timestamp});
// // // // //                   }).catch((error)=>{
// // // // //                     console.log('sendInvoiceEmailError: ', error);
// // // // //                     return admin.firestore().collection('invoices').doc(invoice.id).update({invoiceMailedErrorMsg:error, errorAt:timestamp});
// // // // //                   });
// // // // //                 }else if(invoiceData.invoiceMailed && (!invoiceData.dueMailed || !invoiceData.dueMailedAt)){
// // // // //                   const invoiceMailedAt = invoiceData.invoiceMailedAt;
// // // // //                   if (!invoiceMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(invoiceMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
// // // // //                   sendDueMail += 1;
// // // // //                     emailPromise = sendDueInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // // // //                       emailList.push({sendDueInvoiceMail:true, email});
// // // // //                       return admin.firestore().collection('invoices').doc(invoice.id).update({dueMailed:true, dueMailedAt:timestamp});
// // // // //                     }).catch((error)=>{
// // // // //                       console.log('sendDueInvoiceEmailError: ', error);
// // // // //                       return admin.firestore().collection('invoices').doc(invoice.id).update({dueMailedErrorMsg:error, errorAt:timestamp});
// // // // //                     });
// // // // //                   }
// // // // //                 }else if (invoiceData.invoiceMailed && invoiceData.dueMailed && (!invoiceData.overdueMailed || !invoiceData.overdueMailedAt)){
// // // // //                   const dueMailedAt = invoiceData.dueMailedAt;
// // // // //                   if (!dueMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(dueMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
// // // // //                   sendOverdueMail += 1;
// // // // //                     emailPromise = sendOverdueInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // // // //                       // return console.log('update firebase');
// // // // //                       emailList.push({sendOverDueInvoiceMail:true, email});
// // // // //                       return admin.firestore().collection('invoices').doc(invoice.id).update({overdueMailed:true, overdueMailedAt:timestamp});
// // // // //                     }).catch((error)=>{
// // // // //                       console.log('sendOverdueMailError: ', error);
// // // // //                       return admin.firestore().collection('invoices').doc(invoice.id).update({overDueMailedErrorMsg:error, errorAt:timestamp});
// // // // //                     });
// // // // //                   }
// // // // //                 }
// // // // //               }
  
// // // // //               if(emailPromise){
// // // // //                 emailInvoicePromises.push(emailPromise);
// // // // //               }
// // // // //             }
         
// // // // //       });

// // // // //       console.log('emails count', sendMail, sendDueMail, sendOverdueMail, recurringCount, chargeCount, chargeErrorCount);
// // // // //       // return res.status(200).send('OK');

// // // // //       return Promise.all(emailInvoicePromises).then(results=>{
        
// // // // //         const theSuccesObject = {
// // // // //           success: true,
// // // // //           message: 'OK',
// // // // //           sendMail: sendMail,
// // // // //           sendDueMail: sendDueMail,
// // // // //           sendOverdueMail: sendOverdueMail,
// // // // //           recurringCount: recurringCount,
// // // // //           chargeCount: chargeCount,
// // // // //           chargeErrorCount: chargeErrorCount,
// // // // //           createdAt: timestamp,
// // // // //         };

// // // // //         admin.firestore().collection('adyenLogs').add(emailList);
// // // // //         admin.firestore().collection('adyenLogs').add(theSuccesObject);

// // // // //         return res.status(200).send(theSuccesObject);
// // // // //       });
// // // // //     });
// // // // //   });

// for monthly only
exports.chargeOrSendInvoiceEmailv2 = functions.https.onRequest((req, res) => {
  const itemData = req.body;
  // console.log('itemData: ', itemData);
  const emailInput = itemData && itemData.email;
  const quantityInput = itemData && itemData.quantity;

  const timestamp = admin.firestore.FieldValue.serverTimestamp();
  
  // const usersQuery = admin.firestore().collection('users').where('promoJan2020', '==', 2).get();
  const usersQuery = emailInput? admin.firestore().collection('users').where('email', '==', emailInput).get():
  admin.firestore().collection('users')
  // .where('email', '==', 'nurhidayahlod@gmail.com')
  .get();
  // admin.firestore().collection('users').get();
  // const usersQuery = admin.firestore().collection('users').get();
  const invoicesQuery = admin.firestore().collection('invoices').
  where('type', '==', 'membership').
  where('paid', '==', false).
  // where('packageId', '==', 'ZEDcEHZp3fKeQOkDxCH8'). // 180
  get();

  const gantnerQuery = admin.firestore().collection('gantnerLogs').where('createdAt', '>=', moment('2021-09-24').tz('Asia/Kuala_Lumpur').startOf('day').toDate()).get();
  const packageQuery = admin.firestore().collection('packages').where('active', '==', true).get();

  var emailInvoicePromises = [];
  var sendMail = 0;
  var sendDueMail = 0;
  var sendOverdueMail = 0;
  var recurringCount = 0;
  var chargeCount = 0;
  var chargeErrorCount = 0;
  var emailList = [];
  var recurringList = [];
  var invoiceMailList = [];
  var invoiceDueMailList = [];
  var invoiceOverDueMailList = [];


  return Promise.all([usersQuery, invoicesQuery, gantnerQuery, packageQuery]).then(results=>{
    const usersResults = results[0];
    const invoicesResults = results[1];
    const gantnerResult = results[2];
    const pkgRes = results[3];
    const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

    var pkgMap = {};
    pkgRes.forEach(doc=>{
      const data = doc.data();
      const renewalTerm = data && data.renewalTerm;
      if (renewalTerm && renewalTerm.includes('month')){
        pkgMap[doc.id]=data;
      }
    });

    var users = {};
    usersResults.forEach(user=>{
      const data = user.data();
      // const cancelledMember = data.cancellationDate? moment(getTheDate(data.cancellationDate)).isSameOrBefore(moment().tz('Asia/Kuala_Lumpur').startOf('day'))? true:false:false;
      const cancelledMember = data.cancellationDate? true:false; // not charge cancel member at all
      const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds: null;
      const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
      const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone()); 
      const isTestAccount = data.roles? data.roles.testAccount? data.roles.testAccount:false:false;
      const isFaizulAccount = data.email? data.email.includes('faizul')? true:false:false;
      const packageId = data.packageId;
      if (!cancelledMember && isExpiredMember && !isTestAccount && !isFaizulAccount && packageId){
        users[user.id] = user.data();
      }
    });

    var gantnerMap = {};
    gantnerResult.forEach(doc=>{
      const data = doc.data();
      const userId = data && data.userId;
      if (userId && data){
        gantnerMap[userId]=data;
      }
    });

    invoicesResults.forEach(invoice=>{
      // if(invoiceIdsToSend.includes(invoice.id)){
        const invoiceData = invoice.data();
        const userId = invoiceData && invoiceData.userId;
        const userData = users[userId];
        const amount = invoiceData && invoiceData.amount && parseInt(invoiceData.amount);
        var chargeAttempts = invoiceData.chargeAttempts || 0;
        const email = userData && userData.email;
        const promoJan2020 = userData && userData.promoJan2020;
        const quantity = invoiceData && invoiceData.quantity;
        var chargeAttemptsLimit = promoJan2020? ((chargeAttempts >= 2) ? true:false) : ((chargeAttempts >= 5)? true:false);
        const packageId = invoiceData && invoiceData.packageId;
        const gantnerData = gantnerMap[userId];
        const isSpecialAccount = email? email.includes('sam.tan@kenholdings.com.my')? true:false:false; // menara ken owner
        const packageData = packageId && pkgMap[packageId];
        const renewalTerm = packageData && packageData.renewalTerm;
        // if (userId === 'Z536r8fo66VAcXp0MRdvZYokt2m1'){
        //   console.log('gantnerData: ', gantnerData); 
        // }
        // test for monthly package only
        if (email && userData && invoiceData && !invoiceData.paid && invoiceData.createdAt
          && packageId && renewalTerm
          // && gantnerData
          // && (packageId==='BKcaoWGrWKYihS40MpGd' || packageId === 'dz8SAwq99GWdEvHCKST2' || packageId === 'eRMTW6cQen6mcTJgKEvy' || packageId === 'wpUO5vxWmme7KITqSITo')
          ){
          const hasRecurring = userData.hasRecurring;
          const name = userData.name;
          const date = moment(getTheDate(invoiceData.createdAt)).tz('Asia/Kuala_Lumpur').startOf('day').format('MMM YYYY');
          var emailPromise = null;
          //if charge failed more than 5 times, send email.
          if(hasRecurring && !(chargeAttemptsLimit) 
          && ((quantity && quantity===1) || (quantityInput === quantity)) 
          // && gantnerData
          ){
          recurringCount += 1;
          const billingDate = getTheDate(userData.autoMembershipEnds);
          if(billingDate && moment(billingDate).tz('Asia/Kuala_Lumpur').startOf('day').isSameOrBefore(moment().tz('Asia/Kuala_Lumpur'), 'day')){
            emailPromise = charge(invoice.id, userId, amount, email).then(results=>{//charge method  
              chargeCount += 1;
              // console.log('Succesfully requested charge', invoice.id, userId, amount, email);
              recurringList.push({email, invoiceId:invoice.id, userId, amount, requestedForCharge:true});
              return admin.firestore().collection('invoices').doc(invoice.id).update({chargeAttempts:chargeAttempts+1, lastChargeAttempt:timestamp});
            }).catch((error)=>{
              chargeErrorCount += 1;
              console.log("Error charging", error, invoice.id, userId, amount, email);
              recurringList.push({email, invoiceId:invoice.id, userId, amount, requestedForCharge:false});
            });
          }
          else{ 
            console.log("Error with billing date", billingDate, invoice.id, userId, amount, email);
            emailList.push({charge:false, errorBillingDate:true, email});
          }
        }
        else{
          //deciding which email to send. 
          if ((!invoiceData.invoiceMailed || !invoiceData.invoiceMailedAt) && (promoJan2020)){
            sendMail+= 1;
            emailPromise = sendInvoiceJan2020Email(email, name, invoice.id, date).then(results=>{
              // console.log('sendInvoiceJan2020EmailResult: ', results);
              invoiceMailList.push({email, name, invoice:invoice.id, date, sendInvoiceMail:true});
              return admin.firestore().collection('invoices').doc(invoice.id).update({invoiceMailed:true, invoiceMailedAt:timestamp});
            }).catch((error)=>{
              console.log('sendInvoiceEmailError: ', error);
              console.log('sendInvoiceEmailErrorEmail: ', email);
              sendMail-=1;
              invoiceMailList.push({email, sendInvoiceMail:false});
            });
          }
          else if((!invoiceData.invoiceMailed || !invoiceData.invoiceMailedAt) && (!promoJan2020) && (quantity && quantity<=3) && (gantnerData || isSpecialAccount)){
            sendMail+= 1;
            emailPromise = sendInvoiceEmail(email, name, invoice.id, date).then(results=>{
              // console.log('sendInvoiceEmailResult: ', results);
              invoiceMailList.push({email, name, invoice:invoice.id, date, sendInvoiceMail:true});
              return admin.firestore().collection('invoices').doc(invoice.id).update({invoiceMailed:true, invoiceMailedAt:timestamp});
            }).catch((error)=>{
              console.log('sendInvoiceEmailError: ', error);
              console.log('sendInvoiceEmailErrorEmail: ', email);
              sendMail-=1;
              invoiceMailList.push({email, sendInvoiceMail:false});
            });
          }
          else if(invoiceData.invoiceMailed && (!invoiceData.dueMailed || !invoiceData.dueMailedAt) && (quantity && quantity<=3) && gantnerData){
            const invoiceMailedAt = invoiceData.invoiceMailedAt;
            if (!invoiceMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(invoiceMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
            sendDueMail += 1;
              emailPromise = sendDueInvoiceEmail(email, name, invoice.id, date).then(results=>{
                invoiceDueMailList.push({email, name, invoice:invoice.id, date, sendDueInvoiceMail:true});
                return admin.firestore().collection('invoices').doc(invoice.id).update({dueMailed:true, dueMailedAt:timestamp});
              }).catch((error)=>{
                console.log('sendDueInvoiceEmailError: ', error);
                invoiceDueMailList.push({email, name, invoice:invoice.id, date, sendDueInvoiceMail:false});
                // return admin.firestore().collection('invoices').doc(invoice.id).update({dueMailedErrorMsg:error, errorAt:timestamp});
              });
            }
          }
          else if (invoiceData.invoiceMailed && invoiceData.dueMailed && (!invoiceData.overdueMailed || !invoiceData.overdueMailedAt) && (quantity && quantity<=3) && gantnerData){
            const dueMailedAt = invoiceData.dueMailedAt;
            if (!dueMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(dueMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
            sendOverdueMail += 1;
              emailPromise = sendOverdueInvoiceEmail(email, name, invoice.id, date).then(results=>{
                invoiceOverDueMailList.push({email, name, invoice:invoice.id, date, sendOverDueInvoiceMail:true});
                return admin.firestore().collection('invoices').doc(invoice.id).update({overdueMailed:true, overdueMailedAt:timestamp});
              }).catch((error)=>{
                console.log('sendOverdueMailError: ', error);
                invoiceOverDueMailList.push({email, name, invoice:invoice.id, date, sendOverDueInvoiceMail:false});
                // return admin.firestore().collection('invoices').doc(invoice.id).update({overDueMailedErrorMsg:error, errorAt:timestamp});
              });
            }
          }
        }
        if(emailPromise){
          emailInvoicePromises.push(emailPromise);
        }
      }
    });

    return Promise.all(emailInvoicePromises).then(results=>{
      
      const theSuccesObject = {
        success: true,
        message: 'OK',
        sendMail,
        sendDueMail: sendDueMail,
        sendOverdueMail: sendOverdueMail,
        recurringCount,
        chargeCount,
        chargeErrorCount,
        createdAt: timestamp,
        recurringList,
        invoiceMailList,
        invoiceDueMailList,
        invoiceOverDueMailList,
      };
      admin.firestore().collection('chargeInvoiceLogs').add(theSuccesObject);
      return res.status(200).send(theSuccesObject);
    });
  });
});

// // // // //   exports.manualCharge = functions.https.onCall((data, context) => {

// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //     const theDate = moment(timestamp).tz('Asia/Kuala_Lumpur').format('DDMMYYYY');
// // // // //     const theTime = moment(timestamp).tz('Asia/Kuala_Lumpur').format('hh:mm:ss');

// // // // //     const currentUserEmail = data.currentUserEmail;
// // // // //     const currentUserName = data.currentUserName;
// // // // //     const selectedAvatar = data.selectedAvatar;
// // // // //     const selectedAngPowCover = data.selectedAngPowCover||null;
// // // // //     const referralUserObj = data.referralUserObj;
// // // // //     const referredToEmail = referralUserObj[0].email;
// // // // //     const referredToName = referralUserObj[0].name;

// // // // //     console.log('referralUserObj: ', referralUserObj);
// // // // //     console.log('selectedAngPowCover: ',selectedAngPowCover);

// // // // //     // Checking attribute.
// // // // //     if (!(typeof currentUserEmail === 'string') || currentUserEmail.length === 0) {
// // // // //       // Throwing an HttpsError so that the client gets the error details.
// // // // //       throw new functions.https.HttpsError('invalid-argument', 'The function must be called with ' +
// // // // //           'one arguments "text" containing the message text to add.');
// // // // //     }

// // // // //     referralUserObj && referralUserObj.forEach((referralUser)=>{
// // // // //       console.log('referralUser: ',referralUser);
// // // // //       // sendEmailReferral(currentUserEmail, currentUserName, selectedAvatar, referralUser.email, referralUser.name, theDate, theTime);
// // // // //     });

// // // // //     return admin.firestore().collection('cnyReferralList').add({
// // // // //       currentUserEmail, currentUserName, selectedAvatar, selectedAngPowCover, referralUserObj, theDate, theTime, referredToEmail, referredToName
// // // // //     }).then(()=>{
// // // // //       console.log('write to firestore');
// // // // //       return {success:true}
// // // // //     }).then(()=>{
// // // // //       return {success:true}
// // // // //     }).catch((error)=>{
// // // // //       // Re-throwing the error as an HttpsError so that the client gets the error details.
// // // // //       throw new functions.https.HttpsError('unknown', error.message, error);
// // // // //     });
    
// // // // //   });

// // // // //   exports.testCharge = functions.https.onRequest((req, res) => {
// // // // //     return charge('DEKh9mKL6AVbj87Ns8Rc', 'I8imxoiVYadUWHP7p0a9QpkQWDQ2', 18000, 'feliciasee91@gmail.com').then(results=>{
// // // // //       console.log('Succesfully requested charge');
// // // // //       return res.status(200).send('OK');
// // // // //     }).catch((error)=>{
// // // // //       console.log('Error requesting charge', error);
// // // // //       return res.status(200).send('OK');
// // // // //     });
// // // // //   });


// // // // //   // send email new year 2020
// // // // //   // exports.sendNewYearEmail = functions.https.onRequest((req, res) => {
// // // // //   //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'sakinaadam@gmail.com').get();
// // // // //   //   const usersQuery = admin.firestore().collection('users').
// // // // //   //   // where('paymentsUpdatedAt', '>=', moment('2019-11-21').toDate()).
// // // // //   //   where('email', '==', 'jennming.w@babel.fit').
// // // // //   //   get();
  
// // // // //   //   var userCount = 0;

// // // // //   //   return Promise.all([usersQuery]).then(results=>{
// // // // //   //     // console.log('UQueryresults: ', results);
// // // // //   //     const usersResults = results[0];
// // // // //   //     var users = {};
// // // // //   //     sendNewYearWishEmail('marketeers@babel.fit');
// // // // //   //     // usersResults.forEach(user=>{
// // // // //   //     //   users[user.id] = user.data();
// // // // //   //     //   const email = user.get('email') || null;
// // // // //   //     //   if (email){
// // // // //   //     //     return sendNewYearWishEmail(email);
// // // // //   //     //   }
// // // // //   //     // });

// // // // //   //     // console.log('theusers: ', users);

// // // // //   //     // invoiceResults.forEach(invoice=>{
// // // // //   //     //   // console.log('invoiceId: ', invoice.id);
// // // // //   //     //   const invoiceData = invoice.data();
// // // // //   //     //   const userId = invoiceData && invoiceData.userId;
// // // // //   //     //   const userData = users[userId];
// // // // //   //     //   const invoiceMailedAt = invoiceData && invoiceData.invoiceMailedAt;
// // // // //   //     //   const isValidDate = moment(getTheDate(invoiceMailedAt)).isSameOrAfter(moment('2019-11-28'));
  
// // // // //   //     //   if(userData && userData.email && invoiceData && invoiceData.createdAt && isValidDate){
// // // // //   //     //     console.log('userDataEmail: ', userData.email);
// // // // //   //     //     userCount = userCount + 1;

// // // // //   //     //     // for sending receiptMail
// // // // //   //     //     return sendReceiptEmail(userData.email, userData.name, invoiceData.totalPrice, invoice.id, moment(invoiceData.lastChargeAttempt.toDate()).format('DD MMM YYYY'));
// // // // //   //     //     // for sending invoiceMail
// // // // //   //     //     // return sendInvoiceEmail(userData.email, userData.name, invoice.id, moment(invoiceData.createdAt.toDate()).format('MMM YYYY'))
// // // // //   //     //   }
// // // // //   //     // });


// // // // //   //     // usersResults.forEach(user=>{
// // // // //   //     //   const email = user.get('email') || null;
// // // // //   //     //   // const email = 'faizul.j@boontan.net';
// // // // //   //     //   const name = user.get('name') || null;
// // // // //   //     //   const totalPrice = '230';
// // // // //   //     //   const invoiceId = 'b0gT1xlcGUfy2Kvnoy69';
// // // // //   //     //   const date = '13 Nov 2019';
// // // // //   //     //   const qty = 1;

// // // // //   //     //   // for sending receiptMail
// // // // //   //     //   return sendReceiptEmail(email, name, totalPrice, invoiceId, date, qty);

// // // // //   //     // });

// // // // //   //     //   // for sending invoiceMail
// // // // //   //     //   // return sendInvoiceEmail(email, name, invoiceId, date);

// // // // //   //     //   // var thePromise = null;
// // // // //   //     //   // console.log('usertestParam: ', user.get('testParam'));
// // // // //   //     //   // if (!user.get('testParam')){
// // // // //   //     //   //   // console.log('addtestparam');
// // // // //   //     //   //   // const userRef = admin.firestore().collection('users').doc(user.id);
// // // // //   //     //   //   // batch.update(userRef, {testParam:'saya'});
// // // // //   //     //   //   // batch.commit();
// // // // //   //     //   //   return admin.firestore().collection('users').doc(user.id).update({testParam: "saya"});
// // // // //   //     //   // }
// // // // //   //     //   // return batch.commit();
// // // // //   //     // });

// // // // //   //     return res.status(200).send({
// // // // //   //       success:true,
// // // // //   //       data: 'data',
// // // // //   //       // userCount
// // // // //   //     });
// // // // //   //   });
// // // // //   // });

// // // // //   exports.saveUserAvatar = functions.https.onCall((data, context) => {
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //     const theDate = moment(timestamp).format('DDMMYYYY');
// // // // //     const theTime = moment(timestamp).format('hh:mm:ss');
  
// // // // //     const currentUserEmail = data.currentUserEmail;
// // // // //     const currentUserName = data.currentUserName;
// // // // //     const selectedAvatar = data.selectedAvatar;
  
// // // // //     // Checking attribute.
// // // // //     if (!(typeof currentUserEmail === 'string') || currentUserEmail.length === 0) {
// // // // //       // Throwing an HttpsError so that the client gets the error details.
// // // // //       throw new functions.https.HttpsError('invalid-argument', 'The function must be called with ' +
// // // // //           'one arguments "text" containing the message text to add.');
// // // // //     }
  
// // // // //     const usersQuery = admin.firestore().collection('users').where('email', '==', currentUserEmail).get().then(doc=>{
// // // // //       const id = doc.id
// // // // //       const data = doc.data();
// // // // //       // console.log('theuserId: ', id);
// // // // //       return admin.firestore().collection('users').doc(id).update({selectedAvatar}).then(()=>{
// // // // //         console.log('update the user in firebase');
// // // // //         return {success:true}
// // // // //       }).catch((error)=>{
// // // // //         // Re-throwing the error as an HttpsError so that the client gets the error details.
// // // // //         throw new functions.https.HttpsError('unknown', error.message, error);
// // // // //       });
// // // // //     });

// // // // //     // return {success:true, finalRes:true};

// // // // //   });

// // // // // // to send referral email
// // // // // exports.sendReferralEmail = functions.https.onCall((data, context) => {
  
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   const theDate = moment(timestamp).format('DDMMYYYY');
// // // // //   const theTime = moment(timestamp).format('hh:mm:ss');

// // // // //   const currentUserEmail = data.currentUserEmail;
// // // // //   const currentUserName = data.currentUserName;
// // // // //   const selectedAvatar = data.selectedAvatar;
// // // // //   const selectedAngPowCover = data.selectedAngPowCover||null;
// // // // //   const referralUserObj = data.referralUserObj;

// // // // //   console.log('referralUserObj: ', referralUserObj);
// // // // //   console.log('selectedAngPowCover: ',selectedAngPowCover);

// // // // //   // Checking attribute.
// // // // //   if (!(typeof currentUserEmail === 'string') || currentUserEmail.length === 0) {
// // // // //     // Throwing an HttpsError so that the client gets the error details.
// // // // //     throw new functions.https.HttpsError('invalid-argument', 'The function must be called with ' +
// // // // //         'one arguments "text" containing the message text to add.');
// // // // //   }

// // // // //   referralUserObj && referralUserObj.forEach((referralUser)=>{
// // // // //     console.log('referralUser: ',referralUser);
// // // // //     // sendEmailReferral(currentUserEmail, currentUserName, selectedAvatar, referralUser.email, referralUser.name, theDate, theTime);
// // // // //   });

// // // // //   return admin.firestore().collection('referralList').add({
// // // // //     currentUserEmail, currentUserName, selectedAvatar, selectedAngPowCover, referralUserObj, theDate, theTime
// // // // //   }).then(()=>{
// // // // //     console.log('write to firestore');
// // // // //     return {success:true}
// // // // //   }).catch((error)=>{
// // // // //      // Re-throwing the error as an HttpsError so that the client gets the error details.
// // // // //      throw new functions.https.HttpsError('unknown', error.message, error);
// // // // //   });
  
// // // // //   // console.log('sendReferralEmailData: ', data);

// // // // //   // const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //   // const theDate = moment(timestamp).format('DDMMYYYY');
// // // // //   // const theTime = moment(timestamp).format('hh:mm:ss');

// // // // //   // const currentUserEmail = data.currentUserEmail;
// // // // //   // const currentUserName = data.currentUserName;
// // // // //   // const selectedAvatar = data.selectedAvatar;
// // // // //   // const referralUserObj = data.referralUserObj;

// // // // //   // console.log('referralUserObj: ', referralUserObj);

// // // // //   // if(!currentUserEmail || (!currentUserName) || !selectedAvatar || (!referralUserObj) || (referralUserObj.length === 0)){
// // // // //   //   console.log('Missing data', currentUserEmail, currentUserName, selectedAvatar, referralUserObj);
// // // // //   //   return Promise.resolve();
// // // // //   // }
  
// // // // //   // var emailPromise = null;
// // // // //   // var emailReferralPromises = [];

// // // // //   // referralUserObj && referralUserObj.forEach((referralUser)=>{
// // // // //   //   console.log('referralUser: ',referralUser);
// // // // //   //   // emailPromise = sendEmailReferral(currentUserEmail, currentUserName, selectedAvatar, referralUser.email, referralUser.name, theDate).then(results=>{
// // // // //   //   //   // todo: update the users if it is found
// // // // //   //   //   return admin.firestore().collection('users').doc(invoice.id).update({invoiceMailed:true, invoiceMailedAt:timestamp});
      
// // // // //   //   // });
// // // // //   //   emailPromise = sendEmailReferral(currentUserEmail, currentUserName, selectedAvatar, referralUser.email, referralUser.name, theDate, theTime).then(results=>{
// // // // //   //     console.log('writing to firebase..', currentUserEmail, currentUserName, selectedAvatar, referralUser.email, referralUser.name, theDate, theTime);
// // // // //   //     return admin.firestore().collection('referralList').add(
// // // // //   //       {
// // // // //   //         referredByEmail:currentUserEmail, 
// // // // //   //         referredByName:currentUserName,
// // // // //   //         referredByAvatar:selectedAvatar,
// // // // //   //         referredToUserEmail:referralUser.email, 
// // // // //   //         referredToUserName:referralUser.name,
// // // // //   //         sentDate:theDate,
// // // // //   //         sentTime:theTime
// // // // //   //       }
// // // // //   //     );
// // // // //   //   }).catch(error=>{
// // // // //   //     console.log('error writing to firestore: ', error);
// // // // //   //     return Promise.resolve();
// // // // //   //   });
  
// // // // //   //   if(emailPromise){
// // // // //   //     emailReferralPromises.push(emailPromise);
// // // // //   //   }

// // // // //   //   return Promise.all(emailReferralPromises).then(results=>{  
// // // // //   //     const theSuccesObject = {
// // // // //   //       success: true,
// // // // //   //       message: 'OK',
// // // // //   //       createdAt: timestamp,
// // // // //   //     };
// // // // //   //     // admin.firestore().collection('chargeInvoiceLogs').add(theSuccesObject);
// // // // //   //     return results;
// // // // //   //   });
// // // // //   // });
// // // // // });


// // // // //   // to manually send the email
// // // // //   exports.sendEmailManually = functions.https.onRequest((req, res) => {
// // // // //     // const usersQuery = admin.firestore().collection('users').where('email', '==', 'sakinaadam@gmail.com').get();
// // // // //     const usersQuery = admin.firestore().collection('users').
// // // // //     // where('paymentsUpdatedAt', '>=', moment('2019-11-21').toDate()).
// // // // //     where('email', '==', 'feliciasee91@gmail.com').
// // // // //     get();

// // // // //     const invoiceQuery = admin.firestore().collection('invoices').
// // // // //     // where('paid', '==', false).where('type', '==', 'membership').
// // // // //     // where('invoiceMailed', '==', true).
// // // // //     // where('invoiceMailedAt', '>=', moment('2019-11-28').toDate()).
// // // // //     // where('receiptMailed', '==', true).
// // // // //     // where('lastChargeAttempt', '>=', moment('2019-11-15').toDate()).
// // // // //     // where('quantity', '==', 1)
// // // // //     get();
  
// // // // //     var userCount = 0;

// // // // //     return Promise.all([usersQuery, invoiceQuery]).then(results=>{
// // // // //       // console.log('UQueryresults: ', results);
// // // // //       const usersResults = results[0];
// // // // //       const invoiceResults = results[1];
  
// // // // //       // var batch = admin.firestore().batch();
  
// // // // //       var users = {};
// // // // //       // usersResults.forEach(user=>{
// // // // //       //   users[user.id] = user.data();
// // // // //       // });

// // // // //       // console.log('theusers: ', users);

// // // // //       // invoiceResults.forEach(invoice=>{
// // // // //       //   // console.log('invoiceId: ', invoice.id);
// // // // //       //   const invoiceData = invoice.data();
// // // // //       //   const userId = invoiceData && invoiceData.userId;
// // // // //       //   const userData = users[userId];
// // // // //       //   const invoiceMailedAt = invoiceData && invoiceData.invoiceMailedAt;
// // // // //       //   const isValidDate = moment(getTheDate(invoiceMailedAt)).isSameOrAfter(moment('2019-11-28'));
  
// // // // //       //   if(userData && userData.email && invoiceData && invoiceData.createdAt && isValidDate){
// // // // //       //     console.log('userDataEmail: ', userData.email);
// // // // //       //     userCount = userCount + 1;

// // // // //       //     // for sending receiptMail
// // // // //       //     return sendReceiptEmail(userData.email, userData.name, invoiceData.totalPrice, invoice.id, moment(invoiceData.lastChargeAttempt.toDate()).format('DD MMM YYYY'));
// // // // //       //     // for sending invoiceMail
// // // // //       //     // return sendInvoiceEmail(userData.email, userData.name, invoice.id, moment(invoiceData.createdAt.toDate()).format('MMM YYYY'))
// // // // //       //   }
// // // // //       // });


// // // // //       // usersResults.forEach(user=>{
// // // // //       //   const email = user.get('email') || null;
// // // // //       //   // const email = 'faizul.j@boontan.net';
// // // // //       //   const name = user.get('name') || null;
// // // // //       //   const totalPrice = '230';
// // // // //       //   const invoiceId = 'b0gT1xlcGUfy2Kvnoy69';
// // // // //       //   const date = '13 Nov 2019';
// // // // //       //   const qty = 1;

// // // // //       //   // for sending receiptMail
// // // // //       //   return sendReceiptEmail(email, name, totalPrice, invoiceId, date, qty);

// // // // //       // });

// // // // //       //   // for sending invoiceMail
// // // // //       //   // return sendInvoiceEmail(email, name, invoiceId, date);

// // // // //       //   // var thePromise = null;
// // // // //       //   // console.log('usertestParam: ', user.get('testParam'));
// // // // //       //   // if (!user.get('testParam')){
// // // // //       //   //   // console.log('addtestparam');
// // // // //       //   //   // const userRef = admin.firestore().collection('users').doc(user.id);
// // // // //       //   //   // batch.update(userRef, {testParam:'saya'});
// // // // //       //   //   // batch.commit();
// // // // //       //   //   return admin.firestore().collection('users').doc(user.id).update({testParam: "saya"});
// // // // //       //   // }
// // // // //       //   // return batch.commit();
// // // // //       // });

// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         // userCount
// // // // //       });
// // // // //     });
// // // // //   });

// // // // // // script to change all payment db based from vendsales
// // // // // // exports.addPromoUser2020 = functions.https.onRequest((req, res) => {
// // // // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'syauqisafwan@gmail.com').get();
// // // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership').where('source', '==', 'vend').get();
// // // // // //   const vendSaleQuery = admin.firestore().collection('vendSales').get();

// // // // // //   return Promise.all([paymentQuery, vendSaleQuery]).then(results=>{
// // // // // //     // console.log('UQueryresults: ', results);
// // // // // //     // const usersResults = results[0];
// // // // // //     const paymentResult = results[0];
// // // // // //     const vendSaleResult = results[1];

// // // // // //     vendSaleResult && vendSaleResult.forEach(vendSale=>{

// // // // // //     });

// // // // // //     // var batch = admin.firestore().batch();

// // // // // //     usersResults.forEach(user=>{
// // // // // //       // var thePromise = null;
// // // // // //       // console.log('usertestParam: ', user.get('testParam'));
// // // // // //       const packageId = user.get('packageId')||null;
// // // // // //       const membershipStarts = user.get('autoMembershipStarts') ? user.get('autoMembershipStarts') : (user.get('membershipStarts')? user.get('membershipStarts'):null);
// // // // // //       const isPromoStartDate = membershipStarts && moment(getTheDate(membershipStarts)).isBetween(moment('20191231').tz('Asia/Kuala_Lumpur'), moment('20200203').tz('Asia/Kuala_Lumpur'));
// // // // // //       const totalPayments = user.get('totalPayments')||null;

// // // // // //       if (membershipStarts && isPromoStartDate && (packageId === ThreeStepPkgIdAllClub) || (packageId===ThreeStepPkgIdSingle) || (packageId===threeMonthTermPkg)||
// // // // // //       (packageId===threeTermMembershipPkg) || (packageId===threeMTermMembership)){
// // // // // //         // return admin.firestore().collection('users').doc(user.id).update({promoJan2020: 1});
// // // // // //         if (totalPayments === 660){
// // // // // //           return admin.firestore().collection('users').doc(user.id).update({promoJan2020: 3});
// // // // // //         }
// // // // // //       }
// // // // // //     });

// // // // // //     return res.status(200).send({
// // // // // //       success:true,
// // // // // //       data: 'data',
// // // // // //     });
// // // // // //   });
// // // // // // });

// // // // //   // to manually change the users so it will call the modifyUser & update the billingdate
// // // // // // exports.sendTestModifyUser = functions.https.onRequest((req, res) => {
// // // // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'sakinaadam@gmail.com').get();
// // // // // //   const usersQuery = admin.firestore().collection('users').
// // // // // //   where('hasRecurring', '==', true).
// // // // // //   get();

// // // // // //   return Promise.all([usersQuery]).then(results=>{
// // // // // //     // console.log('UQueryresults: ', results);
// // // // // //     const usersResults = results[0];

// // // // // //     // var batch = admin.firestore().batch();

// // // // // //     // usersResults.forEach(user=>{
// // // // // //     //   // var thePromise = null;
// // // // // //     //   // console.log('usertestParam: ', user.get('testParam'));
// // // // // //     //   if (!user.get('testParam')){
// // // // // //     //     // console.log('addtestparam');
// // // // // //     //     // const userRef = admin.firestore().collection('users').doc(user.id);
// // // // // //     //     // batch.update(userRef, {testParam:'saya'});
// // // // // //     //     // batch.commit();
// // // // // //     //     return admin.firestore().collection('users').doc(user.id).update({testParam: "saya"});
// // // // // //     //   }
// // // // // //     //   // return batch.commit();
// // // // // //     // });
// // // // // //     return res.status(200).send({
// // // // // //       success:true,
// // // // // //       data: 'data',
// // // // // //     });
// // // // // //   });
// // // // // // });

// // // // // // to del testParam in users
// // // // // exports.sendDelModifyUser = functions.https.onRequest((req, res) => {
// // // // //   const testParam = {saya:'test'};
// // // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'frankleongfrankleong@gmail.com').get();

// // // // //   const usersQuery = admin.firestore().collection('users').where('testParam', '==', 'saya').limit(200).get();

// // // // //   return Promise.all([usersQuery]).then(results=>{
// // // // //     const usersResults = results[0];
// // // // //     usersResults.forEach(user=>{
// // // // //         console.log('theUser: ', user);
// // // // //        // var thePromise = null;
// // // // //        return admin.firestore().collection('users').doc(user.id).update({testParam: admin.firestore.FieldValue.delete()});
// // // // //     });

// // // // //     return res.status(200).send({
// // // // //       success:true,
// // // // //       data: 'successfully deleted',
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // delete all unpaid invoices
// // // // // exports.sendDelUnpaidInvoices = functions.https.onRequest((req, res) => {
// // // // //   // const testParam = {saya:'test'};
// // // // //   // const usersQuery = admin.firestore().collection('users').where('email', '==', 'frankleongfrankleong@gmail.com').get();

// // // // //   const invoiceQuery = admin.firestore().collection('invoices').
// // // // //   where('paid', '==', false).where('type', '==', 'membership').
// // // // //   // where('quantity', '==', 1).
// // // // //   where('totalPrice', '==', '110').
// // // // //   get();

// // // // //   return Promise.all([invoiceQuery]).then(results=>{
// // // // //     const invoicesResults = results[0];
// // // // //     console.log('invoicesResults: ', invoicesResults);
   
// // // // //     // var batch = admin.firestore().batch();

// // // // //     invoicesResults.forEach(invoice=>{
// // // // //       console.log('invoiceId: ', invoice.id);
// // // // //       const invoiceData = invoice.data();
// // // // //       // const userId = invoiceData && invoiceData.userId;
// // // // //       // const userData = users[userId];

// // // // //       // if(userData && userData.email && invoiceData && invoiceData.createdAt){
// // // // //       //   console.log('userDataEmail: ', userData.email);
// // // // //       // }
// // // // //       // batch.delete(admin.firestore().collection('invoices').doc(invoice.id));
// // // // //       // // batch.commit().then(function () {
// // // // //       // //   // ...
// // // // //       // //   console.log('thebatchDelete')
// // // // //       // // });
// // // // //       // batch.commit();
// // // // //       // batch = admin.firestore().batch();
// // // // //       // return admin.firestore().collection('users').doc(invoice.id).delete();
// // // // //       // admin.firestore().collection('users').doc(invoice.id).delete();
// // // // //       admin.firestore().collection('invoices').doc(invoice.id).delete();
// // // // //     }) 

// // // // //     return res.status(200).send({
// // // // //       success:true,
// // // // //       data: 'successfully deleted',
// // // // //     });
// // // // //   });

// // // // // });

// // //   exports.sendTestEmail = functions.https.onRequest((req, res) => {

// // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // //     const usersQuery = admin.firestore().collection('users').get();
// // //     const invoicesQuery = admin.firestore().collection('invoices').where('type', '==', 'membership').get();

// // //     return Promise.all([usersQuery, invoicesQuery]).then(results=>{
// // //       const usersResults = results[0];
// // //       const invoicesResults = results[1];

// // //       var users = {};
// // //       usersResults.forEach(user=>{
// // //         users[user.id] = user.data();
// // //       });

// // //       var emailInvoicePromises = [];
// // //       var sendMail = 0;
// // //       var sendDueMail = 0;
// // //       var sendOverdueMail = 0;
// // //       invoicesResults.forEach(invoice=>{
// // //         // if(invoiceIdsToSend.includes(invoice.id)){
// // //           const invoiceData = invoice.data();
// // //           const userId = invoiceData && invoiceData.userId;
// // //           const userData = users[userId];
// // //           if(userData && userData.email && invoiceData && !invoiceData.paid && invoiceData.createdAt){
// // //             const email = userData.email;
// // //             const name = userData.name;
// // //             const date = moment(invoiceData.createdAt).format('MMM YYYY');
// // //             var emailPromise = null;
// // //             if(!invoiceData.invoiceMailed || !invoiceData.invoiceMailedAt){
// // //               sendMail+= 1;
// // //               emailPromise = sendInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // //                 return admin.firestore().collection('invoices').doc(invoice.id).update({invoiceMailed:true, invoiceMailedAt:timestamp});
// // //               });
// // //             }else if(invoiceData.invoiceMailed && (!invoiceData.dueMailed || !invoiceData.dueMailedAt)){
// // //               const invoiceMailedAt = invoiceData.invoiceMailedAt;
// // //               if (!invoiceMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(invoiceMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
// // //                 sendDueMail += 1;
// // //                 emailPromise = sendDueInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // //                   return admin.firestore().collection('invoices').doc(invoice.id).update({dueMailed:true, dueMailedAt:timestamp});
// // //                 });
// // //               }
// // //             }else if (invoiceData.invoiceMailed && invoiceData.dueMailed && (!invoiceData.overdueMailed || !invoiceData.overdueMailedAt)){
// // //               const dueMailedAt = invoiceData.dueMailedAt;
// // //               if (!dueMailedAt || moment().tz('Asia/Kuala_Lumpur').startOf('day').diff(moment(dueMailedAt).tz('Asia/Kuala_Lumpur').startOf('day'), 'days') >= 3) {
// // //                 sendOverdueMail += 1;
// // //                 emailPromise = sendOverdueInvoiceEmail(email, name, invoice.id, date).then(results=>{
// // //                   return admin.firestore().collection('invoices').doc(invoice.id).update({overdueMailed:true, overdueMailedAt:timestamp});
// // //                 });
// // //               }
// // //             }

// // //             if(emailPromise){
// // //               emailInvoicePromises.push(emailPromise);
// // //             }
// // //           }
// // //         // }
// // //       });

// // //       console.log('emails count', sendMail, sendDueMail, sendOverdueMail);
// // //       // return res.status(200).send('OK');

// // //       return Promise.all(emailInvoicePromises).then(results=>{
// // //         return res.status(200).send('OK');
// // //       });
// // //     });
// // //   });
 
// // // // //   function sendEmailReferral(currentUserEmail, currentUserName, selectedAvatar, referralUserEmail, referralUserName, date, time){
// // // // //     console.log("sending referral email", currentUserEmail, currentUserName, selectedAvatar, referralUserEmail, referralUserName);
// // // // //     currentUserEmail = currentUserEmail[0].toUpperCase() + currentUserEmail.slice(1);
// // // // //     currentUserName = currentUserName.toUpperCase();
// // // // //     referralUserEmail = referralUserEmail[0].toUpperCase() + referralUserEmail.slice(1);
// // // // //     referralUserName = referralUserName[0].toUpperCase() + referralUserName.slice(1);
// // // // //     // console.log('currentUserEmail: ', currentUserEmail);
// // // // //     var data = {
// // // // //       from: `hello@babel.fit`,
// // // // //       subject: `${currentUserName} would like to workout with you at Babel!`,
// // // // //       html: `<table align="center" border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="m_-3756121099947607273bodyTable" style="border-collapse:collapse;height:100%;margin:0;padding:0;width:100%">
// // // // //       <tbody><tr>
// // // // //           <td align="center" valign="top" id="m_-3756121099947607273bodyCell" style="height:100%;margin:0;padding:0;width:100%">
// // // // //               <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:collapse">
// // // // //                   <tbody><tr>
// // // // //                       <td align="center" valign="top" id="m_-3756121099947607273templateHeader" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px">
                          
// // // // //                           <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_-3756121099947607273templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // // //                               <tbody><tr>
// // // // //                                   <td valign="top" class="m_-3756121099947607273headerContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px"></td>
// // // // //                               </tr>
// // // // //                           </tbody></table>
                          
// // // // //                       </td>
// // // // //                   </tr>
// // // // //                   <tr>
// // // // //                       <td align="center" valign="top" id="m_-3756121099947607273templateBody" style="background-color:#4c4a48;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:50px;padding-bottom:50px">
                          
// // // // //                           <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_-3756121099947607273templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // // //                               <tbody><tr>
// // // // //                                   <td valign="top" class="m_-3756121099947607273bodyContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // //   <tr>
// // // // //       <td valign="top" style="padding:0px">
// // // // //           <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" style="min-width:100%;border-collapse:collapse">
// // // // //               <tbody><tr>
// // // // //                   <td valign="top" style="padding-right:0px;padding-left:0px;padding-top:0;padding-bottom:0;text-align:center">


// // // // //                               <img align="center" alt="" src="https://ci3.googleusercontent.com/proxy/i5nxxUf9ukTE_iVtg9tvI_6WT5Xcr1kJlMrv7aC0Rq6uwlLXUlfGNgJBWJd8Qn4K-xjrz7OBTI2CZZQRKVQJp8E665JqkXp7XXyBIrfQ6ee_iYn5yYHkPhq6qnhpB1k2Oz3Nwt2BTAPhHe3VN_QwmsrI71RYgd7eGlM=s0-d-e1-ft#https://gallery.mailchimp.com/24e110fcf0a6c0b59d11b5b0b/images/beaee5ca-ddce-4d58-b8b9-6c567440452b.png" width="104.89" style="max-width:617px;padding-bottom:0;display:inline!important;vertical-align:bottom;border:0;height:auto;outline:none;text-decoration:none" class="m_-3756121099947607273mcnRetinaImage CToWUd">


// // // // //                   </td>
// // // // //               </tr>
// // // // //           </tbody></table>
// // // // //       </td>
// // // // //   </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding-top:0;padding-right:18px;padding-bottom:9px;padding-left:18px;word-break:break-word;color:#757575;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;font-size:16px;line-height:150%;text-align:left">

// // // // //                   <div style="text-align:center"><br>
// // // // // <span style="font-size:25px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="color:#ffffff">Let's Gym Together</span></span></span></div>

// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding-top:0;padding-right:18px;padding-bottom:9px;padding-left:18px;word-break:break-word;color:#757575;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;font-size:16px;line-height:150%;text-align:left">


// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="m_-3756121099947607273mcnDividerBlock" style="min-width:100%;border-collapse:collapse;table-layout:fixed!important">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td style="min-width:100%;padding:18px 18px 30px">
// // // // //       <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-top:2px solid #ffffff;border-collapse:collapse">
// // // // //           <tbody><tr>
// // // // //               <td>
// // // // //                   <span></span>
// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>

// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding-top:0;padding-right:18px;padding-bottom:9px;padding-left:18px;word-break:break-word;color:#757575;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;font-size:16px;line-height:150%;text-align:left">


// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding:0px 18px 9px;color:#807e7e;font-size:16px;word-break:break-word;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;line-height:150%;text-align:left">

// // // // //                   <div style="text-align:left"><span style="color:#d3d3d3"><span style="font-size:18px">Hey ${referralUserName},</span></span><br>
// // // // // &nbsp;</div>

// // // // // <div style="text-align:center"><img height="300" src=${selectedAvatar} style="border:0px;width:300px;height:300px;margin:0px;outline:none;text-decoration:none" width="300" class="CToWUd a6T" tabindex="0"><div class="a6S" dir="ltr" style="opacity: 0.01; left: 317px; top: 629px;"></div><div id=":nv" class="T-I J-J5-Ji aQv T-I-ax7 L3 a5q" role="button" tabindex="0" aria-label="Download attachment " data-tooltip-class="a1V" data-tooltip="Download"><div class="aSK J-J5-Ji aYr"></div></div></div><br>
// // // // // <div style="text-align:center"><span style="color:#ffffff;">${currentUserName}</span><br><span style="color:#ffffff;">${currentUserEmail}</span></div>

// // // // // <div style="text-align:left">&nbsp;</div>

// // // // // <div style="text-align:center"><br>
// // // // // <span style="color:#d3d3d3">Flash my character when you sign up with Babel and we'll both</span> <br><span style="color:#ffffff;font-weight:bold;">get ONE Free Month worth RM660.&nbsp;</span><br>
// // // // // <br>
// // // // // Our Privileges: Unlimited Group Classes, Luxurious Amenities, World Class Equipment, Certified Professional Trainers, 3 Month Wellness Programme @ KLCC and so much more!&nbsp;</div>

// // // // // <div style="text-align:left">&nbsp;</div>

// // // // // <div style="text-align:center"><span style="color:#d3d3d3">Hurry! The offer is only valid on </span><br><span style="color:#ffffff;font-weight:bold;">16-19 January 2020.</span></div>

// // // // // <div style="text-align:left"><br>
// // // // // &nbsp;</div>

// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td style="padding-top:0;padding-right:18px;padding-bottom:18px;padding-left:18px" valign="top" align="center">
// // // // //       <table border="0" cellpadding="0" cellspacing="0" style="width:70%;border-collapse:separate!important;border-radius:4px;background-color:#c39c00">
// // // // //           <tbody>
// // // // //               <tr>
// // // // //                   <td align="center" valign="middle" style="font-family:Arial;font-size:16px;padding:18px">
// // // // //                       <a class="m_-3756121099947607273mcnButton" title="REFER NOW" href="http://app.babel.fit/referral?email=${referralUserEmail}&name=${referralUserName}" style="font-weight:bold;letter-spacing:normal;line-height:100%;text-align:center;text-decoration:none;color:#ffffff;display:block" target="_blank">REFER NOW</a>
// // // // //                   </td>
// // // // //               </tr>
// // // // //           </tbody>
// // // // //       </table>
// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding:0px 18px 9px;color:#807e7e;font-size:16px;word-break:break-word;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;line-height:150%;text-align:left">

// // // // //                   <div style="text-align:center"><span style="color:#d3d3d3">Refer now and get rewarded when you sign up later!<br>
// // // // //                   </span></div>

// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
      


// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding:0px 18px 9px;color:#807e7e;font-size:16px;word-break:break-word;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;line-height:150%;text-align:left">

// // // // //                   <div style="text-align:center"><br>
// // // // // <span style="font-size:16px"><span style="color:#ffffff"><font face="open sans, helvetica neue, helvetica, arial, sans-serif"><strong>Questions? Contact them below.&nbsp;</strong></font><br>
// // // // // <a href="tel:+60163723520" style="color:#007c89;text-decoration:underline;font-weight:normal" target="_blank"><img height="16" src="https://ci5.googleusercontent.com/proxy/U7gdjFj8g_AcrUh05Fp7Jc5pPz5USKhQGOey74RiEm8KWfb41DnrqkY6rXDNf7apy_KsxvrRWBhGQxqS5bkmyQOgq6oRQ5Zls3LxL9gJNtSHxbmjsaKsdKggN9zNfksFvLcB3iIbDvVfvzrloXbWMO-N3z-tmQPQFPQ=s0-d-e1-ft#https://gallery.mailchimp.com/24e110fcf0a6c0b59d11b5b0b/images/e4e4d1f4-1b67-4ead-a3a8-d84d5b983182.png" style="border:0px initial;width:12px;height:16px;margin:0px;outline:none;text-decoration:none" width="12" class="CToWUd"></a>&nbsp;<strong><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">TTDI&nbsp; &nbsp;| +6016 319 3520&nbsp;<a href="https://api.whatsapp.com/send?phone=60163193520&amp;text=Hi!%20I%20want%20to%20know%20more%20about%20the%20referral%20rewards!" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://api.whatsapp.com/send?phone%3D60163193520%26text%3DHi!%2520I%2520want%2520to%2520know%2520more%2520about%2520the%2520referral%2520rewards!&amp;source=gmail&amp;ust=1579070203532000&amp;usg=AFQjCNFurH0A9lOwh54cbWqKpmLV-YSQAQ"><img height="18" src="https://ci6.googleusercontent.com/proxy/VMz-d60Zx5YtMPgYgAomIxjTESw-RU_qvK6hx3pHwsrlCZfZLpC1lneR4w1CZQt5nEWtaLA8QA7BdCgJvQPigeBNux2idDvEyaUirL6e4dwvRMD75euiO15ba7U_1JrexeTh_En8fv321p9TlTaYTs0yPdo1tDdZfxY=s0-d-e1-ft#https://gallery.mailchimp.com/24e110fcf0a6c0b59d11b5b0b/images/7fb63099-b6d9-4843-a21c-0199e607cc06.png" style="border:0px initial;width:19px;height:18px;margin:0px;outline:none;text-decoration:none" width="19" class="CToWUd"></a></span></strong></span><br>
// // // // // <span style="color:#ffffff"><a href="tel:+60163723520" style="color:#007c89;text-decoration:underline;font-weight:normal" target="_blank"><img height="16" src="https://ci5.googleusercontent.com/proxy/U7gdjFj8g_AcrUh05Fp7Jc5pPz5USKhQGOey74RiEm8KWfb41DnrqkY6rXDNf7apy_KsxvrRWBhGQxqS5bkmyQOgq6oRQ5Zls3LxL9gJNtSHxbmjsaKsdKggN9zNfksFvLcB3iIbDvVfvzrloXbWMO-N3z-tmQPQFPQ=s0-d-e1-ft#https://gallery.mailchimp.com/24e110fcf0a6c0b59d11b5b0b/images/e4e4d1f4-1b67-4ead-a3a8-d84d5b983182.png" style="border:0px initial;width:12px;height:16px;margin:0px;outline:none;text-decoration:none" width="12" class="CToWUd"></a>&nbsp;<strong><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif">KLCC&nbsp; |&nbsp;+6016 372 3520&nbsp;<a href="https://api.whatsapp.com/send?phone=60163193520&amp;text=Hi!%20I%20want%20to%20know%20more%20about%20the%20referral%20rewards!" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://api.whatsapp.com/send?phone%3D60163193520%26text%3DHi!%2520I%2520want%2520to%2520know%2520more%2520about%2520the%2520referral%2520rewards!&amp;source=gmail&amp;ust=1579070203533000&amp;usg=AFQjCNHLKF7gfzbstTrKX--zenP87Kk8mQ"><img height="18" src="https://ci6.googleusercontent.com/proxy/VMz-d60Zx5YtMPgYgAomIxjTESw-RU_qvK6hx3pHwsrlCZfZLpC1lneR4w1CZQt5nEWtaLA8QA7BdCgJvQPigeBNux2idDvEyaUirL6e4dwvRMD75euiO15ba7U_1JrexeTh_En8fv321p9TlTaYTs0yPdo1tDdZfxY=s0-d-e1-ft#https://gallery.mailchimp.com/24e110fcf0a6c0b59d11b5b0b/images/7fb63099-b6d9-4843-a21c-0199e607cc06.png" style="border:0px initial;width:19px;height:18px;margin:0px;outline:none;text-decoration:none" width="19" class="CToWUd"></a></span></strong></span></span></div>

// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td align="center" valign="top" style="padding:9px">
// // // // //       <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody><tr>
// // // // // <td align="center" style="padding-left:9px;padding-right:9px">
// // // // //   <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // //       <tbody><tr>
// // // // //           <td align="center" valign="top" style="padding-top:9px;padding-right:9px;padding-left:9px">
// // // // //               <table align="center" border="0" cellpadding="0" cellspacing="0" style="border-collapse:collapse">
// // // // //                   <tbody><tr>
// // // // //                       <td align="center" valign="top">
                          

                              


// // // // //                                   <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;border-collapse:collapse">
// // // // //                                       <tbody><tr>
// // // // //                                           <td valign="top" style="padding-right:10px;padding-bottom:9px">
// // // // //                                               <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:collapse">
// // // // //                                                   <tbody><tr>
// // // // //                                                       <td align="left" valign="middle" style="padding-top:5px;padding-right:10px;padding-bottom:5px;padding-left:9px">
// // // // //                                                           <table align="left" border="0" cellpadding="0" cellspacing="0" width="" style="border-collapse:collapse">
// // // // //                                                               <tbody><tr>

// // // // //                                                                       <td align="center" valign="middle" width="24">
// // // // //                                                                           <a href="http://www.facebook.com/babel.fit" target="_blank" data-saferedirecturl="https://www.google.com/url?q=http://www.facebook.com/babel.fit&amp;source=gmail&amp;ust=1579070203533000&amp;usg=AFQjCNFPuXwZWRLnT-aY7LF77VLa1d6sLQ"><img src="https://ci4.googleusercontent.com/proxy/wh1SzDj6ZyhwV3yJVEIMbK6Rx5tTRN-k1zQjgT7IEG7DuJeyBuawW5E5HScprC5P7U6oLOLyjQrSNoTyCJD8kjYxoqtLgrkt3jJBI7w5c2kZCvuKYGmoIQzbEsWDcSqR1P4xyEje=s0-d-e1-ft#https://cdn-images.mailchimp.com/icons/social-block-v2/outline-gray-facebook-48.png" alt="Facebook" style="display:block;border:0;height:auto;outline:none;text-decoration:none" height="24" width="24" class="CToWUd"></a>
// // // // //                                                                       </td>


// // // // //                                                               </tr>
// // // // //                                                           </tbody></table>
// // // // //                                                       </td>
// // // // //                                                   </tr>
// // // // //                                               </tbody></table>
// // // // //                                           </td>
// // // // //                                       </tr>
// // // // //                                   </tbody></table>

                              

                              


// // // // //                                   <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;border-collapse:collapse">
// // // // //                                       <tbody><tr>
// // // // //                                           <td valign="top" style="padding-right:10px;padding-bottom:9px">
// // // // //                                               <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:collapse">
// // // // //                                                   <tbody><tr>
// // // // //                                                       <td align="left" valign="middle" style="padding-top:5px;padding-right:10px;padding-bottom:5px;padding-left:9px">
// // // // //                                                           <table align="left" border="0" cellpadding="0" cellspacing="0" width="" style="border-collapse:collapse">
// // // // //                                                               <tbody><tr>

// // // // //                                                                       <td align="center" valign="middle" width="24">
// // // // //                                                                           <a href="http://www.instagram.com/babel.fit" target="_blank" data-saferedirecturl="https://www.google.com/url?q=http://www.instagram.com/babel.fit&amp;source=gmail&amp;ust=1579070203533000&amp;usg=AFQjCNE8_Rr1XgM6cYpjwMe9odg_3e3GqA"><img src="https://ci4.googleusercontent.com/proxy/dyNd02SZEzITYE_TmIYXnWohAwkHeYI2wwzrCs_kOx448tmHpndVZ7GeLNU3cWUaRh9fESBSpyYtvY9jFmJWMittGX8zVrwhQWtC9mksdFJeJLRVH8z_VUOPn7EtoRRtU0LITElX4g=s0-d-e1-ft#https://cdn-images.mailchimp.com/icons/social-block-v2/outline-gray-instagram-48.png" alt="Link" style="display:block;border:0;height:auto;outline:none;text-decoration:none" height="24" width="24" class="CToWUd"></a>
// // // // //                                                                       </td>


// // // // //                                                               </tr>
// // // // //                                                           </tbody></table>
// // // // //                                                       </td>
// // // // //                                                   </tr>
// // // // //                                               </tbody></table>
// // // // //                                           </td>
// // // // //                                       </tr>
// // // // //                                   </tbody></table>

                              

                              


// // // // //                                   <table align="left" border="0" cellpadding="0" cellspacing="0" style="display:inline;border-collapse:collapse">
// // // // //                                       <tbody><tr>
// // // // //                                           <td valign="top" style="padding-right:0;padding-bottom:9px">
// // // // //                                               <table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:collapse">
// // // // //                                                   <tbody><tr>
// // // // //                                                       <td align="left" valign="middle" style="padding-top:5px;padding-right:10px;padding-bottom:5px;padding-left:9px">
// // // // //                                                           <table align="left" border="0" cellpadding="0" cellspacing="0" width="" style="border-collapse:collapse">
// // // // //                                                               <tbody><tr>

// // // // //                                                                       <td align="center" valign="middle" width="24">
// // // // //                                                                           <a href="http://babel.fit" target="_blank" data-saferedirecturl="https://www.google.com/url?q=http://babel.fit&amp;source=gmail&amp;ust=1579070203534000&amp;usg=AFQjCNEDDLjBy23h3FyckBXtg9JD5Z0v3w"><img src="https://ci3.googleusercontent.com/proxy/x0BpIQDIq_8f1ntOBLJUDjT5W7KH8IfjwbjjKuwmmPCLt2DEp_SwnLw5oeL0YdviUZuOJMHW_0U2JhpZqAXEkp3AkixMZLljpzUEue4u5MtFu10zLB_aQNTbrGBaiMJ3IZU=s0-d-e1-ft#https://cdn-images.mailchimp.com/icons/social-block-v2/outline-gray-link-48.png" alt="Website" style="display:block;border:0;height:auto;outline:none;text-decoration:none" height="24" width="24" class="CToWUd"></a>
// // // // //                                                                       </td>


// // // // //                                                               </tr>
// // // // //                                                           </tbody></table>
// // // // //                                                       </td>
// // // // //                                                   </tr>
// // // // //                                               </tbody></table>
// // // // //                                           </td>
// // // // //                                       </tr>
// // // // //                                   </tbody></table>

                              

                          
// // // // //                       </td>
// // // // //                   </tr>
// // // // //               </tbody></table>
// // // // //           </td>
// // // // //       </tr>
// // // // //   </tbody></table>
// // // // // </td>
// // // // // </tr>
// // // // // </tbody></table>

// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="m_-3756121099947607273mcnDividerBlock" style="min-width:100%;border-collapse:collapse;table-layout:fixed!important">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td style="min-width:100%;padding:18px 18px 30px">
// // // // //       <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-top:2px solid #ffffff;border-collapse:collapse">
// // // // //           <tbody><tr>
// // // // //               <td>
// // // // //                   <span></span>
// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>

// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // // <tbody>
// // // // // <tr>
// // // // //   <td valign="top" style="padding-top:9px">
// // // // //       <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_-3756121099947607273mcnTextContentContainer">
// // // // //           <tbody><tr>

// // // // //               <td valign="top" class="m_-3756121099947607273mcnTextContent" style="padding-top:0;padding-right:18px;padding-bottom:9px;padding-left:18px;word-break:break-word;color:#757575;font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;font-size:16px;line-height:150%;text-align:left">

// // // // //                   <div style="text-align:center"><span style="font-size:12px"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="color:#d3d3d3">Feel free to reach us at</span>&nbsp;<a href="mailto:hello@babel.fit" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank">hello@babel.fit</a>&nbsp;<br>
// // // // // <br>
// // // // // <span style="color:#d3d3d3"><strong>Location:</strong><br>
// // // // // Babel TTDI<br>
// // // // // Rooftop Menara Ken TTDI,<br>
// // // // // Jalan Burhanuddin Helmi, KL, 60000</span></span><br>
// // // // // <a href="tel:+60163193520" style="color:#007c89;text-decoration:underline;font-weight:normal" target="_blank">+6016 319&nbsp;3520</a><br>
// // // // // <br>
// // // // // <span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="color:#d3d3d3">Babel KLCC<br>
// // // // // Lot C-G-02, Suria KLCC,<br>
// // // // // Kuala Lumpur City Centre,<br>
// // // // // 50088 Kuala Lumpur, Wilayah Persekutuan</span></span><br>
// // // // // <a href="tel:+60163723520" style="color:#007c89;text-decoration:underline;font-weight:normal" target="_blank">+6016 372&nbsp;3520</a><br>
// // // // // <br>
// // // // // <span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="color:#d3d3d3"><strong>Opening Hours:</strong><br>
// // // // // Weekdays&nbsp;<br>
// // // // // 6.30 am - 11.00 pm<br>
// // // // // Weekends &amp; Public Holidays<br>
// // // // // 7.00 am - 9.00 pm<br>
// // // // // <br>
// // // // // Want to change how you receive these emails?</span><br>
// // // // // <span style="color:#d3d3d3">You can</span>&nbsp;<em><strong><a href="https://fit.us16.list-manage.com/profile?u=24e110fcf0a6c0b59d11b5b0b&amp;id=9e45f8413f&amp;e=" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://fit.us16.list-manage.com/profile?u%3D24e110fcf0a6c0b59d11b5b0b%26id%3D9e45f8413f%26e%3D&amp;source=gmail&amp;ust=1579070203534000&amp;usg=AFQjCNHoIwQ0jG3kwVELrsnWWBhQf52e2Q">update your preferences</a></strong></em>&nbsp;<span style="color:#d3d3d3">or</span>&nbsp;<em><a href="https://fit.us16.list-manage.com/unsubscribe?u=24e110fcf0a6c0b59d11b5b0b&amp;id=9e45f8413f&amp;e=&amp;c=84107285a4" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://fit.us16.list-manage.com/unsubscribe?u%3D24e110fcf0a6c0b59d11b5b0b%26id%3D9e45f8413f%26e%3D%26c%3D84107285a4&amp;source=gmail&amp;ust=1579070203534000&amp;usg=AFQjCNEn2nkhB6f0UVZ1YNc5QeRvxKrLyw">unsubscribe from this list</a>.</em></span></span></div>

// // // // //               </td>
// // // // //           </tr>
// // // // //       </tbody></table>



// // // // //   </td>
// // // // // </tr>
// // // // // </tbody>
// // // // // </table></td>
// // // // //                               </tr>
// // // // //                           </tbody></table>
                          
// // // // //                       </td>
// // // // //                   </tr>
// // // // //                   <tr>
// // // // //                       <td align="center" valign="top" id="m_-3756121099947607273templateFooter" style="background:#ffffff none no-repeat center/cover;background-color:#ffffff;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px">
                          
// // // // //                           <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_-3756121099947607273templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // // //                               <tbody><tr>
// // // // //                                   <td valign="top" class="m_-3756121099947607273footerContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0;padding-bottom:0"></td>
// // // // //                               </tr>
// // // // //                           </tbody></table>
                          
// // // // //                       </td>
// // // // //                   </tr>
// // // // //               </tbody></table>
              
// // // // //           </td>
// // // // //       </tr>
// // // // //   </tbody></table>`,
// // // // //       'h:Reply-To': 'support@babel.fit',
// // // // //       // to: `sharasandravel@gmail.com`,
// // // // //       // to: `faizulhadijamil@gmail.com`,
// // // // //       to: `${referralUserEmail}`,
// // // // //       // bcc: `faizul.j@boontan.net`
// // // // //       bcc: `ops@babel.fit`
// // // // //     }
// // // // //     console.log('theData: ', data);
// // // // //     return sendEmail(data);
// // // // //   }

// for voided, layby vend transaction
function sendVoidedMailToAdmin(vendSaleId, customerId, date, status, croEmail, customerEmail, customerName, invoiceNumber, note){
  console.log("voided transaction", vendSaleId, customerId, date, status);

  var emailData = {
    from: 'billing@babel.fit',
    // from: 'faizul.j@boontan.net',
    subject: `[Babel] - ${date}: vend transaction changed`,
    html: `
          <p>vend transaction ${vendSaleId} has been changed by ${croEmail}</p>
          <p>Transaction Details: </p>
          <p>sale ID: ${vendSaleId}<p>
          <p>customer ID: ${customerId}</p>
          <p>customer Email: ${customerEmail}</p>
          <p>customer name: ${customerName}</p>
          <p>date: ${date}</p>
          <p>status: ${status}</p>
          <p>CRO email: ${croEmail}</p>
          <p>Invoice Number: ${invoiceNumber}</p>
          <p>Note: ${note}</p>
          <p>Thanks for being a Babel member!</p>
          <p>-Babel Team</p>`,
    'h:Reply-To': 'faizul.j@boontan.net',
    to: `boon@babel.fit`,
    bcc: `faizul.j@boontan.net`,
    cc: `jeshua@boontan.net, billy.w@babel.fit, elese@babel.fit`
  };

  return sendEmail(emailData);
  // todo: send email to faizul, boon, billy, jeshua
}

// // // //   function sendUpdatedPackageEmail(email, name, currentPackageName, updatedPackageName, date){
// // // //     console.log("sending updated package", email, name, currentPackageName, updatedPackageName);
// // // //     var data = {
// // // //       from: 'billing@babel.fit',
// // // //       subject: `[Babel] - ${date}: package changes`,
// // // //       html: `<p>Dear ${name},</p>
// // // //             <p>Your membership package is now automatically converted</p>
// // // //             <p>Previous package: ${currentPackageName}</p>
// // // //             <p>Current package: ${updatedPackageName}</p>
// // // //             <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
// // // //             <p>Thanks for being a Babel member!</p>
// // // //             <p>-Babel Team</p>`,
// // // //       'h:Reply-To': 'support@babel.fit',
// // // //       // to: `sharasandravel@gmail.com`,
// // // //       // to: `faizulhadijamil@gmail.com`,
// // // //       to: `${email}`,
// // // //       bcc: `faizul.j@boontan.net`,
// // // //       cc: `ops@babel.fit`
// // // //     }
// // // //     return sendEmail(data);
// // // //   }

  function sendInvoiceEmail(email, name, invoiceId, date){
    console.log("sending invoice mail", email, name, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: `[Babel] - ${date}: You have a new invoice`,
      html: `<p>Dear ${name},</p>
            <p>Your invoice is now ready. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
            <p>Please ignore this message if you have paid</p>
            <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
            <p>Thanks for being a Babel member!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      // to: `sharasandravel@gmail.com`,
      // to: `faizulhadijamil@gmail.com`,
      to: `${email}`,
      cc:`faizul.j@boontan.net`,
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
  }

  // if the charging is failed, send the invoice link to the user
  function sendInvoiceJan2020Email(email, name, invoiceId, date){
    console.log("sending jan2020 invoice mail", email, name, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: `[Babel] - ${date}: You have a new invoice`,
      html: `<p>Dear ${name},</p>
            <p>We hope you’re doing well and enjoying Babel! There’s seems to be an issue with the auto debit process on the credit card regarding your monthly payments. </p>
            <p>We would greatly appreciate it if you would kindly visit this link to make payment. </p>
            <p>Your invoice is now ready. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
            <p>Please ignore this message if you have paid</p>
            <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
            <p>Thanks for being a Babel member!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      // to: `sharasandravel@gmail.com`,
      // to: `faizulhadijamil@gmail.com`,
      to: `${email}`,
      // bcc: `faizul.j@boontan.net`
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
  }

  function sendDueInvoiceEmail(email, name, invoiceId, date){
    console.log("sending due invoice mail", email, name, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: `[Babel] - ${date}: Your invoice is now due`,
      html: `<p>Dear ${name},</p>
            <p>Your invoice is now due. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
            <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
            <p>Thanks for being a Babel member!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      // to: `sharasandravel@gmail.com`,
      to: `${email}`,
      // bcc: `faizul.j@boontan.net`
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
    // return null;
  }

  function sendOverdueInvoiceEmail(email, name, invoiceId, date){
    console.log("sending overdue invoice mail", email, name, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: `URGENT [Babel] - ${date}: Your invoice is overdue`,
      html: `<p>Dear ${name},</p>
            <p>Your invoice is now overdue. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
            <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
            <p>Thanks for being a Babel member!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      // to: `sharasandravel@gmail.com`,
      to: `${email}`,
      // bcc: `faizul.j@boontan.net`
      bcc: `ops@babel.fit`
    }

    return sendEmail(data);
  }

  function sendAngpauReceivedEmail(angpauRefEmail, angpauRefName, name){
    var data = {
      from: 'billing@babel.fit',
      subject: 'Angpau Redeemed',
      html: `<p>Hey ${angpauRefName},</p>
            <p>Happy Chinese New Year!</p>
            <p>Congratulations, You have successfully referred ${name} to the Angpau membership.</p>
            <p>It’s time to spin the Wheel of Fortune and redeem your prosperous prize.</p>
            <p>Head over to Babel, show this email to our team at the front desk and spin away, Huat Ah!</p>
            <p>Gong Xi Fa Cai</p>
            <p>-Babel</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${angpauRefEmail}`,
      // to: 'faizul.j@boontan.net',
      cc: `ops@babel.fit`,
      bcc: `faizul.j@boontan.net`
    }
    return sendEmail(data);
  }

  function sendReceiptEmail(email, name, amount, invoiceId, date){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: 'We have received your payment',
      html: `<p>Dear ${name},</p>
            <p>We have received your payment for ${date}.</p>
            <p>Invoice No: ${invoiceId} <br/>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Thank you very much and see you soon!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email}`,
      // to: 'faizul.j@boontan.net',
      cc: `ops@babel.fit`,
      bcc: `faizul.j@boontan.net`
    }
    return sendEmail(data);
  }

   // for dance class v2
   function sendDanceReceiptEmailv2(email, name, amount, invoiceId, date, ighandlename, vendProductName, phoneNum){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: 'We have received your payment',
      html: `<p>Dear ${name},</p>
            <p>We have received your payment for Babel Dance’s ${vendProductName} on ${date} Thank you!
            <p>Invoice No: ${invoiceId} <br/>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Do note that virtual dance pass is NOT transferable &amp; NOT refundable.</p>
            <p>Zoom link will be emailed to you 12 hours before the class.</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Participant’s IG Account: ${ighandlename}<br/>
            Participants Contact Number: ${phoneNum}<br/>
            </p>
            <p>If you have any further questions, please DM us on Instagram (@babel.dance) or email us at holla@babel.dance</p>
            <p>Thank you for being part of our community. Looking forward to dance with you!</p>
            <p>Peace and love,</p>
            <p>Team Babel Dance</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email}`,
      // to: 'faizul.j@boontan.net',
      cc: `faizul.j@boontan.net`,
      bcc: `eliza.t@boontan.net`
    }
    return sendEmail(data);
  }

  // for dance class
  function sendDanceReceiptEmail(email, name, amount, invoiceId, date, ighandlename, city, classDate, classTime, instructorName, danceClassRemark, phoneNum){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: 'We have received your payment',
      html: `<p>Dear ${name},</p>
            <p>We have received your payment for Babel Dance’s ${danceClassRemark} on ${date} Thank you!
            <p>Invoice No: ${invoiceId} <br/>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Do note that virtual dance pass is NOT transferable &amp; NOT refundable.</p>
            <p>If you purchased a Virtual Dance Pass, the Zoom link will be emailed to you 12 hours before
            the class.</p>
            <p>Refunds are only allowed for Outdoor Dance Pass in the event that Babel Dance cancels due
            to unforeseen circumstances.</p>
            <p>If you purchased an outdoor dance pass, directions to the venue will be emailed to you 48
            hours before the class.</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>

            <p>Instructor Name: ${instructorName}<br/>
            Class Name: ${danceClassRemark}<br/>
            Class date: ${classDate}<br/>
            Class time: ${classTime}</p>
            <p>Participant’s IG Account: ${ighandlename}<br/>
            Participants Contact Number: ${phoneNum}<br/>
            </p>

            <p>Thank you for being part of our community. Looking forward to dance with you!</p>
            <p>Peace and love,</p>
            <p>Team Babel Dance</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email}`,
      // to: 'faizul.j@boontan.net',
      cc: `holla@babel.dance`,
      bcc: `ops@babel.fit, faizul.j@boontan.net`,
    }
    return sendEmail(data);
  }

  // for unlimited outdoor class
  function sendCutomReceiptEmail(email, name, amount, invoiceId, date){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    var data = {
      from: 'billing@babel.fit',
      subject: 'We have received your payment',
      html: `<p>Dear ${name},</p>
            <p>We have received your payment for Class.</p>
            <p>Invoice No: ${invoiceId} <br/>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Thank you very much and see you soon!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email}`,
      // to: 'faizul.j@boontan.net',
      cc: `faizul.j@boontan.net`,
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
  }

  //for virtual class
  function sendReceiptEmailForVirtualClass(email, name, totalPrice, invoiceId, date, city, ighandlename, phoneNum, selectedMemberOption){
    console.log("sending virtual class receipt mail", email, name, invoiceId);

    var data = {
      from: 'billing@babel.fit',
      subject: 'Thank you for purchasing the BABEL LIVE access!',
      html: `<p>Dear ${name},</p>
            <p>We received your payment for the BABEL LIVE access on ${date}</p>
            <p>Invoice No: ${invoiceId} <br/>
            Total Amount: RM${parseFloat(totalPrice).toFixed(2)}</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Don't forget to send in a request to follow us on our private BABEL LIVE Instagram account @babel.live for access. We will accept your requests upon confirmation. </p>
            <p>Thank you, we're excited to see you in 'class' soon! 😎</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email},`,
      // to: 'faizul.j@boontan.net',
      cc: `faizul.j@boontan.net, billy.w@babel.fit, `,
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
  }

  // for Virtual online wellness
  function sendVirtualWelnessEmail(email, name, amount, invoiceId, date, selectedAMPM, selectedDay, trainerName, coachName, phone, ighandleName){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    const preferredAM = selectedAMPM.AM? 'yes':'no';
    const preferredPM = selectedAMPM.PM? 'yes':'no';
    var dayArray = [];
    // console.log('selectedDay: ', selectedDay);
    dayArray.push(selectedDay.mon? 'Monday':null, selectedDay.tues? 'Tuesday':null, selectedDay.wed? 'Wednesday':null,
    selectedDay.thurs? 'Thursday':null, selectedDay.fri? 'Friday':null, selectedDay.sat? 'Saturday':null, selectedDay.sun? 'Sunday':null);
    dayArray = dayArray.filter(Boolean); // to remove all null value
    console.log('dayArray: ', dayArray);

    var data = {
      from: 'billing@babel.fit',
      subject: `We received your payment for the 'Babel at Home' programme`,
      html: `<p>Dear ${name},</p>
            <p>We received your payment for the 'Babel at Home' programme on ${date}</p>
            <p>Invoice No: ${invoiceId}</p>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Trainer Name: ${trainerName}</p>
            <p>Nutrition Coach Name: ${coachName}</p>
            <p>Member IG Account: ${ighandleName}</p>
            <p>Preferred AM Time: ${preferredAM}</p>
            <p>Preferred PM Time: ${preferredPM}</p>
            <p>Preferred Days: ${dayArray}</p>
            <p>Preferred Contact Number: ${phone}</p>
            <p>Don't forget to send in a request to follow us on our private BABEL LIVE Instagram account @babel.live for access. We will accept your requests upon confirmation. </p>
            <p>Your coach will be in touch, so let's get started on turning those goals into results. 😎 Also, see you in 'class' on @babel.live soon!</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email},`,
      // to: 'faizul.j@boontan.net',
      cc: `faizul.j@boontan.net, billy.w@babel.fit, maybelline.w@boontan.net`,
      bcc: `ops@babel.fit`
    }
    return sendEmail(data);
  }

  // for Virtual Trainer
  function sendVirtualTrainerEmail(email, name, amount, invoiceId, date, selectedAMPM, selectedDay, trainerName, phone, isKLCC){
    console.log("sending receipt mail", email, name, amount, invoiceId);
    const preferredAM = selectedAMPM.AM? 'yes':'no';
    const preferredPM = selectedAMPM.PM? 'yes':'no';
    var dayArray = [];
    console.log('selectedDay: ', selectedDay);
    const preferredMon = selectedDay.mon? 'Monday':null;
    const preferredTues = selectedDay.tues? 'Tuesday':null;
    const preferredWed = selectedDay.wed? 'Wednesday':null;
    const preferredThurs = selectedDay.thurs? 'Thursday':null;
    const preferredFri = selectedDay.fri? 'Friday':null;
    const preferredSat = selectedDay.sat? 'Saturday':null;
    const preferredSun = selectedDay.sun? 'Sunday':null;
    dayArray.push(selectedDay.mon? 'Monday':null, selectedDay.tues? 'Tuesday':null, selectedDay.wed? 'Wednesday':null,
    selectedDay.thurs? 'Thursday':null, selectedDay.fri? 'Friday':null, selectedDay.sat? 'Saturday':null, selectedDay.sun? 'Sunday':null);
    dayArray = dayArray.filter(Boolean); // to remove all null value
    // console.log('dayArray: ', dayArray);

    var data = {
      from: 'billing@babel.fit',
      subject: 'We have received your payment for VPT',
      html: `<p>Dear ${name},</p>
            <p>We have received your payment for VPT</p>
            Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
            <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
            <p>Trainer Name: ${trainerName}</p>
            <p>Preferred AM Time: ${preferredAM}</p>
            <p>Preferred PM Time: ${preferredPM}</p>
            <p>Preferred Days: ${dayArray}</p>
            <p>Preferred Contact Number: ${phone}</p>
            <p>Thank you for your payment, your Virtual Personal Trainer will be in touch shortly.</p>
            <p>-Babel Team</p>`,
      'h:Reply-To': 'support@babel.fit',
      to: `${email},`,
      // to: 'faizul.j@boontan.net',
      cc: `faizul.j@boontan.net, billy.w@babel.fit, david.p@babel.fit, kish@babel.fit`,
      bcc: `ops@babel.fit`
    }
    if (isKLCC){
      data = {
        from: 'billing@babel.fit',
        subject: 'We have received your payment for VPT',
        html: `<p>Dear ${name},</p>
              <p>We have received your payment for VPT</p>
              <p>Invoice No: ${invoiceId} <br/>
              Total Amount: RM${parseFloat(amount).toFixed(2)}</p>
              <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
              <p>Trainer Name: ${trainerName}</p>
              <p>Preferred AM Time: ${preferredAM}</p>
              <p>Preferred PM Time: ${preferredPM}</p>
              <p>Preferred Days: ${dayArray}</p>
              <p>Preferred Contact Number: ${phone}</p>
              <p>Thank you for your payment, your Virtual Personal Trainer will be in touch shortly.</p>
              <p>-Babel Team</p>`,
        'h:Reply-To': 'support@babel.fit',
        to: `${email},`,
        // to: 'faizul.j@boontan.net',
        cc: `faizul.j@boontan.net, billy.w@babel.fit, lychee.l@babel.fit, jean.l@@babel.fit`,
        bcc: `ops@babel.fit`
      }
    }
    return sendEmail(data);
  }

// // // function sendTerminationEmail(email, name, date){
// // //   console.log("sending termination mail", email, name, date);
// // //   var data = {
// // //     from: 'billing@babel.fit',
// // //     subject: 'Member Auto Termination',
// // //     html: `<p>Dear ${name},</p>
// // //           <p>Hope you're well! We noticed that you haven't been active for more than 3 months, and unfortunately we will have to proceed with terminating your Babel gym membership.</p>
// // //           <p>We would greatly appreciate it if you would kindly share some feedback with us so that we can continue to improve on our services via this link below:</p>
// // //           <p>https://babelfit.typeform.com/to/FqgjPD</p>
// // //           <p>We will proceed with your membership termination effective ${date}.</p>
// // //           <p>Thank you for allowing us to be part of your fitness journey and we hope that we can serve you in the near future.</p>
// // //           <p>Stay healthy always!</p>
// // //           <p>-Babel Team</p>`,
// // //     'h:Reply-To': 'support@babel.fit',
// // //     to: `${email}`,
// // //     // to: 'faizul.j@boontan.net',
// // //     bcc: `ops@babel.fit`
// // //   }
// // //   return sendEmail(data);
// // // }

// // //   function sendManualFromAcuityEmail(acuityData){
// // //     console.log("sending aquity mail");
// // //     var data = {
// // //       from: 'billing@babel.fit',
// // //       subject: 'Member Booking Directly from the acuity',
// // //       html: `<p>Member ${acuityData.email} has booked Directly from the acuity at ${acuityData.dateCreated} by ${acuityData.scheduledBy}</p>
// // //             <p>Stay healthy always!</p>
// // //             <p>-Babel Team</p>`,
// // //       'h:Reply-To': 'support@babel.fit',
// // //       to: `faizul.j@boontan.net`,
// // //       // to: 'faizul.j@boontan.net',
// // //       cc: `boon@boontan.net, billy.w@babel.fit`
// // //       // bcc: `ops@babel.fit`,
// // //     }
// // //     return sendEmail(data);
// // //   }

// //   function sendWarningVendEmail(date, saleCountFromFirebase, saleCountFromVend){
// //     console.log("sending warning email");
// //     var data = {
// //       from: 'billing@babel.fit',
// //       subject: 'vend sales number',
// //       html: `<p> Date: ${date} </p>
// //             <p> Sale Count from Firebase : ${saleCountFromFirebase} </p>
// //             <p> Sale Count from Vend : ${saleCountFromVend} </p>
// //             <p>Stay healthy always!</p>
// //             <p>-Babel Team</p>`,
// //       'h:Reply-To': 'support@babel.fit',
// //       to: `faizul.j@boontan.net`,
// //       // to: 'faizul.j@boontan.net',
// //       cc: `boon@boontan.net, jeshua@boontan.net, billy.w@boontan.net`
// //       // bcc: `ops@babel.fit`,
// //     }
// //     return sendEmail(data);
// //   }

// // //   // function sendInvoiceEmail(email, name, invoiceId, date){
// // //   //   console.log("sending invoice mail", email, name, invoiceId);
// // //   //   var data = {
// // //   //     from: 'billing@babel.fit',
// // //   //     subject: `[Babel] - ${date}: You have a new invoice`,
// // //   //     html: `<p>Dear ${name},</p>
// // //   //       <p>We're sorry! 😞 We regret to inform you that we have been experiencing technical difficulties with our automated system for past few weeks, which is why you are receiving this delayed invoice. 
// // //   //       Please be rest assured that we're working hard to resolve this issue. 
// // //   //       Thank you for being patient with us, we look forward to serving you better</p>
// // //   //       <p>Your invoice is now ready. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
// // //   //       <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
// // //   //       <p>Thanks for being a Babel member!</p>
// // //   //       <p>Babel Team</p>`,
// // //   //     'h:Reply-To': 'support@babel.fit',
// // //   //     // to: `sharasandravel@gmail.com`,
// // //   //     to: `${email}`,
// // //   //     // to: `faizul.j@boontan.net`,
// // //   //     // bcc: `faizul.j@boontan.net`
// // //   //     bcc: `ops@babel.fit`
// // //   //   }

// // //   //   return sendEmail(data);
// // //   // }

// // //   // function sendDueInvoiceEmail(email, name, invoiceId, date){
// // //   //   console.log("sending due invoice mail", email, name, invoiceId);
// // //   //   var data = {
// // //   //     from: 'billing@babel.fit',
// // //   //     subject: `[Babel] - ${date}: Your invoice is now due`,
// // //   //     html: `<p>Dear ${name},</p>
// // //   //     <p>We're sorry! 😞 We regret to inform you that we have been experiencing technical difficulties with our automated system for past few weeks, 
// // //   //     which is why you are receiving this delayed invoice due email. 
// // //   //     Please be rest assured that we're working hard to resolve this issue. 
// // //   //     Thank you for being patient with us, we look forward to serving you better.</p>
// // //   //     <p>Your invoice is now due. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
// // //   //     <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
// // //   //     <p>Thanks for being a Babel member!</p>
// // //   //     <p>Babel Team.</p>`,
// // //   //     'h:Reply-To': 'support@babel.fit',
// // //   //     // to: `sharasandravel@gmail.com`,
// // //   //     to: `${email}`,
// // //   //     // to: `faizul.j@boontan.net`,
// // //   //     // bcc: `faizul.j@boontan.net`
// // //   //     bcc: `ops@babel.fit`
// // //   //   }
// // //   //   return sendEmail(data);
// // //   // }

// // //   // function sendOverdueInvoiceEmail(email, name, invoiceId, date){
// // //   //   console.log("sending overdue invoice mail", email, name, invoiceId);
// // //   //   var data = {
// // //   //     from: 'billing@babel.fit',
// // //   //     subject: `URGENT [Babel] - ${date}: Your invoice is overdue`,
// // //   //     html: `<p>Dear ${name},</p>
// // //   //           <p>We're sorry! 😞 We regret to inform you that we have been experiencing technical difficulties with our automated system for past few weeks, 
// // //   //           which is why you are receiving this delayed invoice overdue email. 
// // //   //           Please be rest assured that we're working hard to resolve this issue. 
// // //   //           Thank you for being patient with us, we look forward to serving you better.</p>
// // //   //           <p>Your invoice is now overdue. Kindly visit this link to make payment : https://app.babel.fit/payments/${invoiceId}</p>
// // //   //           <p>This is a computer generated email. If there are any discrepancies, please do not hesitate to send us an email at support@babel.fit.</p>
// // //   //           <p>Thanks for being a Babel member!</p>
// // //   //           <p>Babel Team</p>`,
// // //   //     'h:Reply-To': 'support@babel.fit',
// // //   //     // to: `sharasandravel@gmail.com`,
// // //   //     // to: `faizul.j@boontan.net`,
// // //   //     to: `${email}`,
// // //   //     // bcc: `faizul.j@boontan.net`
// // //   //     bcc: `ops@babel.fit`
// // //   //   }
// // //   //   return sendEmail(data);
// // //   // }

// // //   // function sendReceiptEmail(email, name, amount, invoiceId, date){
// // //   //   console.log("sending receipt mail", email, name, amount, invoiceId);
// // //   //   var data = {
// // //   //     from: 'billing@babel.fit',
// // //   //     subject: 'We have received your payment',
// // //   //     html: `<p>Dear ${name},</p>
// // //   //           <p>We're sorry! 😞 We regret to inform you that we have been experiencing technical difficulties with our automated system for past few weeks, 
// // //   //           and we're working hard to resolve this issue. Thank you for being patient with us, we look forward to serving you better.</p>
// // //   //           <p>We have received your payment for ${date}.</p>
// // //   //           <p>Invoice No: ${invoiceId} <br/>
// // //   //           Total Amount: RM${amount}</p>
// // //   //           <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
// // //   //           <p>Thank you very much and see you soon!</p>
// // //   //           <p>-Babel Team</p>`,
// // //   //     'h:Reply-To': 'support@babel.fit',
// // //   //     // to: `faizul.j@boontan.net`,
// // //   //     to: `${email}`,
// // //   //     bcc: `ops@babel.fit`
// // //   //   }
// // //   //   return sendEmail(data);
// // //   // }

// // //   // function sendReceiptEmail(email, name, amount, invoiceId, date, quantity){
// // //   //   console.log("sending receipt mail", email, name, amount, invoiceId, quantity);
// // //   //   var data = {
// // //   //     from: 'billing@babel.fit',
// // //   //     subject: 'We have received your payment',
// // //   //     html: `<p>Dear ${name},</p>
// // //   //     <p>We have received your payment for ${date}.</p>
// // //   //     <p>Invoice No: ${invoiceId} <br/>
// // //   //     Total Amount: RM${amount}</p>
// // //   //     <style>
// // //   //     table, th, td {
// // //   //       border: 1px solid black;
// // //   //         line-height: inherit;
// // //   //         text-align: left;
// // //   //     }
// // //   //     </style>
// // //   //     <table style="width:100%">
// // //   //       <tr>
// // //   //         <th>Date</th>
// // //   //         <th>Name</th>
// // //   //         <th>Invoice Number</th>
// // //   //         <th>Quantity</th>
// // //   //         <th>Amount</th>
// // //   //       </tr>
// // //   //       <tr>
// // //   //         <td>${date}</td>
// // //   //         <td>${name}</td>
// // //   //         <td>${invoiceId}</td>
// // //   //         <td>${quantity}</td>
// // //   //         <td>${amount}</td>
// // //   //       </tr>
// // //   //     </table>
// // //   //     <br>
// // //   //     <p>Please click here to print your receipt: https://app.babel.fit/payments/${invoiceId}</p>
// // //   //     <p>Thank you very much and see you soon!</p>
// // //   //     <p>-Babel Team-</p>`,
// // //   //     'h:Reply-To': 'support@babel.fit',
// // //   //     to: `faizul.j@boontan.net`,
// // //   //     // to: `${email}`,
// // //   //     bcc: `ops@babel.fit`
// // //   //   }
// // //   //   return sendEmail(data);
// // //   // }

function sendEmail(data){
  // const mailgun = require('mailgun-js')({apiKey:'key-c52c4056bdec1f0d03667db361a899c2', domain:'mx.babel.fit'});
  const mailgun = require('mailgun-js')({apiKey:'key-439dcbf18667804dfe9342d416d3044d', domain:'mx.babel.fit'});
  return mailgun.messages().send(data);
}

// // function sendMailGunTestEmail(email, name){
// //   console.log("sending test mail", email, name);
// //   var data = {
// //     from: 'billing@babel.fit',
// //     subject: 'test email',
// //     html: `<p>Dear ${name},</p>
// //     <p> faizul is awesome.</p>
// //     <br>
// //     <p>Thank you very much and see you soon!</p>
// //     <p>-Babel Team-</p>`,
// //     'h:Reply-To': 'support@babel.fit',
// //     // to: `faizul.j@boontan.net`,
// //     to: `${email}`,
// //     bcc: `faizul.j@boontan.net`
// //   }
// //   return sendEmail(data);
// // }

function sendCopyMailLajuCeria(email, emailContent){
  const fileName = (emailContent && emailContent.attachments && emailContent.attachments[0] && emailContent.attachments[0]['file_name']) || 'no content';
  const attachments = (emailContent && emailContent.attachments && emailContent.attachments[0]) || null;
  const attachmentContentString = (attachments && Buffer.from(emailContent.attachments[0]['content'], 'base64').toString('utf-8')) || 'no attachment';
  var data = {
    from: 'billing@babel.fit',
    subject: 'laju ceria forward email (copy)',
    html: `<p>Dear ${email},</p>
    <p> email copy </p>
    <p> email content: ${emailContent.plain} </p>
    <p> fileName: ${fileName} </p>
    <p> attachment string: ${attachmentContentString} </p>`,
    attachment: attachments,
    to: `${email}`
  }
  return sendEmail(data);
} 

function sendMailLajuCeria(email, attachmentContent=null, textoDownload = '', dataFromFtp = 'null', textoDownloadklcc = '', success = true, error = 'no error'){
  // console.log("sending test mail", email);
 
  var data = {
    from: 'billing@babel.fit',
    subject: 'laju ceria forward email',
    html: `<p>Dear ${email},</p>
    <p> faizul is awesome.</p>
    <br>
    <p>success: ${success} </p>
    <p>error message: ${error}</p>
    <p>data from laju ceria</p>
    <p>${attachmentContent}</p>
    <br>
    <p>combined Sales uploaded to server</p>
    <p>${textoDownload}</p>
    <p>combined Sales downloaded from server</p>
    <p>${dataFromFtp}</p>
    <p>-Babel Team-</p>`,
    'h:Reply-To': 'support@babel.fit',
    // to: `faizul.j@boontan.net`,
    to: `${email}`,
    // cc:`boon@boontan.net`
    // bcc: `boon@boontan.net`
  }
  return sendEmail(data);
}

// // // // function sendCovid19UpdateEmail(email, name){
// // // //   console.log("sending email", email, name);
// // // //   var data = {
// // // //     from: 'hello@babel.fit',
// // // //     subject: 'IMPORTANT! More Updates in Response to COVID-19 Case.',
// // // //     html: 
// // // //     `<table border="0" cellpadding="0" cellspacing="0" width="100%" style="border-collapse:collapse">
// // // //     <tbody><tr>
// // // //         <td align="center" valign="top" id="m_2073569205181411305templateHeader" style="background:#efefef none no-repeat center/cover;background-color:#efefef;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:50px;padding-bottom:0px">
            
// // // //             <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // //                 <tbody><tr>
// // // //                     <td valign="top" class="m_2073569205181411305headerContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding:0px">
// // // // <table align="left" width="100%" border="0" cellpadding="0" cellspacing="0" style="min-width:100%;border-collapse:collapse">
// // // // <tbody><tr>
// // // //     <td valign="top" style="padding-right:0px;padding-left:0px;padding-top:0;padding-bottom:0;text-align:center">


// // // //                 <img align="center" alt="" src="https://ci5.googleusercontent.com/proxy/1ofqXeeiMOlVEwfcdyKRjuMFCzhmzLqZAtyKB9knnJvTXZHCUADgGLZ8uUFuQdwrm05eGu7hIMEeM-cPK499ykvZBu_8idY_DZPz0b6gy-5N_T3ImbgVtv7MHDPQ74O01gYhyh_-1Bon0UbAJPT0ZhievEpwqg=s0-d-e1-ft#https://mcusercontent.com/24e110fcf0a6c0b59d11b5b0b/images/af7154e6-fcbb-4938-a9e8-c85da84ee731.png" width="120" style="max-width:3334px;padding-bottom:0;display:inline!important;vertical-align:bottom;border:0;height:auto;outline:none;text-decoration:none" class="m_2073569205181411305mcnRetinaImage CToWUd">


// // // //     </td>
// // // // </tr>
// // // // </tbody></table>
// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305mcnDividerBlock" style="min-width:100%;border-collapse:collapse;table-layout:fixed!important">
// // // // <tbody>
// // // // <tr>
// // // // <td style="min-width:100%;padding:40px 18px 20px">
// // // // <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-top:2px solid #847f40;border-collapse:collapse">
// // // // <tbody><tr>
// // // // <td>
// // // //     <span></span>
// // // // </td>
// // // // </tr>
// // // // </tbody></table>

// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;font-family:&quot;Open Sans&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;font-size:13px;line-height:150%;text-align:center;word-break:break-word;color:#757575">

// // // //     <p dir="ltr" style="text-align:center;font-family:&quot;Open Sans&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;font-size:13px;line-height:150%;margin:10px 0;padding:0;color:#757575"><span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:15px"><span style="color:#9e9a49"><strong>Dear ${name},</strong></span></span></span></p><div><div class="adm"><div id="q_79" class="ajR h4" data-tooltip="Hide expanded content" aria-label="Hide expanded content" aria-expanded="true"><div class="ajT"></div></div></div><div class="im"><br>
// // // // <br>
// // // // <span style="font-size:13px">It’s of the utmost importance to everyone here at Babel that we’re able to provide our community members with the information required to stay updated and informed on how to protect themselves through this period. We’ve compiled an update of the latest facts and findings from our investigation for you.<br>
// // // // <br>
// // // // So far, all individuals identified through extensive contact-tracing, who may have come in close contact or were within close proximity (1-3m) with said member, within the 14 days incubation period, have completed precautionary testing for Covid-19 and have been instructed to continue to self-isolate for the remainder of the 14 day period.<br>
// // // // <br>
// // // // To date, we’re able to confirm that the tests conducted on <strong>24 and 25 September</strong>, including staff and members, have since all been declared as <strong>Negative.</strong><br>
// // // // <br>
// // // // We’re currently awaiting the results of the final tests which were conducted on <strong>26 September</strong>, with all reports received thus far being submitted to <strong>Kementarian Kesihataan Malaysia (KKM)</strong> for continued monitoring.&nbsp;<br>
// // // // <br>
// // // // Rest assured that all Babel staff have maintained close adherence to our Operational SOPs since their implementation and will continue to do so to protect the health of our members.<br>
// // // // <br>
// // // // We also recognise and sincerely appreciate all our members for your adherence to the SOPs and for your continued transparency in completing our weekly Travel Declaration form upon entry. Your continued support is paramount in helping safeguard the Babel community.</span></div></div><p></p>

// // // // <ul dir="ltr">
// // // // </ul>

// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><div><div class="adm"><div id="q_77" class="ajR h4" data-tooltip="Hide expanded content" aria-label="Hide expanded content" aria-expanded="true"><div class="ajT"></div></div></div><div class="im"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">

// // // // <tbody>
// // // // <tr>
// // // // <td valign="top">


// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse" class="m_2073569205181411305mcnBoxedTextContentContainer">
// // // // <tbody><tr>

// // // // <td style="padding-top:9px;padding-left:18px;padding-bottom:9px;padding-right:18px">

// // // //     <table border="0" cellspacing="0" class="m_2073569205181411305mcnTextContentContainer" width="100%" style="min-width:100%!important;background-color:#404040;border-collapse:collapse">
// // // //         <tbody><tr>
// // // //             <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:18px;color:#f2f2f2;font-family:Helvetica;font-size:14px;font-weight:normal;text-align:center;word-break:break-word;line-height:150%">
// // // //                 <div style="text-align:center"><span style="font-size:15px"><strong>On-going Health and Safety SOPs</strong></span></div>

// // // // <ul>
// // // // <li style="text-align:left"><span style="font-size:13px">Availability of hand sanitizers, disinfectant spray guns and individual microfiber cloths for members usage.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Club-wide disinfection of both Babel KLCC and Babel TTDI.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Regular sterilization of all equipment and surfaces with 70% alcohol-based cleaning solution.&nbsp;</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Increased chlorination of our swimming pool, still within recommended levels.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Reduced capacity of Group Classes and Gym Floor usage.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Compulsory temperature checks conducted by Menara KEN and Suria KLCC, respectively.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Check-In counter relocation to prevent non-members footfall. </span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Tours and trials have been discontinued until further notice.</span></li>
// // // // <li style="text-align:left"><span style="font-size:13px">Implementation of mandatory Travel Declaration Form.</span></li>
// // // // </ul>

// // // //             </td>
// // // //         </tr>
// // // //     </tbody></table>
// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;font-family:&quot;Open Sans&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;font-size:13px;line-height:150%;text-align:center;word-break:break-word;color:#757575">

// // // //     <span style="font-family:open sans,helvetica neue,helvetica,arial,sans-serif"><span style="font-size:13px">For all those who have reached out to our <strong>COVID-Task Force</strong>, we thank you for your time and patience and we hope that we have been able to provide further clarity on the matter.&nbsp;<br>
// // // // <br>
// // // // For more information, please feel free to contact us on this number: <strong><a href="https://fit.us16.list-manage.com/track/click?u=24e110fcf0a6c0b59d11b5b0b&amp;id=598107dfb2&amp;e=eec795eb49" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://fit.us16.list-manage.com/track/click?u%3D24e110fcf0a6c0b59d11b5b0b%26id%3D598107dfb2%26e%3Deec795eb49&amp;source=gmail&amp;ust=1601374713772000&amp;usg=AFQjCNGAlSP-zZ2NoOu3O6e34tg3xUyHNA">0108229259</a></strong>, click <strong><a href="https://fit.us16.list-manage.com/track/click?u=24e110fcf0a6c0b59d11b5b0b&amp;id=ec47fce684&amp;e=eec795eb49" style="color:#007c89;font-weight:normal;text-decoration:underline" target="_blank" data-saferedirecturl="https://www.google.com/url?q=https://fit.us16.list-manage.com/track/click?u%3D24e110fcf0a6c0b59d11b5b0b%26id%3Dec47fce684%26e%3Deec795eb49&amp;source=gmail&amp;ust=1601374713773000&amp;usg=AFQjCNGgqOYJIz-whrsfwJjIPq48k5zeEQ">here</a> </strong>for our official statement and timeline or email us at hello@babel.fit to speak directly to our COVID-Task Force.</span></span>
// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#757575;font-family:Helvetica;font-size:16px">


// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table></div></div></td>
// // // //                 </tr>
// // // //             </tbody></table>
            
// // // //         </td>
// // // //     </tr>
// // // //     <tr>
// // // //         <td align="center" valign="top" id="m_2073569205181411305templateBody" style="background:#transparent none no-repeat 50% 50%/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:50% 50%;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px">
            
// // // //             <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // //                 <tbody><tr>
// // // //                     <td valign="top" class="m_2073569205181411305bodyContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0px;padding-bottom:0px"></td>
// // // //                 </tr>
// // // //             </tbody></table>
            
// // // //         </td>
// // // //     </tr>
// // // //     <tr>
// // // //         <td align="center" valign="top" id="m_2073569205181411305templateFooter" style="background:#222222 none no-repeat center/cover;background-color:#222222;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:30px;padding-bottom:50px">
            
// // // //             <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305templateContainer" style="border-collapse:collapse;max-width:600px!important">
// // // //                 <tbody><tr>
// // // //                     <td valign="top" class="m_2073569205181411305footerContainer" style="background:#transparent none no-repeat center/cover;background-color:#transparent;background-image:none;background-repeat:no-repeat;background-position:center;background-size:cover;border-top:0;border-bottom:0;padding-top:0;padding-bottom:0"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff;font-family:Helvetica;font-size:12px">

// // // //     <div style="text-align:left"><span style="color:#ffffff"><span style="font-size:13px"><strong>LOCATION</strong></span></span></div>

// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305mcnDividerBlock" style="min-width:100%;border-collapse:collapse;table-layout:fixed!important">
// // // // <tbody>
// // // // <tr>
// // // // <td style="min-width:100%;padding:18px">
// // // // <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-top:2px solid #eaeaea;border-collapse:collapse">
// // // // <tbody><tr>
// // // // <td>
// // // //     <span></span>
// // // // </td>
// // // // </tr>
// // // // </tbody></table>

// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff;font-family:Helvetica;font-size:12px">

// // // //     <div style="text-align:left">Babel TTDI<br>
// // // // Rooftop Menara Ken TTDI,<br>
// // // // Jalan Burhanuddin Helmi,<br>
// // // // 60000 Kuala Lumpur<br>
// // // // <a href="tel:+60163193520" style="color:#ffffff;text-decoration:underline;font-weight:normal" target="_blank">+6016 319&nbsp;3520</a></div>

// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff;font-family:Helvetica;font-size:12px">

// // // //     Weekdays&nbsp;<br>
// // // // 6.30 am - 11.00 pm<br>
// // // // Weekends &amp; Public Holidays<br>
// // // // 7.00 am - 9.00 pm<br>
// // // // &nbsp;
// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" class="m_2073569205181411305mcnDividerBlock" style="min-width:100%;border-collapse:collapse;table-layout:fixed!important">
// // // // <tbody>
// // // // <tr>
// // // // <td style="min-width:100%;padding:18px">
// // // // <table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-top:2px solid #eaeaea;border-collapse:collapse">
// // // // <tbody><tr>
// // // // <td>
// // // //     <span></span>
// // // // </td>
// // // // </tr>
// // // // </tbody></table>

// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff;font-family:Helvetica;font-size:12px">

// // // //     <div style="text-align:center">
// // // // <div style="text-align:left">Babel KLCC<br>
// // // // Lot C-G-02, Suria KLCC,<br>
// // // // Kuala Lumpur City Centre,<br>
// // // // 50088 Kuala Lumpur<br>
// // // // +6016 372&nbsp;3520<br>
// // // // &nbsp;</div>
// // // // </div>

// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:300px;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff;font-family:Helvetica;font-size:12px">

// // // //     Weekdays&nbsp;<br>
// // // // 6.30 am - 10.00 pm<br>
// // // // Weekends &amp; Public Holidays<br>
// // // // 7.00 am - 9.00 pm
// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table><table border="0" cellpadding="0" cellspacing="0" width="100%" style="min-width:100%;border-collapse:collapse">
// // // // <tbody>
// // // // <tr>
// // // // <td valign="top" style="padding-top:9px">



// // // // <table align="left" border="0" cellpadding="0" cellspacing="0" style="max-width:100%;min-width:100%;border-collapse:collapse" width="100%" class="m_2073569205181411305mcnTextContentContainer">
// // // // <tbody><tr>

// // // // <td valign="top" class="m_2073569205181411305mcnTextContent" style="padding:0px 18px 9px;font-family:&quot;Open Sans&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;font-size:9px;line-height:150%;text-align:left;word-break:break-word;color:#ffffff">

// // // //     <div style="text-align:left"><span style="font-size:12px"><em><span style="color:#ffffff">Want to change how you receive these emails? You can&nbsp;update your preferences&nbsp;or&nbsp;unsubscribe from this list.</span></em></span></div>

// // // // </td>
// // // // </tr>
// // // // </tbody></table>



// // // // </td>
// // // // </tr>
// // // // </tbody>
// // // // </table></td>
// // // //                 </tr>
// // // //             </tbody></table>
            
// // // //         </td>
// // // //     </tr>
// // // // </tbody></table>`,

// // // //     'h:Reply-To': 'support@babel.fit',
// // // //     // to: `faizul.j@boontan.net`,
// // // //     to: `${email}`,
// // // //     cc: `ops@babel.fit`,
// // // //     bcc: `faizul.j@boontan.net`,
// // // //     text: `So Far, So Negative!`,
// // // //     tag: `COVID19`
// // // //   }
// // // //   return sendEmail(data);
// // // // }

// // // // send test email
// // // exports.sendTestEmailAPI = functions.https.onRequest((req, res) => {
// // //   const usersQuery = admin.firestore().collection('users')
// // //     .where('email', '==', 'faizul.j@boontan.net')
// // //     .get();

// // //   return Promise.all([usersQuery]).then(results=>{
// // //     const usersResults = results[0];

// // //     var users = {};
// // //     var sendMail = 0;
// // //     var emailPromises = [];
// // //     usersResults.forEach(user=>{
// // //       // users[user.id] = user.data();
// // //       var emailPromise = null;
// // //       const data = user.data();
// // //       const name = data && data.name;
// // //       const email = data && data.email;
      
// // //       // emailPromise = sendMailGunTestEmail('holla@babel.dance', name);
// // //       emailPromise = sendMailGunTestEmail('faizul.j@boontan.net', name);
// // //       if (emailPromise){
// // //         emailPromises.push(emailPromise);
// // //       }
// // //     });
// // //     return Promise.all(emailPromises).then(results=>{
// // //       return res.status(200).send('OK');
// // //     }).catch(error=>{
// // //       console.log('error sending email: ', error);
// // //       return res.status(500).send({error});
// // //     })
// // //   });
// // // });


// // // // // // valide email
// // // // // // function validateEmail(email) {
// // // // // //   var re = /\S+@\S+\.\S+/;
// // // // // //   return re.test(email);
// // // // // // }

// // // // // function fetchSheetAPI(sheetId){
// // // // //   var options = { method: 'PUT',
// // // // //     url: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values:batchUpdate`,
// // // // //     auth: {
// // // // //       bearer: 'Kh7UKpuhyONGUU27i98Dx_LEuVfnESgZ1AojvyS9'
// // // // //     },
// // // // //     body:
// // // // //     {
// // // // //       "valueInputOption": "USER_ENTERED",
// // // // //       "data": [
// // // // //         {
// // // // //           "range": "AUTO USERS!A2:S",
// // // // //           "values": [
// // // // //             [
// // // // //               "saya",
// // // // //               "NAME"
// // // // //             ],
// // // // //             [
// // // // //               "aku",
// // // // //               "test"
// // // // //             ]
// // // // //           ]
// // // // //         }
// // // // //       ]
// // // // //     },
// // // // //     json:true
// // // // //   };
// // // // //   return options;
// // // // // }

// // // add custom membership payment to sheet (28/6/2021)
// // exports.addCustomMemberdhipSummaryToSheets = functions.https.onRequest((req, res) => {
// //  // const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership').get();
// //   // where('email', '==', 'tehowny@gmail.com').get();
// //   const packagesQuery = admin.firestore().collection('packages').get();
// //   const usersQuery = admin.firestore().collection('users').get();
// //   // .where('email', '==', 'lyanaothman2020@gmail.com')
// //   const freezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').get();
  
// //   // to count transaction on specific date
// //   return Promise.all([freezeQuery, packagesQuery, usersQuery]).then(result=>{
// //     const freezeRes = result[0];
// //     const pkgRes = result[1];
// //     const userRes = result[2];

// //     var pkgMap = {};
// //     var finalObj = {};
// //     var finalArray = [];
// //     var march15Count = 0;
// //     var oct11Count = 0;
// //     var jan11Count = 0;
// //     var tillmarch15Count = 0;
// //     var tilloct11Count = 0;
// //     var tilljan11Count = 0;
// //     pkgRes && pkgRes.forEach(doc=>{
// //       const data = doc.data();
// //       pkgMap[doc.id]=data;
// //       if (data && data.name){
// //         finalObj[data.name] = {
// //           packageName:data.name,
// //           march15Count,
// //           oct11Count,
// //           jan11Count,
// //           tillmarch15Count,
// //           tilloct11Count,
// //           tilljan11Count
// //         }
// //       }
// //     });
    
// //     var freezeByUserMap = {};
// //     freezeRes && freezeRes.forEach(doc=>{
// //       const data = doc.data();
// //       const createdAt = data && data.createdAt;
// //       const freezeFor = data && data.freezeFor;
// //       const userId = data && data.userId;
// //       if (freezeFor && userId){
// //         freezeByUserMap[userId] = data;
// //       }
// //     });

// //     userRes && userRes.forEach(doc=>{
// //       const data = doc.data();
// //       const packageId = data && data.packageId;
// //       const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds?data.membershipEnds:null;
// //       const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;
// //       const packageData = packageId && pkgMap[packageId];
// //       const cancellationDate = data && data.cancellationDate;
// //       const freezeData = freezeByUserMap[doc.id];
// //       const isFreeezeOn16March20 = freezeData && freezeData.freezeFor && moment(getTheDate(freezeData.freezeFor)).isSameOrAfter(moment('2020-02-15')) 
// //         && moment(getTheDate(freezeData.freezeFor)).tz('Asia/Kuala_Lumpur').isBefore(moment('2020-03-15'));
// //       const isFreeezeOn11Oct20 = freezeData && freezeData.freezeFor && moment(getTheDate(freezeData.freezeFor)).isSameOrAfter(moment('2020-09-11')) 
// //         && moment(getTheDate(freezeData.freezeFor)).tz('Asia/Kuala_Lumpur').isBefore(moment('2020-10-11'));
// //       const isFreeezeOn11Jan21 = freezeData && freezeData.freezeFor && moment(getTheDate(freezeData.freezeFor)).isSameOrAfter(moment('2020-12-11')) 
// //         && moment(getTheDate(freezeData.freezeFor)).tz('Asia/Kuala_Lumpur').isBefore(moment('2021-01-11'));
      
// //       if (packageData && membershipEnds){
// //         const is15March2020 = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2020-03-15').tz('Asia/Kuala_Lumpur')) 
// //           && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isBefore(moment('2020-03-16').tz('Asia/Kuala_Lumpur'))
         
// //         const is11Oct2020 = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2020-10-11').tz('Asia/Kuala_Lumpur')) 
// //           && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isBefore(moment('2020-10-12').tz('Asia/Kuala_Lumpur'))
// //           ;
// //         const is11Jan2021 = membershipEnds && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2021-01-11').tz('Asia/Kuala_Lumpur')) 
// //           && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isBefore(moment('2021-01-12').tz('Asia/Kuala_Lumpur'));

// //         const isTillMarch2020 = membershipEnds
// //             && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2020-03-15').tz('Asia/Kuala_Lumpur'))
// //             && !cancellationDate
// //             && !isFreeezeOn16March20
// //             && membershipStarts && moment(getTheDate(membershipStarts)).isSameOrBefore(moment('2020-03-15'));
// //             ;
// //         const isTillOct2020 = membershipEnds 
// //             && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2020-10-11').tz('Asia/Kuala_Lumpur'))
// //             && !cancellationDate
// //             && !isFreeezeOn11Oct20
// //             && membershipStarts && moment(getTheDate(membershipStarts)).isSameOrBefore(moment('2020-10-11'));
// //         const isTillJan2021 = membershipEnds 
// //             && moment(getTheDate(membershipEnds)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment('2021-01-11').tz('Asia/Kuala_Lumpur'))
// //             && !cancellationDate
// //             && !isFreeezeOn11Jan21
// //             && membershipStarts && moment(getTheDate(membershipStarts)).isSameOrBefore(moment('2021-01-11'));
      
// //         const packageName = packageData && packageData.name;

// //         if (packageName){
// //           if (is15March2020){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count? finalObj[packageName].march15Count+1:1,
// //               oct11Count:finalObj[packageName].oct11Count,
// //               jan11Count:finalObj[packageName].jan11Count,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count,
// //               tilloct11Count:finalObj[packageName].tilloct11Count,
// //               tilljan11Count:finalObj[packageName].tilljan11Count,
// //             }
// //           }
// //           if (is11Oct2020){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count,
// //               oct11Count:finalObj[packageName].oct11Count+1,
// //               jan11Count:finalObj[packageName].jan11Count,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count,
// //               tilloct11Count:finalObj[packageName].tilloct11Count,
// //               tilljan11Count:finalObj[packageName].tilljan11Count,
// //             }
// //           }
// //           if (is11Jan2021){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count,
// //               oct11Count:finalObj[packageName].oct11Count,
// //               jan11Count:finalObj[packageName].jan11Count+1,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count,
// //               tilloct11Count:finalObj[packageName].tilloct11Count,
// //               tilljan11Count:finalObj[packageName].tilljan11Count,
// //             }
// //           }
// //           if (isTillMarch2020){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count,
// //               oct11Count:finalObj[packageName].oct11Count,
// //               jan11Count:finalObj[packageName].jan11Count,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count+1,
// //               tilloct11Count:finalObj[packageName].tilloct11Count,
// //               tilljan11Count:finalObj[packageName].tilljan11Count,
// //             }
// //           }
// //           if (isTillOct2020){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count,
// //               oct11Count:finalObj[packageName].oct11Count,
// //               jan11Count:finalObj[packageName].jan11Count,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count,
// //               tilloct11Count:finalObj[packageName].tilloct11Count+1,
// //               tilljan11Count:finalObj[packageName].tilljan11Count,
// //             }
// //           }
// //           if (isTillJan2021){
// //             finalObj[packageName] = {
// //               packageName,
// //               march15Count:finalObj[packageName].march15Count,
// //               oct11Count:finalObj[packageName].oct11Count,
// //               jan11Count:finalObj[packageName].jan11Count,
// //               tillmarch15Count:finalObj[packageName].tillmarch15Count,
// //               tilloct11Count:finalObj[packageName].tilloct11Count,
// //               tilljan11Count:finalObj[packageName].tilljan11Count+1,
// //             }
// //           }
// //         }

// //       }

// //     });

// //     var theArray = [];
 
// //     Object.entries(finalObj).forEach(([key,values])=> {
// //       theArray = [
// //         values && values.packageName,
// //         values && values.march15Count,
// //         values && values.oct11Count,
// //         values && values.jan11Count,
// //         values && values.tillmarch15Count,
// //         values && values.tilloct11Count,
// //         values && values.tilljan11Count,
// //       ];
// //       finalArray.push(theArray);
// //     });

// //     const updateSheetPromise = updateGoogleSheet({
// //       // spreadsheetId: CONFIG_SHEET_ID,
// //       spreadsheetId: '1Uqywmt1NT-4qFq2m_H6utzmLr_yjIFCniqOXAsthtj8',
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `AUTO MEMBERSHIP PAYMENT MONTHLY SUMMARY!A52:CU`,
// //             range: `ACTIVE MEMBERSHIP MAR 20, OCT 20, JAN 21!A2:J`,
// //             majorDimension: "ROWS",
// //             values: finalArray
// //           }
// //         ],  // TODO: Update placeholder value.
  
// //         // TODO: Add desired properties to the request body.
// //       },
// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //         finalObj
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //         // payments: finalUserData,
// //       });
// //     })

// //   });
// // });

// // exports.addTransactionSummaryToSheet = functions.https.onRequest((req, res) => {
// //   const vendSalesQuery = admin.firestore().collection('vendSales').get();
// //   const adyenPaymentQuery = admin.firestore().collection('payments').where('source', '==', 'adyen').get();
// //   const pbOnlineQuery = admin.firestore().collection('payments').where('source', '==', 'pbonline').get();

// //   return Promise.all([vendSalesQuery, adyenPaymentQuery, pbOnlineQuery]).then(result=>{
// //     const vendSaleRes = result[0];
// //     const adyenRes = result[1];
// //     const pbOnlineRes = result[2];

// //     var finalArray = [];
// //     var totalAdyenPrice = 0;
// //     var totalPBPrice = 0;
// //     var totalVendPrice = 0;

// //     vendSaleRes && vendSaleRes.forEach(doc=>{
// //       const data = doc.data();
// //       const status = data.status;
// //       const totalPrice = (data.totals && data.totals.total_payment)? parseFloat(data.totals.total_payment).toFixed(2):data.total_price_incl?parseFloat(data.total_price_incl).toFixed(2):0;
// //       if (status && (status === 'CLOSED'||status==='LAYBY_CLOSED')){
// //         totalVendPrice+=parseFloat(totalPrice);
// //       }
// //     });

// //     adyenRes && adyenRes.forEach(doc=>{
// //       const data = doc.data();
// //       const status = data && data.status;
// //       const totalPrice = data && data.totalPrice;
// //       if (status && status === 'CLOSED'){
// //         totalAdyenPrice+=parseFloat(totalPrice);
// //       }
// //     });

// //     pbOnlineRes && pbOnlineRes.forEach(doc=>{
// //       const data = doc.data();
// //       const status = data && data.status;
// //       const totalPrice = data && data.totalPrice;
// //       if (status && status === 'CLOSED'){
// //         totalPBPrice+=parseFloat(totalPrice);
// //       }
// //     });

// //     finalArray.push([totalVendPrice.toFixed(2)], [totalAdyenPrice.toFixed(2)], [totalPBPrice.toFixed(2)]);

// //     const updateSheetPromise = updateGoogleSheet({
// //       // spreadsheetId: CONFIG_SHEET_ID,
// //       spreadsheetId: '1Uqywmt1NT-4qFq2m_H6utzmLr_yjIFCniqOXAsthtj8',
// //       resource: {
// //         // How the input data should be interpreted.
// //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// //         // The new values to apply to the spreadsheet.
// //         data: [
// //           {
// //             // range: `AUTO MEMBERSHIP PAYMENT MONTHLY SUMMARY!A52:CU`,
// //             range: `TOTAL TRANSACTION!B2:C`,
// //             majorDimension: "ROWS",
// //             values: finalArray
// //           }
// //         ],  // TODO: Update placeholder value.
  
// //         // TODO: Add desired properties to the request body.
// //       },
// //     });

// //     return updateSheetPromise.then((result)=>{
// //       // console.log('theresult: ', result);
// //       return res.status(200).send({
// //         success:true,
// //       });
// //     }).catch(error=>{
// //       return res.status(200).send({
// //         success:false,
// //         error
// //       });
// //     })
    
// //   });
   

// //  });

// add all membership babel payment to sheet summary (just show price by package)
exports.addTotalPaymentByPackageSalesToSheets = functions.https.onRequest((req, res) => {
  // const usersQuery = admin.firestore().collection('users').get();s
  const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership').get();
  // where('email', '==', 'tehowny@gmail.com').get();
  const packagesQuery = admin.firestore().collection('packages').get();
  const usersQuery = admin.firestore().collection('users')
  // .where('email', '==', 'lyanaothman2020@gmail.com')
  .get();
  // const usersQuery = admin.firestore().collection('users').get();

  // const startDate = '2017-06-01';
  // const endDate = '2022-06-30';
  const startDate = '2017-06-01';
  // const endDate = '2017-12-31';
  // const endDate = '2020-03-18';
  // const endDate = '2022-06-30';
  // const startDate = '2018-01-01';
  const endDate = '2024-12-31';
  
  return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
    var batch = admin.firestore().batch();
    const paymentResults = result[0];
    const packagesResults = result[1];
    const userResults = result[2];

    var finalUserData = [];

    var packageMap = {};
    packagesResults.forEach(doc=>{
      const data = doc.data();
      packageMap[doc.id] = data;
    });

    // var userMap = {};
    // userResults.forEach(doc=>{
    //   const data = doc.data();
    //   if (data){
    //     userMap[doc.id] = data;
    //   }
    // });

    var paymentsForUserId = [];
    var paymentsByUserId = {};
    var payments = {};
    
    var paymentFreezeForUserId = [];
    var paymentFreezeByUserId = {};

    var paymentFreezeTerminatedForUserId = [];
    var paymentFreezeTerminatedByUserId = {};

    var paymentFreeForUserId = [];
    var paymentFreeByUserId = {};

    paymentResults.forEach(payment=>{
      if (payment && payment.data()){
        const data = payment.data();
        const createdAt = data.createdAt? data.createdAt:null;
        const type = data && data.type;
        const userId = data && data.userId;
        const status = data && data.status;
        const source = data && data.source;
        const renewalTerm = data && data.renewalTerm;
        const quantity = data && (data.quantity?data.quantity:1);
        const transactionId = data && data.transactionId;
        const vendSaleId = data && data.vendSaleId;
        const packageId = data && data.packageId;
        const packageData = packageMap[packageId];
        const packageName = packageData && packageData.name;
        const packageBase = packageData && packageData.base;
        var totalPrice = data && data.totalPrice;

        // store the payment
        if((status === 'CLOSED' || status === 'LAYBY_CLOSED') && type === 'membership' && userId &&
        source && (source === 'vend' || source === 'adyen' || source === 'pbonline')
       ){

        // store yearly package
        if (renewalTerm && (renewalTerm === 'yearly'||renewalTerm === 'year')){
          paymentsForUserId = paymentsByUserId[userId] || [];
          for (var i = 0; i< quantity*12; i++){
            paymentsForUserId.push({
              createdAt:moment(getTheDate(createdAt)).add(i, 'months'),
              paymentDate:createdAt,
              source, transactionId, vendSaleId, 
              visitLeft: (quantity*12) - i,
              visitMax: quantity*12,
              packageName, totalPrice,
              pricePermonth:(totalPrice/(quantity*12)),
              cycle:`${i+1}/${quantity*12}`,
              cycleNumber:i+1,
              quantity, packageBase
            });
          }
          paymentsByUserId[userId] = paymentsForUserId;
        }
        else if (renewalTerm && (renewalTerm === 'biyearly'||renewalTerm === 'biyear')){
          paymentsForUserId = paymentsByUserId[userId] || [];
          for (var j = 0; j< quantity*6; j++){
            paymentsForUserId.push({
              createdAt:moment(getTheDate(createdAt)).add(j, 'months'),
              paymentDate:createdAt,
              source, transactionId, vendSaleId,
              visitLeft: quantity*6 - j,
              visitMax: quantity*6,
              packageName, totalPrice, 
              pricePermonth:(totalPrice/(quantity*6)),
              cycle:`${j+1}/${quantity*6}`,
              cycleNumber:j+1,
              quantity, packageBase
            });
          }
          paymentsByUserId[userId] = paymentsForUserId;
        }
        else if (renewalTerm && (renewalTerm === 'quarterly')){
          paymentsForUserId = paymentsByUserId[userId] || [];
          for (var k = 0; k< quantity*3; k++){
            paymentsForUserId.push({
              createdAt:moment(getTheDate(createdAt)).add(k, 'months'),
              paymentDate:createdAt,
              source, transactionId, vendSaleId,
              visitLeft: quantity*3 - k,
              visitMax: quantity*3,
              packageName, totalPrice, 
              pricePermonth:(totalPrice/(quantity*3)),
              cycle:`${k+1}/${quantity*3}`,
              cycleNumber:k+1,
              quantity, packageBase
            });
          }
          paymentsByUserId[userId] = paymentsForUserId;
        }
        else if (renewalTerm && (renewalTerm === '4monthly')){
          paymentsForUserId = paymentsByUserId[userId] || [];
          for (var l = 0; l< quantity*4; l++){
            paymentsForUserId.push({
              createdAt:moment(getTheDate(createdAt)).add(l, 'months'),
              paymentDate:createdAt,
              source, transactionId, vendSaleId,
              visitLeft: quantity*4 - l,
              visitMax: quantity*4,
              packageName, totalPrice, 
              pricePermonth:(totalPrice/(quantity*4)),
              cycle:`${l+1}/${quantity*4}`,
              cycleNumber: l+1,
              quantity, packageBase
            });
          }
          paymentsByUserId[userId] = paymentsForUserId;
        }
        else if (renewalTerm && (renewalTerm === 'month'||renewalTerm === 'monthly')){
          paymentsForUserId = paymentsByUserId[userId] || [];
        
          if(totalPrice && (totalPrice === 0 || totalPrice === '0.00' || totalPrice === '0')){
          paymentsForUserId.push({
            createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
            paymentDate:createdAt,
            source, transactionId, vendSaleId,
            visitLeft: 1,
            visitMax: 1,
            packageName, totalPrice, 
            pricePermonth:(totalPrice/(quantity)),
            cycleNumber:1, packageBase,
            // cycle:`${m+1}/${quantity}`,
            quantity,
            status: 'reward / free'
          });
          }
          else{
            for (var m = 0; m< quantity; m++){
              paymentsForUserId.push({
                createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
                paymentDate:createdAt,
                source, transactionId, vendSaleId,
                visitLeft: 1,
                visitMax: 1,
                packageName, totalPrice, 
                pricePermonth:(totalPrice/(quantity)),
                cycle:`${m+1}/${quantity}`,
                cycleNumber:m+1,
                quantity, packageBase
              });
            }
          }
          paymentsByUserId[userId] = paymentsForUserId;
        }
      }
      else if (source && source === 'freezeTerminate'){
        paymentFreezeTerminatedForUserId = paymentFreezeTerminatedByUserId[userId] || [];
        paymentFreezeTerminatedForUserId.push(data);
        paymentFreezeTerminatedByUserId[userId] = paymentFreezeTerminatedForUserId;
      }
      else if (source && source === 'freeze'){
        paymentFreezeForUserId = paymentFreezeByUserId[userId] || [];
        for (var n = 0; n<quantity; n++){
          paymentFreezeForUserId.push(data);
          paymentFreezeByUserId[userId] = paymentFreezeForUserId;
          paymentFreezeByUserId[userId].freezeFor = data && data.freezeFor && moment(getTheDate(data.freezeFor)).add(n, 'months')
          paymentFreezeByUserId[userId].quantity = quantity;
        }
      }
      else if (source && (source === 'join' || source === 'luckyDraw' || source === 'promo' || source === 'free' || source === 'complimentary' || source === 'jfr' || source === 'refer')){
        paymentFreeForUserId = paymentFreeByUserId[userId] || [];
        paymentFreeForUserId.push(data);
        paymentFreeByUserId[userId] = paymentFreeForUserId;
        paymentFreeByUserId[userId].createdAt = data && data.createdAt && moment(getTheDate(data.createdAt))
      }
    }
    else{
      // console.log('not related data: ', data);
    }
    // else if (status === 'VOIDED'){
    //   console.log(moment(getTheDate(createdAt)).format('YYYY-MM-DD'));
    // }

    });

    userResults && userResults.forEach(doc=>{
      var paymentHistory = [];
      var combinedData = [];

      const data = doc && doc.data();
      const userId = doc.id;

      const name = data && data.name;
      const email = data && data.email;
      const phone = data && data.phone;
      const packageId = data && data.packageId;
      const packageData = packageMap[packageId];
      const packageName = packageData && packageData.name;
      const packageBase = (packageData && packageData.base)? packageData.base:"complimentary";
      const autoMembershipEnds = data && (data.autoMembershipEnds?data.autoMembershipEnds: data.membershipEnds?data.membershipEnds:null);
      const autoMembershipStarts = data && (data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null);
      const membershipStartText = autoMembershipStarts && moment(getTheDate(autoMembershipStarts)).format('YYYY-MM-DD')
      const startMoment = moment(getTheDate(autoMembershipStarts));
      const icNumber = (data && data.nric)? data.nric:'';
      const passportNumber = (data && data.passport)? data.passport:'';
      const race = (data && data.race)? data.race:'';
      const gender = (data && data.gender)? data.gender:'';
      const memberCurrentPkgBase = packageBase;
      const cancellationReason = data && data.cancellationReason;

       // add automembership start by 1 month
       const autoMembershipStartsAdd1Month = autoMembershipStarts && moment(getTheDate(autoMembershipStarts)).add(1,'momnths');
       const cancellationDate = data && data.cancellationDate;
       const cancellationFormat = cancellationDate &&  moment(getTheDate(cancellationDate)).format('YYYY-MM-DD');

       const freeAccessData = paymentFreeByUserId[userId];
       const freezeUserData = paymentFreezeByUserId[userId];
       const paymentUserData = paymentsByUserId[userId];
       const freezeTerminateUserData = paymentFreezeTerminatedByUserId[userId];

       // do the sorting
       freezeUserData && freezeUserData.sort((a,b)=>{
        const createdA = moment(getTheDate(a.freezeFor)).tz('Asia/Kuala_Lumpur').toDate();
        const createdB = moment(getTheDate(b.freezeFor)).tz('Asia/Kuala_Lumpur').toDate(); 
        if(createdA < createdB){return 1;
        }else if(createdB < createdA){return -1
        }else{return 0}
      });
      // freezeUserData && freezeUserData.reverse();

      freezeTerminateUserData && freezeTerminateUserData.sort((a,b)=>{
        const createdA = moment(getTheDate(a.freezeFor)).tz('Asia/Kuala_Lumpur').toDate();
        const createdB = moment(getTheDate(b.freezeFor)).tz('Asia/Kuala_Lumpur').toDate(); 
        if(createdA < createdB){return 1;
        }else if(createdB < createdA){return -1
        }else{return 0}
      });
      // freezeTerminateUserData && freezeTerminateUserData.reverse();
      freeAccessData && freeAccessData.sort((a,b)=>{
        // const createdA = moment(getTheDate(a.createdAt)).tz('Asia/Kuala_Lumpur').toDate();
        // const createdB = moment(getTheDate(b.createdAt)).tz('Asia/Kuala_Lumpur').toDate(); 
        const createdA = a.createdAt;
        const createdB = b.createdAt;
        if(createdA < createdB){return 1;
        }else if(createdB < createdA){return -1
        }else{return 0}
      });

      // freeAccessData && freeAccessData.reverse();
      paymentUserData && paymentUserData.sort((a,b)=>{
        // const createdA = moment(getTheDate(a.createdAt)).tz('Asia/Kuala_Lumpur').toDate();
        // const createdB = moment(getTheDate(b.createdAt)).tz('Asia/Kuala_Lumpur').toDate(); 
        const createdA = a.createdAt;
        const createdB = b.createdAt;
        const cycleA = a.cycle;
        const cycleB = b.cycle;
        const cycleNumberA = a.cycleNumber;
        const cycleNumberB = b.cycleNumber;

        // if (cycleA < cycleB){return -1}
        // else if(cycleB < cycleA){return 1}

        if(createdA < createdB){return -1;
        }else if(createdB < createdA){return 1
        }

        if (cycleNumberA < cycleNumberB){return -1}
        else if(cycleNumberB < cycleNumberA){return 1}
        //else{return 0}
        else{return 0}
      });
      paymentUserData && paymentUserData.reverse();

      // const monthsDiff = Math.max(moment('2022-06-30').diff(moment('2018-01-01'), 'months')) + 1;
      const monthsDiff = Math.max(moment(endDate).diff(moment(startDate), 'months')) + 1;
      const userMonthsDiff = Math.max(moment(getTheDate(autoMembershipStarts)).diff(moment(getTheDate(autoMembershipEnds)), 'months')); 
      const userMonthsDiffSinceJan2018 = Math.max(moment(getTheDate(autoMembershipStarts)).diff(moment('2018-01-01'), 'months')); 

      if (autoMembershipStarts && autoMembershipEnds && (!email.includes('faizul'))){
        var isActiveMember;
        var isTerminatedMember;
        for (var i = 0; i<=monthsDiff; i++){
          // const iterationStartMoment = startMoment.clone().add(i, 'months');
          const iterationStartMoment = moment(startDate).clone().add(i, 'months');
          paymentHistory.push({iterationStartMoment, type:'', userId, text:''});
        }
        // console.log('paymentHistory: ', paymentHistory);
        
        paymentHistory && paymentHistory.forEach(doc=>{
          // isActiveMember = moment(getTheDate(autoMembershipEnds)).clone().isSameOrAfter(doc.iterationStartMoment)?'ACTIVE MEMBER':'NOT ACTIVE';
          // isTerminatedMember = (cancellationDate && moment(getTheDate(cancellationDate)).clone().isSameOrAfter(doc.iterationStartMoment))?'TERMINATED MEMBER':'NOT TERMINATED';
          
          isActiveMember = doc.iterationStartMoment.isSameOrBefore(moment(getTheDate(autoMembershipEnds)).subtract(1, 'months'))? 'ACTIVE MEMBER':'NOT ACTIVE';
          isTerminatedMember = (cancellationDate && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(cancellationDate)).subtract(1, 'months'))) ? 'TERMINATED MEMBER':'NOT TERMINATED';

          // if(moment(getTheDate(autoMembershipStarts)).isBetween(doc.iterationStartMoment.startOf('months'), doc.iterationStartMoment.endOf('month'))){

          // }
          if(freezeTerminateUserData && freezeTerminateUserData.length>0 
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)).clone())
            // && doc.iterationStartMoment.isBefore(moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)).clone().add('months', 1)) 
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)))
            // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
            )
            {
              combinedData.push({
                date:freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor,
                memberBase: packageBase,
                type:`freezeTerminated
                `,
              })
              freezeTerminateUserData.pop();
          }
          else if (freezeUserData && freezeUserData.length>0
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).clone().subtract(1, 'months'))
            // && doc.iterationStartMoment.isBefore(moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).clone().add('months', 1)) 
            // && moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).isBetween(doc.iterationStartMoment.subtract(1, 'days'), doc.iterationStartMoment.add(1, 'months').add(1, 'days'))
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)))
            // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
            ){
              combinedData.push({
                date:freezeUserData[freezeUserData.length-1].freezeFor,
                memberBase: packageBase,
                type:`freeze 
                `
              })
              freezeUserData.pop();
          }
          else if (freeAccessData && freeAccessData.length>0
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freeAccessData[freeAccessData.length-1].createdAt)))
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)).startOf('months'))
            // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
            ){
              combinedData.push({
                date:freeAccessData[freeAccessData.length-1].createdAt,
                type:`FREEACCESS `,
                source:'free',
                memberBase: packageBase,
              })
              freeAccessData.pop();
          }
          else if (paymentUserData && paymentUserData.length>0
            // && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(paymentUserData[paymentUserData.length-1].createdAt)))
            && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)).startOf('months'))
            // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
            ){
              combinedData.push({
                // type: parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2),
                // packageName:paymentUserData[paymentUserData.length-1].packageName,
                date:paymentUserData[paymentUserData.length-1].createdAt,
                memberBase: packageBase,
                type: `${(paymentUserData[paymentUserData.length-1].pricePermonth)? `PAID : ${parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2)}`:'PAID 0.00'}   
                \ntotal Price: ${(paymentUserData[paymentUserData.length-1].totalPrice)? (paymentUserData[paymentUserData.length-1].totalPrice):'0.00'} 
                `,
                

                // type: `${(paymentUserData[paymentUserData.length-1].pricePermonth)? `PAID : ${parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2)}`:'PAID 0.00'}   
                // \ntotal Price: ${(paymentUserData[paymentUserData.length-1].totalPrice)? (paymentUserData[paymentUserData.length-1].totalPrice):'0.00'} 
                // \npayment Date: ${(paymentUserData[paymentUserData.length-1].paymentDate)? moment(getTheDate(paymentUserData[paymentUserData.length-1].paymentDate)).format('YYYY-MM-DD'):'n/a'}
                // \nvendSaleId: ${(paymentUserData[paymentUserData.length-1].vendSaleId)? (paymentUserData[paymentUserData.length-1].vendSaleId):' '}
                // \nTransactionId: ${(paymentUserData[paymentUserData.length-1].transactionId)? (paymentUserData[paymentUserData.length-1].transactionId):' '}
                // \nPackageName: ${(paymentUserData[paymentUserData.length-1].packageName)? (paymentUserData[paymentUserData.length-1].packageName):' '}
                // \nMemberBase: ${packageBase}
                // \nPackageBase: ${(paymentUserData[paymentUserData.length-1].packageBase)? (paymentUserData[paymentUserData.length-1].packageBase):'complimentary'}
                // \nQuantity: ${(paymentUserData[paymentUserData.length-1].quantity)? (paymentUserData[paymentUserData.length-1].quantity):'1'}
                // \ncycle: ${(paymentUserData[paymentUserData.length-1].cycle)? (paymentUserData[paymentUserData.length-1].cycle):'n/a'}
                // \nstatus: ${(paymentUserData[paymentUserData.length-1].status)? (paymentUserData[paymentUserData.length-1].status):'n/a'}
                // \n${isActiveMember}\n${isTerminatedMember}`,
                // transactionId:paymentUserData[paymentUserData.length-1].transactionId,
                // vendSaleId:paymentUserData[paymentUserData.length-1].vendSaleId,
                // packageName:paymentUserData[paymentUserData.length-1].packageName,
                // packageBase:paymentUserData[paymentUserData.length-1].packageBase,
              });
              
              paymentUserData.pop();
          }
          // place the remaining
          // else if (paymentUserData && paymentUserData.length>0){
          //   combinedData.push({
          //     date:paymentUserData[paymentUserData.length-1].createdAt,
          //     type: `${(paymentUserData[paymentUserData.length-1].pricePermonth)? parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2):'0.00'}   
          //     \ntotal Price: ${(paymentUserData[paymentUserData.length-1].totalPrice)? (paymentUserData[paymentUserData.length-1].totalPrice):'0.00'} 
          //     \npayment Date: ${(paymentUserData[paymentUserData.length-1].paymentDate)? moment(getTheDate(paymentUserData[paymentUserData.length-1].paymentDate)).format('YYYY-MM-DD'):'n/a'}
          //     \nvendSaleId: ${(paymentUserData[paymentUserData.length-1].vendSaleId)? (paymentUserData[paymentUserData.length-1].vendSaleId):' '}
          //     \nTransactionId: ${(paymentUserData[paymentUserData.length-1].transactionId)? (paymentUserData[paymentUserData.length-1].transactionId):' '}
          //     \nPackageName: ${(paymentUserData[paymentUserData.length-1].packageName)? (paymentUserData[paymentUserData.length-1].packageName):' '}
          //     \nQuantity: ${(paymentUserData[paymentUserData.length-1].quantity)? (paymentUserData[paymentUserData.length-1].quantity):'1'}
          //     \ncycle: ${(paymentUserData[paymentUserData.length-1].cycle)? (paymentUserData[paymentUserData.length-1].cycle):'n/a'}
          //     \nstatus: ${(paymentUserData[paymentUserData.length-1].status)? (paymentUserData[paymentUserData.length-1].status):'n/a'}`,
          //     transactionId:paymentUserData[paymentUserData.length-1].transactionId,
          //     vendSaleId:paymentUserData[paymentUserData.length-1].vendSaleId,
          //     packageName:paymentUserData[paymentUserData.length-1].packageName
          //   })
          //   paymentUserData.pop();
          // }
          else if (doc.iterationStartMoment.isBefore(moment(getTheDate(autoMembershipStarts)).startOf('months'))){
          // else if (autoMembershipStartsAdd1Month && doc.iterationStartMoment.isBefore(autoMembershipStartsAdd1Month.startOf('months'))){
            combinedData.push({
               date:doc.iterationStartMoment.toDate(),
               type:`not yet started`
             }) 
          }
          // else if
          else{
            combinedData.push({
              date:doc.iterationStartMoment.toDate(),
              type:`unpaid \n${isActiveMember}\n${isTerminatedMember}`
            })
          }
        });
        // combinedData.reverse();

        //identify unknown packagebase
        combinedData.forEach((data, index) => {
          // if contain free access
          if (data.source && data.source === 'free'){
            // console.log('dataSource: ', data);
            // check for previous package base
            var i = index;
            combinedData.forEach((data2, index2) => {
              var j = index2;
              if (data2.packageBase){
                combinedData[index].packageBase = data2.packageBase;
              }
            });
            // while(index!=0 ){
            //   combinedData[index].packageBase = data.packageBase;
            // }
          }
          // if (!data.packageBase){
          //   if (!combinedData[index-1].packageBase)
          //     i = index;
          //     while(!combinedData[i].packageBase )
          //     i++;
          // }
        });

        // 2nd loop for rechecking, if not exist, package base is memberBase
        combinedData.forEach((data, index) => {
          if (data.source && data.source === 'free' && !data.packageBase){
            combinedData[index].packageBase = data.memberBase;
          }
        });


        // console.log('combinedData: ', combinedData);

        if (combinedData && combinedData.length>=1){

         
          const paymentData = [
            name, email, packageName, membershipStartText, 
            icNumber, passportNumber, race, phone, gender, packageBase,
            cancellationDate? cancellationFormat: '', 
            cancellationReason? cancellationReason:'',
            
            // 2017 (June 2017)
            combinedData[0].type, // june 2017
            combinedData[1].type,
            combinedData[2].type,
            combinedData[3].type,
            combinedData[4].type,
            combinedData[5].type,
            combinedData[6].type,
            
            // 2018
            combinedData[6].type, // jan2018
            combinedData[7].type,
            combinedData[8].type,
            combinedData[9].type,
            combinedData[10].type,
            combinedData[11].type,
            combinedData[12].type,
            combinedData[13].type,
            combinedData[14].type,
            combinedData[15].type,
            combinedData[16].type,
            combinedData[17].type,

            // 2019
            combinedData[18].type, // jan2019
            combinedData[19].type,
            combinedData[20].type,
            combinedData[21].type,
            combinedData[22].type,
            combinedData[23].type,
            combinedData[24].type,
            combinedData[25].type,
            combinedData[26].type,
            combinedData[27].type,
            combinedData[28].type,
            combinedData[29].type,

            // 2020
            combinedData[30].type, // jan2020
            combinedData[31].type,
            combinedData[32].type,
            combinedData[33].type,
            combinedData[34].type,
            combinedData[35].type,
            combinedData[36].type,
            combinedData[37].type,
            combinedData[38].type,
            combinedData[39].type,
            combinedData[40].type,
            combinedData[41].type,

            // 2021
            combinedData[42].type, // jan 2021
            combinedData[43].type,
            combinedData[44].type,
            combinedData[45].type,
            combinedData[46].type,
            combinedData[47].type,
            combinedData[48].type,
            combinedData[49].type,
            combinedData[50].type,
            combinedData[51].type,
            combinedData[52].type,
            combinedData[53].type,

            // 2022
            combinedData[54].type, // jan 2022
            combinedData[55].type,
            combinedData[56].type,
            combinedData[57].type,
            combinedData[58].type,
            combinedData[59].type,
            combinedData[60].type,
            combinedData[61].type,
            combinedData[62].type,
            combinedData[63].type,
            combinedData[64].type,
            combinedData[65].type,

            // 2023
            combinedData[66].type, // jan 2023
            combinedData[67].type,
            combinedData[68].type,
            combinedData[69].type,
            combinedData[70].type,
            combinedData[71].type,
            combinedData[72].type,
            combinedData[73].type,
            combinedData[74].type,
            combinedData[75].type,
            combinedData[76].type,
            combinedData[77].type,

             // 2024
             combinedData[78].type, // jan 2024
             combinedData[79].type,
             combinedData[80].type,
             combinedData[81].type,
             combinedData[82].type,
             combinedData[83].type,
             combinedData[84].type,
             combinedData[85].type,
             combinedData[86].type,
             combinedData[87].type,
             combinedData[88].type,
             combinedData[89].type,

          ];


          finalUserData.push(paymentData);
        }
      }
    });
    // console.log('payments: ', payments);

    // convert array to object?
    // combinedData && combinedData.forEach((data, index)=>{
        
    // });

    
    const updateSheetPromise = updateGoogleSheet({
      // spreadsheetId: CONFIG_SHEET_ID,
      spreadsheetId: '1Uqywmt1NT-4qFq2m_H6utzmLr_yjIFCniqOXAsthtj8',
      resource: {
        // How the input data should be interpreted.
        valueInputOption: 'RAW',  // TODO: Update placeholder value.
        // The new values to apply to the spreadsheet.
        data: [
          {
            // range: `AUTO MEMBERSHIP PAYMENT MONTHLY SUMMARY!A52:CU`,
            range: `TOTAL PAYMENTS BY MEMBERSHIP SALES!A44:CZ`,
            majorDimension: "ROWS",
            values: finalUserData
          }
        ],  // TODO: Update placeholder value.
  
        // TODO: Add desired properties to the request body.
      },
    });

    return updateSheetPromise.then((result)=>{
      // console.log('theresult: ', result);
      return res.status(200).send({
        success:true,
        // payments: finalUserData,
      });
    }).catch(error=>{
      return res.status(200).send({
        success:false,
        error
        // payments: finalUserData,
      });
    })
  });
});

// // // // add all membership babel payment to sheet
// // // exports.addAllMembershipPaymentToSheets = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const paymentResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];

// // //     var finalUserData = [];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     // var userMap = {};
// // //     // userResults.forEach(doc=>{
// // //     //   const data = doc.data();
// // //     //   if (data){
// // //     //     userMap[doc.id] = data;
// // //     //   }
// // //     // });

// // //     var paymentsForUserId = [];
// // //     var paymentsByUserId = {};
// // //     var payments = {};
    
// // //     var paymentFreezeForUserId = [];
// // //     var paymentFreezeByUserId = {};

// // //     var paymentFreezeTerminatedForUserId = [];
// // //     var paymentFreezeTerminatedByUserId = {};

// // //     var paymentFreeForUserId = [];
// // //     var paymentFreeByUserId = {};

// // //     paymentResults.forEach(payment=>{
// // //       if (payment && payment.data()){
// // //         const data = payment.data();
// // //         const createdAt = data.createdAt? data.createdAt:null;
// // //         const type = data && data.type;
// // //         const userId = data && data.userId;
// // //         const status = data && data.status;
// // //         const source = data && data.source;
// // //         const renewalTerm = data && data.renewalTerm;
// // //         const quantity = data && (data.quantity?data.quantity:1);
// // //         const transactionId = data && data.transactionId;
// // //         const vendSaleId = data && data.vendSaleId;
// // //         const packageId = data && data.packageId;
// // //         const packageData = packageMap[packageId];
// // //         const packageName = packageData && packageData.name;
// // //         var totalPrice = data && data.totalPrice;

// // //         // store the payment
// // //         if((status === 'CLOSED' || status === 'LAYBY_CLOSED') && type === 'membership' && userId &&
// // //         source && (source === 'vend' || source === 'adyen' || source === 'pbonline')
// // //        ){

// // //         // store yearly package
// // //         if (renewalTerm && (renewalTerm === 'yearly'||renewalTerm === 'year')){
// // //           paymentsForUserId = paymentsByUserId[userId] || [];
// // //           for (var i = 0; i< quantity*12; i++){
// // //             paymentsForUserId.push({
// // //               createdAt:moment(getTheDate(createdAt)).add(i, 'months'),
// // //               paymentDate:createdAt,
// // //               source, transactionId, vendSaleId, 
// // //               visitLeft: (quantity*12) - i,
// // //               visitMax: quantity*12,
// // //               packageName, totalPrice,
// // //               pricePermonth:(totalPrice/(quantity*12)),
// // //               cycle:`${i+1}/${quantity*12}`,
// // //               cycleNumber:i+1,
// // //               quantity
// // //             });
// // //           }
// // //           paymentsByUserId[userId] = paymentsForUserId;
// // //         }
// // //         else if (renewalTerm && (renewalTerm === 'biyearly'||renewalTerm === 'biyear')){
// // //           paymentsForUserId = paymentsByUserId[userId] || [];
// // //           for (var j = 0; j< quantity*6; j++){
// // //             paymentsForUserId.push({
// // //               createdAt:moment(getTheDate(createdAt)).add(j, 'months'),
// // //               paymentDate:createdAt,
// // //               source, transactionId, vendSaleId,
// // //               visitLeft: quantity*6 - j,
// // //               visitMax: quantity*6,
// // //               packageName, totalPrice, 
// // //               pricePermonth:(totalPrice/(quantity*6)),
// // //               cycle:`${j+1}/${quantity*6}`,
// // //               cycleNumber:j+1,
// // //               quantity
// // //             });
// // //           }
// // //           paymentsByUserId[userId] = paymentsForUserId;
// // //         }
// // //         else if (renewalTerm && (renewalTerm === 'quarterly')){
// // //           paymentsForUserId = paymentsByUserId[userId] || [];
// // //           for (var k = 0; k< quantity*3; k++){
// // //             paymentsForUserId.push({
// // //               createdAt:moment(getTheDate(createdAt)).add(k, 'months'),
// // //               paymentDate:createdAt,
// // //               source, transactionId, vendSaleId,
// // //               visitLeft: quantity*3 - k,
// // //               visitMax: quantity*3,
// // //               packageName, totalPrice, 
// // //               pricePermonth:(totalPrice/(quantity*3)),
// // //               cycle:`${k+1}/${quantity*3}`,
// // //               cycleNumber:k+1,
// // //               quantity
// // //             });
// // //           }
// // //           paymentsByUserId[userId] = paymentsForUserId;
// // //         }
// // //         else if (renewalTerm && (renewalTerm === '4monthly')){
// // //           paymentsForUserId = paymentsByUserId[userId] || [];
// // //           for (var l = 0; l< quantity*4; l++){
// // //             paymentsForUserId.push({
// // //               createdAt:moment(getTheDate(createdAt)).add(l, 'months'),
// // //               paymentDate:createdAt,
// // //               source, transactionId, vendSaleId,
// // //               visitLeft: quantity*4 - l,
// // //               visitMax: quantity*4,
// // //               packageName, totalPrice, 
// // //               pricePermonth:(totalPrice/(quantity*4)),
// // //               cycle:`${l+1}/${quantity*4}`,
// // //               cycleNumber: l+1,
// // //               quantity
// // //             });
// // //           }
// // //           paymentsByUserId[userId] = paymentsForUserId;
// // //         }
// // //         else if (renewalTerm && (renewalTerm === 'month'||renewalTerm === 'monthly')){
// // //           paymentsForUserId = paymentsByUserId[userId] || [];
        
// // //           if(totalPrice && (totalPrice === 0 || totalPrice === '0.00' || totalPrice === '0')){
// // //           paymentsForUserId.push({
// // //             createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
// // //             paymentDate:createdAt,
// // //             source, transactionId, vendSaleId,
// // //             visitLeft: 1,
// // //             visitMax: 1,
// // //             packageName, totalPrice, 
// // //             pricePermonth:(totalPrice/(quantity)),
// // //             cycleNumber:1,
// // //             // cycle:`${m+1}/${quantity}`,
// // //             quantity,
// // //             status: 'reward / free'
// // //           });
// // //           }
// // //           else{
// // //           for (var m = 0; m< quantity; m++){
// // //             paymentsForUserId.push({
// // //               createdAt:moment(getTheDate(createdAt)).add(m, 'months'),
// // //               paymentDate:createdAt,
// // //               source, transactionId, vendSaleId,
// // //               visitLeft: 1,
// // //               visitMax: 1,
// // //               packageName, totalPrice, 
// // //               pricePermonth:(totalPrice/(quantity)),
// // //               cycle:`${m+1}/${quantity}`,
// // //               cycleNumber:m+1,
// // //               quantity
// // //             });
// // //           }
          
// // //           }
// // //           paymentsByUserId[userId] = paymentsForUserId;
// // //         }
// // //       }
// // //       else if (source && source === 'freezeTerminate'){
// // //         paymentFreezeTerminatedForUserId = paymentFreezeTerminatedByUserId[userId] || [];
// // //         paymentFreezeTerminatedForUserId.push(data);
// // //         paymentFreezeTerminatedByUserId[userId] = paymentFreezeTerminatedForUserId;
// // //       }
// // //       else if (source && source === 'freeze'){
// // //         paymentFreezeForUserId = paymentFreezeByUserId[userId] || [];
// // //         paymentFreezeForUserId.push(data);
// // //         paymentFreezeByUserId[userId] = paymentFreezeForUserId;
// // //         paymentFreezeByUserId[userId].freezeFor = data && data.freezeFor && moment(getTheDate(data.freezeFor))
// // //         paymentFreezeByUserId[userId].quantity = quantity;
// // //       }
// // //       else if (source && (source === 'join' || source === 'luckyDraw' || source === 'promo' || source === 'free' || source === 'complimentary' || source === 'jfr' || source === 'refer')){
// // //         paymentFreeForUserId = paymentFreeByUserId[userId] || [];
// // //         paymentFreeForUserId.push(data);
// // //         paymentFreeByUserId[userId] = paymentFreeForUserId;
// // //         paymentFreeByUserId[userId].createdAt = data && data.createdAt && moment(getTheDate(data.createdAt))
// // //       }
// // //     }
// // //     else{
// // //       // console.log('not related data: ', data);
// // //     }
// // //     // else if (status === 'VOIDED'){
// // //     //   console.log(moment(getTheDate(createdAt)).format('YYYY-MM-DD'));
// // //     // }

// // //     });

// // //     userResults && userResults.forEach(doc=>{
// // //       var paymentHistory = [];
// // //       var combinedData = [];

// // //       const data = doc && doc.data();
// // //       const userId = doc.id;

// // //       const name = data && data.name;
// // //       const email = data && data.email;
// // //       const packageId = data && data.packageId;
// // //       const packageData = packageMap[packageId];
// // //       const packageName = packageData && packageData.name;
// // //       const autoMembershipEnds = data && (data.autoMembershipEnds?data.autoMembershipEnds: data.membershipEnds?data.membershipEnds:null);
// // //       const autoMembershipStarts = data && (data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null);
// // //       const membershipStartText = autoMembershipStarts && moment(getTheDate(autoMembershipStarts)).format('YYYY-MM-DD')
// // //       const startMoment = moment(getTheDate(autoMembershipStarts));

// // //        // add automembership start by 1 month
// // //        const autoMembershipStartsAdd1Month = autoMembershipStarts && moment(getTheDate(autoMembershipStarts)).add(1,'momnths');
// // //        const cancellationDate = data && data.cancellationDate;
// // //        const cancellationFormat = cancellationDate &&  moment(getTheDate(cancellationDate)).format('YYYY-MM-DD');

// // //        const freeAccessData = paymentFreeByUserId[userId];
// // //        const freezeUserData = paymentFreezeByUserId[userId];
// // //        const paymentUserData = paymentsByUserId[userId];
// // //        const freezeTerminateUserData = paymentFreezeTerminatedByUserId[userId];

// // //        // do the sorting
// // //        freezeUserData && freezeUserData.sort((a,b)=>{
// // //         const createdA = moment(getTheDate(a.freezeFor)).tz('Asia/Kuala_Lumpur').toDate();
// // //         const createdB = moment(getTheDate(b.freezeFor)).tz('Asia/Kuala_Lumpur').toDate(); 
// // //         if(createdA < createdB){return -1;
// // //         }else if(createdB < createdA){return 1
// // //         }else{return 0}
// // //       });
// // //       freezeUserData && freezeUserData.reverse();

// // //       freezeTerminateUserData && freezeTerminateUserData.sort((a,b)=>{
// // //         const createdA = moment(getTheDate(a.freezeFor)).tz('Asia/Kuala_Lumpur').toDate();
// // //         const createdB = moment(getTheDate(b.freezeFor)).tz('Asia/Kuala_Lumpur').toDate(); 
// // //         if(createdA < createdB){return -1;
// // //         }else if(createdB < createdA){return 1
// // //         }else{return 0}
// // //       });
// // //       freezeTerminateUserData && freezeTerminateUserData.reverse();
// // //       freeAccessData && freeAccessData.sort((a,b)=>{
// // //         // const createdA = moment(getTheDate(a.createdAt)).tz('Asia/Kuala_Lumpur').toDate();
// // //         // const createdB = moment(getTheDate(b.createdAt)).tz('Asia/Kuala_Lumpur').toDate(); 
// // //         const createdA = a.createdAt;
// // //         const createdB = b.createdAt;
        
// // //         if(createdA < createdB){return -1;
// // //         }else if(createdB < createdA){return 1
// // //         }else{return 0}
// // //       });

// // //       freeAccessData && freeAccessData.reverse();
// // //       paymentUserData && paymentUserData.sort((a,b)=>{
// // //         // const createdA = moment(getTheDate(a.createdAt)).tz('Asia/Kuala_Lumpur').toDate();
// // //         // const createdB = moment(getTheDate(b.createdAt)).tz('Asia/Kuala_Lumpur').toDate(); 
// // //         const createdA = a.createdAt;
// // //         const createdB = b.createdAt;
// // //         const cycleA = a.cycle;
// // //         const cycleB = b.cycle;
// // //         const cycleNumberA = a.cycleNumber;
// // //         const cycleNumberB = b.cycleNumber;
        

// // //         // if (cycleA < cycleB){return -1}
// // //         // else if(cycleB < cycleA){return 1}

// // //         if(createdA < createdB){return -1;
// // //         }else if(createdB < createdA){return 1
// // //         }

// // //         if (cycleNumberA < cycleNumberB){return -1}
// // //         else if(cycleNumberB < cycleNumberA){return 1}
// // //         //else{return 0}
        
       
// // //         else{return 0}
// // //       });
// // //       paymentUserData && paymentUserData.reverse();

// // //       const monthsDiff = Math.max(moment('2022-06-30').diff(moment('2018-01-01'), 'months')) + 1;
// // //       const userMonthsDiff = Math.max(moment(getTheDate(autoMembershipStarts)).diff(moment(getTheDate(autoMembershipEnds)), 'months')); 
// // //       const userMonthsDiffSinceJan2018 = Math.max(moment(getTheDate(autoMembershipStarts)).diff(moment('2018-01-01'), 'months')); 

// // //       if (autoMembershipStarts && autoMembershipEnds){

// // //         for (var i = 0; i<=monthsDiff; i++){
// // //           // const iterationStartMoment = startMoment.clone().add(i, 'months');
// // //           const iterationStartMoment = moment('2018-01-01').clone().add(i, 'months');
// // //           paymentHistory.push({iterationStartMoment, type:'', userId, text:''});
// // //         }
// // //         // console.log('paymentHistory: ', paymentHistory);
        
// // //         paymentHistory && paymentHistory.forEach(doc=>{
// // //           // if(moment(getTheDate(autoMembershipStarts)).isBetween(doc.iterationStartMoment.startOf('months'), doc.iterationStartMoment.endOf('month'))){

// // //           // }
// // //           if(freezeTerminateUserData && freezeTerminateUserData.length>0 
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)).clone())
// // //             // && doc.iterationStartMoment.isBefore(moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)).clone().add('months', 1)) 
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)))
// // //             // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
// // //             )
// // //             {
// // //               combinedData.push({
// // //                 date:freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor,
// // //                 type:`freezeTerminated
// // //                 \nFreezeTerminated Date: ${(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)? moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].freezeFor)).format('YYYY-MM-DD'):'n/a'}
// // //                 \nFreezeTerminated created Date: ${(freezeTerminateUserData[freezeTerminateUserData.length-1].createdAt)? moment(getTheDate(freezeTerminateUserData[freezeTerminateUserData.length-1].createdAt)).format('YYYY-MM-DD'):'n/a'}`,
// // //               })
// // //               freezeTerminateUserData.pop();
// // //           }
// // //           else if (freezeUserData && freezeUserData.length>0
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).clone().subtract(1, 'months'))
// // //             // && doc.iterationStartMoment.isBefore(moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).clone().add('months', 1)) 
// // //             // && moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).isBetween(doc.iterationStartMoment.subtract(1, 'days'), doc.iterationStartMoment.add(1, 'months').add(1, 'days'))
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)))
// // //             // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
// // //             ){
// // //               combinedData.push({
// // //                 date:freezeUserData[freezeUserData.length-1].freezeFor,
// // //                 type:`freeze 
// // //                   \nFreeze Date: ${(freezeUserData[freezeUserData.length-1].freezeFor)? moment(getTheDate(freezeUserData[freezeUserData.length-1].freezeFor)).format('YYYY-MM-DD'):'n/a'}
// // //                   \nFreeze created Date: ${(freezeUserData[freezeUserData.length-1].createdAt)? moment(getTheDate(freezeUserData[freezeUserData.length-1].createdAt)).format('YYYY-MM-DD'):'n/a'}`
// // //               })
// // //               freezeUserData.pop();
// // //           }
// // //           else if (freeAccessData && freeAccessData.length>0
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(freeAccessData[freeAccessData.length-1].createdAt)))
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)).startOf('months'))
// // //             // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
// // //             ){
// // //               combinedData.push({
// // //                 date:freeAccessData[freeAccessData.length-1].createdAt,
// // //                 type:`FREEACCESS 
// // //                   \nDateRewarded: ${(freeAccessData[freeAccessData.length-1].createdAt)? 
// // //                   moment(getTheDate((freeAccessData[freeAccessData.length-1].createdAt))).format('YYYY-MM-DD'):'n/a'}
// // //                   \nSource: ${(freeAccessData[freeAccessData.length-1].source)? freeAccessData[freeAccessData.length-1].source:'n/a'}`,
// // //               })
// // //               freeAccessData.pop();
// // //           }
// // //           else if (paymentUserData && paymentUserData.length>0
// // //             // && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(paymentUserData[paymentUserData.length-1].createdAt)))
// // //             && doc.iterationStartMoment.isSameOrAfter(moment(getTheDate(autoMembershipStarts)).startOf('months'))
// // //             // && doc.iterationStartMoment.isSameOrAfter(autoMembershipStartsAdd1Month)
// // //             ){
// // //               combinedData.push({

// // //                 date:paymentUserData[paymentUserData.length-1].createdAt,
// // //                 type: `${(paymentUserData[paymentUserData.length-1].pricePermonth)? `PAID : ${parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2)}`:'PAID 0.00'}   
// // //                 \ntotal Price: ${(paymentUserData[paymentUserData.length-1].totalPrice)? (paymentUserData[paymentUserData.length-1].totalPrice):'0.00'} 
// // //                 \npayment Date: ${(paymentUserData[paymentUserData.length-1].paymentDate)? moment(getTheDate(paymentUserData[paymentUserData.length-1].paymentDate)).format('YYYY-MM-DD'):'n/a'}
// // //                 \nvendSaleId: ${(paymentUserData[paymentUserData.length-1].vendSaleId)? (paymentUserData[paymentUserData.length-1].vendSaleId):' '}
// // //                 \nTransactionId: ${(paymentUserData[paymentUserData.length-1].transactionId)? (paymentUserData[paymentUserData.length-1].transactionId):' '}
// // //                 \nPackageName: ${(paymentUserData[paymentUserData.length-1].packageName)? (paymentUserData[paymentUserData.length-1].packageName):' '}
// // //                 \nQuantity: ${(paymentUserData[paymentUserData.length-1].quantity)? (paymentUserData[paymentUserData.length-1].quantity):'1'}
// // //                 \ncycle: ${(paymentUserData[paymentUserData.length-1].cycle)? (paymentUserData[paymentUserData.length-1].cycle):'n/a'}
// // //                 \nstatus: ${(paymentUserData[paymentUserData.length-1].status)? (paymentUserData[paymentUserData.length-1].status):'n/a'}`,
// // //                 transactionId:paymentUserData[paymentUserData.length-1].transactionId,
// // //                 vendSaleId:paymentUserData[paymentUserData.length-1].vendSaleId,
// // //                 packageName:paymentUserData[paymentUserData.length-1].packageName
// // //               })
// // //               paymentUserData.pop();
// // //           }
// // //           // place the remaining
// // //           // else if (paymentUserData && paymentUserData.length>0){
// // //           //   combinedData.push({
// // //           //     date:paymentUserData[paymentUserData.length-1].createdAt,
// // //           //     type: `${(paymentUserData[paymentUserData.length-1].pricePermonth)? parseFloat((paymentUserData[paymentUserData.length-1].pricePermonth)).toFixed(2):'0.00'}   
// // //           //     \ntotal Price: ${(paymentUserData[paymentUserData.length-1].totalPrice)? (paymentUserData[paymentUserData.length-1].totalPrice):'0.00'} 
// // //           //     \npayment Date: ${(paymentUserData[paymentUserData.length-1].paymentDate)? moment(getTheDate(paymentUserData[paymentUserData.length-1].paymentDate)).format('YYYY-MM-DD'):'n/a'}
// // //           //     \nvendSaleId: ${(paymentUserData[paymentUserData.length-1].vendSaleId)? (paymentUserData[paymentUserData.length-1].vendSaleId):' '}
// // //           //     \nTransactionId: ${(paymentUserData[paymentUserData.length-1].transactionId)? (paymentUserData[paymentUserData.length-1].transactionId):' '}
// // //           //     \nPackageName: ${(paymentUserData[paymentUserData.length-1].packageName)? (paymentUserData[paymentUserData.length-1].packageName):' '}
// // //           //     \nQuantity: ${(paymentUserData[paymentUserData.length-1].quantity)? (paymentUserData[paymentUserData.length-1].quantity):'1'}
// // //           //     \ncycle: ${(paymentUserData[paymentUserData.length-1].cycle)? (paymentUserData[paymentUserData.length-1].cycle):'n/a'}
// // //           //     \nstatus: ${(paymentUserData[paymentUserData.length-1].status)? (paymentUserData[paymentUserData.length-1].status):'n/a'}`,
// // //           //     transactionId:paymentUserData[paymentUserData.length-1].transactionId,
// // //           //     vendSaleId:paymentUserData[paymentUserData.length-1].vendSaleId,
// // //           //     packageName:paymentUserData[paymentUserData.length-1].packageName
// // //           //   })
// // //           //   paymentUserData.pop();
// // //           // }
// // //           else if (doc.iterationStartMoment.isBefore(moment(getTheDate(autoMembershipStarts)).startOf('months'))){
// // //           // else if (autoMembershipStartsAdd1Month && doc.iterationStartMoment.isBefore(autoMembershipStartsAdd1Month.startOf('months'))){
// // //             combinedData.push({
// // //                date:doc.iterationStartMoment.toDate(),
// // //                type:'n/a'
// // //              }) 
// // //           }
// // //           // else if
// // //           else{
// // //             combinedData.push({
// // //               date:doc.iterationStartMoment.toDate(),
// // //               type:'unpaid'
// // //             })
// // //           }
// // //         });
// // //         // combinedData.reverse();

// // //         // console.log('combinedData: ', combinedData);

// // //         if (combinedData && combinedData.length>=1){
// // //           const paymentData = [
// // //             name, email, packageName, membershipStartText, 
// // //             cancellationDate? cancellationFormat: '',
// // //             // 2018
// // //             combinedData[0].type,
// // //             combinedData[1].type,
// // //             combinedData[2].type,
// // //             combinedData[3].type,
// // //             combinedData[4].type,
// // //             combinedData[5].type,
// // //             combinedData[6].type,
// // //             combinedData[7].type,
// // //             combinedData[8].type,
// // //             combinedData[9].type,
// // //             combinedData[10].type,
// // //             combinedData[11].type,

// // //             // 2019
// // //             combinedData[12].type,
// // //             combinedData[13].type,
// // //             combinedData[14].type,
// // //             combinedData[15].type,
// // //             combinedData[16].type,
// // //             combinedData[17].type,
// // //             combinedData[18].type,
// // //             combinedData[19].type,
// // //             combinedData[20].type,
// // //             combinedData[21].type,
// // //             combinedData[22].type,
// // //             combinedData[23].type,

// // //             // 2020
// // //             combinedData[24].type,
// // //             combinedData[25].type,
// // //             combinedData[26].type,
// // //             combinedData[27].type,
// // //             combinedData[28].type,
// // //             combinedData[29].type,
// // //             combinedData[30].type,
// // //             combinedData[31].type,
// // //             combinedData[32].type,
// // //             combinedData[33].type,
// // //             combinedData[34].type,
// // //             combinedData[35].type,

// // //             // 2021
// // //             combinedData[36].type,
// // //             combinedData[37].type,
// // //             combinedData[38].type,
// // //             combinedData[39].type,
// // //             combinedData[40].type,
// // //             combinedData[41].type,
// // //             combinedData[42].type,
// // //             combinedData[43].type,
// // //             combinedData[44].type,
// // //             combinedData[45].type,
// // //             combinedData[46].type,
// // //             combinedData[47].type,

// // //             // 2022
// // //             // combinedData[48].type,
// // //             // combinedData[49].type,
// // //             // combinedData[50].type,
// // //             // combinedData[51].type,
// // //             // combinedData[52].type,
// // //             // combinedData[53].type,

// // //           ];
// // //           finalUserData.push(paymentData);
// // //         }
       
// // //       }

// // //     });


// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `AUTO MEMBERSHIP PAYMENT MONTHLY!A18:BG`,
// // //             majorDimension: "ROWS",
// // //             values: finalUserData
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         payments: finalUserData,
// // //       });
// // //     });
// // //   });
// // // });

// // // // // add virtual babel at home payment to sheet
// // // // exports.addVbabelwellnessPaymentToSheets = functions.https.onRequest((req, res) => {
// // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'onlinemywellness').get();
// // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // //   const usersQuery = admin.firestore().collection('users').get();

// // // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // // //     var batch = admin.firestore().batch();
// // // //     const paymentResults = result[0];
// // // //     const packagesResults = result[1];
// // // //     const userResults = result[2];

// // // //     var packageMap = {};
// // // //     packagesResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       packageMap[doc.id] = data;
// // // //     });

// // // //     var userMap = {};
// // // //     userResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       if (data){
// // // //         userMap[doc.id] = data;
// // // //       }
// // // //     });

// // // //     var payments = [];
// // // //     paymentResults.forEach(payment=>{
// // // //       if (payment && payment.data()){
// // // //         const data = payment.data();
// // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // //         const userId = data.userId? data.userId:null;
// // // //         const userData = userId ? userMap[userId]:null;
// // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // // //         const phone = userData? userData.phone? userData.phone: " ":" ";
// // // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // // //         const status = data.status? data.status:" ";
// // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // //         const type = data.type? data.type:" ";
// // // //         const transactionId = data.transactionId? data.transactionId:" ";
// // // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // // //         const productName = data.productName? data.productName: " ";
// // // //         const ighandlename = data.ighandlename? data.ighandlename: " ";
// // // //         const trainerName = data.trainerName? data.trainerName: " ";
// // // //         const coachName = data.coachName? data.coachName: " ";
// // // //         const selectedAMPM = data.selectedAMPM? data.selectedAMPM: " ";
// // // //         const selectedDay = data.selectedDay? data.selectedDay: " ";
// // // //         const AM = selectedAMPM.AM? 'yes':'no';
// // // //         const PM = selectedAMPM.PM? 'yes':'no';
// // // //         const mon = selectedDay.mon? 'yes':'no';
// // // //         const tues = selectedDay.tues? 'yes':'no';
// // // //         const wed = selectedDay.wed? 'yes':'no';
// // // //         const thurs = selectedDay.thurs? 'yes':'no';
// // // //         const fri = selectedDay.fri? 'yes':'no';
// // // //         const sat = selectedDay.sat? 'yes':'no';
// // // //         const sun = selectedDay.sun? 'yes':'no';

// // // //         const paymentData = [
// // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // // //           userName,
// // // //           userEmail,
// // // //           ighandlename,
// // // //           invoiceId,
// // // //           status,
// // // //           totalPrice,
// // // //           type,
// // // //           phone,
// // // //           transactionId,
// // // //           // vendProductId,
// // // //           productName,
// // // //           trainerName,
// // // //           coachName,
// // // //           AM, PM,
// // // //           mon, tues, wed, thurs, fri, sat, sun
// // // //         ];
// // // //         payments.push(paymentData);
// // // //       }
// // // //     });

// // // //     payments.sort((a,b)=>{
// // // //       var dateA = new Date(a[0]);
// // // //       var dateB = new Date(b[0]);
// // // //       if (dateA < dateB) {return -1}
// // // //       if (dateA > dateB) {return 1}
// // // //       return 0;
// // // //     });

// // // //     // console.log('payments: ', payments);

// // // //     const updateSheetPromise = updateGoogleSheet({
// // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // //       resource: {
// // // //         // How the input data should be interpreted.
// // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // //         // The new values to apply to the spreadsheet.
// // // //         data: [
// // // //           {
// // // //             range: `AUTO VIRTUAL BABELATHOME!A2:Z`,
// // // //             majorDimension: "ROWS",
// // // //             values: payments
// // // //           }
// // // //         ],  // TODO: Update placeholder value.
  
// // // //         // TODO: Add desired properties to the request body.
// // // //       },
// // // //     });

// // // //     return updateSheetPromise.then((result)=>{
// // // //       // console.log('theresult: ', result);
// // // //       return res.status(200).send({
// // // //         success:true,
// // // //         data: 'data',
// // // //         payments: payments,
// // // //       });
// // // //     });
// // // //   });
// // // // });

// // // // add virtual class payment to sheet
// // // exports.addVptPaymentToSheets = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments')
// // //     // .where('type', '==', 'vClass').get();
// // //     .where('paid', '==', true)
// // //     .get()
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const paymentResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     var userMap = {};
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //       }
// // //     });

// // //     var payments = [];
// // //     paymentResults.forEach(payment=>{
// // //       if (payment && payment.data()){
// // //         const data = payment.data();
// // //         if (data.type === 'virtualTraining'|| data.type === 'vClass'){
// // //           const createdAt = data.createdAt? data.createdAt:null;
// // //           const userId = data.userId? data.userId:null;
// // //           const userData = userId ? userMap[userId]:null;
// // //           const userName = userData? userData.name? userData.name : " " : " ";
// // //           const userEmail = userData? userData.email? userData.email: " " : " ";
// // //           const phone = userData? userData.phone? userData.phone: " ":" ";
// // //           const invoiceId = data.invoiceId? data.invoiceId:" ";
// // //           const packageId = data.packageId? data.packageId:" ";
// // //           const quantity = data.quantity? data.quantity:" ";
// // //           const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // //           const source = data.source? data.source:" ";
// // //           const status = data.status? data.status:" ";
// // //           const totalPrice = data.totalPrice? data.totalPrice:0;
// // //           const type = data.type? data.type:" ";
// // //           const transactionId = data.transactionId? data.transactionId:" ";
// // //           const vendProductId = data.vendProductId? data.vendProductId:" ";
// // //           const productName = data.productName? data.productName: " ";
// // //           const trainerName = data.trainerName? data.trainerName: " ";
// // //           const selectedAMPM = data.selectedAMPM? data.selectedAMPM: " ";
// // //           const selectedDay = data.selectedDay? data.selectedDay: " ";
// // //           const AM = selectedAMPM.AM? 'yes':'no';
// // //           const PM = selectedAMPM.PM? 'yes':'no';
// // //           const mon = selectedDay.mon? 'yes':'no';
// // //           const tues = selectedDay.tues? 'yes':'no';
// // //           const wed = selectedDay.wed? 'yes':'no';
// // //           const thurs = selectedDay.thurs? 'yes':'no';
// // //           const fri = selectedDay.fri? 'yes':'no';
// // //           const sat = selectedDay.sat? 'yes':'no';
// // //           const sun = selectedDay.sun? 'yes':'no';
// // //           const className = data.className? data.className:'';
  
// // //           const paymentData = [
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // //             userName,
// // //             userEmail,
// // //             invoiceId,
// // //             status,
// // //             totalPrice,
// // //             type,
// // //             phone,
// // //             transactionId,
// // //             // vendProductId,
// // //             productName,
// // //             trainerName,
// // //             className,
// // //             AM, PM,
// // //             mon, tues, wed, thurs, fri, sat, sun
// // //           ];
// // //           payments.push(paymentData);
// // //         }
// // //       }
// // //     });

// // //     payments.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `AUTO VIRTUAL PAYMENT!A2:W`,
// // //             majorDimension: "ROWS",
// // //             values: payments
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         payments: payments,
// // //       });
// // //     });
// // //   });
// // // });

// // // // add virtual payment to sheet
// // // exports.addVTPaymentToSheets = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments')
// // //   // .where('type', '==', 'vClass').get();
// // //   .where('paid', '==', true)
// // //   .get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const paymentResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     var userMap = {};
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //       }
// // //     });

// // //     var payments = [];
// // //     paymentResults.forEach(payment=>{
// // //       if (payment && payment.data()){
// // //         const data = payment.data();
// // //         if (data.type === 'virtualTraining'|| data.type === 'vClass'){
// // //           const createdAt = data.createdAt? data.createdAt:null;
// // //           const userId = data.userId? data.userId:null;
// // //           const userData = userId ? userMap[userId]:null;
// // //           const userName = userData? userData.name? userData.name : " " : " ";
// // //           const userEmail = userData? userData.email? userData.email: " " : " ";
// // //           const phone = userData? userData.phone? userData.phone: " ":" ";
// // //           const invoiceId = data.invoiceId? data.invoiceId:" ";
// // //           const packageId = data.packageId? data.packageId:" ";
// // //           const quantity = data.quantity? data.quantity:" ";
// // //           const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // //           const source = data.source? data.source:" ";
// // //           const status = data.status? data.status:" ";
// // //           const totalPrice = data.totalPrice? data.totalPrice:0;
// // //           const type = data.type? data.type:" ";
// // //           const transactionId = data.transactionId? data.transactionId:" ";
// // //           const vendProductId = data.vendProductId? data.vendProductId:" ";
// // //           const productName = data.productName? data.productName: " ";
// // //           const trainerName = data.trainerName? data.trainerName: " ";
// // //           const selectedAMPM = data.selectedAMPM? data.selectedAMPM: " ";
// // //           const selectedDay = data.selectedDay? data.selectedDay: " ";
// // //           const AM = selectedAMPM.AM? 'yes':'no';
// // //           const PM = selectedAMPM.PM? 'yes':'no';
// // //           const mon = selectedDay.mon? 'yes':'no';
// // //           const tues = selectedDay.tues? 'yes':'no';
// // //           const wed = selectedDay.wed? 'yes':'no';
// // //           const thurs = selectedDay.thurs? 'yes':'no';
// // //           const fri = selectedDay.fri? 'yes':'no';
// // //           const sat = selectedDay.sat? 'yes':'no';
// // //           const sun = selectedDay.sun? 'yes':'no';
// // //           const className = data.className? data.className:'';
  
// // //           const paymentData = [
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // //             userName,
// // //             userEmail,
// // //             invoiceId,
// // //             status,
// // //             totalPrice,
// // //             type,
// // //             phone,
// // //             transactionId,
// // //             // vendProductId,
// // //             productName,
// // //             trainerName,
// // //             className,
// // //             AM, PM,
// // //             mon, tues, wed, thurs, fri, sat, sun
// // //           ];
// // //           payments.push(paymentData);
// // //         }
// // //       }
// // //     });

// // //     payments.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `AUTO VIRTUAL PAYMENT!A2:W`,
// // //             majorDimension: "ROWS",
// // //             values: payments
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         payments: payments,
// // //       });
// // //     });
// // //   });
// // // });

// // // // add unpaid invoice to sheet
// // // exports.addUnpaidInvoiceToSheets = functions.https.onRequest((req, res) => {
// // //   const invoiceQuery = admin.firestore().collection('invoices').where('paid', '==', false).where('type', '==', 'membership').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //   .where('authorized', '==', true)
// // //   .where('createdAt', '>=', moment('2021-02-01').startOf('day').toDate())
// // //   .orderBy('createdAt', 'desc')
// // //   // .limit(1)
// // //   .get();

// // //   return Promise.all([invoiceQuery, usersQuery, packagesQuery, gantnerQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const invoiceResults = result[0];
// // //     const userResults = result[1];
// // //     const packageResults = result[2];
// // //     const gantnerResults = result[3];

// // //     var userMap = {};
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //       }
// // //     });

// // //     var packageMap = {};
// // //     packageResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const renewalTerm = data && data.renewalTerm;
// // //       if (data && (renewalTerm==='month'||renewalTerm==='monthly')){
// // //         packageMap[doc.id] = data;
// // //       }
// // //     });

// // //     var gantnerMap = {};
// // //     gantnerResults && gantnerResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const userId = data && data.userId;
// // //       const createdAt = data && data.createdAt;
// // //       gantnerMap[userId]=data;
// // //       if (gantnerMap[userId].createdAt 
// // //         // && moment(getTheDate(gantnerMap[userId].createdAt)).isAfter(moment(getTheDate(createdAt)))
// // //         && moment(getTheDate(createdAt)).isAfter(moment(getTheDate(gantnerMap[userId].createdAt)))
// // //         ){
// // //         // replace with the new data
// // //         gantnerMap[userId]=data;
// // //       }
// // //       // else{
// // //       //   gantnerMap[userId]=data;
// // //       // }
// // //       //gantnerMap[userId]=data;
// // //     });

// // //     var invoices = [];
// // //     invoiceResults.forEach(invoice=>{
// // //       if (invoice && invoice.data()){
// // //         const data = invoice.data();
// // //         const createdAt = data.createdAt? data.createdAt:null;
// // //         const userId = data.userId? data.userId:null;
// // //         const userData = userId ? userMap[userId]:null;
// // //         const userName = userData? userData.name? userData.name : " " : " ";
// // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // //         const membershipEnd = userData? userData.autoMembershipEnds? 
// // //           moment(getTheDate(userData.autoMembershipEnds)).format('YYYYMMDD') : userData.membershipEnd? 
// // //           moment(getTheDate(membershipEnd)).format('YYYYMMDD') : " " : " ";
       
// // //         const invoiceId = invoice.id;
// // //         const quantity = data.quantity? data.quantity:" ";
// // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // //         const tax = data.tax? data.tax:0;
// // //         const type = data.type? data.type:" ";
// // //         const packageId = data.packageId? data.packageId:" ";
// // //         const packageData = packageId? packageMap[packageId]:null;
// // //         const packageName = packageData? packageData.name:" ";
// // //         const userPkgId = userData && userData.packageId;
// // //         const userPkgData = userPkgId? packageMap[userPkgId]:null;
// // //         const userPkgName = userPkgData? userPkgData.name:" ";
// // //         const paid = data.paid? data.paid:" ";
// // //         const invoiceMailed = data.invoiceMailed? data.invoiceMailed: " ";
// // //         const invoiceMailedAt = data.invoiceMailedAt? moment(getTheDate(data.invoiceMailedAt)).format('YYYYMMDD'):" ";
// // //         const promoJan2020 = userData? userData.promoJan2020? userData.promoJan2020:" ":" ";
// // //         const hasRecurring = userData? userData.hasRecurring? userData.hasRecurring:false:false;
// // //         const amount = data.amount? data.amount:' ';
// // //         const gantnerData = gantnerMap[userId]||null;
// // //         const lastCheckIn = (gantnerData && gantnerData.createdAt)? moment(getTheDate(gantnerData.createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'):'no last check in';

// // //         const paymentItems = data.paymentItems? data.paymentItems:null;

// // //         const invoiceData = [
// // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // //           userName,
// // //           userEmail,
// // //           membershipEnd,
// // //           quantity,
// // //           invoiceId,
// // //           tax,
// // //           totalPrice,
// // //           amount,
// // //           type,
// // //           packageName,
// // //           userPkgName,
// // //           invoiceMailed, invoiceMailedAt,
// // //           promoJan2020,
// // //           paid,
// // //           hasRecurring,
// // //           lastCheckIn
// // //         ];
// // //         invoices.push(invoiceData);
// // //       }
// // //     });

// // //     invoices.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `UNPAID INVOICES!A2:V`,
// // //             majorDimension: "ROWS",
// // //             values: invoices
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         invoices: invoices,
// // //       });
// // //     });
// // //   });
// // // });


// // // exports.addMCOFreezeToSheets = functions.https.onRequest((req, res) => {
// // //   const specialFreezeQuery = admin.firestore().collection('payments').where('source', '==', 'freeze').where('type', '==', 'membership').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();

// // //   return Promise.all([specialFreezeQuery, usersQuery, packagesQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const freezeResults = result[0];
// // //     const userResults = result[1];
// // //     const packageResults = result[2];

// // //     var packageMap = {};
// // //     packageResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const renewalTerm = data && data.renewalTerm;
// // //       if (data){
// // //         packageMap[doc.id] = data;
// // //       }
// // //     });

// // //     var freezesArray = [];
// // //     var freezeMap = {};
// // //     var mcoSpecialFreeze = {};

// // //     freezeResults.forEach(result=>{
// // //       if (result && result.data()){
// // //         const data = result.data();
// // //         const freezeFor = data && data.freezeFor;
// // //         const freezeType = data && data.freezeType && data.freezeType === 'specialFreeze';
// // //         const userId = data && data.userId;
// // //         const notes = data && data.notes;
// // //         if (userId && freezeFor 
// // //           // && moment(getTheDate(freezeFor)).isBetween(moment('20201212'), moment('20200113'))
// // //           && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20201212')) && moment(getTheDate(freezeFor)).isBefore(moment('20210112'))
// // //           ){
// // //           freezeMap[userId] = data;
// // //         }

// // //         if (userId && freezeFor 
// // //           && moment(getTheDate(freezeFor)).isSameOrAfter(moment('20210101')) && moment(getTheDate(freezeFor)).isBefore(moment('20210201'))
// // //           && freezeType
// // //           ){
// // //             mcoSpecialFreeze[userId] = data;
// // //           }
// // //       }
// // //     });

// // //     var userMap = {};
// // //     var userArray = [];
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const packageId = data && data.packageId;
// // //       const membershipStarts = data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
// // //       const membershipEnds = data.autoMembershipEnds ? data.autoMembershipEnds : data.membershipEnds;
// // //       const cancelMember = data.cancellationDate? true:false;
// // //       const freezeData = freezeMap[doc.id];
// // //       const freezeForDate = freezeData && freezeData.freezeFor;
// // //       const freezeSource = freezeData && freezeData.source;
// // //       const freezeType = freezeData && freezeData.freezeType;
// // //       const email = data && data.email;
// // //       const name = data && data.name;
// // //       const phone = data && data.phone;
// // //       const packageData = packageId && packageMap[packageId];
// // //       const packageName = packageData && packageData.name;
// // //       const freezeDataSpecial = mcoSpecialFreeze[doc.id];
// // //       const freezeForDateSpecial = freezeDataSpecial && freezeDataSpecial.freezeFor;

// // //       if (data && packageId 
// // //         && membershipStarts && membershipEnds 
// // //         && !cancelMember 
// // //         // && freezeData
// // //         ){
// // //         // userMap[doc.id] = data;
// // //         userArray.push([
// // //           email? email:'',
// // //           name? name:'',
// // //           phone? phone:'',
// // //           packageName? packageName:'',
// // //           freezeForDate? moment(getTheDate(freezeForDate)).tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'):'',
// // //           freezeSource? freezeSource:'',
// // //           freezeType? freezeType: '',
// // //           freezeForDateSpecial? moment(getTheDate(freezeForDateSpecial)).tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'):''
// // //         ]);
// // //       }
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `MCO freeze 3.0!A2:M`,
// // //             majorDimension: "ROWS",
// // //             values: userArray
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         // data: freezeMap,
// // //         // invoices: userArray,
// // //       });
// // //     });
// // //   });
// // // });

// // // // // // add all invoice to sheets
// // // // // exports.addMembershipInvoiceToSheets = functions.https.onRequest((req, res) => {
// // // // //   const invoiceQuery = admin.firestore().collection('invoices').where('type', '==', 'membership').get();
// // // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();

// // // // //   return Promise.all([invoiceQuery, usersQuery, packagesQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const invoiceResults = result[0];
// // // // //     const userResults = result[1];
// // // // //     const packageResults = result[2];

// // // // //     var userMap = {};
// // // // //     userResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       if (data){
// // // // //         userMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var packageMap = {};
// // // // //     packageResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       const renewalTerm = data && data.renewalTerm;
// // // // //       if (data && (renewalTerm==='month'||renewalTerm==='monthly')){
// // // // //         packageMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var invoices = [];
// // // // //     invoiceResults.forEach(invoice=>{
// // // // //       if (invoice && invoice.data()){
// // // // //         const data = invoice.data();
// // // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // // //         const userId = data.userId? data.userId:null;
// // // // //         const userData = userId ? userMap[userId]:null;
// // // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // // // //         const membershipEnd = userData? userData.autoMembershipEnds? 
// // // // //           moment(getTheDate(userData.autoMembershipEnds)).format('YYYYMMDD') : userData.membershipEnd? 
// // // // //           moment(getTheDate(membershipEnd)).format('YYYYMMDD') : " " : " ";
       
// // // // //         const invoiceId = invoice.id;
// // // // //         const quantity = data.quantity? data.quantity:" ";
// // // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // // //         const tax = data.tax? data.tax:0;
// // // // //         const type = data.type? data.type:" ";
// // // // //         const packageId = data.packageId? data.packageId:" ";
// // // // //         const packageData = packageId? packageMap[packageId]:null;
// // // // //         const packageName = packageData? packageData.name:" ";
// // // // //         const userPkgId = userData && userData.packageId;
// // // // //         const userPkgData = userPkgId? packageMap[userPkgId]:null;
// // // // //         const userPkgName = userPkgData? userPkgData.name:" ";
// // // // //         const paid = data.paid? data.paid:" ";
// // // // //         const invoiceMailed = data.invoiceMailed? data.invoiceMailed: " ";
// // // // //         const invoiceMailedAt = data.invoiceMailedAt? moment(getTheDate(data.invoiceMailedAt)).format('YYYYMMDD'):" ";
// // // // //         const promoJan2020 = userData? userData.promoJan2020? userData.promoJan2020:" ":" ";
// // // // //         const promoAug2020 = userData? userData.promoAug2020? userData.promoAug2020:" ":" ";
// // // // //         const hasRecurring = userData? userData.hasRecurring? userData.hasRecurring:false:false;
// // // // //         const amount = data.amount? data.amount:' ';
// // // // //         const transactionId = data.transactionId? data.transactionId: '';
// // // // //         const paymentId = data.paymentId? data.paymentId: '';

// // // // //         const paymentItems = data.paymentItems? data.paymentItems:null;

// // // // //         const invoiceData = [
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DDTHH:mm:ss') : '',
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // // // //           userName,
// // // // //           userEmail,
// // // // //           membershipEnd,
// // // // //           quantity,
// // // // //           invoiceId, transactionId, paymentId,
// // // // //           tax,
// // // // //           totalPrice,
// // // // //           amount,
// // // // //           type,
// // // // //           packageName,
// // // // //           userPkgName,
// // // // //           invoiceMailed, invoiceMailedAt,
// // // // //           promoJan2020, promoAug2020,
// // // // //           paid,
// // // // //           hasRecurring
// // // // //         ];
// // // // //         invoices.push(invoiceData);
// // // // //       }
// // // // //     });

// // // // //     invoices.sort((a,b)=>{
// // // // //       var dateA = new Date(a[0]);
// // // // //       var dateB = new Date(b[0]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     // console.log('payments: ', payments);

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `AUTO INVOICES!A2:Z`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: invoices
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },
// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         invoices: invoices,
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // // exports.getGantnerLogsByUserId = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const userId = itemData.userId ? itemData.userId:'yZrP7XrUaZkGDTNrzeMQ';
// // //   // const userQuery = admin.firestore().collection('user').doc(userId).get();
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //     .where('userId', '==', userId).get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantnerRes = result[0];
// // //     var gantnerLogsByUserIdObj = {};
// // //     var gantnerLogsByUserIdArray = [];

// // //     var gantnerCount = 0;

// // //     var batch = admin.firestore().batch();

// // //     gantnerRes && gantnerRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const createdAt = data && data.createdAt;
// // //       const deviceId = data && data.deviceId;
// // //       const devicelocation = deviceId.includes("KLCC")? "KLCC":"TTDI";
// // //       if (!gantnerLogsByUserIdObj[userId]){
// // //         gantnerLogsByUserIdObj[userId]={};
// // //       }
// // //       else if (!gantnerLogsByUserIdObj[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]){
// // //         gantnerLogsByUserIdObj[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]={};
// // //       }
// // //       //else{
// // //         gantnerLogsByUserIdObj[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {
// // //           loc:devicelocation, in:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')
// // //         } 
// // //         // gantnerLogsByUserIdArray.push(gantnerLogsByUserIdObj);
// // //         // gantnerLogsByUserIdObj[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]=gantnerLogsByUserIdArray
// // //       //}
      
// // //     });

// // //     var gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(userId);
// // //     batch.set(gantnerRef, gantnerLogsByUserIdObj[userId]);
// // //     gantnerCount++;

// // //     return batch.commit().then(()=>{
// // //       return res.status(200).send({
// // //         success:true,
// // //         gantnerLogsByUserIdObj,
// // //         gantnerCount
// // //         // gantnerLogsByUserIdArray
// // //       })
// // //     }).catch(error=>{
// // //       return res.status(200).send({
// // //         success:false,
// // //         error
// // //       })
// // //     })
// // //   });
// // // });

// // // // for several userIds
// // // exports.getGantnerLogsByUserIds = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const userIds = itemData.userIds ? itemData.userIds:['yZrP7XrUaZkGDTNrzeMQ'];
// // //   // const userQuery = admin.firestore().collection('user').doc(userId).get();
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //     .where('authorized', '==', true)
// // //     .get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantnerRes = result[0];
// // //     var gantnerLogsByUserIdObj = {};
// // //     var gantnerLogsByUserIdArray = [];

// // //     var gantnerCount = 0;

// // //     var batch = admin.firestore().batch();

// // //     gantnerRes && gantnerRes.forEach(doc=>{
// // //       const theData = doc.data();
// // //       const createdAt = theData && theData.createdAt;
// // //       const deviceId = theData && theData.deviceId;
// // //       const devicelocation = deviceId.includes("KLCC")? "KLCC":"TTDI";
// // //       const userId = theData && theData.userId;

// // //       if (userIds.includes(userId)){
// // //         if (!gantnerLogsByUserIdObj[userId]){
// // //           gantnerLogsByUserIdObj[userId]={};
// // //         }
// // //         // else if (!gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]){
// // //         //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]={};
// // //         // }
// // //         // else if (!gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]){
// // //         //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]={};
// // //         // }
// // //         // seperate by klcc n ttdi
// // //         //else{
// // //           if (devicelocation === 'KLCC'){
// // //             gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}`]['KLCC']=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //             // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //             // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`] = {
// // //             //   in:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')
// // //             // } 
// // //           }
// // //           else if (devicelocation === 'TTDI'){
// // //             gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}`]['TTDI']=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //             // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //             // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`] = {
// // //             //   in:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')
// // //             // } 
// // //           }
         
// // //           // gantnerLogsByUserIdArray.push(gantnerLogsByUserIdObj);
// // //           // gantnerLogsByUserIdObj[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]=gantnerLogsByUserIdArray
// // //         //}
       
// // //       }
// // //     });

// // //     userIds && userIds.forEach(userId=>{
// // //       if (gantnerCount<499){
// // //         var gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(userId);
// // //         batch.set(gantnerRef, gantnerLogsByUserIdObj[userId]);
// // //         gantnerCount++;
// // //       }
// // //     });

// // //    if (gantnerCount<499){
// // //     return batch.commit().then(()=>{
// // //       return res.status(200).send({
// // //         success:true,
// // //         gantnerLogsByUserIdObj,
// // //         gantnerCount
// // //         // gantnerLogsByUserIdArray
// // //       })
// // //     }).catch(error=>{
// // //       return res.status(200).send({
// // //         success:false,
// // //         error
// // //       })
// // //     })
// // //    }
// // //    else{
// // //     return res.status(200).send({
// // //       success:false,
// // //       error:'more than 500 batch'
// // //     })
// // //    }
// // //   });
// // // });

// // // // for userIds
// // // exports.getGantnerLogsByAllUserIds = functions.https.onRequest((req, res) => {
// // //   // const itemData = req.body;
// // //   // const userIds = itemData.userIds ? itemData.userIds:['yZrP7XrUaZkGDTNrzeMQ'];
// // //   // const userQuery = admin.firestore().collection('user').doc(userId).get();
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //     .where('authorized', '==', true)
// // //     // .where('userId', '==', 'fNTug3upcFfnUIntyucVmW9BCG22')
// // //     .get();     

// // //   // const gantnerByUserIdQuery = admin.firestore().collection('gantnerLogs')
// // //   //   .where('authorized', '==', true)
// // //   //   .get();
// // //   // const userQuery = admin.firestore().collection('users')
// // //   //   .limit(100)
// // //   //   .get();

// // //   // const gantnerLogQuery = admin.firestore().collection('gantnerLogsByUser').get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantnerRes = result[0];
// // //     var gantnerLogsByUserIdObj = {};
// // //     var gantnerLogsByUserIdArray = [];
// // //     // const userRes = result[1];

// // //     var gantnerCount = 0;
// // //     var allGantnerCount = 0;

// // //     var batch = admin.firestore().batch();

// // //     // var todayDateString = moment().format('YYYY-MM-DD');

// // //     gantnerRes && gantnerRes.forEach(doc=>{
// // //       const theData = doc.data();
// // //       const createdAt = theData && theData.createdAt;
// // //       const deviceId = theData && theData.deviceId;
// // //       const devicelocation = deviceId.includes("KLCC")? "KLCC":"TTDI";
// // //       const userId = theData && theData.userId;
// // //       // const isManualCheckIn = deviceId.includes("Manual")? "Manual":"Gncard"; // put 6 chars so its easier to string splice/split
// // //       const isManualCheckIn = deviceId.includes("Manual")? true:false;

// // //       if (!gantnerLogsByUserIdObj[userId]){
// // //         gantnerLogsByUserIdObj[userId]={};
// // //       }
// // //       // else if (!gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]){
// // //       //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]={};
// // //       // }
// // //       // else if (!gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]){
// // //       //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]={};
// // //       // }
// // //       // seperate by klcc n ttdi
// // //       //else{
// // //         var gantnerDate = moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD');
// // //         var gantnerTime = isManualCheckIn? `Manual_${moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')}`:`${moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')}`;
// // //         // var gantnerTime = `${isManualCheckIn}_${moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')}`;

// // //         if(!gantnerLogsByUserIdObj[userId][gantnerDate]){
// // //           gantnerLogsByUserIdObj[userId][gantnerDate] = {};
// // //          }
// // //         if(!gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation]){
// // //           gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation] = [gantnerTime];
// // //         }
// // //           //else gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);       
          
// // //         else {
// // //             var biggerThan15mins = true;
// // //             gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].forEach((time,index)=>{ 

// // //               // console.log('Math.abs(moment(`${gantnerDate} ${time}`).diff(moment(`${gantnerDate} ${gantnerTime}`), : ', Math.abs(moment(`${gantnerDate} ${time}`).diff(moment(`${gantnerDate} ${gantnerTime}`), 'seconds')));
// // //               // const splitTime = time && time.split(':');
// // //               // const splitGantnerTime = gantnerTime && gantnerTime.split(':');
// // //               // const startDate = new Date(0, 0, 0, splitTime[0], splitTime[1], 0);
// // //               // const endDate = new Date(0, 0, 0, splitGantnerTime[0], splitGantnerTime[1], 0);
// // //               var splitGantnerDate = [gantnerDate.substring(4), '-', gantnerDate.substring(4, 6), '-', gantnerDate.substring(6, 8)].join('');

              
// // //               // if (splitTime)
// // //             if (Math.abs(moment(`${splitGantnerDate} ${time}`).diff(moment(`${splitGantnerDate} ${gantnerTime}`), 'seconds') < 900))
// // //               biggerThan15mins = false;
// // //           });
        
// // //           if(biggerThan15mins){
// // //             gantnerLogsByUserIdObj[userId][gantnerDate][devicelocation].push(gantnerTime);
// // //           }
// // //         }
        


// // //         // if (devicelocation === 'KLCC'){
// // //         //   // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`]=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //         //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`] = {
// // //         //     KLCC:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss'),
// // //         //     // out:
// // //         //   } 
// // //         // }
// // //         // else if (devicelocation === 'TTDI'){
// // //         //   // gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`]=moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss');
// // //         //   gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_TTDI`] = {
// // //         //     in:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss')
// // //         //   } 
// // //         // }

// // //         // for compare with the previous check-in
// // //         // if (moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment(gantnerLogsByUserIdObj[userId][`${(moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD'))}_KLCC`].in).tz('Asia/Kuala_Lumpur'))
// // //         //   && 
// // //         // ){

// // //         // }
// // //     });

// // //     // for sorting

// // //     Object.entries(gantnerLogsByUserIdObj).forEach(([id,dates])=> {

// // //       Object.entries(dates).forEach(([date,locations])=> {
// // //         Object.entries(locations).forEach(([location,times])=> {
// // //           times && times.sort();
// // //           // if (times && times.length>1){
// // //           //   // times && times.sort((a,b)=>{
// // //           //   //   const timeA = a[0];
// // //           //   //   const timeB = b[0];
// // //           //   //   if (timeA>timeB){return 1}
// // //           //   //   else if (timeA<timeB){return -1}
// // //           //   //   return 0;
// // //           //   // });
// // //           // }
          
// // //           // sort(times)
// // //           // var a;
// // //           // times.forEach(data, index, array){
// // //           //   if (!a)
// // //           //     a = data;
// // //           //   else let b = data;
// // //           //   if (b-a < 15 mins){
// // //           //     times.pop(b)
// // //           //   }
// // //           //   a = b;
// // //           // }
// // //         });
// // //       })
// // //     });



// // //     // userRes && userRes.forEach(doc=>{
// // //     //   const data = doc.data();
// // //     //   const userId = doc.id;
// // //       Object.entries(gantnerLogsByUserIdObj).forEach(([key,value]) => {
// // //         // console.log("The key: ",k)
// // //         // console.log("The value: ",v)
// // //         var gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(key);
// // //         batch.set(gantnerRef, gantnerLogsByUserIdObj[key]);
// // //         if(gantnerCount >= 499){
// // //           batch.commit();
// // //           gantnerCount = 0;
// // //           batch = admin.firestore().batch();
// // //         }
// // //         gantnerCount += 1;
// // //         allGantnerCount+=1;
// // //       });
      
// // //     // });
// // //     // userIds && userIds.forEach(userId=>{
// // //     //   if (gantnerCount<499){
// // //     //     var gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(userId);
// // //     //     batch.set(gantnerRef, gantnerLogsByUserIdObj[userId]);
// // //     //     gantnerCount++;
// // //     //   }
// // //     // });

// // //    if (gantnerCount>0){
// // //     return batch.commit().then(()=>{
// // //       return res.status(200).send({
// // //         success:true,
// // //         // gantnerLogsByUserIdObj,
// // //         gantnerCount,
// // //         allGantnerCount,
        
// // //         // gantnerLogsByUserIdArray
// // //       })
// // //     }).catch(error=>{
// // //       return res.status(200).send({
// // //         success:false,
// // //         error
// // //       })
// // //     })
// // //    }
// // //    else{
// // //     return res.status(200).send({
// // //       success:false,
// // //       error:'more than 500 batch'
// // //     })
// // //    }
// // //   });
// // // });

// // // exports.transferGantnerLogsByUserId = functions.https.onRequest((req, res) => {
// // //   const itemData = req.body;
// // //   const startDate = itemData.startDate ? itemData.startDate:'20210301';
// // //   const endDate = itemData.endDate? itemData.endDate:'20210331' ;

// // //   const userQuery = admin.firestore().collection('users')
// // //     .where('joinDate', '>=', moment(startDate).startOf('day').toDate())
// // //     .where('joinDate', '<=', moment(endDate).startOf('day').toDate())
// // //     .get();

// // //   return Promise.all([userQuery]).then(result=>{
// // //     const userRes = result[0];

// // //     var userMap = {};
// // //     var userCount = 0;
// // //     var gantnerLogsByUserIdMap = {};
// // //     var gantnerLogsByUserIdArray = [];
// // //     var userIds = [];

// // //     userRes && userRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const userId = doc.id;
// // //       // var gantnerLogRef = admin.firestore().collection('gantnerLogs')
// // //       //   .where('userId', '==', userId).get();
// // //       // var gantnerLogByUserRef = admin.firestore().collection('gantnerLogsByUser')
// // //       //   .doc(userId).get();
      
// // //         userCount++;
// // //         // theUserId = userId;
// // //         userIds.push(userId);


// // //       // return Promise.all([gantnerLogRef, gantnerLogByUserRef]).then(results=>{
// // //       //   const gantnerLogRefRes = results[0];
// // //       //   const gantnerLogByUserRefRes = results[1];

// // //       //   gantnerLogRefRes && gantnerLogRefRes.forEach(doc=>{
// // //       //     const data = doc.data();
// // //       //     const userId = data && data.userId;
// // //       //     const createdAt = data && data.createdAt;
// // //       //     const deviceId = data && data.deviceId;

// // //       //     console.log('theDeviceId: ', deviceId);

// // //       //     if (userId && deviceId && createdAt){
// // //       //       const devicelocation = deviceId.includes("KLCC")? "KLCC":"TTDI";
// // //       //       if(!gantnerLogsByUserIdMap[userId]){
// // //       //         gantnerLogsByUserIdMap[userId] = {};
// // //       //       }
// // //       //       if (!gantnerLogsByUserIdMap[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]){
// // //       //         gantnerLogsByUserIdMap[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {};
// // //       //       }

// // //       //       gantnerLogsByUserIdMap[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]={
// // //       //         devicelocation, checkIn:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss')
// // //       //       }
// // //       //     }
// // //       //   }); 

// // //       //   return res.status(200).send({
// // //       //     success:true,
// // //       //     userMap,
// // //       //     gantnerLogsByUserIdMap,
// // //       //     userCount
// // //       //   });
// // //       // });
// // //       // gantnerLogRef.then((doc)=>{

// // //       //   //console.log('gantnerLogRef docSnapShot: ', docSnapShot);
// // //       //   // if (docSnapShot.exists){
// // //       //   //   console.log('gantnerLogRef is exist');
// // //       //   //   docSnapShot.onSnapshot((doc)=>{
// // //       //   //     console.log('gantnerLogRef doc', doc);
// // //       //   //   });
// // //       //   // }
// // //       //   // else{
// // //       //   //   console.log('gantnerLog doesnt exist');
// // //       //   // }
// // //       // });

// // //       // userMap[userId]=data;
// // //       // userCount+=1;
// // //     });

    
// // //     const corsFn = cors({ origin: true });
    
// // //     return corsFn(req, res, () => {
// // //       if (req.method === 'POST') {
// // //         res.contentType('application/json');
// // //         const theOption = {
// // //           url: 'https://us-central1-babelasia-37615.cloudfunctions.net/getGantnerLogsByUserIds',
// // //           method: 'POST',
// // //           headers: {'content-type': 'application/json'},
// // //           body:{userIds: userIds},
// // //           json:true
// // //         }
// // //         request(theOption, (error, response, body) => {
// // //             if (!response){
// // //               res.send({ error: 'no response', body });
// // //             }
// // //             else if (response.statusCode === 200) {
// // //                 console.log('Status:', response.statusCode, response.statusMessage);

// // //                 // console.log('Info:', {data:body});
// // //                 // console.log('paymentResponse: ', response);
// // //                 // console.log('paymentBody: ', body);
// // //                 res.json(response.statusCode, {data:body});
// // //             }
// // //             else {
// // //                 console.log('Status:', response.statusCode, response.statusMessage);
// // //                 console.log('Error:', error);
// // //                 console.log('Info:', body);
// // //                 res.status(response.statusCode).send({ success:false, error, body });
// // //             }
// // //         });
// // //       }
// // //       else{
        
// // //       }
// // //     });
// // //     // return res.status(200).send({
// // //     //   success:true,
// // //     //   userMap,
// // //     //   gantnerLogsByUserIdMap,
// // //     //   userCount
// // //     // });
// // //   });
// // // });

// // // exports.transferGantnerLogsToGantnerLogsByUserId = functions.https.onRequest((req, res) => {
  
// // //   const itemData = req.body;
// // //   const startDate = itemData.startDate ? itemData.startDate:'20210301';
// // //   const endDate = itemData.endDate? itemData.endDate:'20210331' ;

// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //   .where('authorized', '==', true)
// // //   .where('createdAt', '>=', moment(startDate).startOf('day').toDate())
// // //   .where('createdAt', '<=', moment(endDate).startOf('day').toDate())
// // //   .get();

// // //   //const userQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantRes = result[0];

// // //     var batch = admin.firestore().batch();

// // //     var userGantnerArray = [];
// // //     var userGantnerObj = {}; 

// // //     var createdAtArray = []
// // //     var createdAtObj = {};

// // //     var gantnerCount = 0;
// // //     var existGantnerCount = 0;
// // //     var gantnerTotalCount = 0;

// // //     var userGantnerArrayCollections = {};

// // //     gantRes && gantRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const userId = data && data.userId;
// // //       const createdAt = data && data.createdAt;
// // //       const deviceId = data && data.deviceId;

// // //       if (userId && deviceId && createdAt && deviceId){
 
// // //         const devicelocation = deviceId.includes("KLCC")? "KLCC":"TTDI";
// // //         // userGantnerArray = userGantnerObj[userId] || [];
        
// // //         // data.createdAtFormat = moment(getTheDate(createdAt)).format('YYYYMMDD');
       
// // //         // createdAtArray = creadtedAtObj[moment(getTheDate(createdAt)).format('YYYYMMDD')] || [];
// // //         // createdAtArray.push({
// // //         //   checkIn:createdAt,
// // //         //   location:devicelocation
// // //         // });
// // //         // creadtedAtObj[moment(getTheDate(createdAt)).format('YYYYMMDD')] = createdAtArray;
        
// // //         // userGantnerArray.push(creadtedAtObj);
// // //         // userGantnerObj[userId] = userGantnerArray;


// // //       if(!userGantnerArrayCollections[userId]){
// // //         userGantnerArrayCollections[userId] = {};
// // //      }
// // //       if(!userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]){
// // //         userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {};
// // //         userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {
// // //           createdAtFormat:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss'),
// // //           devicelocation,
// // //           // checkIn:createdAt,
// // //           // userId
// // //         };
// // //       }
// // //       else if(new Date(userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]["createdAtFormat"]) > createdAt){
// // //       // else if(new Date(userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]) > createdAt){  
// // //         userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).format('YYYYMMDD')] = {
// // //           createdAtFormat:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss'),
// // //           devicelocation,
// // //           // checkIn:createdAt,
// // //           // userId
// // //         };        
// // //       }
      
// // //       const gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(userId);
// // //       var refIsExist = false;

// // //       batch.set(gantnerRef, userGantnerArrayCollections[userId]);
// // //       gantnerCount++;
// // //       // gantnerRef.get().then((docSnapshot)=>{
// // //       //   if (docSnapshot.exists) {
// // //       //     // gantnerCount++;
// // //       //     refIsExist=true;
// // //       //     existGantnerCount+=1;
// // //       //     batch.set(gantnerRef, userGantnerArrayCollections[userId]);
// // //       //   }
// // //       //   else{
// // //       //     refIsExist=false;
// // //       //     batch.set(gantnerRef, userGantnerArrayCollections[userId]);
// // //       //     if(gantnerCount >= 200){
// // //       //       return batch.commit().then(()=>{
// // //       //         return res.status(200).send({
// // //       //           success:true,
// // //       //           gantnerCount
// // //       //         });
// // //       //       });
// // //       //       // gantnerCount = 0;
// // //       //       // batch = admin.firestore().batch();
// // //       //     }
// // //       //     gantnerCount += 1;
// // //       //     gantnerTotalCount+=1;
// // //       //   }
// // //       // });

      
     

// // //       // if (gantnerCount<499 && !refIsExist){
// // //       //   gantnerCount++;

// // //       //   batch.set(gantnerRef, userGantnerArrayCollections[userId]);
// // //       // }
// // //       // else{
// // //       //   gantnerCount = 0;
// // //       //   return Promise.resolve();
// // //       // }

// // //         // userGantnerArray[userId] = []; 
// // //         // userGantnerObj = {
// // //         //   checkIn:createdAt, 
// // //         //   checkInFormat:moment(getTheDate(createdAt)).format('YYYY-MM-DD'), // temporarily to show the sorting result
// // //         //   location:devicelocation
// // //         // };

// // //         // userGantnerArray[userId][moment(getTheDate(createdAt)).format('YYYYMMDD')] = userGantnerObj;
// // //         // userGantnerObj[userId] = userGantnerArray;



// // //       }
// // //     });


// // //     // userGantnerArrayCollections && userGantnerArrayCollections.sort((a,b)=>{
// // //     //   var dateA = new Date(a.createdAtFormat);
// // //     //   var dateB = new Date(b.createdAtFormat);
// // //     //   var userIdA = a.userId;
// // //     //   var userIdB = b.userId;
// // //     //   if (userIdA === userIdB){
// // //     //     if (dateA < dateB) {return -1}
// // //     //     if (dateA > dateB) {return 1}
// // //     //     else{return 0}
// // //     //   }
// // //     //   else{
// // //     //     if (userIdA < userIdB){return -1}
// // //     //     else {return 1}
// // //     //   }
// // //     //   // return 0;
// // //     // });

// // //     var createdAtArrayUser = [];

// // //     var userCreatedAtArray = [];
// // //     var userCreatedAtObj = {};

// // //     // userGantnerArrayCollections && userGantnerArrayCollections.forEach((data, index, array)=>{

// // //     //   var gantnerCount = 0;
// // //     //   const gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(array[index]);
// // //     //   if (gantnerCount<499){
// // //     //     gantnerCount++;
// // //     //     batch.set(gantnerRef, data);
// // //     //   }
// // //     // });
// // //     // userGantnerArrayCollections && userGantnerArrayCollections.forEach((data, index, array)=>{
// // //     //   const userId = data.userId;
// // //     //   const createdAtFormat = data.createdAtFormat;
// // //     //   const createdAt = data.checkIn;
// // //     //   const devicelocation = data.devicelocation;

// // //     //   var createdAtObjUser = {};
      
// // //     //   userGantnerArray = userGantnerObj[userId] || [];
// // //     //   if (index>0){
// // //     //     if (array[index].userId === array[index-1].userId && userCreatedAtArray.length<1){

// // //     //       //if (createdAtFormat === array[index-1].createdAtFormat){
// // //     //       //   //create 1 list first
// // //     //       //   createdAtObjUser[createdAtFormat] = data;
// // //     //       //   createdAtArrayUser.push(createdAtObjUser);
// // //     //       //}
// // //     //       // // insert to a new array
// // //     //       // else{
// // //     //       //   createdAtObjUser[createdAtFormat] = data;
// // //     //       //   createdAtArrayUser.push(createdAtObjUser);
            
// // //     //       //   // createdAtArray.push(data);
// // //     //       //   // createdAtObj[createdAtFormat]=createdAtArray;
// // //     //       // }
// // //     //       // createdAtObjUser[createdAtFormat] = createdAtArrayUser;
// // //     //       // if (userGantnerObj && userGantnerObj[userId].size>0){
// // //     //       //   userGantnerObj[userId]=createdAtObj;
// // //     //       // }
            
// // //     //       userCreatedAtArray = userCreatedAtObj[createdAtFormat]||[];
// // //     //       userCreatedAtArray.push(data);
// // //     //       userCreatedAtObj[createdAtFormat] = userCreatedAtArray;
// // //     //       // userGantnerArray.push({createdAtFormat : {userId, createdAtFormat, createdAt, devicelocation}});
// // //     //       // userGantnerArray.push(data);
// // //     //       userGantnerArray.push(userCreatedAtObj);
// // //     //       userGantnerObj[userId] = userGantnerArray;
// // //     //     }
      
       
// // //     //   }
      
// // //     // });
// // //     // userGantnerObj && userGantnerObj.sort((a,b)=>{
// // //     //   var dateA = new Date(a.checkIn);
// // //     //   var dateB = new Date(b.checkIn);
// // //     //   if (dateA < dateB) {return -1}
// // //     //   if (dateA > dateB) {return 1}
// // //     //   return 0;
// // //     // });
// // //     //Object.entries(userGantnerObj).forEach(([key,value]) => {
// // //       // console.log("The key: ",k)
// // //       // console.log("The value: ",v)
      
// // //     //});
// // //     // userGantnerObj && userGantnerObj
// // //     // const gantnerRef = admin.firestore().collection('gantnerLogsByUser').doc(userId);
// // //     // const gantner
// // //     if (gantnerCount>0 && gantnerCount < 499){
// // //       return batch.commit().then(()=>{
// // //         return res.status(200).send({
// // //           success:true,
// // //           // userCreatedAtObj,
// // //           // userGantnerObj,
// // //           // userGantnerArray,
// // //           // createdAtArray
// // //           //userGantnerArrayCollections
// // //           //userGantnerArrayCollections,
// // //           gantnerCount,
// // //           gantnerTotalCount,
// // //           existGantnerCount,
// // //         });
// // //       }).catch(error=>{
// // //         return res.status(200).send({
// // //           succes:false,
// // //           error:error
// // //         })
// // //       });
// // //     }
// // //     else{
// // //       return res.status(200).send({
// // //         succes:false,
// // //         error:'out of limit',
// // //         gantnerCount,
// // //         gantnerTotalCount,
// // //         existGantnerCount,
// // //       })
// // //     }
// // //   });
// // // });

// // // exports.transferPaymentByUserId = functions.https.onRequest((req, res) => {
  
// // //   const itemData = req.body;
// // //   const startDate = itemData.startDate ? itemData.startDate:'20210301';
// // //   const endDate = itemData.endDate? itemData.endDate:'20210331' ;

// // //   // const transQuery = admin.firestore().collection('adyTransactions')
// // //   // .where('authorized', '==', true)
// // //   // .where('createdAt', '>=', moment(startDate).startOf('day').toDate())
// // //   // .where('createdAt', '<=', moment(endDate).startOf('day').toDate())
// // //   // .get();
// // //   const paymentQuery = admin.firestore().collection('payments')
// // //     .where('source', '==', 'adyen')
// // //     .where('status', '==', 'CLOSED')
// // //     .get()

// // //   // const userQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([paymentQuery]).then(result=>{
// // //     // const transRes = result[0];
// // //     const paymentRes = result[1];
// // //     //const userRes = result[2];

// // //     var batch = admin.firestore().batch();

// // //     var transArray = [];
// // //     var transObjByTransactionId = {};

// // //     // transRes && transRes.forEach(doc=>{
// // //     //   const data = doc.data();
// // //     //   const transId = doc.id;
// // //     //   const notificationItems = data && data.notificationItems;
// // //     //   const NotificationRequestItem = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem;
// // //     //   const createdAt = NotificationRequestItem && NotificationRequestItem.eventDate;
// // //     //   const pspReference = NotificationRequestItem && NotificationRequestItem.pspReference;
// // //     //   const merchantReference = NotificationRequestItem && NotificationRequestItem.merchantReference;
// // //     //   const success = NotificationRequestItem && NotificationRequestItem.succes;

// // //     //   const createdAt = data && data.createdAt;

// // //     //   if (success && NotificationRequestItem){
// // //     //     transObjByTransactionId[transId] = NotificationRequestItem
// // //     //   }
      
// // //     // //   if (userId && deviceId && createdAt && deviceId){
      


// // //     // //   if(!userGantnerArrayCollections[userId]){
// // //     // //     userGantnerArrayCollections[userId] = {};
// // //     // //  }
// // //     // //   if(!userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]){
// // //     // //     userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {};
// // //     // //     userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')] = {
// // //     // //       createdAtFormat:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss'),
// // //     // //       devicelocation,
// // //     // //       // checkIn:createdAt,
// // //     // //       // userId
// // //     // //     };
// // //     // //   }
// // //     // //   else if(new Date(userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]["createdAtFormat"]) > createdAt){
// // //     // //   // else if(new Date(userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD')]) > createdAt){  
// // //     // //     userGantnerArrayCollections[userId][moment(getTheDate(createdAt)).format('YYYYMMDD')] = {
// // //     // //       createdAtFormat:moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD HH:mm:ss'),
// // //     // //       devicelocation,
// // //     // //       // checkIn:createdAt,
// // //     // //       // userId
// // //     // //     };        
// // //     // //   }
      
// // //     // //   const gantnerRef = admin.firestore().collection('transactions').doc(userId);
// // //     // //   var refIsExist = false;

// // //     //   // batch.set(gantnerRef, userGantnerArrayCollections[userId]);
// // //     //   // transactionCount++;

// // //     // });
   
// // //     var paymentByUserIdObj = {};
// // //     var paymentCount = 0;
// // //     paymentRes && paymentRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const transactionId = data && data.transactionId;
// // //       const userId = data && data.userId;
// // //       // const adyTransactionData = transObjByTransactionId[transactionId];
// // //       // const invoiceId = adyTransactionData && adyTransactionData.merchantReference;
// // //       const createdAt = data && data.createdAt;

// // //       if (transactionId && userId && createdAt){
// // //         if (moment(getTheDate(createdAt)).isSameOrAfter(moment(startDate)) && moment(getTheDate(createdAt)).isSameOrBefore(moment(endDate))){
// // //           // paymentByUserIdObj
// // //           paymentCount++;
// // //         }
// // //       }
// // //       // paymentByUserIdObj[userId]=
// // //     });

    
// // //     // userRes && userRes.forEach(doc=>{
// // //     //   const data = doc.data();
// // //     //   const userId = doc.id;

// // //     // });
     
// // //     return res.status(200).send({
// // //       success:true,
// // //       // userCreatedAtObj,
// // //       // userGantnerObj,
// // //       // userGantnerArray,
// // //       // createdAtArray
// // //       //userGantnerArrayCollections
// // //       //userGantnerArrayCollections,
// // //       paymentByUserIdObj,
// // //       paymentCount
// // //     });
     
// // //   });
// // // });

// // // // add gantner app-registration klcc to sheet
// // // exports.addGantnerAppRegistrationCount = functions.https.onRequest((req, res) => {
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs')
// // //     .where('deviceId', '==', 'App - Registration (KLCC)')
// // //     // .where('createdAt', '>=', moment('1/8/2020').startOf('day').toDate())
// // //     .get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantnerResults = result[0];
   
// // //     var gantnerCount = 0;
// // //     var allgantnerCount = 0;
// // //     var gantnerArray = [];

// // //     gantnerResults && gantnerResults.forEach((gantner)=>{
// // //       const data = gantner && gantner.data();
// // //       gantnerArray.push(data);
// // //       const createdAt = data && data.createdAt;
// // //       const registered = data && data.registered;
// // //       const userId = data && data.userId;

// // //       allgantnerCount += 1;
// // //       //for september
// // //       // const isTodayJoinDate = (data && data.joinDate)? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').startOf('day').isBetween(startOfMonth.clone().subtract(1,'days'), endOfMonth.clone().add(1, 'days')):false;
// // //       const isSeptember2020 = createdAt && moment(getTheDate(createdAt)).isBetween(moment('2020-05-31'), moment('2020-07-01'));
// // //       if (isSeptember2020){
// // //         gantnerCount += 1;
// // //         console.log('gantnerCount: ', gantnerCount);
// // //       }
// // //     });
// // //     return res.status(200).send({
// // //       success:true,
// // //       gantnerCount: gantnerCount,
// // //       allgantnerCount,
// // //       gantnerArray
// // //     });
// // //   });
// // // });

// // // // add gantner app-registration TTDI to sheet
// // // exports.addGantnerAppRegistrationCountTTDI = functions.https.onRequest((req, res) => {
// // //   const gantnerQuery = admin.firestore().collection('gantnerLogs').where('deviceId', '==', 'App - Registration').get();

// // //   return Promise.all([gantnerQuery]).then(result=>{
// // //     const gantnerResults = result[0];
   
// // //     var gantnerCount = 0;
// // //     var allgantnerCount = 0;
// // //     var gantnerArray = [];

// // //     gantnerResults && gantnerResults.forEach((gantner)=>{
// // //       const data = gantner && gantner.data();
// // //       gantnerArray.push(data);
// // //       const createdAt = data && data.createdAt;
// // //       const registered = data && data.registered;
// // //       const userId = data && data.userId;

// // //       allgantnerCount += 1;
// // //       //for september
// // //       // const isTodayJoinDate = (data && data.joinDate)? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').startOf('day').isBetween(startOfMonth.clone().subtract(1,'days'), endOfMonth.clone().add(1, 'days')):false;
// // //       const isSeptember2020 = createdAt && moment(getTheDate(createdAt)).isBetween(moment('2020-05-31'), moment('2020-07-01'));
// // //       if (isSeptember2020){
// // //         gantnerCount += 1;
// // //         console.log('gantnerCount: ', gantnerCount);
// // //       }
// // //     });
// // //     return res.status(200).send({
// // //       success:true,
// // //       gantnerCount: gantnerCount,
// // //       allgantnerCount,
// // //       gantnerArray
// // //     });
// // //   });
// // // });

// // // // // // add virtual class payment to sheet
// // // // // exports.addVClassPaymentToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'virtualClass').get();
// // // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();

// // // // //   return Promise.all([paymentQuery, usersQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const paymentResults = result[0];
// // // // //     const userResults = result[1];

// // // // //     var userMap = {};
// // // // //     userResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       if (data){
// // // // //         userMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var payments = [];
// // // // //     paymentResults.forEach(payment=>{
// // // // //       if (payment && payment.data()){
// // // // //         const data = payment.data();
// // // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // // //         const userId = data.userId? data.userId:null;
// // // // //         const userData = userId ? userMap[userId]:null;
// // // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // // // //         // const phone = userData? userData.phone? userData.phone: " ":" ";
// // // // //         const phone = data.phone? data.phone : " ";
// // // // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // // // //         const quantity = data.quantity? data.quantity:" ";
// // // // //         const source = data.source? data.source:" ";
// // // // //         const status = data.status? data.status:" ";
// // // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // // //         const type = data.type? data.type:" ";
// // // // //         const transactionId = data.transactionId? data.transactionId:" ";
// // // // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // // // //         const productName = data.productName? data.productName: " ";
// // // // //         const city = data.city? data.city: " ";
// // // // //         const ighandlename = data.ighandlename? data.ighandlename: " ";
// // // // //         const selectedMemberOption = data.selectedMemberOption? data.selectedMemberOption: " ";
// // // // //         const isTTDIMember = selectedMemberOption.isTTDIMember? 'yes':'no';
// // // // //         const isKLCCMember = selectedMemberOption.isKLCCMember? 'yes':'no';
// // // // //         const isNonMember = selectedMemberOption.isNonMember? 'yes':'no';

// // // // //         const paymentData = [
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm:ss') : '',
// // // // //           userName,
// // // // //           userEmail,
// // // // //           ighandlename,
// // // // //           invoiceId,
// // // // //           status,
// // // // //           totalPrice,
// // // // //           type,
// // // // //           phone,
// // // // //           transactionId,
// // // // //           // vendProductId,
// // // // //           productName,
// // // // //           city,
// // // // //           isTTDIMember, isKLCCMember, isNonMember
// // // // //         ];
// // // // //         payments.push(paymentData);
// // // // //       }
// // // // //     });

// // // // //     payments.sort((a,b)=>{
// // // // //       var dateA = new Date(a[0]);
// // // // //       var dateB = new Date(b[0]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     // console.log('payments: ', payments);

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `AUTO VIRTUAL CLASS PAYMENT!A2:V`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: payments
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },
// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         payments: payments,
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // add unlimited outdoor class payments to sheets
// // // // // exports.addUnlimitedOutdoorPaymentToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const paymentQuery = admin.firestore().collection('payments').where('vendProductId', '==', unlimitedOutdoorClassVendProductId).get();
// // // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();

// // // // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const paymentResults = result[0];
// // // // //     const packagesResults = result[1];
// // // // //     const userResults = result[2];

// // // // //     var packageMap = {};
// // // // //     packagesResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       packageMap[doc.id] = data;
// // // // //     });

// // // // //     var userMap = {};
// // // // //     userResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       if (data){
// // // // //         userMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var payments = [];
// // // // //     paymentResults.forEach(payment=>{
// // // // //       if (payment && payment.data()){
// // // // //         const data = payment.data();
// // // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // // //         const userId = data.userId? data.userId:null;
// // // // //         const userData = userId ? userMap[userId]:null;
// // // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // // // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // // // //         const packageId = userData? userData.packageId? userData.packageId : " " : " ";
// // // // //         const quantity = data.quantity? data.quantity:" ";
// // // // //         const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // // // //         const source = data.source? data.source:" ";
// // // // //         const status = data.status? data.status:" ";
// // // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // // //         const type = data.type? data.type:" ";
// // // // //         const transactionId = data.transactionId? data.transactionId:" ";
// // // // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // // // //         const vendSaleId = data.vendSaleId? data.vendSaleId:" ";
// // // // //         var packageData = packageId ? packageMap[packageId] : " ";
// // // // //         var packageName = packageData && packageData.name? packageData.name:" ";
// // // // //         const isKLCCMember = isKLCCPackage(packageId)? "yes":"no";
// // // // //         const isTTDIMember = isTTDIPackage(packageId)? "yes":"no"
// // // // //         const isNonMember = (!isKLCCMember && !isTTDIMember)? "yes":"no";

// // // // //         const paymentData = [
// // // // //           payment.id,
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           userId, userName, userEmail, isKLCCMember, isTTDIMember, isNonMember,
// // // // //           invoiceId, quantity, status, totalPrice, type, transactionId,
// // // // //           vendProductId, vendSaleId
// // // // //         ];
// // // // //         payments.push(paymentData);
// // // // //       }
// // // // //     });

// // // // //     payments.sort((a,b)=>{
// // // // //       var dateA = new Date(a[0]);
// // // // //       var dateB = new Date(b[0]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     // console.log('payments: ', payments);

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `UNLIMITED OUTDOOR CLASSES!A2:S`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: payments
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },
// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         payments: payments,
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // add babel dance payment to sheet
// exports.addBabelDancePaymentToSheets = functions.https.onRequest((req, res) => {
//   // const usersQuery = admin.firestore().collection('users').get();
//   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'babelDance').get();
//   // where('email', '==', 'tehowny@gmail.com').get();
//   const usersQuery = admin.firestore().collection('users').get();

//   return Promise.all([paymentQuery, usersQuery]).then(result=>{
//     var batch = admin.firestore().batch();
//     const paymentResults = result[0];
//     const userResults = result[1];

//     var userMap = {};
//     userResults.forEach(doc=>{
//       const data = doc.data();
//       if (data){
//         userMap[doc.id] = data;
//       }
//     });

//     var payments = [];
//     paymentResults.forEach(payment=>{
//       if (payment && payment.data()){
//         const data = payment.data();
//         const createdAt = data.createdAt? data.createdAt:null;
//         const userId = data.userId? data.userId:null;
//         const userData = userId ? userMap[userId]:null;
//         const userName = userData? userData.name? userData.name : " " : " ";
//         const userEmail = userData? userData.email? userData.email: " " : " ";
//         // const phone = userData? userData.phone? userData.phone: " ":" ";
//         const phone = data.phone? data.phone : " ";
//         const invoiceId = data.invoiceId? data.invoiceId:" ";
//         const quantity = data.quantity? data.quantity:" ";
//         const source = data.source? data.source:" ";
//         const status = data.status? data.status:" ";
//         const totalPrice = data.totalPrice? data.totalPrice:0;
//         const type = data.type? data.type:" ";
//         const transactionId = data.transactionId? data.transactionId:" ";
//         const vendProductId = data.vendProductId? data.vendProductId:" ";
//         const productName = data.productName? data.productName: " ";
//         const city = data.city? data.city: " ";
//         const ighandlename = data.ighandlename? data.ighandlename: " ";
//         const selectedMemberOption = data.selectedMemberOption? data.selectedMemberOption: " ";
//         const isTTDIMember = selectedMemberOption.isTTDIMember? 'yes':'no';
//         const isKLCCMember = selectedMemberOption.isKLCCMember? 'yes':'no';
//         const isNonMember = selectedMemberOption.isNonMember? 'yes':'no';
//         const classRemark = data.classRemark? data.classRemark:" ";
//         const instructorName = data.instructorName? data.instructorName:"";
//         const classDate = data.classDate? data.classDate:"";
//         const classTime = data.classTime? data.classTime:"";

//         const paymentData = [
//           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
//           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss') : '',
//           userName,
//           userEmail,
//           ighandlename,
//           invoiceId,
//           status,
//           totalPrice,
//           type,
//           phone,
//           classDate,
//           classTime,
//           transactionId,
//           instructorName,
//           productName,
//           city,
//           isTTDIMember, isKLCCMember, isNonMember,
//           classRemark
//         ];
//         payments.push(paymentData);
//       }
//     });

//     payments.sort((a,b)=>{
//       var dateA = new Date(a[0]);
//       var dateB = new Date(b[0]);
//       if (dateA < dateB) {return -1}
//       if (dateA > dateB) {return 1}
//       var timeA = a[1];
//       var timeB = b[1];
//       if (timeA < timeB) {return -1}
//       if (timeA > timeB) {return 1}
//       return 0;
//     });

//     // console.log('payments: ', payments);

//     const updateSheetPromise = updateGoogleSheet({
//       spreadsheetId: CONFIG_SHEET_ID,
//       resource: {
//         // How the input data should be interpreted.
//         valueInputOption: 'RAW',  // TODO: Update placeholder value.
//         // The new values to apply to the spreadsheet.
//         data: [
//           {
//             range: `BABEL DANCE CLASS PAYMENT!A2:V`,
//             majorDimension: "ROWS",
//             values: payments
//           }
//         ],  // TODO: Update placeholder value.
  
//         // TODO: Add desired properties to the request body.
//       },
//     });

//     return updateSheetPromise.then((result)=>{
//       // console.log('theresult: ', result);
//       return res.status(200).send({
//         success:true,
//         data: 'data',
//         payments: payments,
//       });
//     });
//   });
// });

// add MTD and DTD transaction to slack message
exports.addMTDnDTDToSlack = functions.https.onRequest((req, res) => {
  const usersQuery = admin.firestore().collection('users').get();
  const paymentQuery = admin.firestore().collection('payments')
  .where('type', '==', 'membership')
  // .where('createdAt', '>=', moment().startOf('month').toDate())
  .get();
  // where('email', '==', 'tehowny@gmail.com').get();
  const packagesQuery = admin.firestore().collection('packages').get();
  const logsQuery = admin.firestore().collection('logs').get();
  const gantnerLogsQuery = admin.firestore().collection('gantnerLogs')
    .where('createdAt', '>=', moment().startOf('day').toDate())
    .get();
  
  // const vendSaleQuery = admin.firestore().coll

  return Promise.all([paymentQuery, packagesQuery, usersQuery, logsQuery, gantnerLogsQuery]).then(result=>{
    var batch = admin.firestore().batch();
    const paymentResults = result[0];
    const packagesResults = result[1];
    const userResults = result[2];
    const logResults = result[3];
    const gantnerLogResults = result[4];

    var packageMap = {};
    packagesResults.forEach(doc=>{
      const data = doc.data();
      data.countDaily = 0;
      packageMap[doc.id] = data;
    });

    var gantnerLogsMapTTDIToday = {};
    var gantnerLogsMapKLCCToday = {};
    gantnerLogResults && gantnerLogResults.forEach(doc=>{
      const data = doc.data();
      const userId = data && data.userId;
      const deviceId = data && data.deviceId;
      const isKLCCCheckIn = deviceId && deviceId.includes("KLCC");
      if (isKLCCCheckIn && userId){gantnerLogsMapKLCCToday[userId] = data}
      else if (userId){
        // for TTDI
        gantnerLogsMapTTDIToday[userId] = data;
      }
    });

    var logsByUserIdMap = {};
    // var freezeAddCountDaily = 0;
    var freezeRemovedCountDaily = 0;
    // var freezeAddLogsByUserIdMap = {};
    // to get the freeze and freezeRemove action
    logResults && logResults.forEach(doc=>{
      const data = doc.data();
      const userId = data && data.userId;
      const source = data && data.source;
      const action = data && data.action;
      const time = data && data.time;
      const freezeQuantity = data && data.freezeQuantity;

      const isTodayTime = moment(getTheDate(time)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'));
      if ((action && action === "freezeRemoved") && isTodayTime){
        logsByUserIdMap[userId] = data;
        freezeRemovedCountDaily+=1;
      }
      // if (source === "freeze" && isTodayTime){
      //   freezeAddCountDaily = freezeAddCountDaily + freezeQuantity;
      // }
      // if (action && action === "freezeRemoved" && isTodayTime){
      //   freezeRemovedCountDaily+=1;
      // }
    });

    var payments = [];
    var freezeMap = {};
    var freezeCreatedTodayMap = {};
    var freezeCreatedThisMonthMap = {};

    var vendCountDaily = 0;
    var vendCountDailyClosed = 0;
    var vendCountDailyVoided = 0;
    var vendCountDailyLaybyClosed = 0;
    
    var adyenCountDaily = 0;
    var adyenCountDailyClosed = 0;
    var adyenCountDailyRefunded = 0;

    var vendCountMonthly = 0;
    var vendCountMonthlyClosed = 0;
    var vendCountMonthlyVoided = 0;
    var vendCountMonthlyLaybyClosed = 0;

    var adyenCountMonthly = 0;
    var adyenCountMonthlyClosed = 0;
    var adyenCountMonthlyRefunded = 0;

    var adyenAutoChargeCountMonthly = 0;
    

    var vendTotalCollection = 0;

    var vendTotalCollectionDaily = 0;
    var adyenTotalCollectionDaily = 0;
    var vendTotalCollectionMonthly = 0;
    var adyenTotalCollectionMonthly = 0;

    var freezeMap = {};

    var vendCountDaily = 0;
    var vendCountDailyClosed = 0;
    var vendCountDailyVoided = 0;
    var vendCountDailyLaybyClosed = 0;
    
    var adyenCountDaily = 0;
    var adyenCountDailyClosed = 0;
    var adyenCountDailyRefunded = 0;

    var vendCountMonthly = 0;
    var vendCountMonthlyClosed = 0;
    var vendCountMonthlyVoided = 0;
    var vendCountMonthlyLaybyClosed = 0;

    // for package membership total Price daily TTDI Vend
    var monthlyPkgTTDITotalPriceDaily = 0;
    var augustPromo3MPkgTTDITotalPriceDaily = 0;
    var midSepPromo3MPkgTTDITotalPriceDaily = 0;
    var renewal6MTTDITotalPriceDaily = 0;
    var renewal12MTTDITotalPriceDaily = 0;
    var term3MTTDITotalPriceDaily = 0;
    var term6MTTDITotalPriceDaily = 0;
    var term12MTTDITotalPriceDaily = 0;
    var CP180PkgTTDITotalPriceDaily = 0; 
    var CP210PkgTTDITotalPriceDaily = 0; 
    var CP230PkgTTDITotalPriceDaily = 0; 
    // for package membership total Price daily KLCC vend
    var CP290PkgKLCCTotalPriceDaily = 0;
    var CP310PkgKLCCTotalPriceDaily = 0; 
    var monthlyPkgKLCCTotalPriceDaily = 0;
    var augustPromo3MPkgKLCCTotalPriceDaily = 0;
    var midSepPromo3MPkgKLCCTotalPriceDaily = 0;
    var unoPromo4MPkgKLCCTotalPriceDaily = 0;
    var term3MKLCCTotalPriceDaily = 0;
    var term6MKLCCTotalPriceDaily = 0;
    var term12MKLCCTotalPriceDaily = 0;

    // for package membership total Price monthly TTDI Vend
    var monthlyPkgTTDITotalPriceMonthly = 0;
    var augustPromo3MPkgTTDITotalPriceMonthly = 0;
    var midSepPromo3MPkgTTDITotalPriceMonthly = 0;
    var renewal6MTTDITotalPriceMonthly = 0;
    var renewal12MTTDITotalPriceMonthly = 0;
    var term3MTTDITotalPriceMonthly = 0;
    var term6MTTDITotalPriceMonthly = 0;
    var term12MTTDITotalPriceMonthly = 0;
    var CP180PkgTTDITotalPriceMonthly = 0; 
    var CP210PkgTTDITotalPriceMonthly = 0; 
    var CP230PkgTTDITotalPriceMonthly = 0; 
    // for package membership total Price Monthly KLCC vend
    var CP290PkgKLCCTotalPriceMonthly = 0;
    var CP310PkgKLCCTotalPriceMonthly = 0; 
    var monthlyPkgKLCCTotalPriceMonthly = 0;
    var augustPromo3MPkgKLCCTotalPriceMonthly = 0;
    var midSepPromo3MPkgKLCCTotalPriceMonthly = 0;
    var unoPromo4MPkgKLCCTotalPriceMonthly = 0;
    var term3MKLCCTotalPriceMonthly = 0;
    var term6MKLCCTotalPriceMonthly = 0;
    var term12MKLCCTotalPriceMonthly = 0;

    // for new membership transaction
    var adyenFirstTimeCountDaily = 0;
    var adyenAutoChargeCountDaily = 0;
    var adyenFirstTimeTotalPriceDaily = 0;
    var adyenAutoChargeTotalPriceDaily = 0;
    var adyenAutoChargeTotalPriceMonthly = 0;
    var adyenCountManualChargeTTDIMonthly = 0;
    var adyenTotalCollectionManualKLCCMonthly = 0;
    var adyenMaxPriceDaily = 0;

    // for package membership total Price daily TTDI adyen
    var adyenmonthlyPkgTTDITotalPriceDaily = 0;
    var adyenaugustPromo3MPkgTTDITotalPriceDaily = 0;
    var adyenmidSepPromo3MPkgTTDITotalPriceDaily = 0;
    var adyenrenewal6MTTDITotalPriceDaily = 0;
    var adyenrenewal12MTTDITotalPriceDaily = 0;
    var adyenterm3MTTDITotalPriceDaily = 0;
    var adyenterm6MTTDITotalPriceDaily = 0;
    var adyenterm12MTTDITotalPriceDaily = 0;
    var adyenCP180PkgTTDITotalPriceDaily = 0; 
    var adyenCP210PkgTTDITotalPriceDaily = 0; 
    var adyenCP230PkgTTDITotalPriceDaily = 0; 
    // for package membership total Price daily KLCC adyen
    var adyenCP290PkgKLCCTotalPriceDaily = 0;
    var adyenCP310PkgKLCCTotalPriceDaily = 0; 
    var adyenmonthlyPkgKLCCTotalPriceDaily = 0;
    var adyenaugustPromo3MPkgKLCCTotalPriceDaily = 0;
    var adyenmidSepPromo3MPkgKLCCTotalPriceDaily = 0;
    var adyenunoPromo4MPkgKLCCTotalPriceDaily = 0;
    var adyenterm3MKLCCTotalPriceDaily = 0;
    var adyenterm6MKLCCTotalPriceDaily = 0;
    var adyenterm12MKLCCTotalPriceDaily = 0;

    var adyenCountMonthly = 0;
    var adyenCountMonthlyClosed = 0;
    var adyenCountMonthlyRefunded = 0;

    var vendTotalCollectionDaily = 0;
    var adyenTotalCollectionDaily = 0;
    var vendTotalCollectionMonthly = 0;
    var adyenTotalCollectionMonthly = 0;

    var adyenCountManualChargeTTDIDaily = 0;
    var adyenCountManualChargeKLCCDaily = 0;
    var adyenTotalCollectionManualTTDIDaily = 0;
    var adyenTotalCollectionManualKLCCDaily = 0;

    // adyen daily
    var adyenCountAutoChargeTTDIDaily = 0;
    var adyenCountAutoChargeKLCCDaily = 0;
    var adyenTotalCollectionAutoTTDIDaily = 0;
    var adyenTotalCollectionAutoKLCCDaily = 0;
    // adyen monthly
    var adyenCountAutoChargeTTDIMonthly = 0;
    var adyenCountAutoChargeKLCCMonthly = 0;
    var adyenCountManualChargeTTDIMonthly = 0;
    var adyenTotalCollectionAutoTTDIMonthly = 0;
    var adyenTotalCollectionAutoKLCCMonthly = 0;
    var adyenTotalCollectionManualTTDIMonthly = 0
    var adyenTotalCollectionManualKLCCMonthly = 0;
  
    var adyenMaxPriceTTDIDaily = 0;
    var adyenMaxPriceKLCCDaily = 0;
  
    var packageSaleMapVendDaily = {};
    var packageWithPaymentArray = [];
    var packageSaleMapVend = {};
    var packageSaleMapAdyen = {};
    
    var activeTTDICorpPkgMap = {};
    var activeKLCCCorpPkgMap = {};

    var vendTextTTDI = '';
    var vendTextKLCC = '';

    var adyenTextTTDI = '';
    var adyenTextKLCC = '';

    var corpActiveTextTTDI = '';
    var corpActiveTextKLCC = '';

    var corpCancelTextTTDI = '';
    var corpCancelTextKLCC = '';

    var corpExpiredTextTTDI = '';
    var corpExpiredTextKLCC = '';
    
    paymentResults.forEach(payment=>{
      if (payment && payment.data()){
        const data = payment.data();
        const createdAt = data.createdAt? data.createdAt:null;
        const userId = data.userId? data.userId:null;
       
        const invoiceId = data.invoiceId? data.invoiceId:" ";
        const packageId = data.packageId? data.packageId:null;
        const packageData = packageId? packageMap[packageId]:null;
        const packageName = (packageData && packageData.shortName)? (packageData && packageData.shortName):(packageData && packageData.name);
        const packageBase = packageData && packageData.base;
        const quantity = data.quantity? data.quantity:" ";
        const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
        const source = data.source;
        const status = data.status? data.status:" ";
        const totalPrice = data.totalPrice? data.totalPrice:0;
        const type = data.type? data.type:" ";
        const manualAdd = data.manualAdd? data.manualAdd:"false";
        const transactionId = data.transactionId;
        const vendProductId = data.vendProductId? data.vendProductId:" ";
        const vendProductName = data.vendProductName || null;
        const vendSaleId = data.vendSaleId;
        const freezeFor = data && data.freezeFor;
        const isAutoCharge = (data && data.isAutoCharge)? true:false;
        const slackReportIndex = packageData && packageData.slackReportIndex;
        const outlet = data.outlet? data.outlet:packageBase;
    
        // const shortName = packageData && packageData.shortName;

        if (userId && data && source === 'freeze' && freezeFor && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
          freezeCreatedTodayMap[userId] = data;
        }
        if (userId && data && source === 'freeze' && freezeFor && moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('month'))){
          freezeCreatedThisMonthMap[userId] = data;
        }
        // freezeFor that valid up till today
        if (userId && data && source === 'freeze' && freezeFor && moment(getTheDate(freezeFor)).tz('Asia/Kuala_Lumpur').add(1, 'month').isAfter(moment().tz('Asia/Kuala_Lumpur'))){
        // if (userId && data && source === 'freeze' && freezeFor && moment(getTheDate(freezeFor)).isSameOrAfter(moment().startOf('day').subtract(1, 'months'))){  
          freezeMap[userId] = data;
        }
        // for daily
        if (source === 'vend' && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
          vendCountDaily+=1;
          if (status && status === 'CLOSED'){
            vendCountDailyClosed+=1;
            vendTotalCollectionDaily = vendTotalCollectionDaily + parseFloat(totalPrice);
            var countDaily = 0;
          
            // packageData.map(item=>{
              // let obj = {};
              // obj["name"]=packageName;
              // obj["countDaily"] = obj.countDaily? obj.countDaily+1:1;
              // packageWithPaymentArray.push({obj});
              // packageWithPaymentArray.push({
              //   [item.name]:
              // })
            // });
            // packageSaleMapVendDaily[packageId]= {

            // };
            // packageWithPaymentArray.push({
              
            // });
            // packageSaleMapVendDaily[]
            // if(!packageSaleMapVend[packageId]){
            //   packageSaleMapVend[packageId]= {
            //     packageName,
            //     packageBase,
            //     totalPriceDaily:0,
            //     totalPriceMonthly:0,
            //     packageCountDaily:0,
            //     packageCountMonthly:0,
            //     outlet
            //   };  
            // }

            // packageSaleMapVend[packageId].packageCountDaily+=1;
            // packageSaleMapVend[packageId].totalPrice += parseFloat(totalPrice);
            // vendText = `${vendText} ${packageSaleMapVend[packageId].packageName} (${packageSaleMapVend[packageId].packageCountDaily})`

          
          }
          else if (status && status === 'VOIDED'){
            vendCountDailyVoided+=1;
          }
          else if (status && status === 'LAYBY_CLOSED'){
            vendCountDailyLaybyClosed+=1;
          }
        }

        else if (source ==='adyen' && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
          adyenCountDaily+=1;
          if (status && status === 'CLOSED'){
            adyenCountDailyClosed+=1;
            adyenTotalCollectionDaily = adyenTotalCollectionDaily + parseFloat(totalPrice);
            if (isAutoCharge){
              adyenAutoChargeCountDaily+=1;
              adyenAutoChargeTotalPriceDaily = adyenAutoChargeTotalPriceDaily + parseFloat(totalPrice);
              adyenMaxPriceDaily = (parseFloat(totalPrice)>adyenMaxPriceDaily)? totalPrice:adyenMaxPriceDaily;
              if (packageBase && packageBase === "TTDI"){
                adyenCountAutoChargeTTDIDaily+=1;
                adyenTotalCollectionAutoTTDIDaily = adyenTotalCollectionAutoTTDIDaily+parseFloat(totalPrice);
                adyenMaxPriceTTDIDaily = (parseFloat(totalPrice)>adyenMaxPriceTTDIDaily)? totalPrice:adyenMaxPriceTTDIDaily;
              }
              else if (packageBase && packageBase === "KLCC"){
                adyenCountAutoChargeKLCCDaily+=1;
                adyenTotalCollectionAutoKLCCDaily = adyenTotalCollectionAutoKLCCDaily+parseFloat(totalPrice);
                adyenMaxPriceKLCCDaily = (parseFloat(totalPrice)>adyenMaxPriceKLCCDaily)? totalPrice:adyenMaxPriceKLCCDaily;
              }
            }
            // other than auto charge, assume as new card for now
            else if (!isAutoCharge){
              adyenFirstTimeCountDaily+=1;
              adyenFirstTimeTotalPriceDaily = adyenFirstTimeTotalPriceDaily + parseFloat(totalPrice);
              if (packageBase && packageBase === "TTDI"){
                adyenCountManualChargeTTDIDaily+=1;
                adyenTotalCollectionManualTTDIDaily = adyenTotalCollectionManualTTDIDaily+parseFloat(totalPrice);
              }
              else if (packageBase && packageBase === "KLCC"){
                adyenCountManualChargeKLCCDaily+=1;
                adyenTotalCollectionManualKLCCDaily = adyenTotalCollectionManualKLCCDaily+parseFloat(totalPrice);
              }
            }
          }
          else if (status && status === 'REFUNDED'){
            adyenCountDailyRefunded+=1;
          }
        }

        // for monthly
        if (source === 'vend' && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('month'))){
          vendCountMonthly+=1;
          if (status && status === 'CLOSED'){
            vendCountMonthlyClosed+=1;
            vendTotalCollectionMonthly = vendTotalCollectionMonthly + parseFloat(totalPrice);
            
            if(!packageSaleMapVend[packageId]){
              packageSaleMapVend[packageId]= {
                packageName,
                packageBase,
                totalPriceDaily:0,
                totalPriceMonthly:0,
                packageCountDaily:0,
                packageCountMonthly:0,
                source,
                outlet,
                vendSaleId: [],
                createdAt: []
              };  
            }
            packageSaleMapVend[packageId].packageCountMonthly+=1;
            packageSaleMapVend[packageId].totalPriceMonthly += parseFloat(totalPrice);
            packageSaleMapVend[packageId].vendSaleId.push(vendSaleId);
            packageSaleMapVend[packageId].createdAt.push(moment(getTheDate(createdAt)).tz("Asia/Kuala_Lumpur").startOf('day').format("YYYY-MM-DD"));
            
            // for daily
            if (createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
              packageSaleMapVend[packageId].packageCountDaily+=1;
              packageSaleMapVend[packageId].totalPriceDaily += parseFloat(totalPrice);
            }

          }
          else if (status && status === 'VOIDED'){
            vendCountMonthlyVoided+=1;
          }
          else if (status && status === 'LAYBY_CLOSED'){
            vendCountMonthlyLaybyClosed+=1;
          }
        }

        else if (source ==='adyen' && createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('month'))){
          adyenCountMonthly+=1;
          if (status && status === 'CLOSED'){
            adyenCountMonthlyClosed+=1;
            adyenTotalCollectionMonthly = adyenTotalCollectionMonthly + parseFloat(totalPrice);

            if(!packageSaleMapAdyen[packageId]){
              packageSaleMapAdyen[packageId]= {
                packageName,
                packageBase,
                totalPriceDaily:0,
                totalPriceMonthly:0,
                packageCountDaily:0,
                packageCountMonthly:0,
                source,
                outlet, 
                transactionId:[],
                createdAt: []
              };  
              // just to view the details in postman
              packageSaleMapAdyen[packageId].createdAt.push(moment(getTheDate(createdAt)).tz("Asia/Kuala_Lumpur").startOf('day').format("YYYY-MM-DD"));
              packageSaleMapAdyen[packageId].transactionId.push(transactionId);
            }
            packageSaleMapAdyen[packageId].packageCountMonthly+=1;
            packageSaleMapAdyen[packageId].totalPriceMonthly+=parseFloat(totalPrice);
           
            // for daily
            if (createdAt && moment(getTheDate(createdAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){
              // if(!packageSaleMapAdyen[packageId]){
              //   packageSaleMapAdyen[packageId]= {
              //     packageName,
              //     packageBase,
              //     totalPriceDaily:0,
              //     totalPriceMonthly:0,
              //     packageCountDaily:0,
              //     packageCountMonthly:0,
              //     source,
              //     outlet,
              //     createdAt: moment(getTheDate(createdAt)).tz("Asia/Kuala_Lumpur").startOf('days').format("YYYY-MM-DD")
              //   };  
              // }
              packageSaleMapAdyen[packageId].packageCountDaily+=1;
              packageSaleMapAdyen[packageId].totalPriceDaily += parseFloat(totalPrice);
            }

            if (isAutoCharge){
              adyenAutoChargeCountMonthly+=1;
              adyenAutoChargeTotalPriceMonthly = adyenAutoChargeTotalPriceMonthly + parseFloat(totalPrice);
              if (packageBase && packageBase === "TTDI"){
                adyenCountAutoChargeTTDIMonthly+=1;
                adyenTotalCollectionAutoTTDIMonthly = adyenTotalCollectionAutoTTDIMonthly+parseFloat(totalPrice);
              }
              else if (packageBase && packageBase === "KLCC"){
                adyenCountAutoChargeKLCCMonthly+=1;
                adyenTotalCollectionAutoKLCCMonthly = adyenTotalCollectionAutoKLCCMonthly+parseFloat(totalPrice);
              }
            }
            // other than auto charge, assume as new card for now
            else if (!isAutoCharge){
              if (packageBase && packageBase === "TTDI"){
                adyenCountManualChargeTTDIMonthly+=1;
                adyenTotalCollectionManualTTDIMonthly = adyenTotalCollectionManualTTDIMonthly+parseFloat(totalPrice);
              }
              else if (packageBase && packageBase === "KLCC"){
                adyenCountManualChargeKLCCDaily+=1;
                adyenTotalCollectionManualKLCCMonthly = adyenTotalCollectionManualKLCCMonthly+parseFloat(totalPrice);
              }
            }
          }
          else if (status && status === 'REFUNDED'){
            adyenCountMonthlyRefunded+=1;
          }
        }
      }
    });

    var activeMonthlyTTDIdaily = 0;
    var activeQuarterlyTTDIdaily = 0;
    var activeBiyearlyTTDIdaily = 0;
    var active4MonthlyTTDIdaily = 0;
    var activeYearlyTTDIdaily = 0;
    var activeMonthlyKLCCdaily = 0;
    var activeQuarterlyKLCCdaily = 0;
    var activeBiyearlyKLCCdaily = 0;
    var active4MonthlyKLCCdaily = 0;
    var activeYearlyKLCCdaily = 0;
    var activeCorpTTDIDaily = 0;
    var activeCorpKLCCDaily = 0;
    var allActivePackage = 0;
    var allActiveTTDIPackage = 0;
    var allActiveKLCCPackage = 0;
    var activeFreezeCount = 0;
    var activeFreezeTTDICount = 0;
    var activeFreezeKLCCCount = 0;

    var unpaidAll = 0;
    var unpaidTTDI = 0;
    var unpaidKLCC = 0;
    var unpaid1MonthTTDI = 0;
    var unpaid1to3MonthTTDI = 0;
    var unpaid3MonthTTDI = 0;
    var unpaid1MonthKLCC = 0;
    var unpaid1to3MonthKLCC = 0;
    var unpaid3MonthKLCC = 0;

    var allComplimentary = 0;
    var freezeCountChanges = 0;
    var freezeAddCountTTDIDaily = 0;
    var freezeAddCountKLCCDaily = 0;
    var freezeAddCountTTDIMonthly = 0;
    var freezeAddCountKLCCMonthly = 0;
    var freezeExecutedUniqueUserTTDICountDaily = 0;
    var freezeExecutedUniqueUserKLCCCountDaily = 0;
    var freezeExecutedUniqueUserTTDICountMonthly = 0;
    var freezeExecutedUniqueUserKLCCCountMonthly = 0;
    var freezeExecutedUniqueUserRemovedTTDICountDaily = 0;
    var freezeExecutedUniqueUserRemovedKLCCCountDaily = 0;
    var cancelExecutedTTDIToday = 0;
    var cancelExecutedKLCCToday = 0;
    var cancelExecutedTTDIThisMonth = 0;
    var cancelExecutedKLCCThisMonth = 0;
    var checkInVisitorCountTTDIToday = 0;
    var checkInVisitorCountKLCCToday = 0;

    // var userMap = {};
    userResults && userResults.forEach(doc=>{
      const data = doc.data();
      // userMap[doc.id] = data;
      const packageId = data && data.packageId;
      const packageData = packageId? packageMap[packageId]:null;
      const packageBase = packageData && packageData.base;
      const packageName = packageData && packageData.shortName;
      const isTTDICorpPackage = packageData && (packageBase && packageBase === "TTDI") && packageData.type === "corp";
      const isKLCCCorpPackage = packageData && (packageBase && packageBase === "KLCC") && packageData.type === "corp";
      const renewalTerm = packageData && packageData.renewalTerm;
      const userTerminated = data && data.cancellationDate && moment(getTheDate(data.cancellationDate)).isSameOrBefore(moment(), 'day');
      const membershipEnd = data.autoMembershipEnds? data.autoMembershipEnds:data.membershipEnds? data.membershipEnds:null;
      const freezeData = freezeMap? freezeMap[doc.id]:null;
      const userFreezeFor = freezeData && freezeData.freezeFor;
      const membershipStarts = data.autoMembershipStarts ? data.autoMembershipStarts : data.membershipStarts;
      const membershipEnds = data.autoMembershipEnds ? data.autoMembershipEnds : data.membershipEnds;
      const isComplimentaryPkg = renewalTerm && renewalTerm === 'never';
      const isActiveMember = (!userFreezeFor && !isComplimentaryPkg && membershipStarts && !userTerminated && (moment(getTheDate(membershipStarts)) < moment()) && membershipEnds && moment(getTheDate(membershipEnds)) >= moment())
      const isExpiredMember = packageId && membershipStarts && (moment(getTheDate(membershipStarts)) < moment()) && membershipEnds && (moment(getTheDate(membershipEnds)) < moment()) && !userTerminated 
      const isStaff = data && data.isStaff;
      const freezeExecutedToday = freezeCreatedTodayMap? freezeCreatedTodayMap[doc.id]:null;
      const freezeExecutedThisMonth = freezeCreatedThisMonthMap? freezeCreatedThisMonthMap[doc.id]:null;
      
      freezeExecutedToday && Object.keys(freezeExecutedToday).forEach(key => {
        const quantity = freezeExecutedThisMonth[key].quantity? freezeExecutedToday[key].quantity:1;
        if (packageBase && packageBase === "TTDI"){
          freezeAddCountTTDIDaily += quantity;
        }
        else if (packageBase && packageBase === "KLCC"){
          freezeAddCountKLCCDaily += quantity;
        }
      });

      freezeExecutedThisMonth && Object.keys(freezeExecutedThisMonth).forEach(key => {
        const quantity = freezeExecutedThisMonth[key].quantity? freezeExecutedThisMonth[key].quantity:1;
        if (packageBase && packageBase === "TTDI"){
          freezeAddCountTTDIMonthly = freezeAddCountTTDIMonthly+ quantity;
        }
        else if (packageBase && packageBase === "KLCC"){
          freezeAddCountKLCCMonthly = freezeAddCountKLCCMonthly + quantity;
        }
      });
    
      const cancellationCreatedAt = data && data.cancellationCreatedAt;

      const logData = logsByUserIdMap && logsByUserIdMap[doc.id];
      // logData && logData.sort((a,b)=>{
      //   var dateA = new Date(a.time);
      //   var dateB = new Date(b.time);
      //   if (dateA < dateB) {return -1}
      //   if (dateA > dateB) {return 1}
      //   return 0;
      // });

      const isVisitorCheckInTTDIToday = gantnerLogsMapTTDIToday? gantnerLogsMapTTDIToday[doc.id]:null;
      const isVisitorCheckInKLCCToday = gantnerLogsMapKLCCToday? gantnerLogsMapKLCCToday[doc.id]:null;

      if (isVisitorCheckInTTDIToday && !membershipEnds){checkInVisitorCountTTDIToday+=1}
      else if (isVisitorCheckInKLCCToday && !membershipEnds){checkInVisitorCountKLCCToday+=1}

      if (logData){
        // freezeExecutedUniqueUserRemovedCountDaily+=1;
        if (packageBase && packageBase === "TTDI"){freezeExecutedUniqueUserRemovedTTDICountDaily+=1}
        else if (packageBase && packageBase === "KLCC"){freezeExecutedUniqueUserRemovedKLCCCountDaily+=1}
      }
      if (freezeExecutedToday && packageBase && packageBase === "TTDI"){freezeExecutedUniqueUserTTDICountDaily+=1}
      if (freezeExecutedToday && packageBase && packageBase === "KLCC"){freezeExecutedUniqueUserKLCCCountDaily+=1}
      if (freezeExecutedThisMonth && packageBase && packageBase === "TTDI"){freezeExecutedUniqueUserTTDICountMonthly+=1}
      if (freezeExecutedThisMonth && packageBase && packageBase === "KLCC"){freezeExecutedUniqueUserKLCCCountMonthly+=1}

      if (cancellationCreatedAt && packageBase && packageBase === "TTDI" && moment(getTheDate(cancellationCreatedAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){cancelExecutedTTDIToday+=1}
      else if (cancellationCreatedAt && packageBase && packageBase === "KLCC" && moment(getTheDate(cancellationCreatedAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('day'))){cancelExecutedKLCCToday+=1}

      if (cancellationCreatedAt && packageBase && packageBase === "TTDI" && moment(getTheDate(cancellationCreatedAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('months'))){cancelExecutedTTDIThisMonth+=1}
      else if (cancellationCreatedAt && packageBase && packageBase === "KLCC" && moment(getTheDate(cancellationCreatedAt)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur').startOf('months'))){cancelExecutedKLCCThisMonth+=1}

      if (userFreezeFor && !userTerminated){activeFreezeCount+=1}
      if (userFreezeFor && packageBase && packageBase === 'TTDI'){activeFreezeTTDICount+=1}
      else if (userFreezeFor && packageBase && packageBase === 'KLCC'){activeFreezeKLCCCount+=1}
      
      if (isActiveMember && packageBase){allActivePackage+=1}
      // if (!userFreezeFor && packageBase && packageBase === 'TTDI' && !userTerminated && membershipEnd && moment(getTheDate(membershipEnd)).isSameOrAfter(moment().tz('Asia/Kuala_Lumpur'))){
      
      if (packageBase && packageBase === "TTDI" && isTTDICorpPackage){
        activeCorpTTDIDaily+=1;
        if(!activeTTDICorpPkgMap[packageId]){
          activeTTDICorpPkgMap[packageId]= {
            packageName,
            packageBase,
            activeCount:0,
            cancelCount:0,
            expiredCount:0
          };  
        }
        if (isActiveMember){activeTTDICorpPkgMap[packageId].activeCount+=1}
        else if (userTerminated){activeTTDICorpPkgMap[packageId].cancelCount+=1}
        else if (isExpiredMember){activeTTDICorpPkgMap[packageId].expiredCount+=1}
      }
      else if (packageBase && packageBase === "KLCC" && isKLCCCorpPackage){
        activeCorpKLCCDaily+=1
        if(!activeKLCCCorpPkgMap[packageId]){
          activeKLCCCorpPkgMap[packageId]= {
            packageName,
            packageBase,
            activeCount:0,
            cancelCount:0,
            expiredCount:0
          };  
        }
        if (isActiveMember){activeKLCCCorpPkgMap[packageId].activeCount+=1}
        else if (userTerminated){activeKLCCCorpPkgMap[packageId].cancelCount+=1}
        else if (isExpiredMember){activeKLCCCorpPkgMap[packageId].expiredCount+=1}
      }

      if (packageBase && packageBase === 'TTDI' && isActiveMember){allActiveTTDIPackage+=1}
      else if (packageBase && packageBase === 'KLCC' && isActiveMember){allActiveKLCCPackage+=1}
      
      // for ttdi daily
      if (isActiveMember && packageBase && packageBase === 'TTDI' && !isComplimentaryPkg && renewalTerm && (renewalTerm === 'month'||renewalTerm === 'monthly'))
      {activeMonthlyTTDIdaily+=1}
      // quarterly
      else if (isActiveMember && packageBase && packageBase === 'TTDI' && !isComplimentaryPkg && renewalTerm && renewalTerm === 'quarterly'){
        activeQuarterlyTTDIdaily+=1}
      // 4monthly
      else if (isActiveMember && packageBase && packageBase === 'TTDI' && !isComplimentaryPkg && renewalTerm && renewalTerm === '4monthly'){
        active4MonthlyTTDIdaily+=1}
      // biyearly
      else if (isActiveMember && packageBase && packageBase === 'TTDI' && !isComplimentaryPkg && renewalTerm && renewalTerm === 'biyearly'){
        activeBiyearlyTTDIdaily+=1}
      // yearly
      else if (isActiveMember && packageBase && packageBase === 'TTDI' && !isComplimentaryPkg && renewalTerm && (renewalTerm === 'year'||renewalTerm==='yearly')){
        activeYearlyTTDIdaily+=1}
      // complimentary && complimentary promo
      else if (renewalTerm && (renewalTerm === 'never') && !userTerminated)
      {allComplimentary+=1}

      // for klcc daily
      else if (isActiveMember && packageBase && packageBase === 'KLCC' && renewalTerm && (renewalTerm === 'monthly' || renewalTerm === 'month') ){
        activeMonthlyKLCCdaily+=1}
      // quarterly
      else if (isActiveMember && packageBase && packageBase === 'KLCC' && renewalTerm && (renewalTerm === 'quarterly')){
          activeQuarterlyKLCCdaily+=1}
      // 4monthly
      else if (isActiveMember && packageBase && packageBase === 'KLCC' && renewalTerm && (renewalTerm === '4monthly')){
        active4MonthlyKLCCdaily+=1}
      // biyearly
      else if (isActiveMember && packageBase && packageBase === 'KLCC' && renewalTerm && (renewalTerm === 'biyearly')){
        activeBiyearlyKLCCdaily+=1}
      //yearly
      else if (isActiveMember && packageBase && packageBase === 'KLCC' && renewalTerm && (renewalTerm === 'year'||renewalTerm === 'yearly')){
        activeYearlyKLCCdaily+=1}

      // for all expired
      if (isExpiredMember && packageBase){unpaidAll+=1}
      if (isExpiredMember && packageBase && packageBase === 'TTDI'){unpaidTTDI+=1}
      else if (isExpiredMember && packageBase && packageBase === 'KLCC'){unpaidKLCC+=1}

      // for 1 month expired member ttdi
      if (isExpiredMember && packageBase && packageBase === 'TTDI'
        && moment(getTheDate(membershipEnd)).isBetween(moment().subtract(1, 'months').subtract(1,'days'), moment().add(1, 'days')))
      {unpaid1MonthTTDI+=1}
      else if (isExpiredMember && packageBase && packageBase === 'TTDI'
      && moment(getTheDate(membershipEnd)).isBetween(moment().subtract(3, 'months').subtract(1,'days'), moment().add(1, 'months').add(1, 'days'))
      )
      {unpaid1to3MonthTTDI+=1}
      else if (isExpiredMember && packageBase && packageBase === 'TTDI'
      && moment(getTheDate(membershipEnd)).isBefore(moment().subtract(3, 'months')))
      {unpaid3MonthTTDI+=1}
      
      // for klcc
      if (isExpiredMember && packageBase && packageBase === 'KLCC'
      && moment(getTheDate(membershipEnd)).isBetween(moment().subtract(1, 'months').subtract(1,'days'), moment().add(1, 'days'))
      )
      {unpaid1MonthKLCC+=1}
      else if (isExpiredMember && packageBase && packageBase === 'KLCC'
      && moment(getTheDate(membershipEnd)).isBetween(moment().subtract(3, 'months').subtract(1,'days'), moment().add(1, 'months').add(1, 'days'))
      )
      {unpaid1to3MonthKLCC+=1}
      else if (isExpiredMember && packageBase && packageBase === 'KLCC'
      && moment(getTheDate(membershipEnd)).isBefore(moment().subtract(3, 'months'))
      )
      {unpaid3MonthKLCC+=1}
  });

  Object.keys(packageSaleMapVend).forEach(key=>{
    const packageDataVend = packageSaleMapVend[key];
    const outlet = packageDataVend.outlet;
    const source = packageDataVend.source;
    vendTextTTDI = ((outlet === "TTDI") && (source === 'vend'))? `${vendTextTTDI}${packageDataVend.packageName} (${packageDataVend.packageCountDaily}|${packageDataVend.packageCountMonthly}) : ${toRM(packageDataVend.totalPriceDaily)}|${parseFloat(packageDataVend.totalPriceMonthly).toFixed(2)}\n`:vendTextTTDI;
    vendTextKLCC = ((outlet === "KLCC") && (source==='vend'))? `${vendTextKLCC}${packageDataVend.packageName} (${packageDataVend.packageCountDaily}|${packageDataVend.packageCountMonthly}) : ${toRM(packageDataVend.totalPriceDaily)}|${parseFloat(packageDataVend.totalPriceMonthly).toFixed(2)}\n`:vendTextKLCC;
  });

  Object.keys(packageSaleMapAdyen).forEach(key=>{
    const packageDataAdyen = packageSaleMapAdyen[key];
    const outlet = packageDataAdyen.outlet;
    const source = packageDataAdyen.source;
    adyenTextTTDI = ((outlet === "TTDI") && (source === 'adyen'))? `${adyenTextTTDI}${packageDataAdyen.packageName} (${packageDataAdyen.packageCountDaily}|${packageDataAdyen.packageCountMonthly}) : ${toRM(packageDataAdyen.totalPriceDaily)}|${parseFloat(packageDataAdyen.totalPriceMonthly).toFixed(2)}\n`:adyenTextTTDI;
    adyenTextKLCC = ((outlet === "KLCC") && (source === 'adyen'))? `${adyenTextKLCC}${packageDataAdyen.packageName} (${packageDataAdyen.packageCountDaily}|${packageDataAdyen.packageCountMonthly}) : ${toRM(packageDataAdyen.totalPriceDaily)}|${parseFloat(packageDataAdyen.totalPriceMonthly).toFixed(2)}\n`:adyenTextKLCC;
  });

  Object.keys(activeTTDICorpPkgMap).forEach(key=>{
    const activeTTDICorpPkg = activeTTDICorpPkgMap[key];
    corpActiveTextTTDI = `${corpActiveTextTTDI}${activeTTDICorpPkg.packageName}:${activeTTDICorpPkg.activeCount}\n`;
    corpCancelTextTTDI = `${corpCancelTextTTDI}${activeTTDICorpPkg.packageName}:${activeTTDICorpPkg.cancelCount}\n`;
  });

  Object.keys(activeKLCCCorpPkgMap).forEach(key=>{
    const activeKLCCCorpPkg = activeKLCCCorpPkgMap[key];
    corpActiveTextKLCC = `${corpActiveTextKLCC}${activeKLCCCorpPkg.packageName}:${activeKLCCCorpPkg.activeCount}\n`;
    corpCancelTextKLCC = `${corpCancelTextKLCC}${activeKLCCCorpPkg.packageName}:${activeKLCCCorpPkg.cancelCount}\n`;
  });

    request.post(
      "https://hooks.slack.com/services/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",
         {json:{
          blocks:[
            {
              "type": "divider"
            },
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": `Babel Membership ${moment().format('DD-MM-YYYY')}`,
                "emoji": true
              }
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": `*ACTIVE*\ncomplimentary: ${allComplimentary}\nAll Active Members:${allActivePackage}\nFreezes: ${activeFreezeCount}\n`,
                },
                {
                  "type": "mrkdwn",
                  "text": `MTD movement (as for today)\nvend sale count (monthly):${vendCountMonthly}\nmembership payment from vend (monthly):RM${parseFloat(vendTotalCollectionMonthly).toFixed(2)}\nmembership payment from vend (daily):${toRM(vendTotalCollectionDaily)}\nadyen sale count (monthly):${adyenCountMonthly}\nmembership payment from adyen (monthly):${toRM(adyenTotalCollectionMonthly)}\nmembership payment from adyen (daily):${toRM(adyenTotalCollectionDaily)}\n`,
                },
              ]
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": `*TTDI Membership*\nActive:${allActiveTTDIPackage}\n-Complimentary:${allComplimentary}\n-Monthly:${activeMonthlyTTDIdaily}\n-3M package:${activeQuarterlyTTDIdaily}\n-4M package:${active4MonthlyTTDIdaily}\n-6M package:${activeBiyearlyTTDIdaily}\n-12M package:${activeYearlyTTDIdaily}\n*Corporate package*:${activeCorpTTDIDaily}\n${corpActiveTextTTDI}\nFrozen:${activeFreezeTTDICount}\nUnpaid (<1M):${unpaid1MonthTTDI}\nUnpaid (1 to 3M):${unpaid1to3MonthTTDI}\nUnpaid (3M+): ${unpaid3MonthTTDI}\n${corpCancelTextKLCC}`,
                },
                {
                  "type": "mrkdwn",
                  "text": `*KLCC Membership*\nActive:${allActiveKLCCPackage}\n-Complimentary:${allComplimentary}\n-Monthly:${activeMonthlyKLCCdaily}\n-3M package:${activeQuarterlyKLCCdaily}\n-4M package:${active4MonthlyKLCCdaily}\n-6M package:${activeBiyearlyKLCCdaily}\n-12M package:${activeYearlyKLCCdaily}\n*Corporate package*:${activeCorpKLCCDaily}\n${corpActiveTextKLCC}\nFrozen:${activeFreezeKLCCCount}\nUnpaid (<1M):${unpaid1MonthKLCC}\nUnpaid (1 to 3M):${unpaid1to3MonthKLCC}\nUnpaid (3M+): ${unpaid3MonthKLCC}\n${corpCancelTextTTDI}`,
                },
              ]
            },
            {
              "type": "divider"
            },
            {
              "type": "section",
              "fields": [
                {
                  "type": "mrkdwn",
                  "text": `*TTDI Movement*:smile:\n*Vend*\n${vendTextTTDI}*Adyen*\n${adyenTextTTDI}ManualCharge(${adyenCountManualChargeTTDIDaily}):${toRM(adyenTotalCollectionManualTTDIDaily)}\nAutoCharge(${adyenCountAutoChargeTTDIDaily}):${toRM(adyenTotalCollectionAutoTTDIDaily)}|${toRM(adyenMaxPriceTTDIDaily)}\nFrozen(${freezeExecutedUniqueUserTTDICountDaily}):${freezeAddCountTTDIDaily} months\nFreeze Removed:${freezeExecutedUniqueUserRemovedTTDICountDaily}\nCancelled:${cancelExecutedTTDIToday}\nVisitors:${checkInVisitorCountTTDIToday}`,
                },
                {
                  "type": "mrkdwn",
                  "text": `*KLCC Movement*:smile:\n*Vend*\n${vendTextKLCC}*Adyen*\n${adyenTextKLCC}ManualCharge(${adyenCountManualChargeKLCCDaily}):${toRM(adyenTotalCollectionManualKLCCDaily)}\nAutoCharge(${adyenCountAutoChargeKLCCDaily}):${toRM(adyenTotalCollectionAutoKLCCDaily)}|${toRM(adyenMaxPriceKLCCDaily)}\nFrozen(${freezeExecutedUniqueUserKLCCCountDaily}):${freezeAddCountKLCCDaily} months\nFreeze Removed:${freezeExecutedUniqueUserRemovedKLCCCountDaily}\nCancelled:${cancelExecutedKLCCToday}\nVisitors:${checkInVisitorCountKLCCToday}`,
                },
              ]
            },
            // {
            //   "type": "section",
            //   "fields": [
            //     {
            //       "type": "mrkdwn",
            //       "text": `*Daily TTDI Movement*\n*Vend*\nMonthly Package(${monthlyPkgTTDICountDaily}):${toRM(monthlyPkgTTDITotalPriceDaily)}\n3M term package(${term3MTTDICountDaily}):${toRM(term3MTTDITotalPriceDaily)}\n6M term package(${term6MTTDICountDaily}):${toRM(term6MTTDITotalPriceDaily)}\n6M renewal(${renewal6MTTDICountDaily}):${toRM(renewal6MTTDITotalPriceDaily)}\n12M term(${term12MTTDICountDaily}):${toRM(term12MTTDITotalPriceDaily)}\n12M renewal(${renewal12MTTDICountDaily}):RM${toRM(renewal12MTTDITotalPriceDaily)}\nAugust Promo(${augustPromo3MPkgTTDICountDaily}):${toRM(augustPromo3MPkgTTDITotalPriceDaily)}\nMid Sept Promo(${midSepPromo3MPkgTTDICountDaily}):${toRM(midSepPromo3MPkgTTDITotalPriceDaily)}\nCorporate180(${CP180PkgTTDICountDaily}):${toRM(CP180PkgTTDITotalPriceDaily)}\nCorporate210(${CP210PkgTTDICountDaily}):${toRM(CP210PkgTTDITotalPriceDaily)}\nCorporate230(${CP230PkgTTDICountDaily}):${toRM(CP230PkgTTDITotalPriceDaily)}\n*Adyen*\nManual-Charge(${adyenCountManualChargeTTDIDaily}):${toRM(adyenTotalCollectionManualTTDIDaily)}\nAuto-Charge(${adyenCountAutoChargeTTDIDaily}):${toRM(adyenTotalCollectionAutoTTDIDaily)}|${toRM(adyenMaxPriceTTDIDaily)}\nFrozen(${freezeExecutedUniqueUserTTDICountDaily}):${freezeAddCountTTDIDaily} months\nFreeze Removed:${freezeExecutedUniqueUserRemovedTTDICountDaily}\nCancelled:${cancelExecutedTTDIToday}\nVisitors:${checkInVisitorCountTTDIToday}`,
            //     },
            //     {
            //       "type": "mrkdwn",
            //       "text": `*Daily KLCC Movement*\n*Vend*\nMonthly Package(${monthlyPkgKLCCCountDaily}):${toRM(monthlyPkgKLCCTotalPriceDaily)}\n3M term package(${term3MKLCCCountDaily}):${toRM(term3MKLCCTotalPriceDaily)}\n6M term package(${term6MKLCCCountDaily}):${toRM(term6MKLCCTotalPriceDaily)}\n12M term package(${term12MKLCCCountDaily}):RM${term12MKLCCTotalPriceDaily}\nAugust 2020 Promo(${augustPromo3MPkgKLCCCountDaily}):${toRM(augustPromo3MPkgKLCCTotalPriceDaily)}\nMid Sep Promo(${midSepPromo3MPkgKLCCCountDaily}):${toRM(midSepPromo3MPkgKLCCTotalPriceDaily)}\nUNO promo(${unoPromo4MPkgKLCCCountDaily}):${toRM(unoPromo4MPkgKLCCTotalPriceDaily)}\nCorporate290(${CP290PkgKLCCCountDaily}):${toRM(CP290PkgKLCCTotalPriceDaily)}\nCorporate310(${CP310PkgKLCCCountDaily}):${toRM(CP310PkgKLCCTotalPriceDaily)}\n*Adyen*\nManual-Charge(${adyenCountManualChargeKLCCDaily}):${toRM(adyenTotalCollectionManualKLCCDaily)}\nAuto-Charge(${adyenCountAutoChargeKLCCDaily}):${toRM(adyenTotalCollectionAutoKLCCDaily)}|${toRM(adyenMaxPriceKLCCDaily)}\nFrozen(${freezeExecutedUniqueUserKLCCCountDaily}):${freezeAddCountKLCCDaily} months\nFreeze Removed:${freezeExecutedUniqueUserRemovedKLCCCountDaily}\nCancelled:${cancelExecutedKLCCToday}\nVisitors:${checkInVisitorCountKLCCToday}`,
            //     },
            //   ]
            // },
            // {
            //   "type": "divider"
            // },
            // {
            //   "type": "section",
            //   "fields": [
            //     {
            //       "type": "mrkdwn",
            //       "text": `*MTD TTDI Movement*\nMTD Frozen(${freezeExecutedUniqueUserTTDICountMonthly}):${freezeAddCountTTDIMonthly} months\nMTD Canceled:${cancelExecutedTTDIThisMonth}\nMTD Unpaid:${unpaidTTDI}\nMTD Adyen\n-Renewals:`,
            //     },
            //     {
            //       "type": "mrkdwn",
            //       "text": `*MTD KLCC Movement*\nMTD Frozen(${freezeExecutedUniqueUserKLCCCountMonthly}):${freezeAddCountKLCCMonthly} months\nMTD Canceled:${cancelExecutedKLCCThisMonth}\nMTD Unpaid:${unpaidKLCC}\nMTD Adyen\nRenewals:`,
            //     },
            //   ]
            // },
          ]
        }
      }
    )

    return res.status(200).send({
      success:true,
      adyenCountDaily, adyenCountDailyClosed, adyenCountDailyRefunded,
      adyenCountMonthly, adyenCountMonthlyClosed, adyenCountMonthlyRefunded,
      vendCountDaily, vendCountDailyClosed, vendCountDailyVoided, vendCountDailyLaybyClosed,
      vendCountMonthly, vendCountMonthlyClosed,vendCountMonthlyVoided, vendCountMonthlyLaybyClosed,
      vendTotalCollection,
      activeFreezeCount,
      allComplimentary,
      allActiveTTDIPackage,
      allActiveKLCCPackage,
      //ttdi
      activeMonthlyTTDIdaily,
      activeQuarterlyTTDIdaily,
      active4MonthlyTTDIdaily,
      activeBiyearlyTTDIdaily,
      activeYearlyTTDIdaily,
      //klcc
      activeMonthlyKLCCdaily,
      activeQuarterlyKLCCdaily,
      active4MonthlyKLCCdaily,
      activeBiyearlyKLCCdaily,
      activeYearlyKLCCdaily,

      unpaidAll, unpaidTTDI, unpaidKLCC,
      unpaid1MonthTTDI, unpaid1to3MonthTTDI, unpaid3MonthTTDI,
      unpaid1MonthKLCC, unpaid1to3MonthKLCC, unpaid3MonthKLCC,
      packageSaleMapVend,packageSaleMapAdyen, activeTTDICorpPkgMap, activeKLCCCorpPkgMap,
      vendTextTTDI, vendTextKLCC, adyenTextTTDI, adyenTextKLCC, corpActiveTextTTDI, corpActiveTextKLCC,
      packageMap, packageWithPaymentArray,
    })
    // .then(result=>{
    //   console.log('addDailyTransactionToSlackMessage: ', result);
    //   return request.post(
    //     "https://hooks.slack.com/services/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",
    //     {json:{
    //       text:`Sales on ${moment().format('DD-MM-YYYY')} \n
    //       active\n: 
    //       complimentary: 25\n
    //       monthly: 16\n
    //       3M:212\n
    //       `}
    //     }
    //   )
    // }).catch(error=>{
    //   console.log('addDailyTransactionToSlackError: ', error);

    // });
    // console.log('payments: ', payments);
  });
});

// // // // // add all non-membership payments to sheets
// // // // exports.addAllNonMembershipPaymentToSheets = functions.https.onRequest((req, res) => {
// // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // //   const paymentQuery = admin.firestore().collection('payments').get();
// // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // //   const usersQuery = admin.firestore().collection('users').get();

// // // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // // //     var batch = admin.firestore().batch();
// // // //     const paymentResults = result[0];
// // // //     const packagesResults = result[1];
// // // //     const userResults = result[2];

// // // //     var packageMap = {};
// // // //     packagesResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       packageMap[doc.id] = data;
// // // //     });

// // // //     var userMap = {};
// // // //     userResults.forEach(doc=>{
// // // //       const data = doc.data();
// // // //       if (data){
// // // //         userMap[doc.id] = data;
// // // //       }
// // // //     });

// // // //     var payments = [];
// // // //     paymentResults.forEach(payment=>{
// // // //       if (payment && payment.data()){
// // // //         const data = payment.data();
// // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // //         const userId = data.userId? data.userId:null;
// // // //         const userData = userId ? userMap[userId]:null;
// // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // //         const userEmail = userData? userData.email? userData.email: " ": " ";
// // // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // // //         // const packageId = data.packageId? data.packageId:" ";
// // // //         const quantity = data.quantity? data.quantity:" ";
// // // //         const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // // //         const source = data.source? data.source:" ";
// // // //         const status = data.status? data.status:" ";
// // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // //         const type = data.type? data.type:" ";
// // // //         const transactionId = data.transactionId? data.transactionId:" ";
// // // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // // //         const vendSaleId = data.vendSaleId? data.vendSaleId:" ";
// // // //         const detailName = data.detailName? data.detailName:" ";
// // // //         const productName = data.productName? data.productName:" ";
// // // //         // const packageData = packageId ? packageMap[packageId] : " ";
// // // //         // const packageName = packageData && packageData.name? packageData.name:" ";

// // // //         if (type && type !== 'membership'){
// // // //           const paymentData = [
// // // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // //             userName, userEmail,
// // // //             invoiceId,
// // // //             detailName,
// // // //             productName,
// // // //             quantity,
// // // //             renewalTerm,
// // // //             source,
// // // //             status,
// // // //             totalPrice,
// // // //             type,
// // // //             userId,
// // // //             transactionId,
// // // //             vendProductId,
// // // //             vendSaleId
// // // //           ];
// // // //           payments.push(paymentData);
// // // //         }
// // // //       }
// // // //     });

// // // //     payments.sort((a,b)=>{
// // // //       var dateA = new Date(a[0]);
// // // //       var dateB = new Date(b[0]);
// // // //       if (dateA < dateB) {return -1}
// // // //       if (dateA > dateB) {return 1}
// // // //       return 0;
// // // //     });

// // // //     // console.log('payments: ', payments);

// // // //     const updateSheetPromise = updateGoogleSheet({
// // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // //       resource: {
// // // //         // How the input data should be interpreted.
// // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // //         // The new values to apply to the spreadsheet.
// // // //         data: [
// // // //           {
// // // //             range: `AUTO NON MEMBERSHIP PAYMENT!A2:S`,
// // // //             majorDimension: "ROWS",
// // // //             values: payments
// // // //           }
// // // //         ],  // TODO: Update placeholder value.
  
// // // //         // TODO: Add desired properties to the request body.
// // // //       },
// // // //     });

// // // //     return updateSheetPromise.then((result)=>{
// // // //       // console.log('theresult: ', result);
// // // //       return res.status(200).send({
// // // //         success:true,
// // // //         data: 'data',
// // // //         payments: payments,
// // // //       });
// // // //     });
// // // //   });
// // // // });

// // // // add payments to user sheets
// // // exports.addPaymentAcademyToSheets = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments')
// // //     // .where('type', '==', 'product')
// // //     .get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const paymentResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     var userMap = {};
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //       }
// // //     });

// // //     var payments = [];
// // //     paymentResults.forEach(payment=>{
// // //       if (payment && payment.data()){
// // //         const data = payment.data();
// // //         const createdAt = data.createdAt? data.createdAt:null;
// // //         const userId = data.userId? data.userId:null;
// // //         const userData = userId ? userMap[userId]:null;
// // //         const userName = userData? userData.name? userData.name : " " : " ";
// // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // //         // const packageId = data.packageId? data.packageId:" ";
// // //         const quantity = data.quantity? data.quantity:" ";
// // //         const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // //         const source = data.source? data.source:" ";
// // //         const status = data.status? data.status:" ";
// // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // //         const type = data.type? data.type:" ";
// // //         const transactionId = data.transactionId? data.transactionId:" ";
// // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // //         const vendSaleId = data.vendSaleId? data.vendSaleId:" ";
// // //         const detailName = data.detailName? data.detailName:" ";
// // //         const productName = data.productName? data.productName:" ";
// // //         // const packageData = packageId ? packageMap[packageId] : " ";
// // //         // const packageName = packageData && packageData.name? packageData.name:" ";

// // //         if (type!=='membership'){
// // //           const paymentData = [
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //             userName,
// // //             invoiceId,
// // //             detailName,
// // //             productName,
// // //             quantity,
// // //             renewalTerm,
// // //             source,
// // //             status,
// // //             totalPrice,
// // //             type,
// // //             userId,
// // //             transactionId,
// // //             vendProductId,
// // //             vendSaleId
// // //           ];
// // //           payments.push(paymentData);
// // //         }
// // //       }
// // //     });

// // //     payments.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `AUTO ACADEMY!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values: payments
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         payments: payments,
// // //       });
// // //     });
// // //   });
// // // });

// // // // add all vend payment to sheet
// // // exports.addAllVendBabelToSheets = functions.https.onRequest((req, res) => {
// // //   const vendPaymentQuery = admin.firestore().collection('vendSales').get();
// // //   const userQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([vendPaymentQuery, userQuery]).then(result=>{
// // //     const vendRes = result[0];
// // //     const userRes = result[1];

// // //     var userMap = {};

// // //     userRes && userRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const vendCustomerId = data && data.vendCustomerId;
// // //       if (data && vendCustomerId){
// // //         userMap[vendCustomerId] = data;
// // //       }
// // //     });

// // //     var vendArray = [];
// // //     var vendSheet = [];
// // //     vendRes && vendRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const created_at = data && data.created_at;
// // //       const customer_id = data && data.customer_id;
// // //       const invoice_number = data && data.invoice_number;
// // //       const outlet_id = data && outlet_id;
// // //       const isTTDIOutlet = (outlet_id && outlet_id === '0af7b240-abc5-11e7-eddc-d4a1c0133102');
// // //       const isKLCCOutlet = (outlet_id && outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026');
// // //       const status = data && data.status;
// // //       const totals = data && data.totals;
// // //       const total_payment = (totals && totals.total_payment)? totals.total_payment: data.total_price_incl? data.total_price_incl:null;
// // //       const total_price = totals && totals.total_price;
// // //       const total_tax = totals && totals.total_tax;

// // //       vendArray = [
// // //         created_at? created_at:'',
// // //         customer_id? customer_id:'',
// // //         isTTDIOutlet? 'TTDI':isKLCCOutlet? 'KLCC':'',
// // //         status? status:'',
// // //         total_payment? total_payment:'',
// // //         total_price? total_price:'',
// // //         total_tax? total_tax:''
// // //       ];
// // //       vendSheet.push(vendArray);

// // //     });

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: '1WWeWODlMluxfVcJYK4ECLFo9UnAa6IKALRqHAZ973go',
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `VEND PAYMENT!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values: vendSheet
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       }
// // //     });

// // //     return Promise.all([updateSheetPromise]).then((results)=>{
// // //       // const resOnlinePayment = results[0];
// // //       return res.status(200).send({
// // //         success:true,
        
// // //         // babelAccName
// // //       });
// // //     });


// // //   });
// // // });

// // // // add adyen online payment to sheet
// // // exports.addAdyenPaymentBabelToSheets = functions.https.onRequest((req, res) => {
// // //   // from adyen
// // //   const adyenPaymentQuery = admin.firestore().collection('adyTransactions').get();
// // //   const invoiceQuery = admin.firestore().collection('invoices').get();
// // //   const userQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments').get();
// // //   const pbOnlineQuery = admin.firestore().collection('transactions').get();

// // //   return Promise.all([adyenPaymentQuery, invoiceQuery, userQuery, paymentQuery, pbOnlineQuery]).then(results=>{
// // //     const adyenPaymentRes = results[0];
// // //     const invoiceRes = results[1];
// // //     const userRes = results[2];
// // //     const paymentResult = results[3];
// // //     const pbOnlineRes = results[4];

// // //     var invoiceMap = {};
// // //     var invoiceByUserId = {};
// // //     invoiceRes && invoiceRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const invoiceId = doc.id;
// // //       const userId = data && data.userId;
// // //       invoiceMap[doc.id]=data;
// // //     });

// // //     var userMap = {}
// // //     userRes && userRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       userMap[doc.id]=data;
// // //     });

// // //     var adyenPaymentByTransIdMap = {};
// // //     var pbOnlineByTransMap = {};
// // //     paymentResult && paymentResult.forEach(doc=>{
// // //       const data = doc.data();
// // //       const source = data && data.source;
// // //       const type = data && data.type;
// // //       // for adyen
// // //       const transactionId = data && data.transactionId;
// // //       if (source === 'adyen' && transactionId){
// // //         adyenPaymentByTransIdMap[transactionId] = data;
// // //       }
// // //       else if (source === 'pbonline'){
// // //         pbOnlineByTransMap[transactionId] = data;
// // //       }
// // //     });

// // //     var adyenPaymentArray = [];
// // //     var adyenPaymentArraySheet = [];
// // //     adyenPaymentRes && adyenPaymentRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const notificationItems = data && data.notificationItems;
// // //       const eventDate = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.eventDate;
// // //       const eventCode = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.eventCode;
// // //       // for invoiceId
// // //       const merchantReference = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.merchantReference;
// // //       const paymentMethod = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.paymentMethod;
// // //       const cardSummary = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.additionalData && notificationItems[0].NotificationRequestItem.additionalData.cardSummary;
// // //       const amountAdyenCurrency = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.amount && notificationItems[0].NotificationRequestItem.amount.currency;
// // //       const amountAdyen = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.amount && notificationItems[0].NotificationRequestItem.amount.value && (parseFloat(notificationItems[0].NotificationRequestItem.amount.value)/100).toFixed(2);
// // //       const status = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //         && notificationItems[0].NotificationRequestItem.success;
// // //       const transactionId = doc.id;

// // //       const invoiceData = invoiceMap[merchantReference];
// // //       const userId = invoiceData && invoiceData.userId;
// // //       const userData = userId && userMap[userId];
// // //       const userEmail = userData && userData.email;
// // //       const userName = userData && userData.name;
// // //       const adyenPaymentData = adyenPaymentByTransIdMap[doc.id];
// // //       const type = adyenPaymentData && adyenPaymentData.type;
// // //       const source = adyenPaymentData && adyenPaymentData.source;
// // //       const productName = adyenPaymentData && adyenPaymentData.productName;
// // //       const detailName = adyenPaymentData && adyenPaymentData.detailName;
// // //       const paymentStatus = adyenPaymentData && adyenPaymentData.status;
// // //       const vendProductId = invoiceData && invoiceData.vendProductId;
// // //       const quantity = adyenPaymentData && adyenPaymentData.quantity;

// // //       adyenPaymentArray = [
// // //         transactionId? transactionId:'',
// // //         merchantReference?merchantReference:'',
// // //         eventDate? eventDate:'',
// // //         eventCode? eventCode:'',
// // //         paymentMethod? paymentMethod:'',
// // //         cardSummary? cardSummary:'',
// // //         amountAdyenCurrency? amountAdyenCurrency:'',
// // //         amountAdyen?amountAdyen:'',
// // //         status? status:'',
// // //         userId? userId:'',
// // //         userEmail? userEmail:'',
// // //         userName? userName:'',
// // //         type?type:'',
// // //         source?source:'',
// // //         productName? productName:'',
// // //         detailName? detailName:'',
// // //         paymentStatus? paymentStatus:'',
// // //         vendProductId? vendProductId:'',
// // //         quantity? quantity:'',

// // //       ];
// // //       adyenPaymentArraySheet.push(adyenPaymentArray);
// // //     });

// // //     var pbonlinePaymentArray = [];
// // //     pbOnlineRes && pbOnlineRes.forEach(doc=>{
// // //       const data = doc.data();
// // //       const PAN = data && data.PAN;
// // //       const amount = data && data.amount && (parseFloat(data.amount)/100).toFixed(2);
// // //       const invoiceNo = data && data.invoiceNo;
// // //       const createdAt = data && data.createdAt && (moment(getTheDate(data.createdAt)).format('YYYY-MM-DDTHH:mm:ss'));
// // //       // const source = 'pbonline';
// // //       const transactionId = doc.id;
// // //       const authCode = data && data.authCode;
// // //       const response = data && data.response;
// // //       const paymentData = pbOnlineByTransMap[doc.id];
// // //       const userId = paymentData && paymentData.userId;
// // //       const userData = userMap[userId];
// // //       const userEmail = userData && userData.email;
// // //       const userName = userData && userData.name;
// // //       const type = paymentData && paymentData.type;
// // //       const source = paymentData && paymentData.source;
// // //       const productName = paymentData && paymentData.productName;
// // //       const detailName = paymentData && paymentData.detailName;
// // //       const paymentStatus = paymentData && paymentData.status;

      
// // //       pbonlinePaymentArray = [
// // //         transactionId? transactionId:'',
// // //         invoiceNo? invoiceNo:'',
// // //         createdAt? createdAt:'',
// // //         authCode? authCode:'',
// // //         '', // payment method (pbonline unknown)
// // //         PAN? PAN:'', // cardsummary
// // //         'MYR',
// // //         amount? amount:'',
// // //         response? response === '00'? 'CLOSED':response:'',
// // //         userId? userId:'',
// // //         userEmail? userEmail:'',
// // //         userName? userEmail:'',
// // //         type? type:'',
// // //         source? source:'',
// // //         productName? productName:'',
// // //         detailName? detailName:'',
// // //         paymentStatus? paymentStatus:'',
// // //         // vendProductId? vendProductId:'',
// // //         // quantity? quantity:'',

// // //       ];
// // //       adyenPaymentArraySheet.push(pbonlinePaymentArray);
// // //     });


// // //     const updateSheetPromiseFromAdyen = updateGoogleSheet({
// // //       spreadsheetId: '1x_qfQjCSVJeWu_eAbuH2zSBB9sE-iVFBwZo5LQvASr4',
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `ONLINE PAYMENT3!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values: adyenPaymentArraySheet
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       }
// // //     });

// // //     return Promise.all([updateSheetPromiseFromAdyen]).then((results)=>{
// // //       const resOnlinePayment = results[0];
// // //       return res.status(200).send({
// // //         success:true,
        
// // //         // babelAccName
// // //       });
// // //     });

// // //   });

// // // });

// // // const babelAccountingFormatId = '1fb3G98GZYVxxt9xfhNzpGLb7y8ogiroowreZ-VQ37hE';
// // // // add payments to babel sheet (other than membership)
// // // exports.addPaymentBabelToSheets = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const paymentQuery = admin.firestore().collection('payments')
// // //     // .where('type', '==', 'product')
// // //     .get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   const vendSaleQuery = admin.firestore().collection('vendSalesV3').get();
// // //   // const vendSaleQuery = admin.firestore().collection('vendSales').get();
// // //   const vendProductQuery = admin.firestore().collection('vendProducts').get();

// // //   // from SKU tab
// // //   const getSheetSKUPromise = getGoogleSheetPromise({
// // //     spreadsheetId:babelAccountingFormatId,
// // //     range: `SKU!A2:J`,
// // //   });

// // //   // from adyen
// // //   // const adyenPaymentQuery = admin.firestore().collection('adyTransactions').get();

// // //   var babelGroupObj = {};
// // //   var babelGroupArray = [];

// // //   var rp2 = require('request-promise');
// // //   var optionsEdit = vendGetAllCustomer();
// // //   var vendCustomerMap = {};
// // //   var vendCustomer;
// // //   rp2(optionsEdit).then(function (result){
// // //     vendCustomer = result;
// // //   });

// // //   return Promise.all([paymentQuery, packagesQuery, usersQuery, vendSaleQuery, getSheetSKUPromise, vendProductQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const paymentResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];
// // //     const vendResults = result[3];
// // //     const skuRes = result[4];
// // //     const vendProdRes = result[5];
// // //     // const adyenPaymentRes = result[6];

// // //     // var adyenPaymentArray = [];
// // //     // var adyenPaymentArraySheet = [];
// // //     // adyenPaymentRes && adyenPaymentRes.forEach(doc=>{
// // //     //   const data = doc.data();
// // //     //   const notificationItems = data && data.notificationItems;
// // //     //   const eventDate = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.eventDate;
// // //     //   const eventCode = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.eventCode;
// // //     //   // for invoiceId
// // //     //   const merchantReference = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.merchantReference;
// // //     //   const paymentMethod = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.paymentMethod;
// // //     //   const cardSummary = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.additionalData && notificationItems[0].NotificationRequestItem.additionalData.cardSummary;
// // //     //   const amountAdyenCurrency = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.amount && notificationItems[0].NotificationRequestItem.amount.currency;
// // //     //   const amountAdyen = notificationItems && notificationItems[0] && notificationItems[0].NotificationRequestItem
// // //     //     && notificationItems[0].NotificationRequestItem.amount && notificationItems[0].NotificationRequestItem.amount.value;
      
// // //     //   // temporary
// // //     //   adyenPaymentArray.push(
// // //     //     merchantReference?merchantReference:'',
// // //     //     eventDate? eventDate:'',
// // //     //     paymentMethod? paymentMethod:'',
// // //     //     cardSummary? cardSummary:'',
// // //     //     amountAdyenCurrency? amountAdyenCurrency:'',
// // //     //     amountAdyen?amountAdyen:'',

// // //     //     );
// // //     //   adyenPaymentArraySheet.push(adyenPaymentArray);

// // //     // });

// // //     const vendCustomerData = vendCustomer && vendCustomer.data;
// // //     vendCustomerData && vendCustomerData.forEach(cust=>{
// // //       // console.log('theCust: ', cust);
// // //       const custId = cust.id;
// // //       const email = cust.email;
// // //       const name = cust.first_name;
// // //       vendCustomerMap[cust.id]={email, name, custId};
// // //     });

// // //     const vendProdMap = {};
// // //     vendProdRes && vendProdRes.forEach(doc=>{
// // //       vendProdMap[doc.id]=doc.data();
// // //     });
    
// // //     const skuValues = skuRes && skuRes.values;

// // //     skuValues && skuValues.forEach(data2=>{
// // //       //data1 && data1.forEach(data2=>{
// // //         const productId = data2[0];
// // //         const productTypeId = data2[1];
// // //         const babelAccName = data2[2];
// // //         const prodTypeName = data2[3];
// // //         const price = data2[4];
// // //         const base_name = data2[5];
// // //         const name = data2[6];
// // //         babelGroupArray = babelGroupObj[babelAccName] || [];
// // //         babelGroupArray.push(productId);
// // //         babelGroupObj[babelAccName] = babelGroupArray;
// // //     });

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     var vendCustMap = {};
    
// // //     var userMap = {};
// // //     var userMapByVend = {}
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //         const vendCustomerId = data && data.vendCustomerId;
// // //         userMapByVend[vendCustomerId] = data;
// // //       }
// // //     });

// // //     var payments = [];
// // //     paymentResults.forEach(payment=>{
// // //       if (payment && payment.data()){
// // //         const data = payment.data();
// // //         const createdAt = data.createdAt? data.createdAt:null;
// // //         const userId = data.userId? data.userId:null;
// // //         const userData = userId ? userMap[userId]:null;
// // //         const userName = userData? userData.name? userData.name : " " : " ";
// // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // //         // const packageId = data.packageId? data.packageId:" ";
// // //         const quantity = data.quantity? data.quantity:" ";
// // //         const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // //         const source = data.source? data.source:" ";
// // //         const status = data.status? data.status:" ";
// // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // //         const type = data.type? data.type:" ";
// // //         const transactionId = data.transactionId? data.transactionId:" ";
// // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // //         const vendSaleId = data.vendSaleId? data.vendSaleId:" ";
// // //         const detailName = data.detailName? data.detailName:" ";
// // //         const productName = data.productName? data.productName:" ";
  
// // //         // const packageData = packageId ? packageMap[packageId] : " ";
// // //         // const packageName = packageData && packageData.name? packageData.name:" ";

// // //         if (type!=='membership'){
// // //           const paymentData = [
// // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //             userName,
// // //             invoiceId,
// // //             detailName,
// // //             productName,
// // //             quantity,
// // //             renewalTerm,
// // //             source,
// // //             status,
// // //             totalPrice,
// // //             type,
// // //             userId,
// // //             transactionId,
// // //             vendProductId,
// // //             vendSaleId
// // //           ];
// // //           payments.push(paymentData);
// // //         }
// // //       }
// // //     });

// // //     payments.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     // hardcode first
// // //     const babelDanceProductArray = [
// // //       '000eb1e5-ff89-9396-da46-751752b101ed',
// // //       '0272b66d-4dc3-285d-e948-37b0088a5750', // vend
// // //       '03bdc243-2501-1787-16d8-4dd6b6a88369',
// // //       '06e22a00-c8e9-e3fb-ed46-46324ad1b0b9',
// // //       '072f066b-73a0-62d5-4f42-832b1364fad6',
// // //       '0cd234f0-7056-01dc-371c-05f953649051',
// // //       '13a0a053-78fa-efcd-7b60-026dba252793',
// // //       '19ec5cfa-e5c5-e565-500c-1f9e1f862b14', // vend
// // //       '1abb5848-7e32-0366-e400-2275e0302b18',
// // //       '1efb6f05-1489-487d-389c-6f4a4b66a672', // vend
// // //       '2c5110d9-af4d-e37e-fbb5-08165c693baf',
// // //       '30198d7b-68ff-d2d6-ec0d-d7bb9f6e0735',
// // //       '491c8f9f-1e00-a9c4-a82c-8fdba5de6329',
// // //       '51a1f440-45c3-d544-eba1-de1f28ed5e64', // vend
// // //       '5f36132e-4a5a-3d74-1b0e-d815131e04e9',
// // //       '66992658-5abb-b723-07d1-ea28aaf0e4d9',
// // //       '6fc5baef-129c-79e0-97f1-ce4e8fc366fa',
// // //       '7a154af8-b067-b337-aa1c-06ab6d1df79a',
// // //       '859e5b90-0e7c-182c-2400-a89d599240f8', // vend
// // //       '948feb3c-0447-0723-6817-5e4ab7daa399',
// // //       '9a20891f-ac31-6688-4189-1767ceb6d941', // vend
// // //       '9d14891b-7712-7084-1bbb-953dcc7ab89d', // vend
// // //       'b788bc60-2fde-2039-7862-05caa7957abf', // vend
// // //       'bf1be4bc-0701-c5d3-0533-6bf27a4ec42c', // vend
// // //       'c4c33e39-1fcb-98be-211d-e09182122f3b', // vend
// // //       'ee048d6e-c2b7-0f07-156b-ef337c0aa2e3'
// // //     ];

// // //     var vendPayments = [];
// // //     vendResults && vendResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       const customer_id = data && data.customer_id;
// // //       const totals = data && data.totals;
// // //       const total_payment = (totals && totals.total_payment)? totals.total_payment: data.total_price_incl? data.total_price_incl:null;
// // //       const total_price = totals && totals.total_price;
// // //       const total_tax = totals && totals.total_tax;
// // //       const created_at = data.created_at;
// // //       const outlet_id = data.outlet_id;
// // //       const isTTDIOutlet = (outlet_id && outlet_id === '0af7b240-abc5-11e7-eddc-d4a1c0133102');
// // //       const isKLCCOutlet = (outlet_id && outlet_id === '0af7b240-aba0-11e9-fb5b-b0907137b026');
// // //       const sale_date = data && data.sale_date;
// // //       const vendSaleId = doc.id;
// // //       const register_sale_products = data.register_sale_products? data.register_sale_products:data.line_items?data.line_items:null;
// // //       var product_idsArray = [];
// // //       // console.log('register_sale_products: ', register_sale_products);

// // //       register_sale_products && register_sale_products.forEach(prod=>{
// // //         const product_id = prod.product_id;
// // //         product_idsArray.push(product_id);
// // //       });
// // //       // console.log('product_idsArray: ', product_idsArray);

// // //       const register_sale_payments = data && data.register_sale_payments;
// // //       const payment_type = register_sale_payments && register_sale_payments[0];
// // //       //vendsales v1
// // //       // const payment_type_name = register_sale_payments && register_sale_payments[0] && register_sale_payments[0].payment_type
// // //       //   && register_sale_payments[0].payment_type.name;
// // //       // payment_type && payment_type.name;
// // //       //vendsales v3
// // //       const payment_type_name = register_sale_payments && register_sale_payments[0] && register_sale_payments[0].name;

// // //       const userData = userMapByVend[customer_id];
// // //       const userEmail = userData && userData.email;
// // //       const userName = userData && userData.name;
// // //       const status = data && data.status;
// // //       // for vend v1
// // //       // const CROdata = data && data.user;
// // //       // const CROemail = CROdata && CROdata.email;
// // //       const invoice_number = data && data.invoice_number;
// // //       // for vend v3
// // //       const user_id = data && data.user_id;
// // //       const CROdata = userMapByVend[user_id];
// // //       const CROemail = CROdata && CROdata.email;

// // //       const vendCustData = vendCustomerMap[customer_id];
// // //       // console.log('vendCustData: ', vendCustData);
// // //       const userEmailVend = vendCustData && vendCustData.email;
// // //       const userNameVend = vendCustData && vendCustData.name;

// // //       var vendProdData;
// // //       var vendBaseName = [];
// // //       // const userEmailVend = vendCustomerData && vendCustomerData

// // //       var emailFromVend = '';
// // //       var nameFromVend = '';
// // //       // vendCustomerData && vendCustomerData.forEach(vendData=>{
// // //       //   if (vendData && vendData.id === customer_id){
// // //       //     emailFromVend = vendData.email;
// // //       //     nameFromVend = vendData.first_name;
// // //       //     // const userEmailVend = vendCustData && vendCustData.email;
// // //       //     // const userNameVend = vendCustData && vendCustData.first_name;
// // //       //     // return true;
// // //       //   }
// // //       // });

// // //       var babelAccName = [];

// // //       // Object.entries(babelGroupObj).forEach(([key,value]) => {
// // //       //   for (let i = 0; i<product_idsArray.length; i++){

// // //       //   }
// // //       //   if (value.includes(product_idsArray)){

// // //       //   }
// // //       // });
      
// // //       for (let i = 0; i<product_idsArray.length; i++){
// // //         Object.entries(babelGroupObj).forEach(([key,value]) => {
// // //           if (value.includes(product_idsArray[i])){
// // //             babelAccName.push(key);
// // //             vendProdData = vendProdMap[product_idsArray[i]];
// // //             const base_name = vendProdData && vendProdData.base_name;
// // //             vendBaseName.push(base_name);
// // //           }    
// // //         });
        
// // //       }

// // //       // console.log('babelAccName: ', babelAccName);

// // //       if (status && status === 'CLOSED'){
// // //         const vendPaymentData = [
// // //           created_at? created_at:'',
// // //           sale_date? sale_date:'',
// // //           customer_id? customer_id:'',
// // //           userEmail? userEmail:'',
// // //           userName? userName: '',
// // //           userEmailVend? userEmailVend:'',
// // //           userNameVend? userNameVend:'',
// // //           // emailFromVend? emailFromVend:'',
// // //           // nameFromVend? nameFromVend:'',$
// // //           // isTTDIOutlet? 'TTDI':'KLCC',
// // //           isTTDIOutlet? 'TTDI':isKLCCOutlet?'KLCC':`outletId not found`,
// // //           total_payment? total_payment:'0',
// // //           product_idsArray? product_idsArray.join():'',
// // //           babelAccName.length>1? babelAccName.join():babelAccName[0],
// // //           vendBaseName.length>1? vendBaseName.join():vendBaseName[0],
// // //           payment_type_name? payment_type_name:'',
// // //           CROemail? CROemail:'',
// // //           vendSaleId? vendSaleId:'',
          
// // //         ];
// // //         vendPayments.push(vendPaymentData);
// // //       }
// // //     });

// // //     const updateSheetPromiseAdyen = updateGoogleSheet({
// // //       spreadsheetId: '1x_qfQjCSVJeWu_eAbuH2zSBB9sE-iVFBwZo5LQvASr4',
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `ONLINE PAYMENT2!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values: payments
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     // const updateSheetPromiseFromAdyen = updateGoogleSheet({
// // //     //   spreadsheetId: '1x_qfQjCSVJeWu_eAbuH2zSBB9sE-iVFBwZo5LQvASr4',
// // //     //   resource: {
// // //     //     // How the input data should be interpreted.
// // //     //     valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //     //     // The new values to apply to the spreadsheet.
// // //     //     data: [
// // //     //       {
// // //     //         range: `ONLINE PAYMENT3!A2:S`,
// // //     //         majorDimension: "ROWS",
// // //     //         values: adyenPaymentArraySheet
// // //     //       }
// // //     //     ],  // TODO: Update placeholder value.
  
// // //     //     // TODO: Add desired properties to the request body.
// // //     //   }
// // //     // });

// // //     const updateSheetPromiseVend = updateGoogleSheet({
// // //       spreadsheetId: '1x_qfQjCSVJeWu_eAbuH2zSBB9sE-iVFBwZo5LQvASr4',
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `VEND PAYMENT vendSalesV3!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values:vendPayments
// // //             // values: [['test', 'saya'],['saya', 'faizul']]
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });
// // //     // return updateSheetPromise.then((result)=>{
// // //     //   // console.log('theresult: ', result);
// // //     //   return res.status(200).send({
// // //     //     success:true,
// // //     //     data: 'data',
// // //     //     payments: payments,
// // //     //   });
// // //     // });
// // //     return Promise.all([updateSheetPromiseAdyen, updateSheetPromiseVend]).then((results)=>{
// // //       const resOnlinePayment = results[0];
// // //       const resVendPayment = results[1];
// // //       return res.status(200).send({
// // //         success:true,
// // //         vendCustomerMap,
// // //         vendCustomerData:vendCustomer.data,
// // //         adyenPayment: payments,
// // //         babelGroupObj,
// // //         vendCustomer
// // //         // babelAccName
// // //       });
// // //     });
// // //   });
// // // });
// // // // // // add all payments to user sheets
// // // // // exports.addAllInvoicesToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const invoicesQuery = admin.firestore().collection('invoices').where('paid', '==', true).get();
// // // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const vendProductQuery = admin.firestore().collection('vendProducts').get();

// // // // //   return Promise.all([invoicesQuery, packagesQuery, usersQuery, vendProductQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const invoiceResults = result[0];
// // // // //     const packagesResults = result[1];
// // // // //     const userResults = result[2];
// // // // //     const vendResults = result[3];

// // // // //     var packageMap = {};
// // // // //     packagesResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       packageMap[doc.id] = data;
// // // // //     });

// // // // //     var userMap = {};
// // // // //     userResults.forEach(doc=>{
// // // // //       const data = doc.data();
// // // // //       if (data){
// // // // //         userMap[doc.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var vendProductMap = {};
// // // // //     vendResults && vendResults.forEach(product=>{
// // // // //       const data = product.data();
// // // // //       if (data){
// // // // //         vendProductMap[product.id] = data;
// // // // //       }
// // // // //     });

// // // // //     var invoices = [];
// // // // //     invoiceResults.forEach(invoice=>{
// // // // //       if (invoice && invoice.data()){
// // // // //         const data = invoice.data();
// // // // //         const createdAt = data.createdAt || null;
// // // // //         const receiptMailed = data.receiptMailed || null; // 1
// // // // //         const receiptMailedAt = data.receiptMailedAt? data.receiptMailedAt:null;
// // // // //         const paymentId = data.paymentId || null; // 2
// // // // //         const userId = data.userId? data.userId:null;
// // // // //         const userData = userId ? userMap[userId]:null;
// // // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // // //         const userEmail = userData? userData.email? userData.email : " " : " "; // 3
// // // // //         const packageId = data.packageId? data.packageId:null;
// // // // //         const packageData = packageId ? packageMap[packageId] : null;
// // // // //         const packageName = packageData && packageData.name? packageData.name:" "; // 4
// // // // //         const vendProductId = data.vendProductId||null;
// // // // //         const vendProductData = vendProductId? vendProductMap[vendProductId]:null;
// // // // //         const productName = vendProductData && (vendProductData.product_type? (vendProductData.product_type.name? vendProductData.product_type.name : "n/a") : "n/a"); 
// // // // //         const totalPrice = data.totalPrice? data.totalPrice:" "; //5
// // // // //         const quantity = data.quantity? data.quantity:1;
// // // // //         const chargeAttempts = data.chargeAttempts? data.chargeAttempts:" "; // 6
// // // // //         const paid = data.refunded? 'refunded':data.paid? 'paid': 'n/a';
// // // // //         const invoiceMailed = data.invoiceMailed? data.invoiceMailed:false;
// // // // //         const invoiceMailedAt = data.invoiceMailedAt? data.invoiceMailedAt:null;
// // // // //         const dueMailed = data.dueMailed? data.dueMailed:false;
// // // // //         const dueMailedAt = data.dueMailedAt? data.dueMailedAt:null;

// // // // //         const invoiceData = [
// // // // //           //receiptMailed? moment(getTheDate(receiptMailed)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           receiptMailed,
// // // // //           receiptMailedAt? moment(getTheDate(receiptMailedAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           paymentId,
// // // // //           invoice.id,
// // // // //           userEmail,
// // // // //           userName,
// // // // //           packageName,
// // // // //           productName,
// // // // //           quantity,
// // // // //           totalPrice,
// // // // //           chargeAttempts,
// // // // //           paid,
// // // // //           invoiceMailed,
// // // // //           invoiceMailedAt? moment(getTheDate(invoiceMailedAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'):'',
// // // // //           dueMailed,
// // // // //           dueMailedAt? moment(getTheDate(dueMailedAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'):'',
// // // // //         ];
// // // // //         invoices.push(invoiceData);
// // // // //       }
// // // // //     });

// // // // //     invoices.sort((a,b)=>{
// // // // //       var dateA = new Date(a[0]);
// // // // //       var dateB = new Date(b[0]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     // console.log('payments: ', payments);

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `AUTO ALL PAYMENTS!A2:S`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: invoices
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },
// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         invoices: invoices,
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // // // cron job to add gantnerlogs monthly
// // // exports.addMonthlyGantnerToSheets = functions.https.onRequest((req, res) => {
  
// // //   const itemData = req.body;
// // //   // console.log('itemData: ', itemData);
// // //   // need to do from 2018
// // //   const dateInput = (itemData && itemData.dateInput)? itemData.dateInput:"2020-01-1";
  
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const gantnerQuery = dateInput? admin.firestore().collection("gantnerLogs").where('createdAt', '>=', moment(dateInput).startOf('month').toDate()).get():
// // //   admin.firestore().collection("gantnerLogs").where('createdAt', '>=', moment().startOf('month').toDate()).get();
// // //   const packageQuery = admin.firestore().collection('packages').get();


// // //   return Promise.all([usersQuery, gantnerQuery, packageQuery]).then(results=>{
// // //     const userResults = results[0];
// // //     var users = {};
// // //     // userResults.forEach(doc => {
// // //     //   users[doc.id] = doc.data();
// // //     // });

// // //     // var finalArray = ['No', 'name', 'email', 'phone number', 'package name', 'club', 'membership start', 'membership end'];
// // //     var finalArray = [];

// // //     const gantnerLogResults = results[1];
// // //     const packageResults = results[2];

// // //     var gantnerLogs = [];
// // //     var gantnerMap = {};
// // //     var gantnerMapKLCC = {};
// // //     var gantnerMapTTDI = {};
// // //     var userCount = 0;
// // //     var packageMap = {};

// // //     var dateArray = [];
   
// // //     const monthDiff = Math.max(moment().diff(dateInput, 'month'));
// // //     for (var i=0; i<=monthDiff; i++){
// // //       const iterationStartMoment = moment(dateInput).tz('Asia/Kuala_Lumpur').startOf('month').clone().add(i, 'month');
// // //       // finalArray[0].push(iterationStartMoment.format('MMM YYYY'));
// // //       dateArray.push({
// // //         effectiveDate:iterationStartMoment,
// // //         dateFormat: iterationStartMoment.format('DD-MM-YYYY'),
// // //         text:0,
// // //         checkInCount: 0,
// // //         checkInCountTTDI:0,
// // //         checkInCountKLCC:0
// // //       });
// // //     }

// // //     packageResults && packageResults.forEach(doc=>{
// // //       packageMap[doc.id]=doc.data();
// // //     });

// // //     var gantnerArray = [];
// // //     var gantnerArrayKLCC = [];
// // //     var gantnerArrayTTDI = [];

// // //     gantnerLogResults && gantnerLogResults.forEach(function(doc) {
// // //       const data = doc.data();
// // //       const createdAt = data && data.createdAt;
// // //       const userId = data && data.userId;
// // //       const deviceId = data && data.deviceId;
// // //       const deviceIdKLCC = deviceId && deviceId.includes("KLCC");
// // //       const authorized = data && data.authorized;
// // //       const registered = data && data.registered;

// // //       const startOfTheMonth = dateInput? moment(dateInput).tz('Asia/Kuala_Lumpur').startOf('month').subtract(1, 'day'):moment().tz('Asia/Kuala_Lumpur').startOf('month').subtract(1, 'day');
// // //       const endOfTheMonth = dateInput? moment(dateInput).tz('Asia/Kuala_Lumpur').endOf('month').add(1, 'day'):moment().tz('Asia/Kuala_Lumpur').endOf('month').add(1, 'day');
// // //       // checking if the gantner logs exist between the date
// // //       const isBetweenMonth = moment(getTheDate(createdAt)).isBetween(startOfTheMonth, endOfTheMonth);

// // //       // if (deviceId && isBetweenMonth && authorized && registered){
// // //       if (deviceId && authorized && registered){
// // //         // gantnerMap[userId] = data;
// // //         gantnerArray = gantnerMap[userId] || [];
// // //         gantnerArray.push(data);
// // //         gantnerMap[userId] = gantnerArray;
// // //       }
// // //     });


// // //     // for all
// // //     var combinedMonthArray = [];
// // //     var monthObject = {};

// // //     userResults && userResults.forEach(doc=>{
// // //       var combinedData = [];
// // //       var gantnerCount = 0;
// // //       var gantnerCountKLCC = 0;
// // //       var gantnerCountTTDI = 0;
// // //       var monthArray = [];

// // //       const userId = doc.id;
// // //       const data = doc.data();
// // //       const gantnerData = data && gantnerMap[userId];
// // //       const gantnerDataKLCC = data && gantnerMapKLCC[userId];
// // //       const gantnerDataTTDI = data && gantnerMapTTDI[userId];

// // //       const email = data && data.email;
// // //       const name = data && data.name;
// // //       const phone = data && data.phone;
// // //       const cancellationDate = data && data.cancellationDate;
// // //       const packageId = data && data.packageId;
// // //       const packageData = packageId && packageMap[packageId];
// // //       const packageName = packageData && packageData.name;
// // //       const packageClub = packageData && packageData.base;
// // //       const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds: data.membershipEnds? data.membershipEnds:null;
// // //       const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;

// // //       // if (!cancellationDate && packageId && membershipStarts && membershipEnds){
// // //       if (packageId && membershipStarts && membershipEnds){
// // //         userCount+=1;

// // //         var totalCheckIn = 0;
// // //         // var totalCheckInKLCC = Object.keys(gantnerDataKLCC).length

// // //         // create array for date from jan2020 till today (month)
        
// // //         gantnerData && gantnerData.sort((a,b)=>{
// // //           const createdAtA = a.createdAt;
// // //           const createdAtB = b.createdAt;
// // //           if (createdAtA < createdAtB) {return -1}
// // //           if (createdAtB < createdAtA) {return 1}
// // //           return 0;
// // //         });

// // //         // var userCheckInCountKLCCDaily = 0;
// // //         // var userCheckInCountTTDIDaily = 0;
// // //         // var userCheckInCountDaily = 0;
// // //         // var userTotalCheckInCheckOut = 0;

// // //         dateArray && dateArray.forEach(doc=>{
// // //           const effectiveDate = doc.effectiveDate;

// // //           var userCheckInCountKLCCDaily = 0;
// // //           var userCheckInCountTTDIDaily = 0;
// // //           var userCheckInCountDaily = 0;
// // //           var userTotalCheckInCheckOut = 0;
          
// // //           if (effectiveDate){
// // //             gantnerData && gantnerData.forEach((data, index, arr)=>{
// // //               // userTotalCheckInCheckOut+=1;
// // //               const createdAt = data && data.createdAt;
// // //               const deviceId = data && data.deviceId;
// // //               const userId = data && data.userId;

// // //               const startOfTheMonth = effectiveDate.clone().startOf('month').subtract(1, 'day');
// // //               const endOfTheMonth = effectiveDate.clone().add(1, 'month').add(1, 'day');

// // //               // checking if the gantner logs exist between the date
// // //               const isBetweenMonth = moment(getTheDate(createdAt)).isBetween(startOfTheMonth, endOfTheMonth);

// // //               // if ((index === 0) && effectiveDate && userId && isBetweenMonth){
// // //               //   userCheckInCountDaily=1;
// // //               // }
// // //               if (effectiveDate && createdAt && userId && isBetweenMonth && index>0 && !(moment(getTheDate(createdAt)).isSame(moment(getTheDate(arr[index-1].createdAt)), 'day'))){
// // //                 userCheckInCountDaily+=1;
// // //                 if(deviceId && deviceId.includes("KLCC")){
// // //                   userCheckInCountKLCCDaily+=1;
// // //                 }
// // //                 else{
// // //                   userCheckInCountTTDIDaily+=1;
// // //                 }
// // //               }
// // //               // if (effectiveDate && moment(getTheDate(createdAt)).isBetween(effectiveDate.subtract(1, 'day'), effectiveDate.add(1, 'month').add(1, 'day'))){
// // //               //   userCheckInCountDaily+=1;
// // //               //   if (deviceId.includes("KLCC")){
// // //               //     userCheckInCountKLCCDaily+=1;
// // //               //   // arr[index].checkInCountKLCC
// // //               //   }
// // //               // // for TTDI
// // //               //   else{userCheckInCountTTDIDaily+=1;}
// // //               // }
// // //             });
// // //             monthArray.push({userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut});
// // //           }
// // //           // gantnerData && gantnerData.forEach((data, index, arr)=>{
// // //           //   const createdAt = data && data.createdAt;
// // //           //   const deviceId = data && data.deviceId;
// // //           //   const userId = data && data.userId;

// // //           //   // if (effectiveDate && moment(getTheDate(createdAt)).isBetween(effectiveDate.subtract(1, 'day'), effectiveDate.add(1, 'month').add(1, 'day'))){
// // //           //     userTotalCheckInCheckOut+=1;
            
// // //           //     // combinedMonthArray.push({userId, deviceId});
// // //           //     if (deviceId.includes("KLCC")){

// // //           //       userCheckInCountKLCCDaily+=1;
// // //           //       // arr[index].checkInCountKLCC
// // //           //     }
// // //           //     // for TTDI
// // //           //     else{userCheckInCountTTDIDaily+=1;}


// // //           //     // monthObject[userId] = 
// // //           //     // monthArray.push(userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut)
// // //           //     // monthObject[userId] = monthArray;
// // //           //   // }
            
// // //           //   combinedData.push({
// // //           //     // userId,
// // //           //     userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut
// // //           //   });
// // //           //   // userTotalCheckInCheckOut+=1;
// // //           //   // if (index === 0){
// // //           //   //   userCheckInCountDaily=1;
// // //           //   //   if (deviceId.includes("KLCC")){userCheckInCountKLCCDaily+=1}
// // //           //   //   // for TTDI
// // //           //   //   else{userCheckInCountTTDIDaily+=1;}
// // //           //   // }
// // //           //   // // only increase check in count if it is not today
// // //           //   // // check with previous day
// // //           //   // if (index>0 && !(moment(getTheDate(createdAt)).isSame(moment(getTheDate(arr[index-1].createdAt)), 'day'))){
// // //           //   //   userCheckInCountDaily+=1;
// // //           //   //   // for KLCC
// // //           //   //   if (deviceId.includes("KLCC")){userCheckInCountKLCCDaily+=1;}
// // //           //   //   // for TTDI
// // //           //   //   else{userCheckInCountTTDIDaily+=1;}
// // //           //   // }
// // //           //   monthArray.push({userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut});
// // //           //   // monthArray.push(userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut);
// // //           // });
// // //           // monthArray.push(userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut)
// // //           // combinedMonthArray.push(monthArray);
// // //        });

// // //       //  monthArray.push({userCheckInCountKLCCDaily, userCheckInCountTTDIDaily, userCheckInCountDaily, userTotalCheckInCheckOut})
// // //        combinedMonthArray.push(monthArray);

// // //         finalArray.push([
// // //           userCount, 
// // //           name? name:'', 
// // //           email? email:'', 
// // //           phone? phone:'',
// // //           packageName? packageName:'', 
// // //           packageClub? packageClub: '', 
// // //           membershipStarts? moment(getTheDate(membershipStarts)).format('YYYY-MM-DD'):'',
// // //           membershipEnds? moment(getTheDate(membershipEnds)).format('YYYY-MM-DD'):'',
          
// // //           // combinedData[0].userCheckInCountKLCCDaily, combinedData[0].userCheckInCountTTDIDaily,
// // //           // combinedData[0].userCheckInCountDaily, combinedData[0].userTotalCheckInCheckOut,
// // //           cancellationDate? moment(getTheDate(cancellationDate)).format('YYYY-MM-DD'):'',
// // //           // monthArray
// // //           // userCheckInCountKLCCDaily, userCheckInCountTTDIDaily,
// // //           // userCheckInCountDaily, userTotalCheckInCheckOut,
// // //           // 2020?
// // //           monthArray[0].userCheckInCountKLCCDaily, monthArray[0].userCheckInCountTTDIDaily, monthArray[0].userCheckInCountDaily,
// // //           monthArray[1].userCheckInCountKLCCDaily, monthArray[1].userCheckInCountTTDIDaily, monthArray[1].userCheckInCountDaily,
// // //           monthArray[2].userCheckInCountKLCCDaily, monthArray[2].userCheckInCountTTDIDaily, monthArray[2].userCheckInCountDaily,
// // //           monthArray[3].userCheckInCountKLCCDaily, monthArray[3].userCheckInCountTTDIDaily, monthArray[3].userCheckInCountDaily,
// // //           monthArray[4].userCheckInCountKLCCDaily, monthArray[4].userCheckInCountTTDIDaily, monthArray[4].userCheckInCountDaily,
// // //           monthArray[5].userCheckInCountKLCCDaily, monthArray[5].userCheckInCountTTDIDaily, monthArray[5].userCheckInCountDaily,
// // //           monthArray[6].userCheckInCountKLCCDaily, monthArray[6].userCheckInCountTTDIDaily, monthArray[6].userCheckInCountDaily,
// // //           monthArray[7].userCheckInCountKLCCDaily, monthArray[7].userCheckInCountTTDIDaily, monthArray[7].userCheckInCountDaily,
// // //           monthArray[8].userCheckInCountKLCCDaily, monthArray[8].userCheckInCountTTDIDaily, monthArray[8].userCheckInCountDaily,
// // //           monthArray[9].userCheckInCountKLCCDaily, monthArray[9].userCheckInCountTTDIDaily, monthArray[9].userCheckInCountDaily,
// // //           monthArray[10].userCheckInCountKLCCDaily, monthArray[10].userCheckInCountTTDIDaily, monthArray[10].userCheckInCountDaily,
// // //           monthArray[11].userCheckInCountKLCCDaily, monthArray[11].userCheckInCountTTDIDaily, monthArray[11].userCheckInCountDaily,

// // //           // monthArray[1], monthArray[2], monthArray[3], 
// // //           // monthArray[4], monthArray[5], monthArray[6], monthArray[7],
// // //           // gantnerDataKLCC 
// // //           // moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'),
         
// // //         ]);
// // //       }
      
// // //     });
  
// // //     // const getSheetPromise = getGoogleSheetPromise({
// // //     //   spreadsheetId: CONFIG_SHEET_ID,
// // //     //   range: `GANTNER LOGS MONTHLY!A2:BL`,
// // //     // });
  
// // //     // return getSheetPromise.then((result)=>{
// // //     //   console.log('theresult: ', result);
// // //     //   const values = result && result.values;
// // //     //   const rowsCount = (values && values.length)? values.length:0;
// // //     //   // const colCount = 
      
// // //     //   // console.log('sheetReport: ', sheetReport);

// // //     //   const updateSheetPromise = updateGoogleSheet({
// // //     //     spreadsheetId: CONFIG_SHEET_ID,
// // //     //     // valueInputOption: 'RAW',
        
// // //     //     resource: {
// // //     //       // How the input data should be interpreted.
// // //     //       valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
// // //     //       // The new values to apply to the spreadsheet.
// // //     //       data: [
// // //     //         {
// // //     //           range: `GANTNER LOGS MONTHLY!A2:BL`,
// // //     //           majorDimension: "ROWS",
// // //     //           values: finalArray
// // //     //         }
// // //     //       ],  
// // //     //     },

// // //     //   });

// // //     //   return updateSheetPromise.then((result)=>{
// // //     //     // console.log('theresult: ', result);
// // //     //     return res.status(200).send({
// // //     //       success:true,
// // //     //       finalArray,
// // //     //       dateArray,
// // //     //       combinedMonthArray
// // //     //     });
// // //     //   });
// // //     // });

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `GANTNER LOGS MONTHLY!A2:BL`,
// // //             majorDimension: "ROWS",
// // //             values: finalArray,

// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });


// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         // data: 'data'
// // //         // gantnerMapKLCC,
// // //         // totalCheckIn,
// // //         // gantnerMap,
// // //         // combinedMonthArray
// // //         // combinedMonthArray,
// // //         dateArray,
// // //         combinedMonthArray
// // //       });
// // //     });
// // //   });
// // // });

// // // // cron job to add gantnerlogs daily
// // // exports.addDailyGantnerToSheets = functions.https.onRequest((req, res) => {
  
// // //   const itemData = req.body;
// // //   // console.log('itemData: ', itemData);
// // //   const dateInput = itemData && itemData.dateInput;
  
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const gantnerQuery = dateInput? admin.firestore().collection("gantnerLogs").where('createdAt', '>=', moment(dateInput).startOf('day').toDate()).get():
// // //   admin.firestore().collection("gantnerLogs").where('createdAt', '>=', moment().startOf('day').toDate()).get();

// // //   return Promise.all([usersQuery, gantnerQuery]).then(results=>{
// // //     const userResults = results[0];
// // //     var users = {};
// // //     // userResults.forEach(doc => {
// // //     //   users[doc.id] = doc.data();
// // //     // });

// // //     var finalArray = [];
// // //     var totalGantnerCount = 0;
// // //     var gantnerCountKLCC = 0;
// // //     var gantnerCountTTDI = 0;
// // //     var gantnerCountAppRegKLCC = 0;
// // //     var gantnerCountAppRegTTDI = 0;
// // //     var gantnerCountCardCheckInKLCC = 0;
// // //     var gantnerCountCardCheckInTTDI = 0;
// // //     var gantnerCountCardManualCheckInKLCC = 0;
// // //     var gantnerCountCardManualCheckInTTDI = 0;

// // //     const gantnerLogResults = results[1];
// // //     var gantnerLogs = [];
// // //     var gantnerMap = {};
// // //     var gantnerMapKLCC = {};
// // //     var gantnerMapTTDI = {};
// // //     var gantnerAppRegKLCC = {};
// // //     var gantnerAppRegTTDI = {};
// // //     var gantnerCardCheckInKLCC = {};
// // //     var gantnerCardCheckInTTDI = {};
// // //     var gantnerManualCheckInKLCC = {};
// // //     var gantnerManualCheckInTTDI = {};
// // //     var sheetReport = [];

// // //     gantnerLogResults && gantnerLogResults.forEach(function(doc) {
// // //       const data = doc.data();
// // //       const createdAt = data && data.createdAt;
// // //       const userId = data && data.userId;
// // //       const deviceId = data && data.deviceId;
// // //       const isTodayDate = dateInput? (moment(dateInput).tz("Asia/Kuala_Lumpur").startOf('day')
// // //         .isBetween((moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').startOf('day').add(1, 'day'), (moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').startOf('day').subtract(1, 'day'))))):true;
      
// // //       if (deviceId && isTodayDate){
// // //         gantnerMap[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "App - Registration (KLCC)" || deviceId === "Check In - KLCC" || deviceId === "App - Manual (KLCC)")){
// // //         gantnerMapKLCC[userId] = data;
// // //       }
// // //       else if (isTodayDate && (deviceId === "App - Registration" || deviceId === "Check In" || deviceId === "App - Manual")){
// // //         gantnerMapTTDI[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "App - Registration (KLCC)")){
// // //         gantnerAppRegKLCC[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "App - Registration")){
// // //         gantnerAppRegTTDI[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "Check In - KLCC")){
// // //         gantnerCardCheckInKLCC[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "Check In")){
// // //         gantnerCardCheckInTTDI[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "App - Manual (KLCC)")){
// // //         gantnerManualCheckInKLCC[userId] = data;
// // //       }
// // //       if (isTodayDate && (deviceId === "App - Manual")){
// // //         gantnerManualCheckInTTDI[userId] = data;
// // //       }
// // //     });

// // //     userResults && userResults.forEach(doc=>{
// // //       const userId = doc.id;
// // //       const data = doc.data();
// // //       const gantnerData = data && gantnerMap[userId];
// // //       const gantnerDataKLCC = data && gantnerMapKLCC[userId];
// // //       const gantnerDataTTDI = data && gantnerMapTTDI[userId];
// // //       const gantnerAppRegKLCCData = data && gantnerAppRegKLCC[userId];
// // //       const gantnerAppRegTTDIData = data && gantnerAppRegTTDI[userId];
// // //       const gantnerCardCheckInKLCCData = data && gantnerCardCheckInKLCC[userId];
// // //       const gantnerCardCheckInTTDIData = data && gantnerCardCheckInTTDI[userId];
// // //       const gantnerManualCheckInKLCCData = data && gantnerManualCheckInKLCC[userId];
// // //       const gantnerManualCheckInTTDIData = data && gantnerManualCheckInTTDI[userId];

// // //       const isCheckInToday = gantnerData;
// // //       const isKLCCCheckInToday = gantnerDataKLCC;
// // //       const isTTDICheckInToday = gantnerDataTTDI;
     
// // //       if (isCheckInToday){
// // //         totalGantnerCount+=1;
// // //       }
// // //       if (isKLCCCheckInToday){
// // //         gantnerCountKLCC+=1;
// // //       }
// // //       else if (isTTDICheckInToday){
// // //         gantnerCountTTDI+=1;
// // //       }
// // //       if (gantnerAppRegKLCCData){
// // //         gantnerCountAppRegKLCC+=1;
// // //       }
// // //       else if (gantnerAppRegTTDIData){
// // //         gantnerCountAppRegTTDI+=1;
// // //       }
// // //       if (gantnerCardCheckInKLCCData){
// // //         gantnerCountCardCheckInKLCC+=1;
// // //       }
// // //       else if (gantnerCardCheckInTTDIData){
// // //         gantnerCountCardCheckInTTDI+=1;
// // //       }
// // //       if (gantnerManualCheckInKLCCData){
// // //         gantnerCountCardManualCheckInKLCC+=1;
// // //       }
// // //       else if (gantnerManualCheckInTTDIData){
// // //         gantnerCountCardManualCheckInTTDI+=1;
// // //       }
// // //     });


// // //     finalArray.push([
// // //       moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD'),
// // //       gantnerCountKLCC, gantnerCountTTDI, totalGantnerCount,
// // //       gantnerCountAppRegKLCC, gantnerCountAppRegTTDI, gantnerCountCardCheckInKLCC, gantnerCountCardCheckInTTDI,
// // //       gantnerCountCardManualCheckInKLCC, gantnerCountCardManualCheckInTTDI
// // //     ]);

// // //     const getSheetPromise = getGoogleSheetPromise({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       range: `GANTNER LOGS DAILY!A2:N`,
// // //     });
  
// // //     return getSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       const values = result && result.values;
// // //       const rowsCount = (values && values.length)? values.length:0;
      
// // //       sheetReport = [[
// // //         rowsCount + 1,
// // //         dateInput? moment(dateInput).tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY'):moment().tz('Asia/Kuala_Lumpur').format('DD/MM/YYYY'),
// // //         dateInput? moment(dateInput).tz('Asia/Kuala_Lumpur').format('dddd'):moment().tz('Asia/Kuala_Lumpur').format('dddd'),
// // //         gantnerCountKLCC, 
// // //         gantnerCountTTDI,
// // //         totalGantnerCount,
// // //         gantnerCountAppRegKLCC,
// // //         gantnerCountAppRegTTDI,
// // //         gantnerCountCardCheckInKLCC, 
// // //         gantnerCountCardCheckInTTDI,
// // //         gantnerCountCardManualCheckInKLCC,
// // //         gantnerCountCardManualCheckInTTDI
// // //         // visitorCountNonRegister
// // //       ]];
      
// // //       // console.log('sheetReport: ', sheetReport);

// // //       const updateSheetPromise = updateGoogleSheet({
// // //         spreadsheetId: CONFIG_SHEET_ID,
// // //         // valueInputOption: 'RAW',
        
// // //         resource: {
// // //           // How the input data should be interpreted.
// // //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
// // //           // The new values to apply to the spreadsheet.
// // //           data: [
// // //             {
// // //               range: `GANTNER LOGS DAILY!A${rowsCount+2}:N`,
// // //               majorDimension: "ROWS",
// // //               values: sheetReport
// // //             }
// // //           ],  
// // //         },

// // //       });

// // //       return updateSheetPromise.then((result)=>{
// // //         // console.log('theresult: ', result);
// // //         return res.status(200).send({
// // //           success:true,
// // //           sheetReport,
// // //           gantnerMap, gantnerMapKLCC, gantnerMapTTDI
// // //         });
// // //       });
// // //     });
// // //   });
// // // });

// // // // add gantnerlogs
// // // exports.addGantnerToSheets = functions.https.onRequest((req, res) => {
// // //   const usersQuery = admin.firestore().collection('users').get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const gantnerQuery = admin.firestore().collection("gantnerLogs").where('createdAt', '>=', moment('20200301').startOf('day').toDate()).where('createdAt', '<=', moment('20200315').startOf('day').toDate()).orderBy('createdAt').get();
// // //   const packageQuery = admin.firestore().collection('packages').get();
// // //   // const gantnerQuery = admin.firestore().collection("gantnerLogs").get();

// // //   return Promise.all([usersQuery, packageQuery, gantnerQuery]).then(results=>{
// // //     const userResults = results[0];
// // //     var users = {};
// // //     userResults.forEach(doc => {
// // //       users[doc.id] = doc.data();
// // //     });

// // //     const packagesResults = results[1];
// // //     var packages = {};
// // //     packagesResults.forEach(doc => {
// // //       packages[doc.id] = doc.data();
// // //     });

// // //     const logResults = results[2];
// // //     var gantnerLogs = [];
// // //     logResults.forEach(function(doc) {
// // //       const data = doc.data();
// // //       const createdAt = data && data.createdAt;
// // //       const userId = data && data.userId;
// // //       const deviceId = data && data.deviceId;
// // //       // const deviceIdIsKLCC = deviceId && deviceId.toLowerCase().indexOf('klcc') !== -1;
// // //       // if (userId && createdAt && !deviceIdIsKLCC) {
// // //       if (userId && createdAt && deviceId) {  
// // //         gantnerLogs.push(doc.data());
// // //       }
// // //     });

// // //     gantnerLogs.sort((a,b)=>{
      
// // //       const aId = a.userId;
// // //       const bId = b.userId;
// // //       if (aId < bId) {return -1}
// // //       if (bId < aId) {return 1}

// // //       const createdAtA = a.createdAt;
// // //       const createdAtB = b.createdAt;
// // //       if (createdAtA < createdAtB) {return -1}
// // //       if (createdAtB < createdAtA) {return 1}

// // //       return 0;
// // //     });

// // //     var startMoment = moment("2020-02-01").startOf('day') //.add(6, 'hours');
// // //     var endMoment = moment().startOf('day') //.add(10, 'hours');

// // //     var checkinData = [];
// // //     var allCheckins = 0;
// // //     var allCheckinDetails = [];

// // //     var inGym = {};
// // //     var inGymDetails = {};
// // //     var detailsArray = [];

// // //     var allGantnerArray = [];
// // //     var finalArray = [];
// // //     gantnerLogs.forEach((logs)=>{
// // //       const createdAt = logs && logs.createdAt;
// // //       const date = createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'):null;
// // //       const day = createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('ddd'):null;
// // //       const userId = logs && logs.userId;
// // //       const userData = userId ? users[userId]:null;
// // //       const userName = userData? userData.name? userData.name : " " : " ";
// // //       const userEmail = userData? userData.email? userData.email : " " : " ";
// // //       const packageId = userData? userData.packageId? userData.packageId : null : null;
// // //       const packageData = packageId? packages[packageId]:null;
// // //       const packageName = packageData? packageData.name:"n/a";
// // //       const checkIn = createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('hh:mm A'):null;
// // //       const deviceId = logs && logs.deviceId;
// // //       // var checkOut = null;

// // //       if (allGantnerArray && allGantnerArray.length>1 && allGantnerArray[allGantnerArray.length-1].checkIn && moment(getTheDate(allGantnerArray[allGantnerArray.length-1].createdAt)).isSame(moment(getTheDate(createdAt)), 'day' ) 
// // //         && (allGantnerArray[allGantnerArray.length-1].userId === userId) && !(allGantnerArray[allGantnerArray.length-1].checkOut)
// // //       ) {
// // //         allGantnerArray[allGantnerArray.length-1].checkOut = moment(getTheDate(createdAt)).format('hh:mm A');
// // //       }
// // //       else{
// // //         allGantnerArray.push({
// // //           createdAt,
// // //           date,
// // //           day,
// // //           userId,
// // //           userEmail,
// // //           userName,
// // //           packageName,
// // //           checkIn,
// // //           checkOut:null,
// // //           deviceId
// // //         })
// // //       }
// // //     });

// // //     console.log('allGantnerArray: ', allGantnerArray);
// // //     // allGantnerArray.sort((a,b)=>{

// // //     // });

// // //     allGantnerArray.forEach((logs)=>{
// // //       const date = logs.date||null;
// // //       const day = logs.day||null;
// // //       const userName = logs.userName||null;
// // //       const userEmail = logs.userEmail||null;
// // //       const packageName = logs.packageName||null;
// // //       const checkIn = logs.checkIn||null;
// // //       const checkOut = logs.checkOut? logs.checkOut:"n/a";
// // //       const deviceId = logs.deviceId? logs.deviceId:"n/a";
// // //       finalArray.push(
// // //         [date, day, userEmail, userName, packageName, checkIn, checkOut, deviceId]
// // //       )
// // //     });
// // //     // while (startMoment <= endMoment) {
// // //     //   console.log('inside while loop');
// // //     //   var hourLogs = gantnerLogs.filter(log => {
// // //     //     const checkInDate = moment(getTheDate(log.createdAt)).startOf('hour');
// // //     //     return checkInDate.valueOf() === startMoment.valueOf()
// // //     //   });

// // //     //   var checkins = 0;
// // //     //   // hourLogs.map(log => {
// // //     //   //   const userId = log.userId;
// // //     //   //   const user = users[userId];
// // //     //   //   const roles = user && user.roles;
// // //     //   //   const isStaff = roles && (roles.admin || roles.mc || roles.trainer);
// // //     //   //   var visit;

// // //     //   //   // if(user && !isStaff){
// // //     //   //   //   if (inGymDetails[userId]) {
// // //     //   //   //     visit = inGymDetails[userId];
// // //     //   //   //     if(moment(log.createdAt).diff(moment(visit.RawIn), 'hours', true) >= 6){
// // //     //   //   //       delete visit.RawIn;
// // //     //   //   //       detailsArray.push(visit);
// // //     //   //   //       delete inGymDetails[userId];
// // //     //   //   //     }
// // //     //   //   //     visit.Out = moment(log.createdAt).format('HH:mm A');
// // //     //   //   //   } else {
// // //     //   //   //     checkins += 1;
// // //     //   //   //     allCheckins += 1;
// // //     //   //   //     inGym[userId] = true;
// // //     //   //   //     var packageName = user.packageId ? packages[user.packageId].name : '';
// // //     //   //   //     if(packageName !== '' && user.email && (user.email.indexOf('@bfm.my') !== -1 || user.email.indexOf('@bfmedge.com') !== -1) || user.email.indexOf('@bfmedge.com') !== -1 || user.email.indexOf('fi.life') !== -1){
// // //     //   //   //       packageName = packageName + ' - BFM';
// // //     //   //   //     }
// // //     //   //   //     visit = {
// // //     //   //   //       Date: startMoment.format("YYYY-MM-DD"),
// // //     //   //   //       Day: startMoment.format('ddd'),
// // //     //   //   //       Name: user.name,
// // //     //   //   //       Package:packageName,
// // //     //   //   //       In: moment(log.createdAt).format('HH:mm A'),
// // //     //   //   //       Out: ' ',
// // //     //   //   //       RawIn:log.createdAt
// // //     //   //   //     }
// // //     //   //   //     inGymDetails[userId] = visit;
// // //     //   //   //   }
// // //     //   //   // }
// // //     //   // });

// // //     //   checkinData.push({
// // //     //     Date: startMoment.format("YYYY-MM-DD"),
// // //     //     Day: startMoment.format('ddd'),
// // //     //     Time: startMoment.format('HH:mm'),
// // //     //     Checkins: checkins
// // //     //   });
// // //     //   // console.log(startMoment.format("ddd, DD-MM-YYYY") + ` : ${checkins}`);
// // //     //   console.log('checkInData: ', checkinData);
// // //     // }
// // //     //   // const oldStartMoment = startMoment.clone();
// // //     //   // startMoment = startMoment.add(1, 'hour');

// // //     //   // if (!oldStartMoment.isSame(startMoment, 'day')) {

// // //     //   //   inGym = {};
// // //     //   //   Object.keys(inGymDetails).forEach(userId => {
// // //     //   //     detailsArray.push(inGymDetails[userId]);
// // //     //   //   });
// // //     //   //   inGymDetails = {};

// // //     //   //   detailsArray.sort((a, b) => {
// // //     //   //     const aIn = a.in;
// // //     //   //     const bIn = b.in;

// // //     //   //     if (aIn < bIn) {
// // //     //   //       return -1;
// // //     //   //     }
// // //     //   //     if (bIn < aIn) {
// // //     //   //       return 1
// // //     //   //     }
// // //     //   //     const aOut = a.out;
// // //     //   //     const bOut = b.out;
// // //     //   //     if (aOut < bOut) {
// // //     //   //       return -1;
// // //     //   //     }
// // //     //   //     if (bOut < aOut) {
// // //     //   //       return 1
// // //     //   //     }
// // //     //   //     return 0;
// // //     //   //   });

// // //     //   //   // console.log(oldStartMoment.format("ddd, DD-MM-YYYY"), detailsArray.length);
// // //     //   //   detailsArray.forEach(detail=>{
// // //     //   //     delete detail.RawIn;
// // //     //   //   });
// // //     //   //   allCheckinDetails = allCheckinDetails.concat(detailsArray);
// // //     //   //   detailsArray = [];
// // //     //   // }
// // //     // }
// // //     // console.log('payments: ', payments);

// // //     // allCheckinDetails.sort((a,b)=>{
// // //     //   const aDate = a.Date;
// // //     //   const bDate = b.Date;
// // //     //   if (aDate < bDate) {
// // //     //     return -1;
// // //     //   }
// // //     //   if (bDate < aDate) {
// // //     //     return 1;
// // //     //   }
// // //     //   const aIn = a.In;
// // //     //   const bIn = b.In;
// // //     //   if (aIn < bIn) {
// // //     //     return -1;
// // //     //   }
// // //     //   if (bIn < aIn) {
// // //     //     return 1;
// // //     //   }
// // //     //   return 0;
// // //     // });

// // //     // console.log('allCheckinDetails: ', allCheckinDetails);
// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `GANTNER LOGS!A2:S`,
// // //             majorDimension: "ROWS",
// // //             values: finalArray
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     // return res.status(200).send({
// // //     //   success:true,
// // //     //   data: 'data',
// // //     //   finalArray
// // //     // });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         // data: 'data',
// // //         finalArray
// // //       });
// // //     });
// // //   });
// // // });

// function isKLCCPackage(packageId){

// //   // var isKLCCPackage = false;
// //   // const packageQuery = admin.firestore().collection('packages').doc(packageId).get();
// //   // return Promise.all([packageQuery]).then((doc)=>{
// //   //   //if (doc.exists){
// //   //     const data = doc.data();
// //   //     const base = data.base;
// //   //     if(base && base === 'KLCC'){
// //   //       isKLCCPackage = true;
// //   //     }
// //   //   //}
// //   //   return isKLCCPackage;
// //   // });
// //   // return admin.firestore().collection('packages').doc(packageId).get().then((doc)=>{
// //   // // admin.firestore().collection('packages').doc(packageId).get().then((doc)=>{  
// //   //   if (doc.exists){
// //   //     const data = doc.data();
// //   //     const base = data.base;
// //   //     if(base && base === 'KLCC'){
// //   //       isKLCCPackage = true;
// //   //     }
// //   //   }
// //   //   return isKLCCPackage;
// //   // });

// //   // return Promise.all([packageQuery]).then(result=>{
// //   //   const pkgRes = result[0];
// //   //   pkgRes && pkgRes.forEach
// //   // });

//   var isKLCCPackage = false;
//   if ((packageId === '89THMCx0BybpSVJ1J8oz')
//   || (packageId === 'BKcaoWGrWKYihS40MpGd')
//   || (packageId === 'LNGWNSdm6kf4rz1ihj0i')
//   || (packageId === 'TJ7Fiqgrt6EHUhR5Sb2q')
//   || (packageId === 'aTHIgscCxbwjDD8flTi3')
//   || (packageId === 'eRMTW6cQen6mcTJgKEvy')
//   || (packageId === 'q7SXXNKv83MkkJs8Ql0n')
//   || (packageId === 'AdXIzAK4qTgVNAK2t9be')
//   || (packageId === 'YsOxVJGLRXrHDgNTBach')
//   || (packageId === 'ciha9165NwgeF7wQz7GP')
//   || (packageId === 'kh513XOaG7eLX4z9G0Ft')
//   || (packageId === 'uQO2UsaRiqXtzPKjTSIS')
//   )
//   {
//     isKLCCPackage = true;
//   }
//   return isKLCCPackage;
// }

// function isTTDIPackage(packageId){
//   var isTTDIPackage = false;
//   if ((packageId === 'DjeVJskpeZDdEGlcUlB1')
//   || (packageId === 'VWEHvdhNVW0zL8ZAeXJX')
//   || (packageId === 'WmcQo1XVXehGaxhSNCKa')
//   || (packageId === 'ZEDcEHZp3fKeQOkDxCH8')
//   || (packageId === 'duz1AkLuin8nOUd7r66L')
//   || (packageId === 'dz8SAwq99GWdEvHCKST2')
//   || (packageId === 'vf2jCUOEeDDiIQ0S42BJ')
//   || (packageId === 'wpUO5vxWmme7KITqSITo')
//   || (packageId === 'yQFACCzpS4DKcDyYftBx')
//   || (packageId === 'w12J3n9Qs6LTViI6HaEY')
//   || (packageId === 'k7As68CqGsFbKZh1Imo4')
//   ){
//     isTTDIPackage = true;
//   }
//   return isTTDIPackage;
// }

function is3MonthKLCCPackage(packageId){
  var isKLCCPackage = false;
  if ((packageId === 'LNGWNSdm6kf4rz1ihj0i') || (packageId === 'aTHIgscCxbwjDD8flTi3')) 
  {isKLCCPackage = true}
  return isKLCCPackage;
}

function is3MonthTTDIPackage(packageId){
  var isTTDIPackage = false;
  if ((packageId === 'yQFACCzpS4DKcDyYftBx') // '3M Term Membership' // need to clarify
  || (packageId === 'w12J3n9Qs6LTViI6HaEY') // 3M Jan2020 Promo (Single Club).
  || (packageId === 'k7As68CqGsFbKZh1Imo4')) // 3M Jan2020 Promo (Single Club)
  {isTTDIPackage = true}
  return isTTDIPackage;
}

// 3/8/2020 - this function is to convert the package promoJan2020 and Aug2020 to single RM250 or All access RM330 package
function convertToSingleOrAllAccessPkg(packageId){
  if (
    packageId === 'AHgEEavKwpJoGTMOzUdX' //3M August 2020 (single access)
    || packageId === 'k7As68CqGsFbKZh1Imo4' // 3M Jan2020 Promo (Single Club)
    || packageId === 'w12J3n9Qs6LTViI6HaEY' // 3M Jan2020 Promo (Single Club).
    || packageId === 'hUZjGJR77bP30I3fjvwD' // 3M Mid September Promo (single access)
    ){
      return 'vf2jCUOEeDDiIQ0S42BJ'; // convert to monthly single package
  }
  else if (
    packageId === 'LNGWNSdm6kf4rz1ihj0i' // 3M Jan2020 Promo (All Clubs)
    || packageId === 'YsOxVJGLRXrHDgNTBach' // 3M August 2020 (all access)
    || packageId === 'kh513XOaG7eLX4z9G0Ft' // 3M mid september (all access)
    || packageId === 'uQO2UsaRiqXtzPKjTSIS' // 4Monthly UNO (all access)
  ){
    return 'TJ7Fiqgrt6EHUhR5Sb2q' // convert to monthly all access package
  }
  else{
    return null;
  }
}

// // // // // // cron job to add active users to sheets (monthly basis)
// // // // // // exports.addActiveUsersToSheets = functions.https.onRequest((req, res) => {
// // // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership')
// // // // // //     .where('createdAt', '>=', moment('20200301').startOf('day').toDate())
// // // // // //     .where('createdAt', '<=', moment('20200331').startOf('day').toDate())
// // // // // //     .get();

// // // // // //   return Promise.all([usersQuery, packagesQuery, paymentQuery]).then(result=>{
// // // // // //     var batch = admin.firestore().batch();
// // // // // //     const usersResults = result[0];
// // // // // //     const packageResult = result[1];
// // // // // //     const paymentsResults = result[2];
// // // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // // //     const startOfTodayMoment = moment('20200331').tz('Asia/Kuala_Lumpur').startOf('day');

// // // // // //     var pkgMap = {};
// // // // // //     packageResult && packageResult.forEach(pkg=>{
// // // // // //       pkgMap[pkg.id] = pkg.data();
// // // // // //     });

// // // // // //     var paymentMap = {};
// // // // // //     paymentsResults && paymentsResults.forEach(payment=>{
// // // // // //       const data = payment && payment.data();
// // // // // //       const userId = data && data.userId;
// // // // // //       if (userId){
// // // // // //         // paymentMap[payment.id] = payment.data();
// // // // // //         paymentMap[userId] = payment.data();
// // // // // //       }
// // // // // //     });

// // // // // //     // console.log('paymentMap: ', paymentMap);

// // // // // //     var users = [];
// // // // // //     usersResults.forEach(user=>{
// // // // // //       if (user && user.data()){
// // // // // //         const data = user.data();
// // // // // //         const cancelledMember = data.cancellationDate? true:false;
// // // // // //         const isCancel = data.cancellationDate? moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment):false;
// // // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// // // // // //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// // // // // //         // const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // // //         const membershipEndsMoment = autoMembershipEnds? moment(getTheDate(autoMembershipEnds)):membershipEnds? moment(getTheDate(membershipEnds)):null;
// // // // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // // // //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isBefore(startOfTodayMoment.clone()); 
// // // // // //         const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// // // // // //         const autoMembershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;
// // // // // //         const isValidStartDate = moment(getTheDate(autoMembershipStarts)).isBefore(startOfTodayMoment.clone());
// // // // // //         const packageId = data && data.packageId;
// // // // // //         const packageData = packageId ? pkgMap[packageId] : null;
// // // // // //         const packageName = packageData? packageData.name:" ";
// // // // // //         const paymentData = paymentMap? paymentMap[user.id]:null;
// // // // // //         const paymentCreatedAt = paymentData? paymentData.createdAt? moment(getTheDate(paymentData.createdAt)).format('YYYY-MM-DD'):" ": " ";
// // // // // //         const isFreeze = paymentData? paymentData.freezeFor? true:false:false;

// // // // // //         const userData = [
// // // // // //           data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : null,
// // // // // //           // data.index ? data.index:'',
// // // // // //           user.id,
// // // // // //           data.membershipCard ? data.membershipCard : '',
// // // // // //           // data.gantnerCardNumber ? data.gantnerCardNumber : '',
// // // // // //           data.name ? data.name : '',
// // // // // //           // data.firstName ? data.firstName : '',
// // // // // //           // data.lastName ? data.lastName : '',
// // // // // //           data.nric ? data.nric : '',
// // // // // //           data.passport ? data.passport : '',
// // // // // //           // data.nationality ? data.nationality : '',
// // // // // //           data.race ? data.race : '',
// // // // // //           data.gender ? data.gender : '',
// // // // // //           data.phone ? data.phone : '',
// // // // // //           data.email ? data.email : '',
// // // // // //           // data.mcId ? data.mcId : '',
// // // // // //           packageName,
// // // // // //           // data.paymentMode ? data.paymentMode : '',
// // // // // //           autoMembershipStarts ? moment(getTheDate(autoMembershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'): ' ',
// // // // // //           // membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // // //           // membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // // //           autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // // //           data.referredByUserId ? data.referredByUserId : '',
// // // // // //           // data.cancellationDate ? moment(getTheDate(data.cancellationDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // // //           // data.cancellationReason ? data.cancellationReason : '',
// // // // // //           data.remarks ? data.remarks : '',
// // // // // //           paymentCreatedAt
// // // // // //         ];

// // // // // //         if (autoMembershipStarts && !isExpiredMember && !isCancel && isValidStartDate && autoMembershipEnds && (packageId!=='L6sJtsKG68LpEUH3QeD4') && !isFreeze){
// // // // // //         // if (packageName === 'Complimentary Promo'){
// // // // // //           users.push(userData);
// // // // // //         }
// // // // // //       }
// // // // // //     });

// // // // // //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// // // // // //     users.sort((a,b)=>{
// // // // // //       var dateA = new Date(a[18]);
// // // // // //       var dateB = new Date(b[18]);
// // // // // //       if (dateA < dateB) {return -1}
// // // // // //       if (dateA > dateB) {return 1}
// // // // // //       return 0;
// // // // // //     });

// // // // // //     // var userMap = {};
// // // // // //     // usersResults && usersResults.forEach(user=>{
// // // // // //     //   if (user && user.data()){
// // // // // //     //     userMap[user.id]=user.data();
// // // // // //     //   }
// // // // // //     // });

// // // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // // //       // valueInputOption: 'RAW',
      
// // // // // //       resource: {
// // // // // //         // How the input data should be interpreted.
// // // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // // //         // The new values to apply to the spreadsheet.
// // // // // //         data: [
// // // // // //           {
// // // // // //             range: `ACTIVE USERS MONTHLY!A2:AG`,
// // // // // //             majorDimension: "ROWS",
// // // // // //             values: users
// // // // // //           }
// // // // // //         ],  // TODO: Update placeholder value.
  
// // // // // //         // TODO: Add desired properties to the request body.
// // // // // //       },

// // // // // //     });

// // // // // //     return updateSheetPromise.then((result)=>{
// // // // // //       console.log('theresult: ', result);
// // // // // //       return res.status(200).send({
// // // // // //         success:true,
// // // // // //         data: 'data',
// // // // // //         users: users,
// // // // // //         // theResponse
// // // // // //         // userCount
// // // // // //       });
// // // // // //     });
// // // // // //   });
// // // // // // });

// // // // // // cron job to add complementary users to sheets (monthly basis)
// // // // // exports.addComplementaryUsersToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership')
// // // // //     // .where('freezeFor', '>=', moment('20200201').startOf('day').toDate())
// // // // //     // .where('freezeFor', '<=', moment('20200229').startOf('day').toDate())
// // // // //     // .where('vendProductId', '==', 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7')
// // // // //     .where('source', '==', 'freeze')
// // // // //     .get();

// // // // //   return Promise.all([usersQuery, packagesQuery, paymentQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const usersResults = result[0];
// // // // //     const packageResult = result[1];
// // // // //     const paymentsResults = result[2];
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //     const startOfTodayMoment = moment('20200229').tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     var pkgMap = {};
// // // // //     packageResult && packageResult.forEach(pkg=>{
// // // // //       pkgMap[pkg.id] = pkg.data();
// // // // //     });

// // // // //     var paymentMap = {};
// // // // //     paymentsResults && paymentsResults.forEach(payment=>{
// // // // //       const data = payment && payment.data();
// // // // //       const userId = data && data.userId;
// // // // //       if (userId){
// // // // //         // paymentMap[payment.id] = payment.data();
// // // // //         paymentMap[userId] = payment.data();
// // // // //       }
// // // // //     });

// // // // //     // console.log('paymentMap: ', paymentMap);


// // // // //     var users = [];
// // // // //     var paymentFreezeArray = [];

// // // // //     usersResults.forEach(user=>{
// // // // //       if (user && user.data()){
// // // // //         const data = user.data();
// // // // //         const cancelledMember = data.cancellationDate? true:false;
// // // // //         const isCancel = data.cancellationDate? moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment):false;
// // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// // // // //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// // // // //         // const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // //         const membershipEndsMoment = autoMembershipEnds? moment(getTheDate(autoMembershipEnds)):membershipEnds? moment(getTheDate(membershipEnds)):null;
// // // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // // //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isBefore(startOfTodayMoment.clone()); 
// // // // //         const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// // // // //         const autoMembershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;
// // // // //         const isValidStartDate = moment(getTheDate(autoMembershipStarts)).isBefore(startOfTodayMoment.clone());
// // // // //         const packageId = data && data.packageId;
// // // // //         const packageData = packageId ? pkgMap[packageId] : null;
// // // // //         const packageName = packageData? packageData.name:" ";
// // // // //         const paymentData = paymentMap? paymentMap[user.id]:null;
// // // // //         const paymentCreatedAt = paymentData? paymentData.createdAt? moment(getTheDate(paymentData.createdAt)).format('YYYY-MM-DD'):" ": " ";

// // // // //         paymentCreatedAt && paymentFreezeArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         // if (paymentCreatedAt){
// // // // //         //   if(paymentFreezeArray.length>0 && paymentFreezeArray[paymentFreezeArray.length-1].userId === user.id){
// // // // //         //     paymentFreezeArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         //   }
// // // // //         //   else{
// // // // //         //     paymentFreezeArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         //   }
// // // // //         // }

// // // // //         console.log('paymentFreezeArray: ', paymentFreezeArray);

// // // // //         const userData = [
// // // // //           data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : null,
// // // // //           // data.index ? data.index:'',
// // // // //           user.id,
// // // // //           data.membershipCard ? data.membershipCard : '',
// // // // //           // data.gantnerCardNumber ? data.gantnerCardNumber : '',
// // // // //           data.name ? data.name : '',
// // // // //           // data.firstName ? data.firstName : '',
// // // // //           // data.lastName ? data.lastName : '',
// // // // //           data.nric ? data.nric : '',
// // // // //           data.passport ? data.passport : '',
// // // // //           // data.nationality ? data.nationality : '',
// // // // //           data.race ? data.race : '',
// // // // //           data.gender ? data.gender : '',
// // // // //           data.phone ? data.phone : '',
// // // // //           data.email ? data.email : '',
// // // // //           // data.mcId ? data.mcId : '',
// // // // //           packageName,
// // // // //           // data.paymentMode ? data.paymentMode : '',
// // // // //           autoMembershipStarts ? moment(getTheDate(autoMembershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'): ' ',
// // // // //           // membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           // membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           data.referredByUserId ? data.referredByUserId : '',
// // // // //           // data.cancellationDate ? moment(getTheDate(data.cancellationDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           // data.cancellationReason ? data.cancellationReason : '',
// // // // //           data.remarks ? data.remarks : '',
// // // // //           paymentCreatedAt
// // // // //         ];

// // // // //         if (autoMembershipStarts && autoMembershipEnds && paymentData && paymentData.createdAt){
// // // // //           users.push(userData);
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// // // // //     users.sort((a,b)=>{
// // // // //       var dateA = new Date(a[18]);
// // // // //       var dateB = new Date(b[18]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     // var userMap = {};
// // // // //     // usersResults && usersResults.forEach(user=>{
// // // // //     //   if (user && user.data()){
// // // // //     //     userMap[user.id]=user.data();
// // // // //     //   }
// // // // //     // });

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       // valueInputOption: 'RAW',
      
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `COMPLIMENTARY USERS!A2:AG`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: users
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },

// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         users: users,
// // // // //         // theResponse
// // // // //         // userCount
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // cron job to add complementary users to sheets (monthly basis)
// // // // // exports.addAllUsersPaymentToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership')
// // // // //     // .where('freezeFor', '>=', moment('20200201').startOf('day').toDate())
// // // // //     // .where('freezeFor', '<=', moment('20200229').startOf('day').toDate())
// // // // //     // .where('vendProductId', '==', 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7')
// // // // //     // .where('source', '==', 'freeze')
// // // // //     .get();

// // // // //   const gymStartDate = moment('20180101');
// // // // //   const monthDiff = Math.max(moment(new Date()).diff(gymStartDate, 'months'));
// // // // //   const dateObject = [];
// // // // //     // default, if there is no payment detected
// // // // //     for (var i=0; i<=monthDiff; i++){
// // // // //     const iterationStartMoment = gymStartDate.clone().add(i, 'months');
// // // // //     dateObject.push({effectiveDate:iterationStartMoment});
// // // // //   }

// // // // //   // console.log('dateObject: ', dateObject);

// // // // //   return Promise.all([usersQuery, packagesQuery, paymentQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const usersResults = result[0];
// // // // //     const packageResult = result[1];
// // // // //     const paymentsResults = result[2];
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();
    
// // // // //     // console.log('dateObjectInsidePromise: ', dateObject);

// // // // //     // const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     var pkgMap = {};
// // // // //     packageResult && packageResult.forEach(pkg=>{
// // // // //       pkgMap[pkg.id] = pkg.data();
// // // // //     });
// // // // //     console.log('packageMap: ', pkgMap);


// // // // //     var paymentMap = {};
// // // // //     // var paymentArray = [];
// // // // //     paymentsResults && paymentsResults.forEach(payment=>{
// // // // //       const data = payment && payment.data();
// // // // //       const userId = data && data.userId;
// // // // //       if(!paymentMap[userId] && data && userId)
// // // // //         // paymentMap[userId][payment.id] = {};
// // // // //         paymentMap[userId] = {};
// // // // //       else if (userId){
// // // // //         //paymentMap[payment.id] = payment.data();
// // // // //          paymentMap[userId][payment.id] = payment.data();
// // // // //         // paymentMap[userId] = paymentArray.push(payment.data());
// // // // //       }
// // // // //     });

// // // // //     console.log('paymentMap: ', paymentMap);

// // // // //     var users = [];
// // // // //     // // var paymentArray = [];


// // // // //     usersResults.forEach(user=>{
// // // // //       if (user && user.data()){
// // // // //         const data = user.data();
// // // // //         const cancelledMember = data.cancellationDate? true:false;
// // // // //         // const isCancel = data.cancellationDate? moment(getTheDate(data.cancellationDate)).isSameOrBefore(startOfTodayMoment):false;
// // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// // // // //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// // // // //         // const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // //         const membershipEndsMoment = autoMembershipEnds? moment(getTheDate(autoMembershipEnds)):membershipEnds? moment(getTheDate(membershipEnds)):null;
// // // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // // //         // const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isBefore(startOfTodayMoment.clone()); 
// // // // //         const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// // // // //         const autoMembershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;
// // // // //         // const isValidStartDate = moment(getTheDate(autoMembershipStarts)).isBefore(startOfTodayMoment.clone());
// // // // //         const packageId = data && data.packageId;
// // // // //         const packageData = packageId ? pkgMap[packageId] : null;
// // // // //         const packageName = packageData? packageData.name:" ";
// // // // //         const paymentData = paymentMap? paymentMap[user.id]:null;
// // // // //         // const monthDiff = startOfTodayMoment.diff(membershipEndsMoment, 'months') + 1;
        
// // // // //         console.log('paymentData: ', paymentData);
// // // // //         var paymentArray = [];
        
// // // // //         // if (paymentData){
// // // // //         //     //for (var userKey in paymentData){
// // // // //         //       // console.log('userKey: ' + userKey + ' paymentData[userKey]: ' + paymentData[userKey]);
// // // // //         //       for (var paymentKey in paymentData){
// // // // //         //         console.log('paymentKey: ' + paymentKey + ' paymentData[paymentKey]: ' + paymentData[paymentKey]);
// // // // //         //          Object.keys(paymentData).forEach(item => {
// // // // //         //           console.log('paymentItem: ', item);
// // // // //         //         });
// // // // //         //       }
// // // // //         //     //}
// // // // //         //   }

// // // // //         // if (paymentData){
// // // // //         //   //for (var userKey in paymentData){
// // // // //         //     // console.log('userKey: ' + userKey + ' paymentData[userKey]: ' + paymentData[userKey]);
// // // // //         //     for (var paymentKey in paymentData[userKey]){
// // // // //         //       const source = paymentData[userKey][paymentKey].source||null;
// // // // //         //       const totalPrice = paymentData[userKey][paymentKey].totalPrice||null;
// // // // //         //       const createdAt = paymentData[userKey][paymentKey].createdAt||null;
// // // // //         //       paymentArray.push({createdAt, source, totalPrice});
// // // // //         //     }
// // // // //         //   //}
// // // // //         // }
       
// // // // //         if (paymentData){
// // // // //           Object.keys(paymentData).forEach(item => {
// // // // //             console.log('paymentData: ', item);
            
// // // // //           });
// // // // //         }
       

// // // // //         // Object.entries(paymentData).forEach(([key, value]) => {
// // // // //         //   console.log(`theObject: ${key} ${value}`); // "a 5", "b 7", "c 9"
// // // // //         //   // const source = value.source||null;
// // // // //         //   // const totalPrice = payment.totalPrice||null;
// // // // //         //   // const createdAt = payment.createdAt||null;
// // // // //         //   // paymentArray.push({createdAt, source, totalPrice});
// // // // //         // });
// // // // //         // paymentData && paymentData.forEach(payment=>{
// // // // //         //   const source = payment.source||null;
// // // // //         //   const totalPrice = payment.totalPrice||null;
// // // // //         //   const createdAt = payment.createdAt||null;
// // // // //         //   paymentArray.push({createdAt, source, totalPrice});
// // // // //         // });

// // // // //         console.log('paymentArray: ', paymentArray);

// // // // //         // const paymentCreatedAt = paymentData? paymentData.createdAt? moment(getTheDate(paymentData.createdAt)).format('YYYY-MM-DD'):" ": " ";

// // // // //         // paymentCreatedAt && paymentArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         // if (paymentCreatedAt){
// // // // //         //   if(paymentFreezeArray.length>0 && paymentFreezeArray[paymentFreezeArray.length-1].userId === user.id){
// // // // //         //     paymentFreezeArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         //   }
// // // // //         //   else{
// // // // //         //     paymentFreezeArray.push({userId: user.id, paymentCreatedAt:paymentCreatedAt});
// // // // //         //   }
// // // // //         // }

// // // // //         // console.log('paymentData: ', paymentData);
// // // // //         // console.log('paymentArray: ', paymentArray);

// // // // //         // var paymentData = "250, adyen";

// // // // //         const userData = [
// // // // //           user.id,
// // // // //           autoMembershipStarts ? moment(getTheDate(autoMembershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD'): ' ',
// // // // //           autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           data.email ? data.email : '',
// // // // //           data.name ? data.name : '',
// // // // //           data.phone ? data.phone : '',
// // // // //           packageName,
// // // // //           data.remarks ? data.remarks : '',
// // // // //           // for every month payment status
// // // // //           // paymentData
// // // // //           // paymentCreatedAt
// // // // //         ];

// // // // //         if (autoMembershipStarts && autoMembershipEnds && paymentData && paymentData.createdAt){
// // // // //           users.push(userData);
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// // // // //     // users.sort((a,b)=>{
// // // // //     //   var dateA = new Date(a[18]);
// // // // //     //   var dateB = new Date(b[18]);
// // // // //     //   if (dateA < dateB) {return -1}
// // // // //     //   if (dateA > dateB) {return 1}
// // // // //     //   return 0;
// // // // //     // });

// // // // //     var userMap = {};
// // // // //     usersResults && usersResults.forEach(user=>{
// // // // //       if (user && user.data()){
// // // // //         userMap[user.id]=user.data();
// // // // //       }
// // // // //     });

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       // valueInputOption: 'RAW',
      
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `USER PAYMENT MEMBERSHIP!A2:AG`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: users
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },

// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         // users: users,
// // // // //         // theResponse
// // // // //         // userCount
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });

// // // // // // cron job to add visitors to sheet
// // // // // exports.addVisitorsToSheet = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const usersQuery = admin.firestore().collection('users').get();

// // // // //   return Promise.all([usersQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const usersResults = result[0];
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     var users = [];
// // // // //     usersResults.forEach(user=>{
// // // // //       if (user && user.data()){
// // // // //         const data = user.data();
// // // // //         const cancelledMember = data.cancellationDate? true:false;
// // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// // // // //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// // // // //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// // // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // // //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// // // // //         // const membershipStarts = data.membershipStarts? data.membershipStarts:null;
// // // // //         const membershipStarts = data.autoMembershipStarts? data.autoMembershipStarts:data.membershipStarts?data.membershipStarts:null;

// // // // //         if (!membershipStarts){

// // // // //           const userData = [
// // // // //             data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : null,
// // // // //             data.index ? data.index:'',
// // // // //             user.id,
// // // // //             data.membershipCard ? data.membershipCard : '',
// // // // //             data.gantnerCardNumber ? data.gantnerCardNumber : '',
// // // // //             data.name ? data.name : '',
// // // // //             data.firstName ? data.firstName : '',
// // // // //             data.lastName ? data.lastName : '',
// // // // //             data.nric ? data.nric : '',
// // // // //             data.passport ? data.passport : '',
// // // // //             data.nationality ? data.nationality : '',
// // // // //             data.race ? data.race : '',
// // // // //             data.gender ? data.gender : '',
// // // // //             data.phone ? data.phone : '',
// // // // //             data.email ? data.email : '',
// // // // //             data.mcId ? data.mcId : '',
// // // // //             data.packageId ? data.packageId : '',
// // // // //             data.paymentMode ? data.paymentMode : '',
// // // // //             membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : '',
// // // // //             membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : '',
// // // // //             autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : '',
// // // // //             data.autoDiff ? data.autoDiff : '',
// // // // //             data.freeMonths ? data.freeMonths : '',
// // // // //             data.freePT ? data.freePT : '',
// // // // //             data.freeGift ? data.freeGift : '',
// // // // //             data.referredByUserId ? data.referredByUserId : '',
// // // // //             data.trainerId ? data.trainerId : '',
// // // // //             data.inductionDate ? moment(getTheDate(data.inductionDate)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : '',
// // // // //             data.inductionDone ? data.inductionDone : '',
// // // // //             data.cancellationDate ? moment(getTheDate(data.cancellationDate)).tz('Asia/Kuala_Lumpur').format('YYYYMMDD') : '',
// // // // //             data.cancellationReason ? data.cancellationReason : '',
// // // // //             data.remarks ? data.remarks : ''
// // // // //           ];

// // // // //           users.push(userData);
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// // // // //     users.sort((a,b)=>{
// // // // //       var dateA = a[0];
// // // // //       var dateB = b[0];
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       // valueInputOption: 'RAW',
      
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `AUTO VISITORS!A2:AG`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: users
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },

// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         users: users,
// // // // //         // theResponse
// // // // //         // userCount
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });
// // // // // // cron job to add users to sheets for 3 month promo
// // // // // exports.addUsers3MonthPromoToSheets = functions.https.onRequest((req, res) => {
// // // // //   // const usersQuery = admin.firestore().collection('users').get();
// // // // //   const usersQuery = admin.firestore().collection('users').where('promoJan2020', '<=', 4).get();

// // // // //   return Promise.all([usersQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const usersResults = result[0];
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     var users = [];
// // // // //     usersResults.forEach(user=>{
// // // // //       if (user && user.data()){
// // // // //         const data = user.data();
// // // // //         const cancelledMember = data.cancellationDate? true:false;
// // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // //         const membershipEnds = data.membershipEnds? data.membershipEnds: null;
// // // // //         const autoMembershipEnds = data.autoMembershipEnds? data.autoMembershipEnds:null;
// // // // //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // //         // const membershipEndsMoment = membershipEnds && moment(membershipEnds.toDate());
// // // // //         // console.log('membershipEndsMoment123: ', membershipEndsMoment);
// // // // //         const isExpiredMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().subtract(3, 'months')); 
// // // // //         const membershipStarts = data.membershipStarts? data.membershipStarts:null;

// // // // //         const userData = [
// // // // //           data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : null,
// // // // //           data.index ? data.index:'',
// // // // //           user.id,
// // // // //           data.membershipCard ? data.membershipCard : '',
// // // // //           data.gantnerCardNumber ? data.gantnerCardNumber : '',
// // // // //           data.name ? data.name : '',
// // // // //           data.firstName ? data.firstName : '',
// // // // //           data.lastName ? data.lastName : '',
// // // // //           data.nric ? data.nric : '',
// // // // //           data.passport ? data.passport : '',
// // // // //           data.nationality ? data.nationality : '',
// // // // //           data.race ? data.race : '',
// // // // //           data.gender ? data.gender : '',
// // // // //           data.phone ? data.phone : '',
// // // // //           data.email ? data.email : '',
// // // // //           data.mcId ? data.mcId : '',
// // // // //           data.packageId ? data.packageId : '',
// // // // //           data.paymentMode ? data.paymentMode : '',
// // // // //           membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           autoMembershipEnds ? moment(getTheDate(data.autoMembershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           data.referredByUserId ? data.referredByUserId : '',
// // // // //           data.trainerId ? data.trainerId : '',
// // // // //           data.cancellationDate ? moment(getTheDate(data.cancellationDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //           data.cancellationReason ? data.cancellationReason : '',
// // // // //           data.promoJan2020 ? data.promoJan2020 : '',
// // // // //           data.remarks ? data.remarks : '',
// // // // //         ];

// // // // //         if (membershipStarts){
// // // // //           users.push(userData);
// // // // //         }
// // // // //       }
// // // // //     });

// // // // //     // users.sort((a,b) => moment(a.membershipStarts).format('YYYYMMDD') - moment(b.membershipStarts).format('YYYYMMDD'));
// // // // //     users.sort((a,b)=>{
// // // // //       var dateA = new Date(a[18]);
// // // // //       var dateB = new Date(b[18]);
// // // // //       if (dateA < dateB) {return -1}
// // // // //       if (dateA > dateB) {return 1}
// // // // //       return 0;
// // // // //     });

// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       // valueInputOption: 'RAW',
      
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `3M PROMO USERS!A2:AG`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: users
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },

// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         users: users,
// // // // //         // theResponse
// // // // //         // userCount
// // // // //       });
// // // // //     });
// // // // //   });
// // // // // });


// // // // // // script to add complimentary promo to user collections
// // // // // // 1. get all active member
// // // // // // 2. get all payment for the active user, check if user has made any payment. if there is no payment record found, group inside complimentary_promo
// // // // // exports.addComplimentaryPromoFieldToUser = functions.https.onRequest((req, res) => {
// // // // //   const usersQuery = admin.firestore().collection('users').get();
// // // // //   const paymentsQuery = admin.firestore().collection('payments').where('type', '==', 'membership').get();

// // // // //   return Promise.all([usersQuery, paymentsQuery]).then(result=>{
// // // // //     var batch = admin.firestore().batch();
// // // // //     const usersResults = result[0];
// // // // //     const paymentResults = result[1];
// // // // //     const timestamp = admin.firestore.FieldValue.serverTimestamp();

// // // // //     const startOfTodayMoment = moment().tz('Asia/Kuala_Lumpur').startOf('day');

// // // // //     var paymentsMap = {};
// // // // //     var paymentUserMap = {};
// // // // //     paymentResults.forEach(payment=>{
// // // // //       const data = payment.data();
// // // // //       const type = data.type||null;
// // // // //       const userId = data.userId||null;
// // // // //       // const userData = users[userId]||null;
// // // // //       const source = data.source||null;
// // // // //       const vendProductId = data.vendProductId||null;
// // // // //       const createdAt = data.createdAt;
// // // // //       if (userId && (vendProductId === 'b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7') && type === 'membership' && moment(getTheDate(createdAt)).isSameOrAfter(moment('20191201'))){
// // // // //         // paymentsMap[userId]=true;
// // // // //         // paymentsMap[payment.id];
// // // // //         paymentsMap[payment.id] = data;
// // // // //         paymentUserMap[userId] = true;
// // // // //       }
// // // // //     });

// // // // //     // console.log('paymentsMap: ', paymentsMap);
// // // // //     // console.log('paymentUserMap: ',paymentUserMap);

// // // // //     // var users = {};
// // // // //     var users = [];
// // // // //     usersResults.forEach((user, id)=>{
// // // // //       if (user && user.data()){
// // // // //         const data = user.data();
// // // // //         // const membershipEnds = data.membershipEnds? data.membershipEnds: (data.autoMembershipEnds? data.autoMembershipEnds:null)
// // // // //         const membershipEnds = data.autoMembershipEnds? data.autoMembershipEnds: (data.membershipEnds? data.membershipEnds:null)
// // // // //         const membershipEndsMoment = membershipEnds && moment(getTheDate(membershipEnds)).clone();
// // // // //         const isActiveMember = membershipEndsMoment && membershipEndsMoment.isSameOrBefore(startOfTodayMoment.clone().add(3, 'days'));
// // // // //         const membershipStarts = data.membershipStarts? data.membershipStarts:data.autoMembershipStarts?data.autoMembershipStarts:null;
// // // // //         const isCancel = data.cancellationDate? true:false;
// // // // //         // console.log('payment[id]: ', paymentsMap[id]? paymentsMap[id]: null);
// // // // //         //if (paymentUserMap[id]){
// // // // //           //console.log('paymentUserMap2: ', paymentUserMap);

// // // // //           // users[user.id] = user.data();
// // // // //           const userData = [
// // // // //             data.joinDate ? moment(getTheDate(data.joinDate)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : null,
// // // // //             user.id,
// // // // //             data.membershipCard ? data.membershipCard : '',
// // // // //             data.gantnerCardNumber ? data.gantnerCardNumber : '',
// // // // //             data.name ? data.name : '',
// // // // //             // data.firstName ? data.firstName : '',
// // // // //             // data.lastName ? data.lastName : '',
// // // // //             data.nric ? data.nric : '',
// // // // //             data.passport ? data.passport : '',
// // // // //             data.nationality ? data.nationality : '',
// // // // //             data.race ? data.race : '',
// // // // //             data.gender ? data.gender : '',
// // // // //             data.phone ? data.phone : '',
// // // // //             data.email ? data.email : '',
// // // // //             data.packageId ? data.packageId : '',
// // // // //             membershipStarts ? moment(getTheDate(membershipStarts)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //             membershipEnds ? moment(getTheDate(data.membershipEnds)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // //             data.promoJan2020 ? data.promoJan2020 : '',
// // // // //             data.complimentaryPromo? data.complimentaryPromo: null,
// // // // //             data.remarks ? data.remarks : '',
// // // // //           ];

// // // // //           if (data.complimentaryPromo){
// // // // //             users.push(userData);
// // // // //           }
          
// // // // //         // }
// // // // //         // else{
// // // // //         //   users.push(["saya"]);
// // // // //         // }
// // // // //       }
// // // // //     });
// // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // //       // valueInputOption: 'RAW',
      
// // // // //       resource: {
// // // // //         // How the input data should be interpreted.
// // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
  
// // // // //         // The new values to apply to the spreadsheet.
// // // // //         data: [
// // // // //           {
// // // // //             range: `COMPLIMENTARY PROMO!A2:AG`,
// // // // //             majorDimension: "ROWS",
// // // // //             values: users
// // // // //           }
// // // // //         ],  // TODO: Update placeholder value.
  
// // // // //         // TODO: Add desired properties to the request body.
// // // // //       },

// // // // //     });

// // // // //     return updateSheetPromise.then((result)=>{
// // // // //       // console.log('theresult: ', result);
// // // // //       return res.status(200).send({
// // // // //         success:true,
// // // // //         data: 'data',
// // // // //         users: users,
// // // // //         // theResponse
// // // // //         // userCount
// // // // //       });
// // // // //     });

// // // // //     // return res.status(200).send({
// // // // //     //   success:true,
// // // // //     //   userSize: Object.keys(users).length,
// // // // //     //   paymentSize: Object.keys(payments).length,
// // // // //     //   users: users,
// // // // //     //   payments
// // // // //     // });
// // // // //   });
// // // // // });


// // // // // // exports.addComplimentaryPayment = functions.https.onRequest((req, res) => {

// // // // // //   const paymentQuery = admin.firestore().collection('payments').where('type', '==', 'membership').get();
// // // // // //   // where('email', '==', 'tehowny@gmail.com').get();
// // // // // //   const packagesQuery = admin.firestore().collection('packages').get();
// // // // // //   const usersQuery = admin.firestore().collection('users').get();

// // // // // //   return Promise.all([paymentQuery, packagesQuery, usersQuery]).then(result=>{
// // // // // //     var batch = admin.firestore().batch();
// // // // // //     const paymentResults = result[0];
// // // // // //     const packagesResults = result[1];
// // // // // //     const userResults = result[2];

// // // // // //     var packageMap = {};
// // // // // //     packagesResults.forEach(doc=>{
// // // // // //       const data = doc.data();
// // // // // //       packageMap[doc.id] = data;
// // // // // //     });

// // // // // //     var userMap = {};
// // // // // //     userResults.forEach(doc=>{
// // // // // //       const data = doc.data();
// // // // // //       if (data){
// // // // // //         userMap[doc.id] = data;
// // // // // //       }
// // // // // //     });

// // // // // //     var payments = [];
// // // // // //     paymentResults.forEach(payment=>{
// // // // // //       if (payment && payment.data()){
// // // // // //         const data = payment.data();
// // // // // //         const createdAt = data.createdAt? data.createdAt:null;
// // // // // //         const userId = data.userId? data.userId:null;
// // // // // //         const userData = userId ? userMap[userId]:null;
// // // // // //         const userName = userData? userData.name? userData.name : " " : " ";
// // // // // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // // // // //         const invoiceId = data.invoiceId? data.invoiceId:" ";
// // // // // //         // const packageId = data.packageId? data.packageId:" ";
// // // // // //         const quantity = data.quantity? data.quantity:1;
// // // // // //         const renewalTerm = data.renewalTerm? data.renewalTerm:" ";
// // // // // //         const source = data.source? data.source:" ";
// // // // // //         const status = data.status? data.status:" ";
// // // // // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // // // // //         const type = data.type? data.type:" ";
// // // // // //         const transactionId = data.transactionId? data.transactionId:" ";
// // // // // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // // // // //         const vendSaleId = data.vendSaleId? data.vendSaleId:" ";
// // // // // //         const detailName = data.detailName? data.detailName:" ";
// // // // // //         const productName = data.productName? data.productName:" ";
// // // // // //         const complimentaryPromo = userData? userData.complimentaryPromo? userData.complimentaryPromo : "null" : "null";
// // // // // //         // const packageData = packageId ? packageMap[packageId] : " ";
// // // // // //         // const packageName = packageData && packageData.name? packageData.name:" ";

// // // // // //         if (vendProductId === "b3ad8405-92c8-d7a6-4142-e3e3ca4e86d7"){
// // // // // //           const paymentData = [
// // // // // //             createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // // // // //             userEmail,
// // // // // //             userName,
// // // // // //             quantity,
// // // // // //             renewalTerm,
// // // // // //             source,
// // // // // //             status,
// // // // // //             totalPrice,
// // // // // //             type,
// // // // // //             userId,
// // // // // //             // vendProductId,
// // // // // //             vendSaleId,
// // // // // //             complimentaryPromo
// // // // // //           ];
// // // // // //           payments.push(paymentData);
// // // // // //         }
// // // // // //       }
// // // // // //     });

// // // // // //     payments.sort((a,b)=>{
// // // // // //       var dateA = new Date(a[0]);
// // // // // //       var dateB = new Date(b[0]);
// // // // // //       if (dateA < dateB) {return -1}
// // // // // //       if (dateA > dateB) {return 1}
// // // // // //       return 0;
// // // // // //     });

// // // // // //     // console.log('payments: ', payments);

// // // // // //     const updateSheetPromise = updateGoogleSheet({
// // // // // //       spreadsheetId: CONFIG_SHEET_ID,
// // // // // //       resource: {
// // // // // //         // How the input data should be interpreted.
// // // // // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // // // // //         // The new values to apply to the spreadsheet.
// // // // // //         data: [
// // // // // //           {
// // // // // //             range: `ALL COMPLIMENTARY PAYMENT!A2:AG`,
// // // // // //             majorDimension: "ROWS",
// // // // // //             values: payments
// // // // // //           }
// // // // // //         ],  // TODO: Update placeholder value.
  
// // // // // //         // TODO: Add desired properties to the request body.
// // // // // //       },
// // // // // //     });

// // // // // //     return updateSheetPromise.then((result)=>{
// // // // // //       // console.log('theresult: ', result);
// // // // // //       return res.status(200).send({
// // // // // //         success:true,
// // // // // //         data: 'data',
// // // // // //         payments: payments,
// // // // // //       });
// // // // // //     });
// // // // // //   });
// // // // // // });

// // // exports.appendVTPaymenttospreadsheet = functions.firestore
// // //   .document('payments/{paymentId}')
// // //   .onWrite((change, context)=>{

// // //     const paymentId = change.after.id;
// // //     const document = (change.after && change.after.exists) ? change.after.data() : null;
    
// // //     if (!document){
// // //       return Promise.resolve();
// // //     }

// // //     const userId = document.userId? document.userId:'';
// // //     const source = document.source;
// // //     const totalPrice = document.totalPrice;
// // //     const type = document.type;
// // //     const createdAt = document.createdAt? moment(document.createdAt).format('YYYY-MM-DD'):'';
// // //     const invoiceId = document.invoiceId? document.invoiceId:'';
// // //     const packageId = document.packageId? document.packageId:'';
// // //     // const packageName = packageId? packages[packageId].name : '';
// // //     const status = document.status? document.status:'';
// // //     const quantity = document.quantity? document.quantity:1;
  
// // //     if (type === 'virtualTraining'){
// // //       const paymentData = [
// // //         paymentId,
// // //         createdAt,
// // //         source,
// // //         type,
// // //         status,
// // //         quantity, 
// // //         totalPrice,
// // //         userId,
// // //         invoiceId,
// // //       ];
// // //       // console.log('paymentData: ', paymentData);

// // //       const sheetValue = getGoogleSheet({
// // //         spreadsheetId: CONFIG_SHEET_ID,
// // //         resource: {
// // //           // How the input data should be interpreted.
// // //           valueInputOption: 'RAW',  // TODO: Update placeholder value.
    
// // //           // The new values to apply to the spreadsheet.
// // //           data: [
// // //             {
// // //               range: `AUTO VIRTUAL PAYMENT!A2:U`,
// // //               majorDimension: "ROWS",
// // //               // values: payments
// // //             }
// // //           ],  // TODO: Update placeholder value.
    
// // //           // TODO: Add desired properties to the request body.
// // //         },
// // //       });
// // //       // console.log('sheetValue: ', sheetValue);
// // //     }
// // //     return Promise.resolve();
// // // });

// // // // // // todo: add invoice to the sheet (not in bulk) -update row by row. 31/8/2020
// // // exports.addPromoInvoicetospreadsheet = functions.https.onRequest((req, res) => {
// // //   // const usersQuery = admin.firestore().collection('users').get();
// // //   const invoiceQuery = admin.firestore().collection('invoices').where('isPromo', '==', true).get();
// // //   // where('email', '==', 'tehowny@gmail.com').get();
// // //   const packagesQuery = admin.firestore().collection('packages').get();
// // //   const usersQuery = admin.firestore().collection('users').get();

// // //   return Promise.all([invoiceQuery, packagesQuery, usersQuery]).then(result=>{
// // //     var batch = admin.firestore().batch();
// // //     const invoiceResults = result[0];
// // //     const packagesResults = result[1];
// // //     const userResults = result[2];

// // //     var packageMap = {};
// // //     packagesResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       packageMap[doc.id] = data;
// // //     });

// // //     var userMap = {};
// // //     userResults.forEach(doc=>{
// // //       const data = doc.data();
// // //       if (data){
// // //         userMap[doc.id] = data;
// // //       }
// // //     });

// // //     var invoices = [];
// // //     invoiceResults.forEach(invoice=>{
// // //       if (invoice && invoice.data()){
// // //         const data = invoice.data();
// // //         const createdAt = data.createdAt? data.createdAt:null;
// // //         const promoType = data.promoType? data.promoType:null;
// // //         const userId = data.userId? data.userId:null;
// // //         const userData = userId ? userMap[userId]:null;
// // //         const userName = userData? userData.name? userData.name : " " : " ";
// // //         const userEmail = userData? userData.email? userData.email: " " : " ";
// // //         const phone = userData? userData.phone? userData.phone: " " : " ";
// // //         const mcId = userData? userData.mcId? userData.mcId: " ": " ";
// // //         const invoiceId = invoice.id? invoice.id:" ";
// // //         const packageId = data.packageId? data.packageId:" ";
// // //         const packageData = packageId? packageMap[packageId]:" ";
// // //         const packageName = packageData? packageData.name? packageData.name:" ":" ";

// // //         const paid = data.paid? data.paid:false;
// // //         const totalPrice = data.totalPrice? data.totalPrice:0;
// // //         const amount = data.amount? data.amount:0;
// // //         const type = data.type? data.type:" ";
// // //         const vendProductId = data.vendProductId? data.vendProductId:" ";
// // //         const vendProductName = data.vendProductName? data.vendProductName: " ";

// // //         const invoiceData = [
// // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DDTHH:mm:ss') : '',
// // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('YYYY-MM-DD') : '',
// // //           createdAt? moment(getTheDate(createdAt)).tz('Asia/Kuala_Lumpur').format('HH:mm:ss') : '',
// // //           promoType,
// // //           userName,
// // //           userEmail,
// // //           invoiceId,
// // //           phone,
// // //           mcId,
// // //           packageId,
// // //           packageName,
// // //           paid,
// // //           totalPrice,
// // //           amount,
// // //           type,
// // //           vendProductName
// // //         ];
// // //         invoices.push(invoiceData);
// // //       }
// // //     });

// // //     invoices.sort((a,b)=>{
// // //       var dateA = new Date(a[0]);
// // //       var dateB = new Date(b[0]);
// // //       if (dateA < dateB) {return -1}
// // //       if (dateA > dateB) {return 1}
// // //       return 0;
// // //     });

// // //     // console.log('payments: ', payments);

// // //     const updateSheetPromise = updateGoogleSheet({
// // //       spreadsheetId: CONFIG_SHEET_ID,
// // //       resource: {
// // //         // How the input data should be interpreted.
// // //         valueInputOption: 'RAW',  // TODO: Update placeholder value.
// // //         // The new values to apply to the spreadsheet.
// // //         data: [
// // //           {
// // //             range: `AUTO MEMBERSHIP PROMO PAYMENT!A2:V`,
// // //             majorDimension: "ROWS",
// // //             values: invoices
// // //           }
// // //         ],  // TODO: Update placeholder value.
  
// // //         // TODO: Add desired properties to the request body.
// // //       },
// // //     });

// // //     return updateSheetPromise.then((result)=>{
// // //       // console.log('theresult: ', result);
// // //       return res.status(200).send({
// // //         success:true,
// // //         data: 'data',
// // //         invoices: invoices,
// // //       });
// // //     });
// // //   });
// // // });

// // // function getGoogleSheet(requestWithoutAuth) {
// // //   return new Promise((resolve, reject) => {
// // //     return getAuthorizedClient().then((client) => {
// // //       const sheets = google.sheets('v4');
// // //       const request = requestWithoutAuth;
// // //       request.auth = client;
// // //       console.log('client request getGoogleSheet: ', client);
// // //       return sheets.spreadsheets.values.get(request);

// // //     }).catch(error=>{
// // //       console.log('updateGoogleSheeterror: ', error);
// // //       return reject(error);
// // //     })
// // //   });

// // //   // Sheets.Spreadsheets.Values.batchUpdate(resource, spreadsheetId);
// // // }

// // // // // /**
// // // // //  * When an image is uploaded in the Storage bucket We generate a thumbnail automatically using
// // // // //  * Sharp.
// // // // //  */
// // // // // exports.generateThumbnail = functions.storage.object().onFinalize((object) => {

// // // // //   const gcs = require('@google-cloud/storage')();
// // // // //   const path = require('path');
// // // // //   const sharp = require('sharp');
// // // // //   const _ = require('lodash');

// // // // //   const SIZES = [64, 256, 512, 1024, 2048];

// // // // //   const fileBucket = object.bucket; // The Storage bucket that contains the file.
// // // // //   const filePath = object.name; // File path in the bucket.
// // // // //   const contentType = object.contentType; // File content type.

// // // // //   // Exit if this is triggered on a file that is not an image.
// // // // //   if (!contentType.startsWith('image/')) {
// // // // //     console.log('This is not an image.');
// // // // //     return null;
// // // // //   }

// // // // //   // Get the file name.
// // // // //   const fileName = path.basename(filePath);
// // // // //   // Exit if the image is already a thumbnail.
// // // // //   if (fileName.startsWith('thumb_')) {
// // // // //     const fileNameParts = fileName.split('_');
// // // // //     const fileNameEnd = fileNameParts[fileNameParts.length-1];
// // // // //     const imagePath = `images/${fileNameEnd}`;
// // // // //     console.log('Already a Thumbnail.', fileName, imagePath);

// // // // //     return null;

// // // // //     // var updates = {};
// // // // //     // var propertyToUpdate = null;
// // // // //     // if(fileName.startsWith('thumb_64_')){
// // // // //     //   propertyToUpdate = 'thumb_64';
// // // // //     // }else if(fileName.startsWith('thumb_128_')){
// // // // //     //   propertyToUpdate = 'thumb_128';
// // // // //     // }else if(fileName.startsWith('thumb_256_')){
// // // // //     //   propertyToUpdate = 'thumb_256';
// // // // //     // }else if(fileName.startsWith('thumb_512_')){
// // // // //     //   propertyToUpdate = 'thumb_512';
// // // // //     // }else if(fileName.startsWith('thumb_1024_')){
// // // // //     //   propertyToUpdate = 'thumb_1024';
// // // // //     // }else if(fileName.startsWith('thumb_2048_')){
// // // // //     //   propertyToUpdate = 'thumb_2048';
// // // // //     // }
// // // // //     //
// // // // //     // updates[propertyToUpdate] = object.mediaLink;
// // // // //     // const userQueryPromise = admin.firestore().collection('users').where('imagePath', '==', imagePath).limit(1).get();
// // // // //     // const classQueryPromise = admin.firestore().collection('classes').where('imagePath', '==', imagePath).limit(1).get();
// // // // //     //
// // // // //     // return Promise.all([userQueryPromise, classQueryPromise]).then(results=>{
// // // // //     //   const userDoc = results[0] && results[0].docs && results[0].docs.length > 0 ? results[0].docs[0].ref : null;
// // // // //     //   const classDoc = results[1] && results[1].docs && results[1].docs.length > 0 ? results[1].docs[0].ref : null;
// // // // //     //   if(userDoc){
// // // // //     //     return userDoc.update(updates);
// // // // //     //   }else if(classDoc){
// // // // //     //     return classDoc.update(updates);
// // // // //     //   }
// // // // //     //     return null;
// // // // //     // });

// // // // //   }

// // // // //   // Download file from bucket.
// // // // //   const bucket = gcs.bucket(fileBucket);

// // // // //   const metadata = {
// // // // //     contentType: 'image/jpeg',
// // // // //   };

// // // // //   var resizePromises = [];
// // // // //   _.each(SIZES, (size) => {

// // // // //     const thumbFileName = `thumb_${size}_${fileName}`;
// // // // //     const thumbFilePath = path.join(path.dirname(filePath), thumbFileName);
// // // // //     // Create write stream for uploading thumbnail
// // // // //     const thumbnailUploadStream = bucket.file(thumbFilePath).createWriteStream({metadata});

// // // // //     // Create Sharp pipeline for resizing the image and use pipe to read from bucket read stream
// // // // //     const pipeline = sharp();
// // // // //     pipeline
// // // // //       .jpeg({
// // // // //         progressive:true
// // // // //       })
// // // // //       .resize(size, size)
// // // // //       .max()
// // // // //       .pipe(thumbnailUploadStream);

// // // // //     bucket.file(filePath).createReadStream().pipe(pipeline);

// // // // //     const streamAsPromise = new Promise((resolve, reject) =>
// // // // //       thumbnailUploadStream.on('finish', resolve).on('error', reject));

// // // // //     resizePromises.push(streamAsPromise);
// // // // //   })
// // // // //   // We add a 'thumb_' prefix to thumbnails file name. That's where we'll upload the thumbnail.

// // // // //   return Promise.all(resizePromises).then(() => {
// // // // //     console.log('Thumbnails created successfully');
// // // // //     return null;
// // // // //   });

// // // // // });


//Adyen Payments
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
// const cors = require("cors");
const CryptoJS = require("crypto-js");
const base64 = require("base-64");
const { stat } = require('fs');
const { time, timeStamp } = require('console');
// const { user } = require('firebase-functions/lib/providers/auth');
// // const { PaymentInstrumentType } = require('@adyen/api-library/dist/lib/src/typings/terminal');
const APIKey = 'AQElhmfuXNWTK0Qc+iSSk2Y9q9CeW59vbxshCZshV1EXTAGefxgJhxDBXVsNvuR83LVYjEgiTGAH-R6kuIqL+550D1qTX5kJZCc2qwiPqT3x46lzQOEudnjo=-t3wZv9F8d36xGKqJ';
const checkoutPath = 'https://12ed7539c396525e-BabelTestB-checkout-live.adyenpayments.com/checkout/';
const paymentPath = 'https://12ed7539c396525e-BabelTestB-pal-live.adyenpayments.com/pal/servlet/Payment/';
// const adyenAPIKey = `AQEshmfxK47NbhBFw0m/n3Q5qf3VaopPCJ9+XXZC5EVHKBxiVp6AOGdPArp8iVEQwV1bDb7kfNy1WIxIIkxgBw==-cuW9POBY+wLZvlre3SP3OwAusiQx3uUhv4uKi+TWyFg=-?jq)y#XXc#59zD5j`;
const adyenAPIKey = 'AQEshmfxJ4rHbhxDw0m/n3Q5qf3VaopPCJ9+XXZC5AxrpB/4wRvZXAEBe2rvAIkQwV1bDb7kfNy1WIxIIkxgBw==-FHv+1HsJy4BxASXew85S4+klEA/ExL+J2G5qm1MDC14=-.6PpL?jf#TTL79(z';
const adyenCheckoutPath = 'https://12ed7539c396525e-BabelTestB-checkout-live.adyenpayments.com/checkout/';
const adyenPaymentPath = 'https://12ed7539c396525e-BabelTestB-pal-live.adyenpayments.com/pal/servlet/Payment/';

const recurringPath = 'https://12ed7539c396525e-BabelTestB-pal-live.adyenpayments.com/pal/servlet/Recurring/';
const paymentMethod = 'https://4a2ad753ebda1f37-BabelTestB-checkout-live.adyenpayments.com/checkout/';
// for test adyen account
const capturePayment = `https://pal-test.adyen.com/pal/servlet/Payment/V52/capture`;

// // // // const corsFn = cors({ origin: true });

function charge(invoiceId, userId, amount, email){
  if(!invoiceId || !userId || !amount || amount <= 0 || !email){
    console.log('Error with charge data', invoiceId, userId, amount, email);
    return Promise.resolve();
  }

  console.log('Charging', invoiceId, userId, amount, email);

  var rp = require('request-promise');
  var options = { method: 'POST',
    // uri: paymentPath + 'authorise',
    // uri:`${adyenPaymentPath}v68/authorise`,
    uri:`https://12ed7539c396525e-BabelTestB-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise`,
    headers: {
        'content-type': 'application/json',
        'x-API-Key': adyenAPIKey,
        // 'x-API-Key': APIKey,
    },
    body:{
      amount: {
        value: amount,
        currency: "MYR"
      },
      shopperEmail: email,
      shopperReference: userId,
      selectedRecurringDetailReference: "LATEST",
      recurring: {contract: "RECURRING"},
      shopperInteraction: "ContAuth",
      reference: invoiceId,
      merchantAccount: "BabelTestBFIT"
    },
    json:true
  };

  // console.log('Request options', options);

  return rp(options);
  // return Promise.resolve();
}

// // // // exports.captureAdyenPayment = functions.https.onRequest((req, res) => {
// // // //   const cors = require("cors");
// // // //   const corsFunction = cors({ origin: true });
// // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // //     return corsFunction(req, res, () => {
// // // //         if (req.method === 'POST') {
// // // //             console.info('capture Session Body:', req.body);
// // // //             const option = {
// // // //                 uri: capturePayment,
// // // //                 method: 'POST',
// // // //                 headers: {
// // // //                     'content-type': 'application/json',
// // // //                     'x-API-Key': APIKey,
// // // //                 },
// // // //                 body: {
// // // //                     amount: {
// // // //                         value: req.body.data.amount.value,
// // // //                         currency: req.body.data.amount.currency
// // // //                     },
// // // //                     additionalData:{
// // // //                         "executeThreeD":"true"
// // // //                      },
// // // //                     reference: req.body.data.reference,
// // // //                     merchantAccount: req.body.data.merchantAccount,
// // // //                     shopperReference: req.body.data.shopperReference,
// // // //                     channel: 'Web',
// // // //                     html: true,
// // // //                     origin: req.body.data.origin,
// // // //                     returnUrl: req.body.data.returnUrl,
// // // //                     countryCode: req.body.data.countryCode,
// // // //                     enableRecurring: req.body.data.enableRecurring,
// // // //                     enableOneClick: req.body.data.enableOneClick,
// // // //                     sdkVersion: req.body.data.sdkVersion
// // // //                 },  
// // // //                 json: true
// // // //             };
// // // //             console.log('paymentOption: ', option);
// // // //             request(option, (error, response, body) => {
// // // //                 res.contentType('application/json');

// // // //                 console.log('theresponse: ', response);

// // // //                 if (!response){
// // // //                   res.send({ 'paymentSession': 'no response' });
// // // //                 }
// // // //                 else if (response.statusCode === 200) {
// // // //                     console.log('Status:', response.statusCode, response.statusMessage);

// // // //                     console.log('Info:', {data:body});
// // // //                     console.log('paymentResponse: ', response);
// // // //                     console.log('paymentBody: ', body);
// // // //                     res.json(response.statusCode, {data:body});
// // // //                 }
// // // //                 else {
// // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // //                     console.log('Error:', error);
// // // //                     console.log('Info:', body);
// // // //                     res.status(response.statusCode).send({ 'paymentSession': 'Fail in creating payment session' });
// // // //                 }
// // // //             });
// // // //         }
// // // //         else {
// // // //             res.status(500).send('Invalid request method');
// // // //         }
// // // //     });
// // // // });

exports.createPaymentSession = functions.https.onRequest((req, res) => {
  const cors = require("cors");
  const corsFunction = cors({ origin: true });
  const timestamp = admin.firestore.FieldValue.serverTimestamp();
    return corsFunction(req, res, () => {
        if (req.method === 'POST') {
            const endPoint = 'v32/paymentSession';
            // const endPoint = 'v68/paymentSession';
            // console.info('Payment Session Body:', req.body);
            const option = {
                uri: adyenCheckoutPath + endPoint,
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                    'x-API-Key': adyenAPIKey,
                },
                body: {
                    amount: {
                        value: req.body.data.amount.value,
                        currency: req.body.data.amount.currency
                    },
                    additionalData:{
                        "executeThreeD":"true"
                     },
                    reference: req.body.data.reference,
                    merchantAccount: req.body.data.merchantAccount,
                    shopperReference: req.body.data.shopperReference,
                    channel: 'Web',
                    html: true,
                    origin: req.body.data.origin,
                    returnUrl: req.body.data.returnUrl,
                    countryCode: req.body.data.countryCode,
                    enableRecurring: req.body.data.enableRecurring,
                    enableOneClick: req.body.data.enableOneClick,
                    sdkVersion: req.body.data.sdkVersion
                    // sdkVersion:"1.9.5"
                },  
                json: true
            };
            // console.log('paymentOption: ', option);
            request(option, (error, response, body) => {
                res.contentType('application/json');

                console.log('paymentsessionresponse: ', response);
                console.log('paymentsessionError: ', error);

                if (!response){
                  res.send({ 'paymentSession': 'no response' });
                }
                else if (response.statusCode === 200) {
                    console.log('Status:', response.statusCode, response.statusMessage);

                    console.log('Info:', {data:body});
                    console.log('paymentResponse: ', response);
                    console.log('paymentBody: ', body);
                    res.json(response.statusCode, {data:body});
                }
                else {
                    console.log('Status:', response.statusCode, response.statusMessage);
                    console.log('Error:', error);
                    console.log('Info:', body);
                    res.status(response.statusCode).send({ 'paymentSession': 'Fail in creating payment session' });
                }
            });
        }
        else {
            res.status(500).send('Invalid request method');
        }
    });
});

// // // // // exports.makePaymentDropIn = functions.https.onRequest((req, res) => {
// // // // //   const cors = require("cors");
// // // // //   const corsFunction = cors({ origin: true });
// // // // //   const timestamp = admin.firestore.FieldValue.serverTimestamp();
// // // // //     return corsFunction(req, res, () => {
// // // // //       if (req.method === 'POST') {
// // // // //         console.log(req.body.payload);
// // // // //         const endPoint = 'v52/payments';

// // // // //       }
// // // // //       res.send('makepaymenttest: ', );
// // // // //     });
// // // // // });

// // // // // exports.getPaymentResult = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //         if (req.method === 'POST') {
// // // // //             console.log(req.body.payload);
// // // // //             const endPoint = 'v32/payments/result';
// // // // //             const paymentBody = {
// // // // //                 url: checkoutPath + endPoint,
// // // // //                 method: 'POST',
// // // // //                 headers: {
// // // // //                     'content-type': 'application/json',
// // // // //                     'x-API-Key': APIKey,
// // // // //                 },
// // // // //                 body: JSON.stringify({
// // // // //                     'payload': req.body.payload
// // // // //                 })
// // // // //             };
// // // // //             request(paymentBody, function (error, response, body) {
// // // // //                 if (response.statusCode === 200) {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     res.status(response.statusCode).send(body);
// // // // //                 }
// // // // //                 else {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     console.log('Error:', error);
// // // // //                     console.log('Info:', body);
// // // // //                     res.status(response.statusCode).send({ paymentSession: 'Error' });
// // // // //                 }
// // // // //             });
// // // // //         }
// // // // //         else {
// // // // //             res.status(500).send('Invalid request method');
// // // // //         }
// // // // //     });
// // // // // });

// // // // // exports.getAdyenPaymentMethods = functions.https.onRequest((req, res) => {
// // // // //   return corsFn(req, res, () => {
// // // // //     const body = {
// // // // //       "merchantAccount": "BabelTestBFIT",
// // // // //       "countryCode": "MY",
// // // // //       "amount": {
// // // // //         "currency": "MYR",
// // // // //         "value": 0
// // // // //       },
// // // // //       "channel": "Web",
// // // // //       "shopperLocale": "en-US"
// // // // //     }

// // // // //     if (req.method === 'GET') {
// // // // //         console.log('getAdyenPaymentMethodsBody: ', req.body);
// // // // //         const endPoint = 'v49/paymentMethods';
// // // // //         const paymentMethodBody = {
// // // // //             url: checkoutPath + endPoint,
// // // // //             method: 'POST',
// // // // //             headers: {
// // // // //                 'content-type': 'application/json',
// // // // //                 'x-API-Key': APIKey,
// // // // //             },
// // // // //             body: Object.assign({}, body),
// // // // //             json: true
// // // // //         };
// // // // //         console.log('paymentMethodBody: ', paymentMethodBody);
// // // // //         request(paymentMethodBody, function (error, response, body) {
// // // // //           res.contentType('application/json');
// // // // //           console.log('getAdyenPaymentMethodsError: ', error);
// // // // //             if (response.statusCode === 200) {
// // // // //                 console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                 res.status(response.statusCode).send(body);
// // // // //             }
// // // // //             else {
// // // // //                 console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                 console.log('Error:', error);
// // // // //                 console.log('Info:', body);
// // // // //                 res.status(response.statusCode).send({ paymentSession: 'Error' });
// // // // //             }
// // // // //             res.status(200).send('OK');
// // // // //         });
// // // // //     }
// // // // //   });
// // // // // });

// // // // // exports.authoriseRecurringPayment = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //         if (req.method === 'POST') {
// // // // //             const endPoint = 'authorise';
// // // // //             console.info('Payment Session Body:', req.body);
// // // // //             const option = {
// // // // //                 uri: paymentPath + endPoint,
// // // // //                 method: 'POST',
// // // // //                 headers: {
// // // // //                     'content-type': 'application/json',
// // // // //                     'x-API-Key': APIKey,
// // // // //                 },
// // // // //                 body: Object.assign({}, req.body),
// // // // //                 json: true
// // // // //             };
// // // // //             console.log(option);
// // // // //             request(option, (error, response, body) => {
// // // // //                 res.contentType('application/json');
// // // // //                 if (response.statusCode === 200) {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     res.status(response.statusCode).send(body);
// // // // //                 }
// // // // //                 else {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     console.log('Error:', error);
// // // // //                     console.log('Info:', body);
// // // // //                     res.status(response.statusCode).send({ 'recurringPayment': 'Fail in authorising recurring payment' });
// // // // //                 }
// // // // //             });
// // // // //         }
// // // // //         else {
// // // // //             res.status(500).send('Invalid request method');
// // // // //         }
// // // // //     });
// // // // // });

// // // // // exports.listRecurringDetails = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //       const endPoint = 'listRecurringDetails';
// // // // //       // shopperReference is userId
// // // // //       const body = {
// // // // //         "shopperReference": "I8imxoiVYadUWHP7p0a9QpkQWDQ2",
// // // // //         "merchantAccount": "BabelTestBFIT"
// // // // //       }
// // // // //       console.info('Payment Session Body:', body);
// // // // //       const option = {
// // // // //           uri: recurringPath + endPoint,
// // // // //           method: 'POST',
// // // // //           headers: {
// // // // //               'content-type': 'application/json',
// // // // //               'x-API-Key': APIKey,
// // // // //           },
// // // // //           body: Object.assign({}, body),
// // // // //           json: true
// // // // //       };
// // // // //       console.log(option);
// // // // //       request(option, function (error, response, body) {
// // // // //           res.contentType('application/json');
// // // // //           if (response.statusCode === 200) {
// // // // //               console.log('Status:', response.statusCode, response.statusMessage);
// // // // //               res.status(response.statusCode).send(body);
// // // // //           }
// // // // //           else {
// // // // //               console.log('Status:', response.statusCode, response.statusMessage);
// // // // //               console.log('Error:', error);
// // // // //               console.log('Info:', body);
// // // // //               res.status(response.statusCode).send({ 'recurringPayment': 'Fail in authorising recurring payment' });
// // // // //           }
// // // // //       });
// // // // //     });
// // // // // });
// // // // // // For ecwid
// // // // // exports.createPaymentSession_Ecwid = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //         if (req.method === 'POST') {
// // // // //             const endPoint = 'v32/paymentSession';
// // // // //             console.info('Payment Session Body:', req.body);
// // // // //             const option = {
// // // // //                 uri: checkoutPath + endPoint,
// // // // //                 method: 'POST',
// // // // //                 headers: {
// // // // //                     'content-type': 'application/json',
// // // // //                     'x-API-Key': APIKey,
// // // // //                 },
// // // // //                 body: {
// // // // //                     amount: {
// // // // //                         value: req.body.amount.value,
// // // // //                         currency: req.body.amount.currency
// // // // //                     },
// // // // //                     additionalData: {
// // // // //                         executeThreeD: true
// // // // //                     },
// // // // //                     reference: req.body.reference,
// // // // //                     merchantAccount: req.body.merchantAccount,
// // // // //                     shopperReference: req.body.shopperReference,
// // // // //                     channel: 'Web',
// // // // //                     html: true,
// // // // //                     origin: req.body.origin,
// // // // //                     returnUrl: req.body.returnUrl,
// // // // //                     countryCode: req.body.countryCode,
// // // // //                     enableRecurring: req.body.enableRecurring,
// // // // //                     sdkVersion: '1.3.2'
// // // // //                 },
// // // // //                 json: true
// // // // //             };
// // // // //             console.log(option);
// // // // //             request(option, function (error, response, body) {
// // // // //                 res.contentType('application/json');
// // // // //                 if (response.statusCode === 200) {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     res.status(response.statusCode).send(body);
// // // // //                 }
// // // // //                 else {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     console.log('Error:', error);
// // // // //                     console.log('Info:', body);
// // // // //                     res.status(response.statusCode).send({ 'paymentSession': 'Fail in creating payment session' });
// // // // //                 }
// // // // //             });
// // // // //         }
// // // // //         else {
// // // // //             res.status(500).send('Invalid request method');
// // // // //         }
// // // // //     });
// // // // // });
// // // // // exports.getPaymentResult_Ecwid = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //         if (req.method === 'POST') {
// // // // //             console.log(req.body.payload);
// // // // //             const endPoint = 'v32/payments/result';
// // // // //             const paymentBody = {
// // // // //                 url: checkoutPath + endPoint,
// // // // //                 method: 'POST',
// // // // //                 headers: {
// // // // //                     'content-type': 'application/json',
// // // // //                     'x-API-Key': APIKey,
// // // // //                 },
// // // // //                 body: JSON.stringify({
// // // // //                     'payload': req.body.payload
// // // // //                 })
// // // // //             };
// // // // //             request(paymentBody, function (error, response, body) {
// // // // //                 if (response.statusCode === 200) {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     res.status(response.statusCode).send(body);
// // // // //                 }
// // // // //                 else {
// // // // //                     console.log('Status:', response.statusCode, response.statusMessage);
// // // // //                     console.log('Error:', error);
// // // // //                     console.log('Info:', body);
// // // // //                     res.status(response.statusCode).send({ paymentSession: 'Error' });
// // // // //                 }
// // // // //             });
// // // // //         }
// // // // //         else {
// // // // //             res.status(500).send('Invalid request method');
// // // // //         }
// // // // //     });
// // // // // });
// // // // // exports.getEcwidData = functions.https.onRequest((req, res) => {
// // // // //     return corsFn(req, res, () => {
// // // // //         if (req.method === 'POST') {
// // // // //             let secretKEy = 'payment-app-secret-key';
// // // // //             let data = req.body;
// // // // //             let data1 = data.replace('-', '_');
// // // // //             let data2 = data1.replace('+', '/');
// // // // //             let encryptKey = secretKEy.substring(0, 16);
// // // // //             let decodeData = base64.decode(data2);
// // // // //             console.log("Decode:", decodeData);
// // // // //             let iv = decodeData.substr(0, 16);
// // // // //             let payload = decodeData.substr(16);
// // // // //             console.log("Payload:", payload);
// // // // //             let bytes = CryptoJS.AES.decrypt(payload, encryptKey, { iv: iv });
// // // // //             console.log(bytes);
// // // // //             console.log(bytes.toString(CryptoJS.enc.Utf8));
// // // // //             //    const mykey = crypto.createDecipher('aes-128-cbc', 'mypassword');
// // // // //             //  let mystr = mykey.update(data, 'hex', 'utf8')
// // // // //             //mystr += mykey.final('utf8');
// // // // //             //console.log(mystr);
// // // // //             //res.send(mystr);
// // // // //             /*
// // // // //                         let payload = data.substring(16);

// // // // //                         let decoded = base64.decode(data);

// // // // //                         console.log(secretKey);
// // // // //                         console.log(data);

// // // // //                         console.log(decoded);
// // // // //             */
// // // // //             // Decrypt
// // // // //             /*  let bytes = CryptoJS.AES.decrypt(data, secretKey, {iv:data.substring(0,16), mode:CryptoJS.mode.CBC});
// // // // //               console.log(bytes);
// // // // //               console.log(bytes.toString(CryptoJS.enc.Base64));

// // // // //               //let decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));

// // // // //              // console.log(decryptedData);
// // // // //               res.send(bytes);*/
// // // // //         }
// // // // //         else {
// // // // //             res.status(500).send('Invalid request method');
// // // // //         }
// // // // //     });
// // // // // });

exports.addAdyenTransaction = functions.https.onRequest((req, res) => {
  // Grab the text parameter.
  console.log("Begin transaction request");
  // console.log(req);
  // const original = req.query.text;
  var transactionData = JSON.parse(JSON.stringify(req.body));
  const notificationItem = transactionData.notificationItems && transactionData.notificationItems.length > 0 && transactionData.notificationItems[0];
  const notificationRequestItem = notificationItem && notificationItem.NotificationRequestItem;
  const pspReference = notificationRequestItem.pspReference;
  const invoiceId = notificationRequestItem.merchantReference;
  const eventCode = notificationRequestItem.eventCode;
  const success = notificationRequestItem.success;
  transactionData.createdDay = moment().tz('Asia/Kuala_Lumpur').startOf('day').format('YYYY-MM-DD');

  // console.log("Data", transactionData);
  // console.log("Notification", notificationItem);
  // const response = transactionData.response;
  // const invoiceId = notificationItem && notificationItem.NotificationRequestItem && notificationItem.NotificationRequestItem.merchantReference;
  // const timestamp = admin.firestore.FieldValue.serverTimestamp();
  // transactionData.createdAt = timestamp;
  //
  return admin.firestore().collection('adyTransactions').doc(pspReference).set(transactionData).then((docRef) => {
    res.status(200).send({
    	"notificationResponse" : "[accepted]"
    });

    // Redirect with 303 SEE OTHER to the URL of the pushed object in the Firebase console.
    if(invoiceId && invoiceId.length > 0){
      console.log('Added transaction for invoice', pspReference, invoiceId, eventCode, success);
      if(eventCode === 'AUTHORISATION'){
        if(success === 'true'){
          return admin.firestore().collection('invoices').doc(invoiceId).update({paid:true, paymentFailed:false, paymentId:null, transactionId:pspReference});
        }else{
          return admin.firestore().collection('invoices').doc(invoiceId).update({paid:false, paymentFailed:true, paymentId:null, transactionId:pspReference});
        }
      }else{
        // return res.redirect(303, `https://app.babel.fit/payments/${invoiceId}`);
      }
    }else{
      // return res.redirect(303, 'https://app.babel.fit/');
    }

    return null;
    //mark invoice as paid
  });
});

exports.modifyAdyTransaction = functions.firestore
  .document('adyTransactions/{transactionId}')
  .onWrite((change, context) => {
    const data = change.after.data();
    if(!data){
      //deleted
      return Promise.resolve();
    }
    const notificationItem = data.notificationItems && data.notificationItems.length > 0 && data.notificationItems[0];
    const notificationRequestItem = notificationItem && notificationItem.NotificationRequestItem;
    const invoiceId = notificationRequestItem.merchantReference;
    const eventCode = notificationRequestItem.eventCode;
    const createdAt = notificationRequestItem.eventDate;
    const success = notificationRequestItem.success;
    const authorized = (success === 'true' && eventCode === 'AUTHORISATION') ? true : false;
    const additionalData = notificationRequestItem && notificationRequestItem.additionalData;
    const recurringProcessingModel = additionalData && additionalData.recurringProcessingModel;
    const isAutoCharge = (recurringProcessingModel && recurringProcessingModel === 'Subscription')? true:false;
    const adyenPaymentMethod = notificationRequestItem.paymentMethod;
    const cardSummary = additionalData && additionalData.cardSummary;
    const cardExpiryDate = additionalData && additionalData.expiryDate;
    const reason = notificationRequestItem.reason;

    console.log('Modifying transactionId for invoiceId', change.after.id, invoiceId, data);
    if(!authorized){
      console.log('Not Authorization/Authorized');
      //if refunded
      if(eventCode === 'REFUND'){
        console.log('Is Refund');
        //get invoice
        const invoiceQuery = admin.firestore().collection('invoices').doc(invoiceId).get();
        return invoiceQuery.then(doc=>{
          const data = doc.data();
          const paymentId = data && data.paymentId;
          if(paymentId){
            //set payment as refunded
            const batch = admin.firestore().batch();

            const invoiceRef = admin.firestore().collection('invoices').doc(invoiceId);
            batch.update(invoiceRef, {refunded:true});

            const paymentRef = admin.firestore().collection('payments').doc(paymentId);
            batch.update(paymentRef, {status:'REFUNDED'});

            console.log('Refunding invoiceId paymentId', invoiceId, paymentId);

            return batch.commit();
          }else{
            return null;
          }
        })
      }
      else{
         //get invoice
         const invoiceQuery = admin.firestore().collection('invoices').doc(invoiceId).get();
         return invoiceQuery.then(doc=>{
          const data = doc.data();
          const batch = admin.firestore().batch();
          const paymentRef = admin.firestore().collection('payments').doc();
          const totalPrice = data.totalPrice;
          const type = data.type;
          const userId = data.userId;
          const quantity = data.quantity||1;

            const paymentData = {
              createdAt : createdAt,
              totalPrice : totalPrice ? totalPrice : 0,
              type : type,
              userId : userId,
              source : 'adyen',
              status : authorized ? 'CLOSED' : 'FAILED',
              quantity : quantity,
              invoiceId : doc.id,
              paymentType:adyenPaymentMethod,
              cardSummary:cardSummary? cardSummary:null, 
              cardExpiryDate:cardExpiryDate? cardExpiryDate:null,
              reason,
              transactionId : change.after.id
            };

            batch.set(paymentRef, paymentData);
            return batch.commit();
         })
      }

    }
    if(!invoiceId){
      console.log(`Transaction has no invoiceId ${change.after.id}`);
      return Promise.reject(new Error(`Transaction has no invoiceId ${change.after.id}`));
    }

    //retrieve invoice and packages
    const invoiceQuery = admin.firestore().collection('invoices').doc(invoiceId).get();
    const packagesQuery = admin.firestore().collection('packages').get();

    return Promise.all([invoiceQuery, packagesQuery]).then(results=>{
      const invoiceDoc = results[0];
      const packagesResults = results[1];
      const freezeVendId = 'a3be38de-934f-aa1c-7f69-89f8fcc16f4a';

      var packageMap = {};
      var productIdPackageMap = {};
      packagesResults.forEach(doc=>{
        const data = doc.data();
        packageMap[doc.id] = data;

        const vendProductIds = data && data.vendProductIds;
        vendProductIds && vendProductIds.map(vendProductId=>{
          productIdPackageMap[vendProductId] = doc.id;
          return null;
        });
      });

      if(invoiceDoc.exists){
        const invoiceData = invoiceDoc.data();
        const paid = invoiceData.paid;
        const paymentId = invoiceData.paymentId;

        if(paid && paymentId && authorized){
          console.log(`Invoice already paid ${invoiceDoc.id}`);
          return Promise.resolve();
        }

        const userId = invoiceData.userId;
        var totalPrice = invoiceData.totalPrice;
        const vendProductId = invoiceData.vendProductId;
        var vendProductPackageId = productIdPackageMap[invoiceData.vendProductId];
        const vendProducts = invoiceData && invoiceData.vendProducts;

        var vendProdTotalPrice = 0;

        if(!vendProductId && vendProducts){
          // console.log("VPS", vendProduct);
          vendProducts.forEach(vendProduct=>{
            // console.log("VP", vendProduct);
            const vendProductId = vendProduct.vendProductId;
            if(!vendProductPackageId){
              vendProductPackageId = productIdPackageMap[vendProductId];
              vendProdTotalPrice+=vendProduct.totalPrice;
            }
          });
          totalPrice = vendProdTotalPrice;
        }

        const packageId = vendProductPackageId || invoiceData.packageId;
        const quantity = invoiceData.quantity ? invoiceData.quantity : 1;
        const packageData = packageId ? packageMap[packageId] : null;
        const renewalTerm = packageData && packageData.renewalTerm ? packageData.renewalTerm : 'month';
        // const type = vendProductPackageId ? 'membership' : invoiceData.type;
        const type = (vendProductPackageId || (vendProductId === freezeVendId)) ? 'membership' : invoiceData.type;
        const promoType = invoiceData.promoType? invoiceData.promoType:null;
        const detailName = invoiceData.className;
        const detailDate = invoiceData.classDate;
        const isAutoInvoice = invoiceData.isAutoInvoice? invoiceData.isAutoInvoice:null;
        const createdFromApp = invoiceData.createdFromApp? invoiceData.createdFromApp:null;
        const containFreeMonth = invoiceData.containFreeMonth? invoiceData.containFreeMonth:null;
        const freeMonthQty = invoiceData.freeMonthQty? invoiceData.freeMonthQty:null;
        const freeMonthPackageId = invoiceData.freeMonthPackageId? invoiceData.freeMonthPackageId:null;

        // const freeMonthQuantity = invoiceData.freeMonthQuantity||0;
        // for angpau2022
        const angpauRefEmail = invoiceData.angpauRefEmail? invoiceData.angpauRefEmail:null;

        //add payment
        const batch = admin.firestore().batch();
        const paymentRef = admin.firestore().collection('payments').doc();
        var paymentData = {
          createdAt : createdAt,
          totalPrice : totalPrice ? parseFloat(totalPrice).toFixed(2) : 0,
          type : type,
          userId : userId,
          source : 'adyen',
          status : authorized ? 'CLOSED' : 'FAILED',
          transactionId : change.after.id,
          quantity : quantity,
          invoiceId : invoiceDoc.id,
          isAutoCharge,
          // adyenPaymentMethod, 
          paymentType:adyenPaymentMethod,
          cardSummary:cardSummary? cardSummary:null, 
          cardExpiryDate:cardExpiryDate? cardExpiryDate:null,
          isAutoInvoice:isAutoInvoice?isAutoInvoice:null
        }
        
        // 31/3/2022
        // for free month payment (3M+1), (6M+2), (12M+4)
        const freePaymentRef = admin.firestore().collection('payments').doc();
        var freePaymentData = {
          createdAt : createdAt,
          totalPrice : 0,
          type : 'membership',
          userId : userId,
          source : 'adyen',
          status : authorized ? 'CLOSED' : 'FAILED',
          transactionId : change.after.id,
          quantity : quantity,
          invoiceId : invoiceDoc.id,
          isAutoCharge,
          // adyenPaymentMethod, 
          paymentType:adyenPaymentMethod,
          cardSummary:cardSummary? cardSummary:null, 
          cardExpiryDate:cardExpiryDate? cardExpiryDate:null,
          isAutoInvoice:isAutoInvoice?isAutoInvoice:null,
          isFree:true,
          renewalTerm:'month',
          packageId:freeMonthPackageId,
          quantity:freeMonthQty
        }

        if (vendProducts){
          paymentData.vendProducts = vendProducts;
        }
        if (promoType){
          paymentData.promoType = promoType;
          // paymentData.productName = invoiceData && invoiceData.vendProductName;
          paymentData.productName = 'PROMO';
        }
        if (createdFromApp){
          paymentData.createdFromApp = createdFromApp;
        }
        if (angpauRefEmail){
          paymentData.angpauRefEmail = angpauRefEmail;
        }
        if ((type === 'product') && (vendProductId === unlimitedOutdoorClassVendProductId)){
          paymentData.productName = invoiceData.vendProductName;
          paymentData.vendProductId = vendProductId;
        }
        else if (type === 'babelDance'){
          paymentData.productName = invoiceData.vendProductName;
          paymentData.vendProductId = vendProductId;
          paymentData.classRemark = invoiceData.classRemark? invoiceData.classRemark:"";
          paymentData.city = invoiceData.city;
          paymentData.ighandlename = invoiceData.ighandlename;
          paymentData.phone = invoiceData.phone;
          paymentData.selectedMemberOption = invoiceData.selectedMemberOption;
          paymentData.instructorName = invoiceData.instructorName;
          paymentData.classDate = invoiceData.classDate;
          paymentData.classTime = invoiceData.classTime;
          paymentData.classId = invoiceData.classId;
        }
        else if(type === 'product'){
          paymentData.productName = invoiceData.vendProductName;
          paymentData.packageId = packageId;
          paymentData.renewalTerm = renewalTerm;
        }
        else if (type === 'virtualTraining' || type === 'vClass'){
          paymentData.vendProductId = invoiceData.vendProductId;
          paymentData.productName = invoiceData.vendProductName;
          paymentData.selectedDay = invoiceData.selectedDay;
          paymentData.selectedAMPM = invoiceData.selectedAMPM;
          paymentData.trainerName = invoiceData.trainerName;
          paymentData.phoneNum = invoiceData && invoiceData.phoneNum;
          if (type === 'vClass'){
            paymentData.className = invoiceData.selectedClass;
          }
        }
        else if (type === 'virtualClass'){
          paymentData.vendProductId = invoiceData.vendProductId;
          paymentData.productName = invoiceData.vendProductName;
          paymentData.city = invoiceData.city;
          paymentData.ighandlename = invoiceData.ighandlename;
          paymentData.phone = invoiceData.phone;
          paymentData.selectedMemberOption = invoiceData.selectedMemberOption;
        }
        else if (type === 'onlinemywellness'){
          paymentData.vendProductId = invoiceData.vendProductId;
          paymentData.productName = invoiceData.vendProductName;
          paymentData.ighandlename = invoiceData.ighandleName || invoiceData.ighandlename;
          paymentData.phone = invoiceData.phone;
          paymentData.trainerName = invoiceData.trainerName;
          paymentData.coachName = invoiceData.coachName;
          paymentData.selectedDay = invoiceData.selectedDay;
          paymentData.selectedAMPM = invoiceData.selectedAMPM;
        }
        else if(type === 'personalTraining'){
          paymentData.vendProductId = invoiceData.vendProductId;
          // paymentData.appoinmentName = invoiceData.appoinmentName;
          // paymentData.appoinmentScheduleUrl = invoiceData.appoinmentScheduleUrl;
          // paymentData.appointmentType = invoiceData.appointmentType;
          // paymentData.calendarId = invoiceData.calendarId;
          // paymentData.selectedTime = invoiceData.selectedTime;
          paymentData.ptType = invoiceData.ptType;
          paymentData.credit = invoiceData.credit;
        }
        else if (type === 'membership' && vendProductId === freezeVendId){
          paymentData.freezeFor = invoiceData.freezeFor || createdAt;
          paymentData.source = 'freeze';
          paymentData.freezeSource = 'adyen';
        }
        // else if (type === 'membership' && (vendProductId === ))
        else if (type === 'membership'){
          paymentData.packageId = packageId;
          paymentData.renewalTerm = renewalTerm;
        }

        if(detailName){
          paymentData.detailName = detailName;
        }
        if(detailDate){
          paymentData.detailDate = detailDate;
        }
        // if(freeMonthQuantity){
        //   paymentData.freeMonthQuantity = freeMonthQuantity;
        // }
        console.log('Adding paymentData for transactionId and invoiceId', paymentData, change.after.id, invoiceId);
        batch.set(paymentRef, paymentData);

        // if (renewalTerm && (renewalTerm.includes('quarter')) || (renewalTerm.includes('biyear')) ||(renewalTerm.includes('year'))){
        //   console.log('reward the free month automatically...')
        //   batch.set(freePaymentRef, freePaymentData);
        // }
        if (containFreeMonth && freeMonthPackageId){
          console.log('reward the free month automatically...')
          batch.set(freePaymentRef, freePaymentData);
        }

        // update the user credit?
        // batch.update(admin.firestore().collection('users').doc(userId).get(), {credit:invoiceData.credit});

        //mark invoice as paid
        batch.update(invoiceDoc.ref, {paid:authorized, paymentId:paymentRef.id, paymentFailed:!authorized});
        // const userRef = admin.firestore().collection('users').doc(userId)

        console.log("Saving invoice and payment for transaction", invoiceId, paymentRef.id, change.after.id);

        const babelAtHomeSheetUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addVbabelwellnessPaymentToSheets`;
        const vClassSheetUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addVClassPaymentToSheets`;
        const vPTSheetUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addVTPaymentToSheets`;
        const vptClassSheetUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addVptPaymentToSheets`;
        const unlimitedClassUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addUnlimitedOutdoorPaymentToSheets`;
        const babelDanceClassUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addBabelDancePaymentToSheets`;
        const promoMembershipUrl = `https://us-central1-babelasia-37615.cloudfunctions.net/addPromoInvoicetospreadsheet`;

        return batch.commit().then((res)=>{
          console.log('batchResult: ', res);
          // return Promise.resolve();
          const cors = require("cors");
          const corsFunction = cors({ origin: true });
          const timestamp = admin.firestore.FieldValue.serverTimestamp();
          var request = require("request");
          if (type === 'onlinemywellness'){
            return request.get(babelAtHomeSheetUrl);
          }
          else if (type === 'virtualClass'){
            return request.get(vClassSheetUrl)
          }
          else if (type === 'virtualTraining'){
            return request.get(vPTSheetUrl)
          }
          else if (type === 'vClass'){
            return request.get(vptClassSheetUrl);
          }
          else if (type === 'babelDance'){
            return request.get(babelDanceClassUrl);
          }
          else if ((type === 'product') && (vendProductId === unlimitedOutdoorClassVendProductId)){
            return request.get(unlimitedClassUrl)
          }
          else if (promoType){
            return request.get(promoMembershipUrl);
          }
          else{
            // do nothing (not updating any sheets)
            return Promise.resolve();
          }
        });
      }else{
        console.log(`Issue with invoice: ${invoiceId} ${change.after.id}`);
        return Promise.reject(new Error(`Issue with invoice: ${invoiceId} ${change.after.id}`));
      }
    });
  });
